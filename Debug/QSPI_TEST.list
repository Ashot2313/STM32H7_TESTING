
QSPI_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdf4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800c08c  0800c08c  0000d08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c0c4  0800c0c4  0000d0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c0cc  0800c0cc  0000d0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c0d0  0800c0d0  0000d0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000104  24000000  0800c0d4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000760  24000104  0800c1d8  0000e104  2**2
                  ALLOC
  8 ._user_heap_stack 0000c004  24000864  0800c1d8  0000e864  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e104  2**0
                  CONTENTS, READONLY
 10 .debug_info   000213d7  00000000  00000000  0000e132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ce2  00000000  00000000  0002f509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018e8  00000000  00000000  000331f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001369  00000000  00000000  00034ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039d4c  00000000  00000000  00035e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021a00  00000000  00000000  0006fb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a9a9  00000000  00000000  0009158d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fbf36  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006b64  00000000  00000000  001fbf7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  00202ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000104 	.word	0x24000104
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c074 	.word	0x0800c074

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000108 	.word	0x24000108
 80002d4:	0800c074 	.word	0x0800c074

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b988 	b.w	8000610 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	468e      	mov	lr, r1
 8000320:	4604      	mov	r4, r0
 8000322:	4688      	mov	r8, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4617      	mov	r7, r2
 800032c:	d962      	bls.n	80003f4 <__udivmoddi4+0xdc>
 800032e:	fab2 f682 	clz	r6, r2
 8000332:	b14e      	cbz	r6, 8000348 <__udivmoddi4+0x30>
 8000334:	f1c6 0320 	rsb	r3, r6, #32
 8000338:	fa01 f806 	lsl.w	r8, r1, r6
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	40b7      	lsls	r7, r6
 8000342:	ea43 0808 	orr.w	r8, r3, r8
 8000346:	40b4      	lsls	r4, r6
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f fc87 	uxth.w	ip, r7
 8000350:	fbb8 f1fe 	udiv	r1, r8, lr
 8000354:	0c23      	lsrs	r3, r4, #16
 8000356:	fb0e 8811 	mls	r8, lr, r1, r8
 800035a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035e:	fb01 f20c 	mul.w	r2, r1, ip
 8000362:	429a      	cmp	r2, r3
 8000364:	d909      	bls.n	800037a <__udivmoddi4+0x62>
 8000366:	18fb      	adds	r3, r7, r3
 8000368:	f101 30ff 	add.w	r0, r1, #4294967295
 800036c:	f080 80ea 	bcs.w	8000544 <__udivmoddi4+0x22c>
 8000370:	429a      	cmp	r2, r3
 8000372:	f240 80e7 	bls.w	8000544 <__udivmoddi4+0x22c>
 8000376:	3902      	subs	r1, #2
 8000378:	443b      	add	r3, r7
 800037a:	1a9a      	subs	r2, r3, r2
 800037c:	b2a3      	uxth	r3, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800038a:	fb00 fc0c 	mul.w	ip, r0, ip
 800038e:	459c      	cmp	ip, r3
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x8e>
 8000392:	18fb      	adds	r3, r7, r3
 8000394:	f100 32ff 	add.w	r2, r0, #4294967295
 8000398:	f080 80d6 	bcs.w	8000548 <__udivmoddi4+0x230>
 800039c:	459c      	cmp	ip, r3
 800039e:	f240 80d3 	bls.w	8000548 <__udivmoddi4+0x230>
 80003a2:	443b      	add	r3, r7
 80003a4:	3802      	subs	r0, #2
 80003a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003aa:	eba3 030c 	sub.w	r3, r3, ip
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11d      	cbz	r5, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40f3      	lsrs	r3, r6
 80003b4:	2200      	movs	r2, #0
 80003b6:	e9c5 3200 	strd	r3, r2, [r5]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d905      	bls.n	80003ce <__udivmoddi4+0xb6>
 80003c2:	b10d      	cbz	r5, 80003c8 <__udivmoddi4+0xb0>
 80003c4:	e9c5 0100 	strd	r0, r1, [r5]
 80003c8:	2100      	movs	r1, #0
 80003ca:	4608      	mov	r0, r1
 80003cc:	e7f5      	b.n	80003ba <__udivmoddi4+0xa2>
 80003ce:	fab3 f183 	clz	r1, r3
 80003d2:	2900      	cmp	r1, #0
 80003d4:	d146      	bne.n	8000464 <__udivmoddi4+0x14c>
 80003d6:	4573      	cmp	r3, lr
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xc8>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 8105 	bhi.w	80005ea <__udivmoddi4+0x2d2>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4690      	mov	r8, r2
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0e5      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003ee:	e9c5 4800 	strd	r4, r8, [r5]
 80003f2:	e7e2      	b.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f000 8090 	beq.w	800051a <__udivmoddi4+0x202>
 80003fa:	fab2 f682 	clz	r6, r2
 80003fe:	2e00      	cmp	r6, #0
 8000400:	f040 80a4 	bne.w	800054c <__udivmoddi4+0x234>
 8000404:	1a8a      	subs	r2, r1, r2
 8000406:	0c03      	lsrs	r3, r0, #16
 8000408:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040c:	b280      	uxth	r0, r0
 800040e:	b2bc      	uxth	r4, r7
 8000410:	2101      	movs	r1, #1
 8000412:	fbb2 fcfe 	udiv	ip, r2, lr
 8000416:	fb0e 221c 	mls	r2, lr, ip, r2
 800041a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800041e:	fb04 f20c 	mul.w	r2, r4, ip
 8000422:	429a      	cmp	r2, r3
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x11e>
 8000426:	18fb      	adds	r3, r7, r3
 8000428:	f10c 38ff 	add.w	r8, ip, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x11c>
 800042e:	429a      	cmp	r2, r3
 8000430:	f200 80e0 	bhi.w	80005f4 <__udivmoddi4+0x2dc>
 8000434:	46c4      	mov	ip, r8
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	fbb3 f2fe 	udiv	r2, r3, lr
 800043c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000440:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000444:	fb02 f404 	mul.w	r4, r2, r4
 8000448:	429c      	cmp	r4, r3
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x144>
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x142>
 8000454:	429c      	cmp	r4, r3
 8000456:	f200 80ca 	bhi.w	80005ee <__udivmoddi4+0x2d6>
 800045a:	4602      	mov	r2, r0
 800045c:	1b1b      	subs	r3, r3, r4
 800045e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0x98>
 8000464:	f1c1 0620 	rsb	r6, r1, #32
 8000468:	408b      	lsls	r3, r1
 800046a:	fa22 f706 	lsr.w	r7, r2, r6
 800046e:	431f      	orrs	r7, r3
 8000470:	fa0e f401 	lsl.w	r4, lr, r1
 8000474:	fa20 f306 	lsr.w	r3, r0, r6
 8000478:	fa2e fe06 	lsr.w	lr, lr, r6
 800047c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000480:	4323      	orrs	r3, r4
 8000482:	fa00 f801 	lsl.w	r8, r0, r1
 8000486:	fa1f fc87 	uxth.w	ip, r7
 800048a:	fbbe f0f9 	udiv	r0, lr, r9
 800048e:	0c1c      	lsrs	r4, r3, #16
 8000490:	fb09 ee10 	mls	lr, r9, r0, lr
 8000494:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000498:	fb00 fe0c 	mul.w	lr, r0, ip
 800049c:	45a6      	cmp	lr, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x1a0>
 80004a4:	193c      	adds	r4, r7, r4
 80004a6:	f100 3aff 	add.w	sl, r0, #4294967295
 80004aa:	f080 809c 	bcs.w	80005e6 <__udivmoddi4+0x2ce>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f240 8099 	bls.w	80005e6 <__udivmoddi4+0x2ce>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	eba4 040e 	sub.w	r4, r4, lr
 80004bc:	fa1f fe83 	uxth.w	lr, r3
 80004c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c4:	fb09 4413 	mls	r4, r9, r3, r4
 80004c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d0:	45a4      	cmp	ip, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1ce>
 80004d4:	193c      	adds	r4, r7, r4
 80004d6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004da:	f080 8082 	bcs.w	80005e2 <__udivmoddi4+0x2ca>
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d97f      	bls.n	80005e2 <__udivmoddi4+0x2ca>
 80004e2:	3b02      	subs	r3, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80004f2:	4564      	cmp	r4, ip
 80004f4:	4673      	mov	r3, lr
 80004f6:	46e1      	mov	r9, ip
 80004f8:	d362      	bcc.n	80005c0 <__udivmoddi4+0x2a8>
 80004fa:	d05f      	beq.n	80005bc <__udivmoddi4+0x2a4>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x1fe>
 80004fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000502:	eb64 0409 	sbc.w	r4, r4, r9
 8000506:	fa04 f606 	lsl.w	r6, r4, r6
 800050a:	fa22 f301 	lsr.w	r3, r2, r1
 800050e:	431e      	orrs	r6, r3
 8000510:	40cc      	lsrs	r4, r1
 8000512:	e9c5 6400 	strd	r6, r4, [r5]
 8000516:	2100      	movs	r1, #0
 8000518:	e74f      	b.n	80003ba <__udivmoddi4+0xa2>
 800051a:	fbb1 fcf2 	udiv	ip, r1, r2
 800051e:	0c01      	lsrs	r1, r0, #16
 8000520:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000524:	b280      	uxth	r0, r0
 8000526:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800052a:	463b      	mov	r3, r7
 800052c:	4638      	mov	r0, r7
 800052e:	463c      	mov	r4, r7
 8000530:	46b8      	mov	r8, r7
 8000532:	46be      	mov	lr, r7
 8000534:	2620      	movs	r6, #32
 8000536:	fbb1 f1f7 	udiv	r1, r1, r7
 800053a:	eba2 0208 	sub.w	r2, r2, r8
 800053e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000542:	e766      	b.n	8000412 <__udivmoddi4+0xfa>
 8000544:	4601      	mov	r1, r0
 8000546:	e718      	b.n	800037a <__udivmoddi4+0x62>
 8000548:	4610      	mov	r0, r2
 800054a:	e72c      	b.n	80003a6 <__udivmoddi4+0x8e>
 800054c:	f1c6 0220 	rsb	r2, r6, #32
 8000550:	fa2e f302 	lsr.w	r3, lr, r2
 8000554:	40b7      	lsls	r7, r6
 8000556:	40b1      	lsls	r1, r6
 8000558:	fa20 f202 	lsr.w	r2, r0, r2
 800055c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000560:	430a      	orrs	r2, r1
 8000562:	fbb3 f8fe 	udiv	r8, r3, lr
 8000566:	b2bc      	uxth	r4, r7
 8000568:	fb0e 3318 	mls	r3, lr, r8, r3
 800056c:	0c11      	lsrs	r1, r2, #16
 800056e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000572:	fb08 f904 	mul.w	r9, r8, r4
 8000576:	40b0      	lsls	r0, r6
 8000578:	4589      	cmp	r9, r1
 800057a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800057e:	b280      	uxth	r0, r0
 8000580:	d93e      	bls.n	8000600 <__udivmoddi4+0x2e8>
 8000582:	1879      	adds	r1, r7, r1
 8000584:	f108 3cff 	add.w	ip, r8, #4294967295
 8000588:	d201      	bcs.n	800058e <__udivmoddi4+0x276>
 800058a:	4589      	cmp	r9, r1
 800058c:	d81f      	bhi.n	80005ce <__udivmoddi4+0x2b6>
 800058e:	eba1 0109 	sub.w	r1, r1, r9
 8000592:	fbb1 f9fe 	udiv	r9, r1, lr
 8000596:	fb09 f804 	mul.w	r8, r9, r4
 800059a:	fb0e 1119 	mls	r1, lr, r9, r1
 800059e:	b292      	uxth	r2, r2
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	4542      	cmp	r2, r8
 80005a6:	d229      	bcs.n	80005fc <__udivmoddi4+0x2e4>
 80005a8:	18ba      	adds	r2, r7, r2
 80005aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80005ae:	d2c4      	bcs.n	800053a <__udivmoddi4+0x222>
 80005b0:	4542      	cmp	r2, r8
 80005b2:	d2c2      	bcs.n	800053a <__udivmoddi4+0x222>
 80005b4:	f1a9 0102 	sub.w	r1, r9, #2
 80005b8:	443a      	add	r2, r7
 80005ba:	e7be      	b.n	800053a <__udivmoddi4+0x222>
 80005bc:	45f0      	cmp	r8, lr
 80005be:	d29d      	bcs.n	80004fc <__udivmoddi4+0x1e4>
 80005c0:	ebbe 0302 	subs.w	r3, lr, r2
 80005c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c8:	3801      	subs	r0, #1
 80005ca:	46e1      	mov	r9, ip
 80005cc:	e796      	b.n	80004fc <__udivmoddi4+0x1e4>
 80005ce:	eba7 0909 	sub.w	r9, r7, r9
 80005d2:	4449      	add	r1, r9
 80005d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005dc:	fb09 f804 	mul.w	r8, r9, r4
 80005e0:	e7db      	b.n	800059a <__udivmoddi4+0x282>
 80005e2:	4673      	mov	r3, lr
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1ce>
 80005e6:	4650      	mov	r0, sl
 80005e8:	e766      	b.n	80004b8 <__udivmoddi4+0x1a0>
 80005ea:	4608      	mov	r0, r1
 80005ec:	e6fd      	b.n	80003ea <__udivmoddi4+0xd2>
 80005ee:	443b      	add	r3, r7
 80005f0:	3a02      	subs	r2, #2
 80005f2:	e733      	b.n	800045c <__udivmoddi4+0x144>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	443b      	add	r3, r7
 80005fa:	e71c      	b.n	8000436 <__udivmoddi4+0x11e>
 80005fc:	4649      	mov	r1, r9
 80005fe:	e79c      	b.n	800053a <__udivmoddi4+0x222>
 8000600:	eba1 0109 	sub.w	r1, r1, r9
 8000604:	46c4      	mov	ip, r8
 8000606:	fbb1 f9fe 	udiv	r9, r1, lr
 800060a:	fb09 f804 	mul.w	r8, r9, r4
 800060e:	e7c4      	b.n	800059a <__udivmoddi4+0x282>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800061a:	f000 fc7d 	bl	8000f18 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 ffa1 	bl	8001564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f833 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f959 	bl	80008dc <MX_GPIO_Init>
  MX_QUADSPI_Init();
 800062a:	f000 f8a9 	bl	8000780 <MX_QUADSPI_Init>
  MX_TIM7_Init();
 800062e:	f000 f8d3 	bl	80007d8 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8000632:	f000 f907 	bl	8000844 <MX_USART1_UART_Init>
 // MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  init_qspi_flash();
 8000636:	f000 fb25 	bl	8000c84 <init_qspi_flash>
  int32_t err=0;
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
  err= erase_sector_qspi(0);
 800063e:	2000      	movs	r0, #0
 8000640:	f000 fb64 	bl	8000d0c <erase_sector_qspi>
 8000644:	6078      	str	r0, [r7, #4]
  err=  cmd_end_rdy_qspi(100);
 8000646:	2064      	movs	r0, #100	@ 0x64
 8000648:	f000 fb8a 	bl	8000d60 <cmd_end_rdy_qspi>
 800064c:	6078      	str	r0, [r7, #4]
  err=  write_buf_qspi(aTxBuffer,strlen(aTxBuffer), 0, 100);
 800064e:	480d      	ldr	r0, [pc, #52]	@ (8000684 <main+0x70>)
 8000650:	f7ff fe42 	bl	80002d8 <strlen>
 8000654:	4601      	mov	r1, r0
 8000656:	2364      	movs	r3, #100	@ 0x64
 8000658:	2200      	movs	r2, #0
 800065a:	480a      	ldr	r0, [pc, #40]	@ (8000684 <main+0x70>)
 800065c:	f000 fbae 	bl	8000dbc <write_buf_qspi>
 8000660:	6078      	str	r0, [r7, #4]
  err=  programm_end_rdy_qspi( 100);
 8000662:	2064      	movs	r0, #100	@ 0x64
 8000664:	f000 fbec 	bl	8000e40 <programm_end_rdy_qspi>
 8000668:	6078      	str	r0, [r7, #4]
  err=  read_buf_qspi(aRxBuffer,strlen(aTxBuffer), 0,100);
 800066a:	4806      	ldr	r0, [pc, #24]	@ (8000684 <main+0x70>)
 800066c:	f7ff fe34 	bl	80002d8 <strlen>
 8000670:	4601      	mov	r1, r0
 8000672:	2364      	movs	r3, #100	@ 0x64
 8000674:	2200      	movs	r2, #0
 8000676:	4804      	ldr	r0, [pc, #16]	@ (8000688 <main+0x74>)
 8000678:	f000 fc10 	bl	8000e9c <read_buf_qspi>
 800067c:	6078      	str	r0, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067e:	bf00      	nop
 8000680:	e7fd      	b.n	800067e <main+0x6a>
 8000682:	bf00      	nop
 8000684:	24000000 	.word	0x24000000
 8000688:	24000288 	.word	0x24000288

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09c      	sub	sp, #112	@ 0x70
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000696:	224c      	movs	r2, #76	@ 0x4c
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f00b fcbe 	bl	800c01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2220      	movs	r2, #32
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f00b fcb8 	bl	800c01c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ac:	2002      	movs	r0, #2
 80006ae:	f003 fab5 	bl	8003c1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b30      	ldr	r3, [pc, #192]	@ (8000778 <SystemClock_Config+0xec>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000778 <SystemClock_Config+0xec>)
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000778 <SystemClock_Config+0xec>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <SystemClock_Config+0xf0>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a2a      	ldr	r2, [pc, #168]	@ (800077c <SystemClock_Config+0xf0>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b28      	ldr	r3, [pc, #160]	@ (800077c <SystemClock_Config+0xf0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006e4:	bf00      	nop
 80006e6:	4b25      	ldr	r3, [pc, #148]	@ (800077c <SystemClock_Config+0xf0>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006f2:	d1f8      	bne.n	80006e6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	2302      	movs	r3, #2
 8000704:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000706:	2305      	movs	r3, #5
 8000708:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800070a:	23a0      	movs	r3, #160	@ 0xa0
 800070c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800071a:	2308      	movs	r3, #8
 800071c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800071e:	2300      	movs	r3, #0
 8000720:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072a:	4618      	mov	r0, r3
 800072c:	f004 faec 	bl	8004d08 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000736:	f000 fc1b 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	233f      	movs	r3, #63	@ 0x3f
 800073c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2303      	movs	r3, #3
 8000740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000746:	2308      	movs	r3, #8
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800074a:	2340      	movs	r3, #64	@ 0x40
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800074e:	2340      	movs	r3, #64	@ 0x40
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000758:	2340      	movs	r3, #64	@ 0x40
 800075a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2102      	movs	r1, #2
 8000760:	4618      	mov	r0, r3
 8000762:	f004 ff2b 	bl	80055bc <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800076c:	f000 fc00 	bl	8000f70 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3770      	adds	r7, #112	@ 0x70
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	58000400 	.word	0x58000400
 800077c:	58024800 	.word	0x58024800

08000780 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_QUADSPI_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <MX_QUADSPI_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_QUADSPI_Init+0x50>)
 800078c:	22ff      	movs	r2, #255	@ 0xff
 800078e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_QUADSPI_Init+0x50>)
 8000792:	2201      	movs	r2, #1
 8000794:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_QUADSPI_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_QUADSPI_Init+0x50>)
 800079e:	2201      	movs	r2, #1
 80007a0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_QUADSPI_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_QUADSPI_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_QUADSPI_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_QUADSPI_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_QUADSPI_Init+0x50>)
 80007bc:	f003 fa68 	bl	8003c90 <HAL_QSPI_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80007c6:	f000 fbd3 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	24000120 	.word	0x24000120
 80007d4:	52005000 	.word	0x52005000

080007d8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_TIM7_Init+0x64>)
 80007ea:	4a15      	ldr	r2, [pc, #84]	@ (8000840 <MX_TIM7_Init+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 199;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_TIM7_Init+0x64>)
 80007f0:	22c7      	movs	r2, #199	@ 0xc7
 80007f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_TIM7_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_TIM7_Init+0x64>)
 80007fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000800:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_TIM7_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000808:	480c      	ldr	r0, [pc, #48]	@ (800083c <MX_TIM7_Init+0x64>)
 800080a:	f007 f88f 	bl	800792c <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000814:	f000 fbac 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_TIM7_Init+0x64>)
 8000826:	f007 fab1 	bl	8007d8c <HAL_TIMEx_MasterConfigSynchronization>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000830:	f000 fb9e 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2400016c 	.word	0x2400016c
 8000840:	40001400 	.word	0x40001400

08000844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000848:	4b22      	ldr	r3, [pc, #136]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 800084a:	4a23      	ldr	r2, [pc, #140]	@ (80008d8 <MX_USART1_UART_Init+0x94>)
 800084c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800084e:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b1f      	ldr	r3, [pc, #124]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000886:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800088c:	4811      	ldr	r0, [pc, #68]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 800088e:	f007 fb29 	bl	8007ee4 <HAL_UART_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000898:	f000 fb6a 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 80008a0:	f008 ff82 	bl	80097a8 <HAL_UARTEx_SetTxFifoThreshold>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008aa:	f000 fb61 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 80008b2:	f008 ffb7 	bl	8009824 <HAL_UARTEx_SetRxFifoThreshold>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008bc:	f000 fb58 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <MX_USART1_UART_Init+0x90>)
 80008c2:	f008 ff38 	bl	8009736 <HAL_UARTEx_DisableFifoMode>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008cc:	f000 fb50 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	240001b8 	.word	0x240001b8
 80008d8:	40011000 	.word	0x40011000

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f2:	4b3f      	ldr	r3, [pc, #252]	@ (80009f0 <MX_GPIO_Init+0x114>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	4a3d      	ldr	r2, [pc, #244]	@ (80009f0 <MX_GPIO_Init+0x114>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000902:	4b3b      	ldr	r3, [pc, #236]	@ (80009f0 <MX_GPIO_Init+0x114>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000908:	f003 0310 	and.w	r3, r3, #16
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	4b37      	ldr	r3, [pc, #220]	@ (80009f0 <MX_GPIO_Init+0x114>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	4a36      	ldr	r2, [pc, #216]	@ (80009f0 <MX_GPIO_Init+0x114>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000920:	4b33      	ldr	r3, [pc, #204]	@ (80009f0 <MX_GPIO_Init+0x114>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	4b30      	ldr	r3, [pc, #192]	@ (80009f0 <MX_GPIO_Init+0x114>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000934:	4a2e      	ldr	r2, [pc, #184]	@ (80009f0 <MX_GPIO_Init+0x114>)
 8000936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800093e:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <MX_GPIO_Init+0x114>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094c:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <MX_GPIO_Init+0x114>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	4a27      	ldr	r2, [pc, #156]	@ (80009f0 <MX_GPIO_Init+0x114>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095c:	4b24      	ldr	r3, [pc, #144]	@ (80009f0 <MX_GPIO_Init+0x114>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <MX_GPIO_Init+0x114>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	4a1f      	ldr	r2, [pc, #124]	@ (80009f0 <MX_GPIO_Init+0x114>)
 8000972:	f043 0308 	orr.w	r3, r3, #8
 8000976:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097a:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <MX_GPIO_Init+0x114>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_GPIO_Init+0x114>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098e:	4a18      	ldr	r2, [pc, #96]	@ (80009f0 <MX_GPIO_Init+0x114>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000998:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <MX_GPIO_Init+0x114>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2108      	movs	r1, #8
 80009aa:	4812      	ldr	r0, [pc, #72]	@ (80009f4 <MX_GPIO_Init+0x118>)
 80009ac:	f002 f874 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80009b0:	2308      	movs	r3, #8
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <MX_GPIO_Init+0x118>)
 80009c8:	f001 fdac 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_BUTTON_Pin */
  GPIO_InitStruct.Pin = EXT_BUTTON_Pin;
 80009cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009d6:	2302      	movs	r3, #2
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EXT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_GPIO_Init+0x11c>)
 80009e2:	f001 fd9f 	bl	8002524 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e6:	bf00      	nop
 80009e8:	3730      	adds	r7, #48	@ 0x30
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	58024400 	.word	0x58024400
 80009f4:	58021000 	.word	0x58021000
 80009f8:	58020800 	.word	0x58020800

080009fc <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callbacks.
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  CmdCplt++;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_QSPI_CmdCpltCallback+0x24>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <HAL_QSPI_CmdCpltCallback+0x24>)
 8000a10:	701a      	strb	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	24000284 	.word	0x24000284

08000a24 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  RxCplt++;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_QSPI_RxCpltCallback+0x24>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	3301      	adds	r3, #1
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <HAL_QSPI_RxCpltCallback+0x24>)
 8000a38:	701a      	strb	r2, [r3, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	24000285 	.word	0x24000285

08000a4c <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  TxCplt++;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_QSPI_TxCpltCallback+0x24>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <HAL_QSPI_TxCpltCallback+0x24>)
 8000a60:	701a      	strb	r2, [r3, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	24000286 	.word	0x24000286

08000a74 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callbacks
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  StatusMatch++;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_QSPI_StatusMatchCallback+0x24>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	3301      	adds	r3, #1
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <HAL_QSPI_StatusMatchCallback+0x24>)
 8000a88:	701a      	strb	r2, [r3, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	24000287 	.word	0x24000287

08000a9c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static void QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b096      	sub	sp, #88	@ 0x58
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations ------------------------------------------ */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 8000aaa:	2306      	movs	r3, #6
 8000aac:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	647b      	str	r3, [r7, #68]	@ 0x44
  sCommand.DummyCycles       = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	657b      	str	r3, [r7, #84]	@ 0x54

  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000aca:	f107 0120 	add.w	r1, r7, #32
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 fb29 	bl	800412c <HAL_QSPI_Command>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <QSPI_WriteEnable+0x48>
  {
    Error_Handler();
 8000ae0:	f000 fa46 	bl	8000f70 <Error_Handler>
  }

  /* Configure automatic polling mode to wait for write enabling ---- */
  sConfig.Match           = 0x02;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = 0x02;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8000af4:	2310      	movs	r3, #16
 8000af6:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000af8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000afc:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8000afe:	2305      	movs	r3, #5
 8000b00:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8000b02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b06:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b08:	f107 0208 	add.w	r2, r7, #8
 8000b0c:	f107 0120 	add.w	r1, r7, #32
 8000b10:	1d38      	adds	r0, r7, #4
 8000b12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b16:	f003 fdd0 	bl	80046ba <HAL_QSPI_AutoPolling>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <QSPI_WriteEnable+0x88>
  {
    Error_Handler();
 8000b20:	f000 fa26 	bl	8000f70 <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3758      	adds	r7, #88	@ 0x58
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <QSPI_AutoPollingMemReady>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static void QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b096      	sub	sp, #88	@ 0x58
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready ------ */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000b34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b38:	63bb      	str	r3, [r7, #56]	@ 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 8000b3a:	2305      	movs	r3, #5
 8000b3c:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000b46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  sCommand.DummyCycles       = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b54:	2300      	movs	r3, #0
 8000b56:	653b      	str	r3, [r7, #80]	@ 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	657b      	str	r3, [r7, #84]	@ 0x54

  sConfig.Match           = 0x00;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = 0x01;
 8000b60:	2301      	movs	r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000b70:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b74:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling_IT(&hqspi, &sCommand, &sConfig) != HAL_OK)
 8000b76:	f107 0208 	add.w	r2, r7, #8
 8000b7a:	f107 0120 	add.w	r1, r7, #32
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 fe11 	bl	80047a8 <HAL_QSPI_AutoPolling_IT>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <QSPI_AutoPollingMemReady+0x64>
  {
    Error_Handler();
 8000b8c:	f000 f9f0 	bl	8000f70 <Error_Handler>
  }
}
 8000b90:	bf00      	nop
 8000b92:	3758      	adds	r7, #88	@ 0x58
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static void QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b094      	sub	sp, #80	@ 0x50
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read Volatile Configuration register --------------------------- */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000ba0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 8000ba6:	2385      	movs	r3, #133	@ 0x85
 8000ba8:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 8000bb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  sCommand.DummyCycles       = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  sCommand.NbData            = 1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bcc:	f107 010c 	add.w	r1, r7, #12
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 faa8 	bl	800412c <HAL_QSPI_Command>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <QSPI_DummyCyclesCfg+0x4e>
  {
    Error_Handler();
 8000be2:	f000 f9c5 	bl	8000f70 <Error_Handler>
  }

  if (HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000be6:	f107 010b 	add.w	r1, r7, #11
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 fbf1 	bl	80043d8 <HAL_QSPI_Receive>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <QSPI_DummyCyclesCfg+0x68>
  {
    Error_Handler();
 8000bfc:	f000 f9b8 	bl	8000f70 <Error_Handler>
  }

  /* Enable write operations ---------------------------------------- */
  QSPI_WriteEnable(&hqspi);
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff4a 	bl	8000a9c <QSPI_WriteEnable>

  /* Write Volatile Configuration register (with new dummy cycles) -- */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8000c08:	2381      	movs	r3, #129	@ 0x81
 8000c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0, (DUMMY_CLOCK_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 8000c0c:	7afb      	ldrb	r3, [r7, #11]
 8000c0e:	b25b      	sxtb	r3, r3
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	b25a      	sxtb	r2, r3
 8000c16:	23f0      	movs	r3, #240	@ 0xf0
 8000c18:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c1c:	fa93 f3a3 	rbit	r3, r3
 8000c20:	647b      	str	r3, [r7, #68]	@ 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d101      	bne.n	8000c30 <QSPI_DummyCyclesCfg+0x98>
  {
    return 32U;
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	e003      	b.n	8000c38 <QSPI_DummyCyclesCfg+0xa0>
  }
  return __builtin_clz(value);
 8000c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c32:	fab3 f383 	clz	r3, r3
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	408b      	lsls	r3, r1
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	72fb      	strb	r3, [r7, #11]

  if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c48:	f107 010c 	add.w	r1, r7, #12
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 fa6a 	bl	800412c <HAL_QSPI_Command>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <QSPI_DummyCyclesCfg+0xca>
  {
    Error_Handler();
 8000c5e:	f000 f987 	bl	8000f70 <Error_Handler>
  }

  if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c62:	f107 010b 	add.w	r1, r7, #11
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fb21 	bl	80042b4 <HAL_QSPI_Transmit>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <QSPI_DummyCyclesCfg+0xe4>
  {
    Error_Handler();
 8000c78:	f000 f97a 	bl	8000f70 <Error_Handler>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3750      	adds	r7, #80	@ 0x50
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <init_qspi_flash>:



void init_qspi_flash(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	hqspi.Instance = QUADSPI;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <init_qspi_flash+0x7c>)
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000d04 <init_qspi_flash+0x80>)
 8000c8c:	601a      	str	r2, [r3, #0]
	  HAL_QSPI_DeInit(&hqspi);
 8000c8e:	481c      	ldr	r0, [pc, #112]	@ (8000d00 <init_qspi_flash+0x7c>)
 8000c90:	f003 f872 	bl	8003d78 <HAL_QSPI_DeInit>

	  hqspi.Init.ClockPrescaler     = 255;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <init_qspi_flash+0x7c>)
 8000c96:	22ff      	movs	r2, #255	@ 0xff
 8000c98:	605a      	str	r2, [r3, #4]
	  hqspi.Init.FifoThreshold      = 4;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <init_qspi_flash+0x7c>)
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	609a      	str	r2, [r3, #8]
	  hqspi.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <init_qspi_flash+0x7c>)
 8000ca2:	2210      	movs	r2, #16
 8000ca4:	60da      	str	r2, [r3, #12]
	  hqspi.Init.FlashSize          = QSPI_FLASH_SIZE;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <init_qspi_flash+0x7c>)
 8000ca8:	2216      	movs	r2, #22
 8000caa:	611a      	str	r2, [r3, #16]
	  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <init_qspi_flash+0x7c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
	  hqspi.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <init_qspi_flash+0x7c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
	  hqspi.Init.FlashID            = QSPI_FLASH_ID_1;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <init_qspi_flash+0x7c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
	  hqspi.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <init_qspi_flash+0x7c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]

	  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cc4:	480e      	ldr	r0, [pc, #56]	@ (8000d00 <init_qspi_flash+0x7c>)
 8000cc6:	f002 ffe3 	bl	8003c90 <HAL_QSPI_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <init_qspi_flash+0x50>
	  {
	    Error_Handler();
 8000cd0:	f000 f94e 	bl	8000f70 <Error_Handler>
	  }

	  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <init_qspi_flash+0x84>)
 8000cd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cda:	619a      	str	r2, [r3, #24]
	  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <init_qspi_flash+0x84>)
 8000cde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ce2:	60da      	str	r2, [r3, #12]
	  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <init_qspi_flash+0x84>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
	  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <init_qspi_flash+0x84>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	62da      	str	r2, [r3, #44]	@ 0x2c
	  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <init_qspi_flash+0x84>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	631a      	str	r2, [r3, #48]	@ 0x30
	  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000cf6:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <init_qspi_flash+0x84>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	24000120 	.word	0x24000120
 8000d04:	52005000 	.word	0x52005000
 8000d08:	2400024c 	.word	0x2400024c

08000d0c <erase_sector_qspi>:


int32_t erase_sector_qspi(uint32_t start_addr){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    /* Enable write operations ------------------------------------------- */
    QSPI_WriteEnable(&hqspi);
 8000d14:	4810      	ldr	r0, [pc, #64]	@ (8000d58 <erase_sector_qspi+0x4c>)
 8000d16:	f7ff fec1 	bl	8000a9c <QSPI_WriteEnable>

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.Instruction = SECTOR_ERASE_CMD;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <erase_sector_qspi+0x50>)
 8000d1c:	22d8      	movs	r2, #216	@ 0xd8
 8000d1e:	601a      	str	r2, [r3, #0]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <erase_sector_qspi+0x50>)
 8000d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d26:	61da      	str	r2, [r3, #28]
    sCommand.Address     = start_addr;
 8000d28:	4a0c      	ldr	r2, [pc, #48]	@ (8000d5c <erase_sector_qspi+0x50>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6053      	str	r3, [r2, #4]
    sCommand.DataMode    = QSPI_DATA_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <erase_sector_qspi+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	625a      	str	r2, [r3, #36]	@ 0x24
    sCommand.DummyCycles = 0;
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <erase_sector_qspi+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]

    if (HAL_QSPI_Command_IT(&hqspi, &sCommand) != HAL_OK)
 8000d3a:	4908      	ldr	r1, [pc, #32]	@ (8000d5c <erase_sector_qspi+0x50>)
 8000d3c:	4806      	ldr	r0, [pc, #24]	@ (8000d58 <erase_sector_qspi+0x4c>)
 8000d3e:	f003 fa53 	bl	80041e8 <HAL_QSPI_Command_IT>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <erase_sector_qspi+0x40>
    {
      Error_Handler();
 8000d48:	f000 f912 	bl	8000f70 <Error_Handler>
    }

}
 8000d4c:	bf00      	nop
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	24000120 	.word	0x24000120
 8000d5c:	2400024c 	.word	0x2400024c

08000d60 <cmd_end_rdy_qspi>:



int32_t cmd_end_rdy_qspi(uint32_t timeout)
{while(timeout>0)
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	e014      	b.n	8000d94 <cmd_end_rdy_qspi+0x34>
{
	if(CmdCplt != 0)
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <cmd_end_rdy_qspi+0x50>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d009      	beq.n	8000d88 <cmd_end_rdy_qspi+0x28>
	        {
	          CmdCplt = 0;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <cmd_end_rdy_qspi+0x50>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
	          StatusMatch = 0;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <cmd_end_rdy_qspi+0x54>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]

	          /* Configure automatic polling mode to wait for end of erase ------- */
	          QSPI_AutoPollingMemReady(&hqspi);
 8000d80:	480d      	ldr	r0, [pc, #52]	@ (8000db8 <cmd_end_rdy_qspi+0x58>)
 8000d82:	f7ff fed3 	bl	8000b2c <QSPI_AutoPollingMemReady>

break;
 8000d86:	e008      	b.n	8000d9a <cmd_end_rdy_qspi+0x3a>
	        }
	HAL_Delay(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 fc7d 	bl	8001688 <HAL_Delay>
	timeout--;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
{while(timeout>0)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1e7      	bne.n	8000d6a <cmd_end_rdy_qspi+0xa>

}
if(timeout==0)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <cmd_end_rdy_qspi+0x46>
{return -1;}
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295
 8000da4:	e000      	b.n	8000da8 <cmd_end_rdy_qspi+0x48>
else {return 0;}
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	24000284 	.word	0x24000284
 8000db4:	24000287 	.word	0x24000287
 8000db8:	24000120 	.word	0x24000120

08000dbc <write_buf_qspi>:

int32_t write_buf_qspi(uint8_t *buf,uint32_t buf_size, uint32_t start_addr, uint32_t timeout){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]


      StatusMatch = 0;
 8000dca:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <write_buf_qspi+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
      TxCplt = 0;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <write_buf_qspi+0x78>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]

      /* Enable write operations ----------------------------------------- */
      QSPI_WriteEnable(&hqspi);
 8000dd6:	4818      	ldr	r0, [pc, #96]	@ (8000e38 <write_buf_qspi+0x7c>)
 8000dd8:	f7ff fe60 	bl	8000a9c <QSPI_WriteEnable>

      /* Writing Sequence ------------------------------------------------ */
      sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <write_buf_qspi+0x80>)
 8000dde:	2232      	movs	r2, #50	@ 0x32
 8000de0:	601a      	str	r2, [r3, #0]
      sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <write_buf_qspi+0x80>)
 8000de4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000de8:	61da      	str	r2, [r3, #28]
      sCommand.DataMode    = QSPI_DATA_4_LINES;
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <write_buf_qspi+0x80>)
 8000dec:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8000df0:	625a      	str	r2, [r3, #36]	@ 0x24
      sCommand.NbData      = buf_size;
 8000df2:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <write_buf_qspi+0x80>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	6293      	str	r3, [r2, #40]	@ 0x28
      sCommand.Address		= start_addr;
 8000df8:	4a10      	ldr	r2, [pc, #64]	@ (8000e3c <write_buf_qspi+0x80>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6053      	str	r3, [r2, #4]
      if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e02:	490e      	ldr	r1, [pc, #56]	@ (8000e3c <write_buf_qspi+0x80>)
 8000e04:	480c      	ldr	r0, [pc, #48]	@ (8000e38 <write_buf_qspi+0x7c>)
 8000e06:	f003 f991 	bl	800412c <HAL_QSPI_Command>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <write_buf_qspi+0x58>
      {
        Error_Handler();
 8000e10:	f000 f8ae 	bl	8000f70 <Error_Handler>
      }

      if (HAL_QSPI_Transmit_IT(&hqspi, buf) != HAL_OK)
 8000e14:	68f9      	ldr	r1, [r7, #12]
 8000e16:	4808      	ldr	r0, [pc, #32]	@ (8000e38 <write_buf_qspi+0x7c>)
 8000e18:	f003 fb7b 	bl	8004512 <HAL_QSPI_Transmit_IT>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <write_buf_qspi+0x6a>
      {
        Error_Handler();
 8000e22:	f000 f8a5 	bl	8000f70 <Error_Handler>
      }



	return 0;
 8000e26:	2300      	movs	r3, #0

}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	24000287 	.word	0x24000287
 8000e34:	24000286 	.word	0x24000286
 8000e38:	24000120 	.word	0x24000120
 8000e3c:	2400024c 	.word	0x2400024c

08000e40 <programm_end_rdy_qspi>:

int32_t programm_end_rdy_qspi(uint32_t timeout)
{while(timeout>0)
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	e014      	b.n	8000e74 <programm_end_rdy_qspi+0x34>
{
	if(TxCplt != 0)
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <programm_end_rdy_qspi+0x50>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d009      	beq.n	8000e68 <programm_end_rdy_qspi+0x28>
	        {
		TxCplt = 0;
 8000e54:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <programm_end_rdy_qspi+0x50>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
	          StatusMatch = 0;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <programm_end_rdy_qspi+0x54>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]

	          /* Configure automatic polling mode to wait for end of erase ------- */
	          QSPI_AutoPollingMemReady(&hqspi);
 8000e60:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <programm_end_rdy_qspi+0x58>)
 8000e62:	f7ff fe63 	bl	8000b2c <QSPI_AutoPollingMemReady>

break;
 8000e66:	e008      	b.n	8000e7a <programm_end_rdy_qspi+0x3a>
	        }
	HAL_Delay(1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fc0d 	bl	8001688 <HAL_Delay>
	timeout--;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
{while(timeout>0)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1e7      	bne.n	8000e4a <programm_end_rdy_qspi+0xa>

}
if(timeout==0)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <programm_end_rdy_qspi+0x46>
{return -1;}
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	e000      	b.n	8000e88 <programm_end_rdy_qspi+0x48>
else {return 0;}
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	24000286 	.word	0x24000286
 8000e94:	24000287 	.word	0x24000287
 8000e98:	24000120 	.word	0x24000120

08000e9c <read_buf_qspi>:

int32_t read_buf_qspi(uint8_t *buf,uint32_t buf_size, uint32_t start_addr,uint32_t timeout){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	603b      	str	r3, [r7, #0]



      StatusMatch = 0;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <read_buf_qspi+0x6c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
      RxCplt = 0;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <read_buf_qspi+0x70>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]

      /* Configure Volatile Configuration register (with new dummy cycles) */
      QSPI_DummyCyclesCfg(&hqspi);
 8000eb6:	4816      	ldr	r0, [pc, #88]	@ (8000f10 <read_buf_qspi+0x74>)
 8000eb8:	f7ff fe6e 	bl	8000b98 <QSPI_DummyCyclesCfg>

      /* Reading Sequence ------------------------------------------------ */
      sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <read_buf_qspi+0x78>)
 8000ebe:	226b      	movs	r2, #107	@ 0x6b
 8000ec0:	601a      	str	r2, [r3, #0]
      sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ_QUAD;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <read_buf_qspi+0x78>)
 8000ec4:	2208      	movs	r2, #8
 8000ec6:	615a      	str	r2, [r3, #20]
      sCommand.NbData      = buf_size;
 8000ec8:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <read_buf_qspi+0x78>)
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	6293      	str	r3, [r2, #40]	@ 0x28
      sCommand.Address		= start_addr;
 8000ece:	4a11      	ldr	r2, [pc, #68]	@ (8000f14 <read_buf_qspi+0x78>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6053      	str	r3, [r2, #4]
      if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ed8:	490e      	ldr	r1, [pc, #56]	@ (8000f14 <read_buf_qspi+0x78>)
 8000eda:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <read_buf_qspi+0x74>)
 8000edc:	f003 f926 	bl	800412c <HAL_QSPI_Command>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <read_buf_qspi+0x4e>
      {
        Error_Handler();
 8000ee6:	f000 f843 	bl	8000f70 <Error_Handler>
      }

      if (HAL_QSPI_Receive_IT(&hqspi, buf) != HAL_OK)
 8000eea:	68f9      	ldr	r1, [r7, #12]
 8000eec:	4808      	ldr	r0, [pc, #32]	@ (8000f10 <read_buf_qspi+0x74>)
 8000eee:	f003 fb75 	bl	80045dc <HAL_QSPI_Receive_IT>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <read_buf_qspi+0x60>
      {
        Error_Handler();
 8000ef8:	f000 f83a 	bl	8000f70 <Error_Handler>
      }

 return 0;
 8000efc:	2300      	movs	r3, #0

}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	24000287 	.word	0x24000287
 8000f0c:	24000285 	.word	0x24000285
 8000f10:	24000120 	.word	0x24000120
 8000f14:	2400024c 	.word	0x2400024c

08000f18 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f2a:	f000 fd1f 	bl	800196c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f3a:	231f      	movs	r3, #31
 8000f3c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f3e:	2387      	movs	r3, #135	@ 0x87
 8000f40:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f46:	2300      	movs	r3, #0
 8000f48:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fd3d 	bl	80019dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f62:	2004      	movs	r0, #4
 8000f64:	f000 fd1a 	bl	800199c <HAL_MPU_Enable>

}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
 // __disable_irq();
 // while (1)
 // {
 // }
  /* USER CODE END Error_Handler_Debug */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <HAL_MspInit+0x30>)
 8000f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f8c:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <HAL_MspInit+0x30>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_MspInit+0x30>)
 8000f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	58024400 	.word	0x58024400

08000fb4 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0bc      	sub	sp, #240	@ 0xf0
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	22c0      	movs	r2, #192	@ 0xc0
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f00b f821 	bl	800c01c <memset>
  if(hqspi->Instance==QUADSPI)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a59      	ldr	r2, [pc, #356]	@ (8001144 <HAL_QSPI_MspInit+0x190>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	f040 80ab 	bne.w	800113c <HAL_QSPI_MspInit+0x188>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000fe6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff6:	f107 0318 	add.w	r3, r7, #24
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 fe6a 	bl	8005cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001006:	f7ff ffb3 	bl	8000f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800100a:	4b4f      	ldr	r3, [pc, #316]	@ (8001148 <HAL_QSPI_MspInit+0x194>)
 800100c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001010:	4a4d      	ldr	r2, [pc, #308]	@ (8001148 <HAL_QSPI_MspInit+0x194>)
 8001012:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001016:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800101a:	4b4b      	ldr	r3, [pc, #300]	@ (8001148 <HAL_QSPI_MspInit+0x194>)
 800101c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001028:	4b47      	ldr	r3, [pc, #284]	@ (8001148 <HAL_QSPI_MspInit+0x194>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102e:	4a46      	ldr	r2, [pc, #280]	@ (8001148 <HAL_QSPI_MspInit+0x194>)
 8001030:	f043 0310 	orr.w	r3, r3, #16
 8001034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001038:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <HAL_QSPI_MspInit+0x194>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b40      	ldr	r3, [pc, #256]	@ (8001148 <HAL_QSPI_MspInit+0x194>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104c:	4a3e      	ldr	r2, [pc, #248]	@ (8001148 <HAL_QSPI_MspInit+0x194>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001056:	4b3c      	ldr	r3, [pc, #240]	@ (8001148 <HAL_QSPI_MspInit+0x194>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001064:	4b38      	ldr	r3, [pc, #224]	@ (8001148 <HAL_QSPI_MspInit+0x194>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	4a37      	ldr	r2, [pc, #220]	@ (8001148 <HAL_QSPI_MspInit+0x194>)
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001074:	4b34      	ldr	r3, [pc, #208]	@ (8001148 <HAL_QSPI_MspInit+0x194>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001082:	2304      	movs	r3, #4
 8001084:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800109a:	2309      	movs	r3, #9
 800109c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010a4:	4619      	mov	r1, r3
 80010a6:	4829      	ldr	r0, [pc, #164]	@ (800114c <HAL_QSPI_MspInit+0x198>)
 80010a8:	f001 fa3c 	bl	8002524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ac:	2304      	movs	r3, #4
 80010ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010c4:	2309      	movs	r3, #9
 80010c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010ce:	4619      	mov	r1, r3
 80010d0:	481f      	ldr	r0, [pc, #124]	@ (8001150 <HAL_QSPI_MspInit+0x19c>)
 80010d2:	f001 fa27 	bl	8002524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80010d6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80010da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010f0:	2309      	movs	r3, #9
 80010f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010fa:	4619      	mov	r1, r3
 80010fc:	4815      	ldr	r0, [pc, #84]	@ (8001154 <HAL_QSPI_MspInit+0x1a0>)
 80010fe:	f001 fa11 	bl	8002524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001102:	2340      	movs	r3, #64	@ 0x40
 8001104:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800111a:	230a      	movs	r3, #10
 800111c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001124:	4619      	mov	r1, r3
 8001126:	480a      	ldr	r0, [pc, #40]	@ (8001150 <HAL_QSPI_MspInit+0x19c>)
 8001128:	f001 f9fc 	bl	8002524 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	205c      	movs	r0, #92	@ 0x5c
 8001132:	f000 fbd8 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001136:	205c      	movs	r0, #92	@ 0x5c
 8001138:	f000 fbef 	bl	800191a <HAL_NVIC_EnableIRQ>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800113c:	bf00      	nop
 800113e:	37f0      	adds	r7, #240	@ 0xf0
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	52005000 	.word	0x52005000
 8001148:	58024400 	.word	0x58024400
 800114c:	58021000 	.word	0x58021000
 8001150:	58020400 	.word	0x58020400
 8001154:	58020c00 	.word	0x58020c00

08001158 <HAL_QSPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0f      	ldr	r2, [pc, #60]	@ (80011a4 <HAL_QSPI_MspDeInit+0x4c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d117      	bne.n	800119a <HAL_QSPI_MspDeInit+0x42>
  {
    /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

    /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <HAL_QSPI_MspDeInit+0x50>)
 800116c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001170:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <HAL_QSPI_MspDeInit+0x50>)
 8001172:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001176:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 800117a:	2104      	movs	r1, #4
 800117c:	480b      	ldr	r0, [pc, #44]	@ (80011ac <HAL_QSPI_MspDeInit+0x54>)
 800117e:	f001 fb81 	bl	8002884 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8001182:	2144      	movs	r1, #68	@ 0x44
 8001184:	480a      	ldr	r0, [pc, #40]	@ (80011b0 <HAL_QSPI_MspDeInit+0x58>)
 8001186:	f001 fb7d 	bl	8002884 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13);
 800118a:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 800118e:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <HAL_QSPI_MspDeInit+0x5c>)
 8001190:	f001 fb78 	bl	8002884 <HAL_GPIO_DeInit>

    /* QUADSPI interrupt DeInit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001194:	205c      	movs	r0, #92	@ 0x5c
 8001196:	f000 fbce 	bl	8001936 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

    /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	52005000 	.word	0x52005000
 80011a8:	58024400 	.word	0x58024400
 80011ac:	58021000 	.word	0x58021000
 80011b0:	58020400 	.word	0x58020400
 80011b4:	58020c00 	.word	0x58020c00

080011b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001200 <HAL_TIM_Base_MspInit+0x48>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d116      	bne.n	80011f8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <HAL_TIM_Base_MspInit+0x4c>)
 80011cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001204 <HAL_TIM_Base_MspInit+0x4c>)
 80011d2:	f043 0320 	orr.w	r3, r3, #32
 80011d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <HAL_TIM_Base_MspInit+0x4c>)
 80011dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011e0:	f003 0320 	and.w	r3, r3, #32
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2037      	movs	r0, #55	@ 0x37
 80011ee:	f000 fb7a 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80011f2:	2037      	movs	r0, #55	@ 0x37
 80011f4:	f000 fb91 	bl	800191a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40001400 	.word	0x40001400
 8001204:	58024400 	.word	0x58024400

08001208 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0ba      	sub	sp, #232	@ 0xe8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	22c0      	movs	r2, #192	@ 0xc0
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f00a fef7 	bl	800c01c <memset>
  if(huart->Instance==USART1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a2b      	ldr	r2, [pc, #172]	@ (80012e0 <HAL_UART_MspInit+0xd8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d14e      	bne.n	80012d6 <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001238:	f04f 0201 	mov.w	r2, #1
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fd40 	bl	8005cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800125a:	f7ff fe89 	bl	8000f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800125e:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <HAL_UART_MspInit+0xdc>)
 8001260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001264:	4a1f      	ldr	r2, [pc, #124]	@ (80012e4 <HAL_UART_MspInit+0xdc>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800126e:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <HAL_UART_MspInit+0xdc>)
 8001270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <HAL_UART_MspInit+0xdc>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001282:	4a18      	ldr	r2, [pc, #96]	@ (80012e4 <HAL_UART_MspInit+0xdc>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_UART_MspInit+0xdc>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800129a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800129e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b4:	2307      	movs	r3, #7
 80012b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012be:	4619      	mov	r1, r3
 80012c0:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <HAL_UART_MspInit+0xe0>)
 80012c2:	f001 f92f 	bl	8002524 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2025      	movs	r0, #37	@ 0x25
 80012cc:	f000 fb0b 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012d0:	2025      	movs	r0, #37	@ 0x25
 80012d2:	f000 fb22 	bl	800191a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80012d6:	bf00      	nop
 80012d8:	37e8      	adds	r7, #232	@ 0xe8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40011000 	.word	0x40011000
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58020000 	.word	0x58020000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <NMI_Handler+0x4>

080012f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <MemManage_Handler+0x4>

08001304 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <UsageFault_Handler+0x4>

08001314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001342:	f000 f981 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <USART1_IRQHandler+0x10>)
 8001352:	f006 fe17 	bl	8007f84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	240001b8 	.word	0x240001b8

08001360 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001364:	4802      	ldr	r0, [pc, #8]	@ (8001370 <TIM7_IRQHandler+0x10>)
 8001366:	f006 fb38 	bl	80079da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2400016c 	.word	0x2400016c

08001374 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <QUADSPI_IRQHandler+0x10>)
 800137a:	f002 fd1d 	bl	8003db8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	24000120 	.word	0x24000120

08001388 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <OTG_FS_IRQHandler+0x10>)
 800138e:	f001 fbc3 	bl	8002b18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	24000380 	.word	0x24000380

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013a0:	4b43      	ldr	r3, [pc, #268]	@ (80014b0 <SystemInit+0x114>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a6:	4a42      	ldr	r2, [pc, #264]	@ (80014b0 <SystemInit+0x114>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013b0:	4b40      	ldr	r3, [pc, #256]	@ (80014b4 <SystemInit+0x118>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	2b06      	cmp	r3, #6
 80013ba:	d807      	bhi.n	80013cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013bc:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <SystemInit+0x118>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 030f 	bic.w	r3, r3, #15
 80013c4:	4a3b      	ldr	r2, [pc, #236]	@ (80014b4 <SystemInit+0x118>)
 80013c6:	f043 0307 	orr.w	r3, r3, #7
 80013ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013cc:	4b3a      	ldr	r3, [pc, #232]	@ (80014b8 <SystemInit+0x11c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a39      	ldr	r2, [pc, #228]	@ (80014b8 <SystemInit+0x11c>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013d8:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <SystemInit+0x11c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013de:	4b36      	ldr	r3, [pc, #216]	@ (80014b8 <SystemInit+0x11c>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4935      	ldr	r1, [pc, #212]	@ (80014b8 <SystemInit+0x11c>)
 80013e4:	4b35      	ldr	r3, [pc, #212]	@ (80014bc <SystemInit+0x120>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ea:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <SystemInit+0x118>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013f6:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <SystemInit+0x118>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 030f 	bic.w	r3, r3, #15
 80013fe:	4a2d      	ldr	r2, [pc, #180]	@ (80014b4 <SystemInit+0x118>)
 8001400:	f043 0307 	orr.w	r3, r3, #7
 8001404:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001406:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <SystemInit+0x11c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800140c:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <SystemInit+0x11c>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001412:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <SystemInit+0x11c>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <SystemInit+0x11c>)
 800141a:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <SystemInit+0x124>)
 800141c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800141e:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <SystemInit+0x11c>)
 8001420:	4a28      	ldr	r2, [pc, #160]	@ (80014c4 <SystemInit+0x128>)
 8001422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001424:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <SystemInit+0x11c>)
 8001426:	4a28      	ldr	r2, [pc, #160]	@ (80014c8 <SystemInit+0x12c>)
 8001428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800142a:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <SystemInit+0x11c>)
 800142c:	2200      	movs	r2, #0
 800142e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001430:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <SystemInit+0x11c>)
 8001432:	4a25      	ldr	r2, [pc, #148]	@ (80014c8 <SystemInit+0x12c>)
 8001434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <SystemInit+0x11c>)
 8001438:	2200      	movs	r2, #0
 800143a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800143c:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <SystemInit+0x11c>)
 800143e:	4a22      	ldr	r2, [pc, #136]	@ (80014c8 <SystemInit+0x12c>)
 8001440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <SystemInit+0x11c>)
 8001444:	2200      	movs	r2, #0
 8001446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001448:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <SystemInit+0x11c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1a      	ldr	r2, [pc, #104]	@ (80014b8 <SystemInit+0x11c>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <SystemInit+0x11c>)
 8001456:	2200      	movs	r2, #0
 8001458:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <SystemInit+0x130>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <SystemInit+0x134>)
 8001460:	4013      	ands	r3, r2
 8001462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001466:	d202      	bcs.n	800146e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001468:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <SystemInit+0x138>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <SystemInit+0x11c>)
 8001470:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001474:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d113      	bne.n	80014a4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <SystemInit+0x11c>)
 800147e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001482:	4a0d      	ldr	r2, [pc, #52]	@ (80014b8 <SystemInit+0x11c>)
 8001484:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001488:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <SystemInit+0x13c>)
 800148e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001492:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <SystemInit+0x11c>)
 8001496:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800149a:	4a07      	ldr	r2, [pc, #28]	@ (80014b8 <SystemInit+0x11c>)
 800149c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014a0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	52002000 	.word	0x52002000
 80014b8:	58024400 	.word	0x58024400
 80014bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80014c0:	02020200 	.word	0x02020200
 80014c4:	01ff0000 	.word	0x01ff0000
 80014c8:	01010280 	.word	0x01010280
 80014cc:	5c001000 	.word	0x5c001000
 80014d0:	ffff0000 	.word	0xffff0000
 80014d4:	51008108 	.word	0x51008108
 80014d8:	52004000 	.word	0x52004000

080014dc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <ExitRun0Mode+0x2c>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4a08      	ldr	r2, [pc, #32]	@ (8001508 <ExitRun0Mode+0x2c>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80014ec:	bf00      	nop
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <ExitRun0Mode+0x2c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f9      	beq.n	80014ee <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80014fa:	bf00      	nop
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	58024800 	.word	0x58024800

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800150c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001548 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001510:	f7ff ffe4 	bl	80014dc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001514:	f7ff ff42 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480c      	ldr	r0, [pc, #48]	@ (800154c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800151a:	490d      	ldr	r1, [pc, #52]	@ (8001550 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800151c:	4a0d      	ldr	r2, [pc, #52]	@ (8001554 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001530:	4c0a      	ldr	r4, [pc, #40]	@ (800155c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153e:	f00a fd75 	bl	800c02c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001542:	f7ff f867 	bl	8000614 <main>
  bx  lr
 8001546:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001548:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800154c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001550:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8001554:	0800c0d4 	.word	0x0800c0d4
  ldr r2, =_sbss
 8001558:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 800155c:	24000864 	.word	0x24000864

08001560 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC3_IRQHandler>
	...

08001564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156a:	2003      	movs	r0, #3
 800156c:	f000 f9b0 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001570:	f004 f9da 	bl	8005928 <HAL_RCC_GetSysClockFreq>
 8001574:	4602      	mov	r2, r0
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_Init+0x68>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	4913      	ldr	r1, [pc, #76]	@ (80015d0 <HAL_Init+0x6c>)
 8001582:	5ccb      	ldrb	r3, [r1, r3]
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
 800158c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <HAL_Init+0x68>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <HAL_Init+0x6c>)
 8001598:	5cd3      	ldrb	r3, [r2, r3]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	fa22 f303 	lsr.w	r3, r2, r3
 80015a4:	4a0b      	ldr	r2, [pc, #44]	@ (80015d4 <HAL_Init+0x70>)
 80015a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015a8:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <HAL_Init+0x74>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ae:	200f      	movs	r0, #15
 80015b0:	f000 f814 	bl	80015dc <HAL_InitTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e002      	b.n	80015c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015be:	f7ff fcdf 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	58024400 	.word	0x58024400
 80015d0:	0800c08c 	.word	0x0800c08c
 80015d4:	240000f8 	.word	0x240000f8
 80015d8:	240000f4 	.word	0x240000f4

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015e4:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_InitTick+0x60>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e021      	b.n	8001634 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <HAL_InitTick+0x64>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <HAL_InitTick+0x60>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f9a3 	bl	8001952 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f95f 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	@ (8001644 <HAL_InitTick+0x68>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	24000100 	.word	0x24000100
 8001640:	240000f4 	.word	0x240000f4
 8001644:	240000fc 	.word	0x240000fc

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	24000100 	.word	0x24000100
 800166c:	24000378 	.word	0x24000378

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	24000378 	.word	0x24000378

08001688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff ffee 	bl	8001670 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d005      	beq.n	80016ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_Delay+0x44>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ae:	bf00      	nop
 80016b0:	f7ff ffde 	bl	8001670 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d8f7      	bhi.n	80016b0 <HAL_Delay+0x28>
  {
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	24000100 	.word	0x24000100

080016d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016d4:	4b03      	ldr	r3, [pc, #12]	@ (80016e4 <HAL_GetREVID+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0c1b      	lsrs	r3, r3, #16
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	5c001000 	.word	0x5c001000

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <__NVIC_SetPriorityGrouping+0x40>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	4313      	orrs	r3, r2
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <__NVIC_SetPriorityGrouping+0x40>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00
 800172c:	05fa0000 	.word	0x05fa0000

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db0b      	blt.n	8001776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	4907      	ldr	r1, [pc, #28]	@ (8001784 <__NVIC_EnableIRQ+0x38>)
 8001766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2001      	movs	r0, #1
 800176e:	fa00 f202 	lsl.w	r2, r0, r2
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db12      	blt.n	80017c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	490a      	ldr	r1, [pc, #40]	@ (80017cc <__NVIC_DisableIRQ+0x44>)
 80017a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f202 	lsl.w	r2, r0, r2
 80017ae:	3320      	adds	r3, #32
 80017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80017b4:	f3bf 8f4f 	dsb	sy
}
 80017b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017ba:	f3bf 8f6f 	isb	sy
}
 80017be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	@ (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	@ (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	@ 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	@ 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff05 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018f4:	f7ff ff1c 	bl	8001730 <__NVIC_GetPriorityGrouping>
 80018f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f7ff ff90 	bl	8001824 <NVIC_EncodePriority>
 8001904:	4602      	mov	r2, r0
 8001906:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff5f 	bl	80017d0 <__NVIC_SetPriority>
}
 8001912:	bf00      	nop
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff0f 	bl	800174c <__NVIC_EnableIRQ>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff1f 	bl	8001788 <__NVIC_DisableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff96 	bl	800188c <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001970:	f3bf 8f5f 	dmb	sy
}
 8001974:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001976:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <HAL_MPU_Disable+0x28>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	4a06      	ldr	r2, [pc, #24]	@ (8001994 <HAL_MPU_Disable+0x28>)
 800197c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001980:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001982:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_MPU_Disable+0x2c>)
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00
 8001998:	e000ed90 	.word	0xe000ed90

0800199c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80019a4:	4a0b      	ldr	r2, [pc, #44]	@ (80019d4 <HAL_MPU_Enable+0x38>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80019ae:	4b0a      	ldr	r3, [pc, #40]	@ (80019d8 <HAL_MPU_Enable+0x3c>)
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	4a09      	ldr	r2, [pc, #36]	@ (80019d8 <HAL_MPU_Enable+0x3c>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80019ba:	f3bf 8f4f 	dsb	sy
}
 80019be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019c0:	f3bf 8f6f 	isb	sy
}
 80019c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed90 	.word	0xe000ed90
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	785a      	ldrb	r2, [r3, #1]
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <HAL_MPU_ConfigRegion+0x7c>)
 80019ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80019ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <HAL_MPU_ConfigRegion+0x7c>)
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	4a19      	ldr	r2, [pc, #100]	@ (8001a58 <HAL_MPU_ConfigRegion+0x7c>)
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80019f8:	4a17      	ldr	r2, [pc, #92]	@ (8001a58 <HAL_MPU_ConfigRegion+0x7c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7b1b      	ldrb	r3, [r3, #12]
 8001a04:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7adb      	ldrb	r3, [r3, #11]
 8001a0a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7a9b      	ldrb	r3, [r3, #10]
 8001a12:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7b5b      	ldrb	r3, [r3, #13]
 8001a1a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7b9b      	ldrb	r3, [r3, #14]
 8001a22:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7bdb      	ldrb	r3, [r3, #15]
 8001a2a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7a5b      	ldrb	r3, [r3, #9]
 8001a32:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7a1b      	ldrb	r3, [r3, #8]
 8001a3a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a3c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	7812      	ldrb	r2, [r2, #0]
 8001a42:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a44:	4a04      	ldr	r2, [pc, #16]	@ (8001a58 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a46:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a48:	6113      	str	r3, [r2, #16]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed90 	.word	0xe000ed90

08001a5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff fe04 	bl	8001670 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e2dc      	b.n	800202e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d008      	beq.n	8001a92 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2280      	movs	r2, #128	@ 0x80
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e2cd      	b.n	800202e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a76      	ldr	r2, [pc, #472]	@ (8001c70 <HAL_DMA_Abort+0x214>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d04a      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a74      	ldr	r2, [pc, #464]	@ (8001c74 <HAL_DMA_Abort+0x218>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d045      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a73      	ldr	r2, [pc, #460]	@ (8001c78 <HAL_DMA_Abort+0x21c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d040      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a71      	ldr	r2, [pc, #452]	@ (8001c7c <HAL_DMA_Abort+0x220>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d03b      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a70      	ldr	r2, [pc, #448]	@ (8001c80 <HAL_DMA_Abort+0x224>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d036      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a6e      	ldr	r2, [pc, #440]	@ (8001c84 <HAL_DMA_Abort+0x228>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d031      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a6d      	ldr	r2, [pc, #436]	@ (8001c88 <HAL_DMA_Abort+0x22c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d02c      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a6b      	ldr	r2, [pc, #428]	@ (8001c8c <HAL_DMA_Abort+0x230>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d027      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a6a      	ldr	r2, [pc, #424]	@ (8001c90 <HAL_DMA_Abort+0x234>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d022      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a68      	ldr	r2, [pc, #416]	@ (8001c94 <HAL_DMA_Abort+0x238>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d01d      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a67      	ldr	r2, [pc, #412]	@ (8001c98 <HAL_DMA_Abort+0x23c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d018      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a65      	ldr	r2, [pc, #404]	@ (8001c9c <HAL_DMA_Abort+0x240>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a64      	ldr	r2, [pc, #400]	@ (8001ca0 <HAL_DMA_Abort+0x244>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a62      	ldr	r2, [pc, #392]	@ (8001ca4 <HAL_DMA_Abort+0x248>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d009      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a61      	ldr	r2, [pc, #388]	@ (8001ca8 <HAL_DMA_Abort+0x24c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_Abort+0xd6>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a5f      	ldr	r2, [pc, #380]	@ (8001cac <HAL_DMA_Abort+0x250>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Abort+0xda>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_DMA_Abort+0xdc>
 8001b36:	2300      	movs	r3, #0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 021e 	bic.w	r2, r2, #30
 8001b4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	e00a      	b.n	8001b7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 020e 	bic.w	r2, r2, #14
 8001b72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c70 <HAL_DMA_Abort+0x214>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d072      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a3a      	ldr	r2, [pc, #232]	@ (8001c74 <HAL_DMA_Abort+0x218>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d06d      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a39      	ldr	r2, [pc, #228]	@ (8001c78 <HAL_DMA_Abort+0x21c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d068      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a37      	ldr	r2, [pc, #220]	@ (8001c7c <HAL_DMA_Abort+0x220>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d063      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a36      	ldr	r2, [pc, #216]	@ (8001c80 <HAL_DMA_Abort+0x224>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d05e      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a34      	ldr	r2, [pc, #208]	@ (8001c84 <HAL_DMA_Abort+0x228>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d059      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a33      	ldr	r2, [pc, #204]	@ (8001c88 <HAL_DMA_Abort+0x22c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d054      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a31      	ldr	r2, [pc, #196]	@ (8001c8c <HAL_DMA_Abort+0x230>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d04f      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a30      	ldr	r2, [pc, #192]	@ (8001c90 <HAL_DMA_Abort+0x234>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d04a      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2e      	ldr	r2, [pc, #184]	@ (8001c94 <HAL_DMA_Abort+0x238>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d045      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c98 <HAL_DMA_Abort+0x23c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d040      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2b      	ldr	r2, [pc, #172]	@ (8001c9c <HAL_DMA_Abort+0x240>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d03b      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca0 <HAL_DMA_Abort+0x244>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d036      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a28      	ldr	r2, [pc, #160]	@ (8001ca4 <HAL_DMA_Abort+0x248>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d031      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a27      	ldr	r2, [pc, #156]	@ (8001ca8 <HAL_DMA_Abort+0x24c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d02c      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a25      	ldr	r2, [pc, #148]	@ (8001cac <HAL_DMA_Abort+0x250>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d027      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a24      	ldr	r2, [pc, #144]	@ (8001cb0 <HAL_DMA_Abort+0x254>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d022      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a22      	ldr	r2, [pc, #136]	@ (8001cb4 <HAL_DMA_Abort+0x258>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01d      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a21      	ldr	r2, [pc, #132]	@ (8001cb8 <HAL_DMA_Abort+0x25c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d018      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cbc <HAL_DMA_Abort+0x260>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc0 <HAL_DMA_Abort+0x264>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00e      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc4 <HAL_DMA_Abort+0x268>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d009      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc8 <HAL_DMA_Abort+0x26c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d004      	beq.n	8001c6a <HAL_DMA_Abort+0x20e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a19      	ldr	r2, [pc, #100]	@ (8001ccc <HAL_DMA_Abort+0x270>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d132      	bne.n	8001cd0 <HAL_DMA_Abort+0x274>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e031      	b.n	8001cd2 <HAL_DMA_Abort+0x276>
 8001c6e:	bf00      	nop
 8001c70:	40020010 	.word	0x40020010
 8001c74:	40020028 	.word	0x40020028
 8001c78:	40020040 	.word	0x40020040
 8001c7c:	40020058 	.word	0x40020058
 8001c80:	40020070 	.word	0x40020070
 8001c84:	40020088 	.word	0x40020088
 8001c88:	400200a0 	.word	0x400200a0
 8001c8c:	400200b8 	.word	0x400200b8
 8001c90:	40020410 	.word	0x40020410
 8001c94:	40020428 	.word	0x40020428
 8001c98:	40020440 	.word	0x40020440
 8001c9c:	40020458 	.word	0x40020458
 8001ca0:	40020470 	.word	0x40020470
 8001ca4:	40020488 	.word	0x40020488
 8001ca8:	400204a0 	.word	0x400204a0
 8001cac:	400204b8 	.word	0x400204b8
 8001cb0:	58025408 	.word	0x58025408
 8001cb4:	5802541c 	.word	0x5802541c
 8001cb8:	58025430 	.word	0x58025430
 8001cbc:	58025444 	.word	0x58025444
 8001cc0:	58025458 	.word	0x58025458
 8001cc4:	5802546c 	.word	0x5802546c
 8001cc8:	58025480 	.word	0x58025480
 8001ccc:	58025494 	.word	0x58025494
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a6d      	ldr	r2, [pc, #436]	@ (8001ea0 <HAL_DMA_Abort+0x444>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d04a      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6b      	ldr	r2, [pc, #428]	@ (8001ea4 <HAL_DMA_Abort+0x448>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d045      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a6a      	ldr	r2, [pc, #424]	@ (8001ea8 <HAL_DMA_Abort+0x44c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d040      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a68      	ldr	r2, [pc, #416]	@ (8001eac <HAL_DMA_Abort+0x450>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d03b      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a67      	ldr	r2, [pc, #412]	@ (8001eb0 <HAL_DMA_Abort+0x454>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d036      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a65      	ldr	r2, [pc, #404]	@ (8001eb4 <HAL_DMA_Abort+0x458>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d031      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a64      	ldr	r2, [pc, #400]	@ (8001eb8 <HAL_DMA_Abort+0x45c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d02c      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a62      	ldr	r2, [pc, #392]	@ (8001ebc <HAL_DMA_Abort+0x460>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d027      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a61      	ldr	r2, [pc, #388]	@ (8001ec0 <HAL_DMA_Abort+0x464>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d022      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a5f      	ldr	r2, [pc, #380]	@ (8001ec4 <HAL_DMA_Abort+0x468>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d01d      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ec8 <HAL_DMA_Abort+0x46c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d018      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a5c      	ldr	r2, [pc, #368]	@ (8001ecc <HAL_DMA_Abort+0x470>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a5b      	ldr	r2, [pc, #364]	@ (8001ed0 <HAL_DMA_Abort+0x474>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d00e      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a59      	ldr	r2, [pc, #356]	@ (8001ed4 <HAL_DMA_Abort+0x478>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d009      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a58      	ldr	r2, [pc, #352]	@ (8001ed8 <HAL_DMA_Abort+0x47c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d004      	beq.n	8001d86 <HAL_DMA_Abort+0x32a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a56      	ldr	r2, [pc, #344]	@ (8001edc <HAL_DMA_Abort+0x480>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d108      	bne.n	8001d98 <HAL_DMA_Abort+0x33c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0201 	bic.w	r2, r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e007      	b.n	8001da8 <HAL_DMA_Abort+0x34c>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001da8:	e013      	b.n	8001dd2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001daa:	f7ff fc61 	bl	8001670 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d90c      	bls.n	8001dd2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e12d      	b.n	800202e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1e5      	bne.n	8001daa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea0 <HAL_DMA_Abort+0x444>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d04a      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a2d      	ldr	r2, [pc, #180]	@ (8001ea4 <HAL_DMA_Abort+0x448>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d045      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea8 <HAL_DMA_Abort+0x44c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d040      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a2a      	ldr	r2, [pc, #168]	@ (8001eac <HAL_DMA_Abort+0x450>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d03b      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a29      	ldr	r2, [pc, #164]	@ (8001eb0 <HAL_DMA_Abort+0x454>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d036      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a27      	ldr	r2, [pc, #156]	@ (8001eb4 <HAL_DMA_Abort+0x458>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d031      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a26      	ldr	r2, [pc, #152]	@ (8001eb8 <HAL_DMA_Abort+0x45c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d02c      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a24      	ldr	r2, [pc, #144]	@ (8001ebc <HAL_DMA_Abort+0x460>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d027      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a23      	ldr	r2, [pc, #140]	@ (8001ec0 <HAL_DMA_Abort+0x464>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d022      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a21      	ldr	r2, [pc, #132]	@ (8001ec4 <HAL_DMA_Abort+0x468>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01d      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a20      	ldr	r2, [pc, #128]	@ (8001ec8 <HAL_DMA_Abort+0x46c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d018      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1e      	ldr	r2, [pc, #120]	@ (8001ecc <HAL_DMA_Abort+0x470>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed0 <HAL_DMA_Abort+0x474>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00e      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed4 <HAL_DMA_Abort+0x478>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed8 <HAL_DMA_Abort+0x47c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d004      	beq.n	8001e7e <HAL_DMA_Abort+0x422>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a18      	ldr	r2, [pc, #96]	@ (8001edc <HAL_DMA_Abort+0x480>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_DMA_Abort+0x426>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_DMA_Abort+0x428>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d02b      	beq.n	8001ee0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	223f      	movs	r2, #63	@ 0x3f
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	e02a      	b.n	8001ef6 <HAL_DMA_Abort+0x49a>
 8001ea0:	40020010 	.word	0x40020010
 8001ea4:	40020028 	.word	0x40020028
 8001ea8:	40020040 	.word	0x40020040
 8001eac:	40020058 	.word	0x40020058
 8001eb0:	40020070 	.word	0x40020070
 8001eb4:	40020088 	.word	0x40020088
 8001eb8:	400200a0 	.word	0x400200a0
 8001ebc:	400200b8 	.word	0x400200b8
 8001ec0:	40020410 	.word	0x40020410
 8001ec4:	40020428 	.word	0x40020428
 8001ec8:	40020440 	.word	0x40020440
 8001ecc:	40020458 	.word	0x40020458
 8001ed0:	40020470 	.word	0x40020470
 8001ed4:	40020488 	.word	0x40020488
 8001ed8:	400204a0 	.word	0x400204a0
 8001edc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2201      	movs	r2, #1
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a4f      	ldr	r2, [pc, #316]	@ (8002038 <HAL_DMA_Abort+0x5dc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d072      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a4d      	ldr	r2, [pc, #308]	@ (800203c <HAL_DMA_Abort+0x5e0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d06d      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002040 <HAL_DMA_Abort+0x5e4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d068      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a4a      	ldr	r2, [pc, #296]	@ (8002044 <HAL_DMA_Abort+0x5e8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d063      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a49      	ldr	r2, [pc, #292]	@ (8002048 <HAL_DMA_Abort+0x5ec>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d05e      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a47      	ldr	r2, [pc, #284]	@ (800204c <HAL_DMA_Abort+0x5f0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d059      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a46      	ldr	r2, [pc, #280]	@ (8002050 <HAL_DMA_Abort+0x5f4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d054      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a44      	ldr	r2, [pc, #272]	@ (8002054 <HAL_DMA_Abort+0x5f8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d04f      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a43      	ldr	r2, [pc, #268]	@ (8002058 <HAL_DMA_Abort+0x5fc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d04a      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a41      	ldr	r2, [pc, #260]	@ (800205c <HAL_DMA_Abort+0x600>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d045      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a40      	ldr	r2, [pc, #256]	@ (8002060 <HAL_DMA_Abort+0x604>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d040      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a3e      	ldr	r2, [pc, #248]	@ (8002064 <HAL_DMA_Abort+0x608>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d03b      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a3d      	ldr	r2, [pc, #244]	@ (8002068 <HAL_DMA_Abort+0x60c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d036      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a3b      	ldr	r2, [pc, #236]	@ (800206c <HAL_DMA_Abort+0x610>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d031      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a3a      	ldr	r2, [pc, #232]	@ (8002070 <HAL_DMA_Abort+0x614>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d02c      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a38      	ldr	r2, [pc, #224]	@ (8002074 <HAL_DMA_Abort+0x618>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d027      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a37      	ldr	r2, [pc, #220]	@ (8002078 <HAL_DMA_Abort+0x61c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d022      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a35      	ldr	r2, [pc, #212]	@ (800207c <HAL_DMA_Abort+0x620>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a34      	ldr	r2, [pc, #208]	@ (8002080 <HAL_DMA_Abort+0x624>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d018      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a32      	ldr	r2, [pc, #200]	@ (8002084 <HAL_DMA_Abort+0x628>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a31      	ldr	r2, [pc, #196]	@ (8002088 <HAL_DMA_Abort+0x62c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00e      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800208c <HAL_DMA_Abort+0x630>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d009      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a2e      	ldr	r2, [pc, #184]	@ (8002090 <HAL_DMA_Abort+0x634>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d004      	beq.n	8001fe6 <HAL_DMA_Abort+0x58a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8002094 <HAL_DMA_Abort+0x638>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_DMA_Abort+0x58e>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_DMA_Abort+0x590>
 8001fea:	2300      	movs	r3, #0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d015      	beq.n	800201c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ff8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800200c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002010:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800201a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40020010 	.word	0x40020010
 800203c:	40020028 	.word	0x40020028
 8002040:	40020040 	.word	0x40020040
 8002044:	40020058 	.word	0x40020058
 8002048:	40020070 	.word	0x40020070
 800204c:	40020088 	.word	0x40020088
 8002050:	400200a0 	.word	0x400200a0
 8002054:	400200b8 	.word	0x400200b8
 8002058:	40020410 	.word	0x40020410
 800205c:	40020428 	.word	0x40020428
 8002060:	40020440 	.word	0x40020440
 8002064:	40020458 	.word	0x40020458
 8002068:	40020470 	.word	0x40020470
 800206c:	40020488 	.word	0x40020488
 8002070:	400204a0 	.word	0x400204a0
 8002074:	400204b8 	.word	0x400204b8
 8002078:	58025408 	.word	0x58025408
 800207c:	5802541c 	.word	0x5802541c
 8002080:	58025430 	.word	0x58025430
 8002084:	58025444 	.word	0x58025444
 8002088:	58025458 	.word	0x58025458
 800208c:	5802546c 	.word	0x5802546c
 8002090:	58025480 	.word	0x58025480
 8002094:	58025494 	.word	0x58025494

08002098 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e237      	b.n	800251a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d004      	beq.n	80020c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2280      	movs	r2, #128	@ 0x80
 80020ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e22c      	b.n	800251a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002238 <HAL_DMA_Abort_IT+0x1a0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d04a      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a5b      	ldr	r2, [pc, #364]	@ (800223c <HAL_DMA_Abort_IT+0x1a4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d045      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a59      	ldr	r2, [pc, #356]	@ (8002240 <HAL_DMA_Abort_IT+0x1a8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d040      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a58      	ldr	r2, [pc, #352]	@ (8002244 <HAL_DMA_Abort_IT+0x1ac>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d03b      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a56      	ldr	r2, [pc, #344]	@ (8002248 <HAL_DMA_Abort_IT+0x1b0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d036      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a55      	ldr	r2, [pc, #340]	@ (800224c <HAL_DMA_Abort_IT+0x1b4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d031      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a53      	ldr	r2, [pc, #332]	@ (8002250 <HAL_DMA_Abort_IT+0x1b8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d02c      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a52      	ldr	r2, [pc, #328]	@ (8002254 <HAL_DMA_Abort_IT+0x1bc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d027      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a50      	ldr	r2, [pc, #320]	@ (8002258 <HAL_DMA_Abort_IT+0x1c0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d022      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a4f      	ldr	r2, [pc, #316]	@ (800225c <HAL_DMA_Abort_IT+0x1c4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d01d      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a4d      	ldr	r2, [pc, #308]	@ (8002260 <HAL_DMA_Abort_IT+0x1c8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d018      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a4c      	ldr	r2, [pc, #304]	@ (8002264 <HAL_DMA_Abort_IT+0x1cc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d013      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a4a      	ldr	r2, [pc, #296]	@ (8002268 <HAL_DMA_Abort_IT+0x1d0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00e      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a49      	ldr	r2, [pc, #292]	@ (800226c <HAL_DMA_Abort_IT+0x1d4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a47      	ldr	r2, [pc, #284]	@ (8002270 <HAL_DMA_Abort_IT+0x1d8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d004      	beq.n	8002160 <HAL_DMA_Abort_IT+0xc8>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a46      	ldr	r2, [pc, #280]	@ (8002274 <HAL_DMA_Abort_IT+0x1dc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <HAL_DMA_Abort_IT+0xcc>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_DMA_Abort_IT+0xce>
 8002164:	2300      	movs	r3, #0
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8086 	beq.w	8002278 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2204      	movs	r2, #4
 8002170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2f      	ldr	r2, [pc, #188]	@ (8002238 <HAL_DMA_Abort_IT+0x1a0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d04a      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2e      	ldr	r2, [pc, #184]	@ (800223c <HAL_DMA_Abort_IT+0x1a4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d045      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a2c      	ldr	r2, [pc, #176]	@ (8002240 <HAL_DMA_Abort_IT+0x1a8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d040      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a2b      	ldr	r2, [pc, #172]	@ (8002244 <HAL_DMA_Abort_IT+0x1ac>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d03b      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a29      	ldr	r2, [pc, #164]	@ (8002248 <HAL_DMA_Abort_IT+0x1b0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d036      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a28      	ldr	r2, [pc, #160]	@ (800224c <HAL_DMA_Abort_IT+0x1b4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d031      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a26      	ldr	r2, [pc, #152]	@ (8002250 <HAL_DMA_Abort_IT+0x1b8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d02c      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a25      	ldr	r2, [pc, #148]	@ (8002254 <HAL_DMA_Abort_IT+0x1bc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d027      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a23      	ldr	r2, [pc, #140]	@ (8002258 <HAL_DMA_Abort_IT+0x1c0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d022      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a22      	ldr	r2, [pc, #136]	@ (800225c <HAL_DMA_Abort_IT+0x1c4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d01d      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a20      	ldr	r2, [pc, #128]	@ (8002260 <HAL_DMA_Abort_IT+0x1c8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d018      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002264 <HAL_DMA_Abort_IT+0x1cc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d013      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002268 <HAL_DMA_Abort_IT+0x1d0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00e      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1c      	ldr	r2, [pc, #112]	@ (800226c <HAL_DMA_Abort_IT+0x1d4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1a      	ldr	r2, [pc, #104]	@ (8002270 <HAL_DMA_Abort_IT+0x1d8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d004      	beq.n	8002214 <HAL_DMA_Abort_IT+0x17c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <HAL_DMA_Abort_IT+0x1dc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d108      	bne.n	8002226 <HAL_DMA_Abort_IT+0x18e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e178      	b.n	8002518 <HAL_DMA_Abort_IT+0x480>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e16f      	b.n	8002518 <HAL_DMA_Abort_IT+0x480>
 8002238:	40020010 	.word	0x40020010
 800223c:	40020028 	.word	0x40020028
 8002240:	40020040 	.word	0x40020040
 8002244:	40020058 	.word	0x40020058
 8002248:	40020070 	.word	0x40020070
 800224c:	40020088 	.word	0x40020088
 8002250:	400200a0 	.word	0x400200a0
 8002254:	400200b8 	.word	0x400200b8
 8002258:	40020410 	.word	0x40020410
 800225c:	40020428 	.word	0x40020428
 8002260:	40020440 	.word	0x40020440
 8002264:	40020458 	.word	0x40020458
 8002268:	40020470 	.word	0x40020470
 800226c:	40020488 	.word	0x40020488
 8002270:	400204a0 	.word	0x400204a0
 8002274:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 020e 	bic.w	r2, r2, #14
 8002286:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6c      	ldr	r2, [pc, #432]	@ (8002440 <HAL_DMA_Abort_IT+0x3a8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d04a      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6b      	ldr	r2, [pc, #428]	@ (8002444 <HAL_DMA_Abort_IT+0x3ac>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d045      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a69      	ldr	r2, [pc, #420]	@ (8002448 <HAL_DMA_Abort_IT+0x3b0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d040      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a68      	ldr	r2, [pc, #416]	@ (800244c <HAL_DMA_Abort_IT+0x3b4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d03b      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a66      	ldr	r2, [pc, #408]	@ (8002450 <HAL_DMA_Abort_IT+0x3b8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d036      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a65      	ldr	r2, [pc, #404]	@ (8002454 <HAL_DMA_Abort_IT+0x3bc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d031      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a63      	ldr	r2, [pc, #396]	@ (8002458 <HAL_DMA_Abort_IT+0x3c0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d02c      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a62      	ldr	r2, [pc, #392]	@ (800245c <HAL_DMA_Abort_IT+0x3c4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d027      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a60      	ldr	r2, [pc, #384]	@ (8002460 <HAL_DMA_Abort_IT+0x3c8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d022      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5f      	ldr	r2, [pc, #380]	@ (8002464 <HAL_DMA_Abort_IT+0x3cc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d01d      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002468 <HAL_DMA_Abort_IT+0x3d0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d018      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5c      	ldr	r2, [pc, #368]	@ (800246c <HAL_DMA_Abort_IT+0x3d4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d013      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a5a      	ldr	r2, [pc, #360]	@ (8002470 <HAL_DMA_Abort_IT+0x3d8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00e      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a59      	ldr	r2, [pc, #356]	@ (8002474 <HAL_DMA_Abort_IT+0x3dc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d009      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a57      	ldr	r2, [pc, #348]	@ (8002478 <HAL_DMA_Abort_IT+0x3e0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d004      	beq.n	8002328 <HAL_DMA_Abort_IT+0x290>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a56      	ldr	r2, [pc, #344]	@ (800247c <HAL_DMA_Abort_IT+0x3e4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d108      	bne.n	800233a <HAL_DMA_Abort_IT+0x2a2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	e007      	b.n	800234a <HAL_DMA_Abort_IT+0x2b2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a3c      	ldr	r2, [pc, #240]	@ (8002440 <HAL_DMA_Abort_IT+0x3a8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d072      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a3a      	ldr	r2, [pc, #232]	@ (8002444 <HAL_DMA_Abort_IT+0x3ac>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d06d      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a39      	ldr	r2, [pc, #228]	@ (8002448 <HAL_DMA_Abort_IT+0x3b0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d068      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a37      	ldr	r2, [pc, #220]	@ (800244c <HAL_DMA_Abort_IT+0x3b4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d063      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a36      	ldr	r2, [pc, #216]	@ (8002450 <HAL_DMA_Abort_IT+0x3b8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d05e      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a34      	ldr	r2, [pc, #208]	@ (8002454 <HAL_DMA_Abort_IT+0x3bc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d059      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a33      	ldr	r2, [pc, #204]	@ (8002458 <HAL_DMA_Abort_IT+0x3c0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d054      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a31      	ldr	r2, [pc, #196]	@ (800245c <HAL_DMA_Abort_IT+0x3c4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d04f      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a30      	ldr	r2, [pc, #192]	@ (8002460 <HAL_DMA_Abort_IT+0x3c8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d04a      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002464 <HAL_DMA_Abort_IT+0x3cc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d045      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002468 <HAL_DMA_Abort_IT+0x3d0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d040      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2b      	ldr	r2, [pc, #172]	@ (800246c <HAL_DMA_Abort_IT+0x3d4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d03b      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002470 <HAL_DMA_Abort_IT+0x3d8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d036      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a28      	ldr	r2, [pc, #160]	@ (8002474 <HAL_DMA_Abort_IT+0x3dc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d031      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a27      	ldr	r2, [pc, #156]	@ (8002478 <HAL_DMA_Abort_IT+0x3e0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d02c      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a25      	ldr	r2, [pc, #148]	@ (800247c <HAL_DMA_Abort_IT+0x3e4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d027      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a24      	ldr	r2, [pc, #144]	@ (8002480 <HAL_DMA_Abort_IT+0x3e8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d022      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a22      	ldr	r2, [pc, #136]	@ (8002484 <HAL_DMA_Abort_IT+0x3ec>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01d      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a21      	ldr	r2, [pc, #132]	@ (8002488 <HAL_DMA_Abort_IT+0x3f0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d018      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1f      	ldr	r2, [pc, #124]	@ (800248c <HAL_DMA_Abort_IT+0x3f4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1e      	ldr	r2, [pc, #120]	@ (8002490 <HAL_DMA_Abort_IT+0x3f8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00e      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1c      	ldr	r2, [pc, #112]	@ (8002494 <HAL_DMA_Abort_IT+0x3fc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d009      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1b      	ldr	r2, [pc, #108]	@ (8002498 <HAL_DMA_Abort_IT+0x400>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_DMA_Abort_IT+0x3a2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a19      	ldr	r2, [pc, #100]	@ (800249c <HAL_DMA_Abort_IT+0x404>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d132      	bne.n	80024a0 <HAL_DMA_Abort_IT+0x408>
 800243a:	2301      	movs	r3, #1
 800243c:	e031      	b.n	80024a2 <HAL_DMA_Abort_IT+0x40a>
 800243e:	bf00      	nop
 8002440:	40020010 	.word	0x40020010
 8002444:	40020028 	.word	0x40020028
 8002448:	40020040 	.word	0x40020040
 800244c:	40020058 	.word	0x40020058
 8002450:	40020070 	.word	0x40020070
 8002454:	40020088 	.word	0x40020088
 8002458:	400200a0 	.word	0x400200a0
 800245c:	400200b8 	.word	0x400200b8
 8002460:	40020410 	.word	0x40020410
 8002464:	40020428 	.word	0x40020428
 8002468:	40020440 	.word	0x40020440
 800246c:	40020458 	.word	0x40020458
 8002470:	40020470 	.word	0x40020470
 8002474:	40020488 	.word	0x40020488
 8002478:	400204a0 	.word	0x400204a0
 800247c:	400204b8 	.word	0x400204b8
 8002480:	58025408 	.word	0x58025408
 8002484:	5802541c 	.word	0x5802541c
 8002488:	58025430 	.word	0x58025430
 800248c:	58025444 	.word	0x58025444
 8002490:	58025458 	.word	0x58025458
 8002494:	5802546c 	.word	0x5802546c
 8002498:	58025480 	.word	0x58025480
 800249c:	58025494 	.word	0x58025494
 80024a0:	2300      	movs	r3, #0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d028      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	2201      	movs	r2, #1
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00c      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop

08002524 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002532:	4b89      	ldr	r3, [pc, #548]	@ (8002758 <HAL_GPIO_Init+0x234>)
 8002534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002536:	e194      	b.n	8002862 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2101      	movs	r1, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa01 f303 	lsl.w	r3, r1, r3
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8186 	beq.w	800285c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d005      	beq.n	8002568 <HAL_GPIO_Init+0x44>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d130      	bne.n	80025ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800259e:	2201      	movs	r2, #1
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	f003 0201 	and.w	r2, r3, #1
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d017      	beq.n	8002606 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d123      	bne.n	800265a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	220f      	movs	r2, #15
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	69b9      	ldr	r1, [r7, #24]
 8002656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0203 	and.w	r2, r3, #3
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80e0 	beq.w	800285c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269c:	4b2f      	ldr	r3, [pc, #188]	@ (800275c <HAL_GPIO_Init+0x238>)
 800269e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026a2:	4a2e      	ldr	r2, [pc, #184]	@ (800275c <HAL_GPIO_Init+0x238>)
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026ac:	4b2b      	ldr	r3, [pc, #172]	@ (800275c <HAL_GPIO_Init+0x238>)
 80026ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ba:	4a29      	ldr	r2, [pc, #164]	@ (8002760 <HAL_GPIO_Init+0x23c>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a20      	ldr	r2, [pc, #128]	@ (8002764 <HAL_GPIO_Init+0x240>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d052      	beq.n	800278c <HAL_GPIO_Init+0x268>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002768 <HAL_GPIO_Init+0x244>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d031      	beq.n	8002752 <HAL_GPIO_Init+0x22e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a1e      	ldr	r2, [pc, #120]	@ (800276c <HAL_GPIO_Init+0x248>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02b      	beq.n	800274e <HAL_GPIO_Init+0x22a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002770 <HAL_GPIO_Init+0x24c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d025      	beq.n	800274a <HAL_GPIO_Init+0x226>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1c      	ldr	r2, [pc, #112]	@ (8002774 <HAL_GPIO_Init+0x250>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01f      	beq.n	8002746 <HAL_GPIO_Init+0x222>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a1b      	ldr	r2, [pc, #108]	@ (8002778 <HAL_GPIO_Init+0x254>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x21e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <HAL_GPIO_Init+0x258>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x21a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a19      	ldr	r2, [pc, #100]	@ (8002780 <HAL_GPIO_Init+0x25c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x216>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a18      	ldr	r2, [pc, #96]	@ (8002784 <HAL_GPIO_Init+0x260>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x212>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a17      	ldr	r2, [pc, #92]	@ (8002788 <HAL_GPIO_Init+0x264>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x20e>
 800272e:	2309      	movs	r3, #9
 8002730:	e02d      	b.n	800278e <HAL_GPIO_Init+0x26a>
 8002732:	230a      	movs	r3, #10
 8002734:	e02b      	b.n	800278e <HAL_GPIO_Init+0x26a>
 8002736:	2308      	movs	r3, #8
 8002738:	e029      	b.n	800278e <HAL_GPIO_Init+0x26a>
 800273a:	2307      	movs	r3, #7
 800273c:	e027      	b.n	800278e <HAL_GPIO_Init+0x26a>
 800273e:	2306      	movs	r3, #6
 8002740:	e025      	b.n	800278e <HAL_GPIO_Init+0x26a>
 8002742:	2305      	movs	r3, #5
 8002744:	e023      	b.n	800278e <HAL_GPIO_Init+0x26a>
 8002746:	2304      	movs	r3, #4
 8002748:	e021      	b.n	800278e <HAL_GPIO_Init+0x26a>
 800274a:	2303      	movs	r3, #3
 800274c:	e01f      	b.n	800278e <HAL_GPIO_Init+0x26a>
 800274e:	2302      	movs	r3, #2
 8002750:	e01d      	b.n	800278e <HAL_GPIO_Init+0x26a>
 8002752:	2301      	movs	r3, #1
 8002754:	e01b      	b.n	800278e <HAL_GPIO_Init+0x26a>
 8002756:	bf00      	nop
 8002758:	58000080 	.word	0x58000080
 800275c:	58024400 	.word	0x58024400
 8002760:	58000400 	.word	0x58000400
 8002764:	58020000 	.word	0x58020000
 8002768:	58020400 	.word	0x58020400
 800276c:	58020800 	.word	0x58020800
 8002770:	58020c00 	.word	0x58020c00
 8002774:	58021000 	.word	0x58021000
 8002778:	58021400 	.word	0x58021400
 800277c:	58021800 	.word	0x58021800
 8002780:	58021c00 	.word	0x58021c00
 8002784:	58022000 	.word	0x58022000
 8002788:	58022400 	.word	0x58022400
 800278c:	2300      	movs	r3, #0
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	f002 0203 	and.w	r2, r2, #3
 8002794:	0092      	lsls	r2, r2, #2
 8002796:	4093      	lsls	r3, r2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800279e:	4938      	ldr	r1, [pc, #224]	@ (8002880 <HAL_GPIO_Init+0x35c>)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002800:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	3301      	adds	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	f47f ae63 	bne.w	8002538 <HAL_GPIO_Init+0x14>
  }
}
 8002872:	bf00      	nop
 8002874:	bf00      	nop
 8002876:	3724      	adds	r7, #36	@ 0x24
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	58000400 	.word	0x58000400

08002884 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002892:	4b75      	ldr	r3, [pc, #468]	@ (8002a68 <HAL_GPIO_DeInit+0x1e4>)
 8002894:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8002896:	e0d9      	b.n	8002a4c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002898:	2201      	movs	r2, #1
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	4013      	ands	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80cc 	beq.w	8002a46 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80028ae:	4a6f      	ldr	r2, [pc, #444]	@ (8002a6c <HAL_GPIO_DeInit+0x1e8>)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	3302      	adds	r3, #2
 80028b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ba:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	220f      	movs	r2, #15
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a67      	ldr	r2, [pc, #412]	@ (8002a70 <HAL_GPIO_DeInit+0x1ec>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d037      	beq.n	8002948 <HAL_GPIO_DeInit+0xc4>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a66      	ldr	r2, [pc, #408]	@ (8002a74 <HAL_GPIO_DeInit+0x1f0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d031      	beq.n	8002944 <HAL_GPIO_DeInit+0xc0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a65      	ldr	r2, [pc, #404]	@ (8002a78 <HAL_GPIO_DeInit+0x1f4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d02b      	beq.n	8002940 <HAL_GPIO_DeInit+0xbc>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a64      	ldr	r2, [pc, #400]	@ (8002a7c <HAL_GPIO_DeInit+0x1f8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d025      	beq.n	800293c <HAL_GPIO_DeInit+0xb8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a63      	ldr	r2, [pc, #396]	@ (8002a80 <HAL_GPIO_DeInit+0x1fc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d01f      	beq.n	8002938 <HAL_GPIO_DeInit+0xb4>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a62      	ldr	r2, [pc, #392]	@ (8002a84 <HAL_GPIO_DeInit+0x200>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d019      	beq.n	8002934 <HAL_GPIO_DeInit+0xb0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a61      	ldr	r2, [pc, #388]	@ (8002a88 <HAL_GPIO_DeInit+0x204>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d013      	beq.n	8002930 <HAL_GPIO_DeInit+0xac>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a60      	ldr	r2, [pc, #384]	@ (8002a8c <HAL_GPIO_DeInit+0x208>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00d      	beq.n	800292c <HAL_GPIO_DeInit+0xa8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a5f      	ldr	r2, [pc, #380]	@ (8002a90 <HAL_GPIO_DeInit+0x20c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <HAL_GPIO_DeInit+0xa4>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a5e      	ldr	r2, [pc, #376]	@ (8002a94 <HAL_GPIO_DeInit+0x210>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_GPIO_DeInit+0xa0>
 8002920:	2309      	movs	r3, #9
 8002922:	e012      	b.n	800294a <HAL_GPIO_DeInit+0xc6>
 8002924:	230a      	movs	r3, #10
 8002926:	e010      	b.n	800294a <HAL_GPIO_DeInit+0xc6>
 8002928:	2308      	movs	r3, #8
 800292a:	e00e      	b.n	800294a <HAL_GPIO_DeInit+0xc6>
 800292c:	2307      	movs	r3, #7
 800292e:	e00c      	b.n	800294a <HAL_GPIO_DeInit+0xc6>
 8002930:	2306      	movs	r3, #6
 8002932:	e00a      	b.n	800294a <HAL_GPIO_DeInit+0xc6>
 8002934:	2305      	movs	r3, #5
 8002936:	e008      	b.n	800294a <HAL_GPIO_DeInit+0xc6>
 8002938:	2304      	movs	r3, #4
 800293a:	e006      	b.n	800294a <HAL_GPIO_DeInit+0xc6>
 800293c:	2303      	movs	r3, #3
 800293e:	e004      	b.n	800294a <HAL_GPIO_DeInit+0xc6>
 8002940:	2302      	movs	r3, #2
 8002942:	e002      	b.n	800294a <HAL_GPIO_DeInit+0xc6>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_GPIO_DeInit+0xc6>
 8002948:	2300      	movs	r3, #0
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	f002 0203 	and.w	r2, r2, #3
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	4093      	lsls	r3, r2
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	d136      	bne.n	80029c8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	43db      	mvns	r3, r3
 8002962:	401a      	ands	r2, r3
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	43db      	mvns	r3, r3
 8002970:	401a      	ands	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	43db      	mvns	r3, r3
 8002980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002984:	4013      	ands	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	43db      	mvns	r3, r3
 8002992:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002996:	4013      	ands	r3, r2
 8002998:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	220f      	movs	r2, #15
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80029aa:	4a30      	ldr	r2, [pc, #192]	@ (8002a6c <HAL_GPIO_DeInit+0x1e8>)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	43da      	mvns	r2, r3
 80029ba:	482c      	ldr	r0, [pc, #176]	@ (8002a6c <HAL_GPIO_DeInit+0x1e8>)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	400a      	ands	r2, r1
 80029c2:	3302      	adds	r3, #2
 80029c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	2103      	movs	r1, #3
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	08da      	lsrs	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3208      	adds	r2, #8
 80029e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	08d2      	lsrs	r2, r2, #3
 80029fc:	4019      	ands	r1, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3208      	adds	r2, #8
 8002a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2103      	movs	r1, #3
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	401a      	ands	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	2101      	movs	r1, #1
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	2103      	movs	r1, #3
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	401a      	ands	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f47f af1f 	bne.w	8002898 <HAL_GPIO_DeInit+0x14>
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	58000080 	.word	0x58000080
 8002a6c:	58000400 	.word	0x58000400
 8002a70:	58020000 	.word	0x58020000
 8002a74:	58020400 	.word	0x58020400
 8002a78:	58020800 	.word	0x58020800
 8002a7c:	58020c00 	.word	0x58020c00
 8002a80:	58021000 	.word	0x58021000
 8002a84:	58021400 	.word	0x58021400
 8002a88:	58021800 	.word	0x58021800
 8002a8c:	58021c00 	.word	0x58021c00
 8002a90:	58022000 	.word	0x58022000
 8002a94:	58022400 	.word	0x58022400

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ab4:	e003      	b.n	8002abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	619a      	str	r2, [r3, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e017      	b.n	8002b0c <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d004      	beq.n	8002af2 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2280      	movs	r2, #128	@ 0x80
 8002aec:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00c      	b.n	8002b0c <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2204      	movs	r2, #4
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0201 	bic.w	r2, r2, #1
 8002b08:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b08d      	sub	sp, #52	@ 0x34
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f007 fdf7 	bl	800a722 <USB_GetMode>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 84b9 	bne.w	80034ae <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f007 fd5b 	bl	800a5fc <USB_ReadInterrupts>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 84af 	beq.w	80034ac <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f007 fd48 	bl	800a5fc <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d107      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f002 0202 	and.w	r2, r2, #2
 8002b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f007 fd36 	bl	800a5fc <USB_ReadInterrupts>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d161      	bne.n	8002c5e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699a      	ldr	r2, [r3, #24]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0210 	bic.w	r2, r2, #16
 8002ba8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f003 020f 	and.w	r2, r3, #15
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002bd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bd4:	d124      	bne.n	8002c20 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d035      	beq.n	8002c4e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6a38      	ldr	r0, [r7, #32]
 8002bf6:	f007 fbaf 	bl	800a358 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c06:	441a      	add	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c18:	441a      	add	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	615a      	str	r2, [r3, #20]
 8002c1e:	e016      	b.n	8002c4e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002c26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c2a:	d110      	bne.n	8002c4e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c32:	2208      	movs	r2, #8
 8002c34:	4619      	mov	r1, r3
 8002c36:	6a38      	ldr	r0, [r7, #32]
 8002c38:	f007 fb8e 	bl	800a358 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c48:	441a      	add	r2, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0210 	orr.w	r2, r2, #16
 8002c5c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f007 fcca 	bl	800a5fc <USB_ReadInterrupts>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c6e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c72:	f040 80a7 	bne.w	8002dc4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f007 fccf 	bl	800a622 <USB_ReadDevAllOutEpInterrupt>
 8002c84:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002c86:	e099      	b.n	8002dbc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 808e 	beq.w	8002db0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f007 fcf3 	bl	800a68a <USB_ReadDevOutEPInterrupt>
 8002ca4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00c      	beq.n	8002cca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fe6f 	bl	80039a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00c      	beq.n	8002cee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2308      	movs	r3, #8
 8002ce4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ce6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 ff45 	bl	8003b78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d04:	461a      	mov	r2, r3
 8002d06:	2310      	movs	r3, #16
 8002d08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d030      	beq.n	8002d76 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1c:	2b80      	cmp	r3, #128	@ 0x80
 8002d1e:	d109      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d32:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	3304      	adds	r3, #4
 8002d48:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	78db      	ldrb	r3, [r3, #3]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d108      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2200      	movs	r2, #0
 8002d56:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f008 fffe 	bl	800bd60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d70:	461a      	mov	r2, r3
 8002d72:	2302      	movs	r3, #2
 8002d74:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2320      	movs	r3, #32
 8002d90:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da8:	461a      	mov	r2, r3
 8002daa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	3301      	adds	r3, #1
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f47f af62 	bne.w	8002c88 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f007 fc17 	bl	800a5fc <USB_ReadInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002dd8:	f040 80db 	bne.w	8002f92 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f007 fc38 	bl	800a656 <USB_ReadDevAllInEpInterrupt>
 8002de6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002dec:	e0cd      	b.n	8002f8a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80c2 	beq.w	8002f7e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f007 fc5e 	bl	800a6c6 <USB_ReadDevInEPInterrupt>
 8002e0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d057      	beq.n	8002ec6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69f9      	ldr	r1, [r7, #28]
 8002e32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e36:	4013      	ands	r3, r2
 8002e38:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e46:	461a      	mov	r2, r3
 8002e48:	2301      	movs	r3, #1
 8002e4a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	799b      	ldrb	r3, [r3, #6]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d132      	bne.n	8002eba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	3320      	adds	r3, #32
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4403      	add	r3, r0
 8002e74:	331c      	adds	r3, #28
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4419      	add	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4403      	add	r3, r0
 8002e88:	3320      	adds	r3, #32
 8002e8a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d113      	bne.n	8002eba <HAL_PCD_IRQHandler+0x3a2>
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3324      	adds	r3, #36	@ 0x24
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d108      	bne.n	8002eba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	f007 fc67 	bl	800a788 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f008 fec9 	bl	800bc58 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002edc:	461a      	mov	r2, r3
 8002ede:	2308      	movs	r3, #8
 8002ee0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2310      	movs	r3, #16
 8002efc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f14:	461a      	mov	r2, r3
 8002f16:	2340      	movs	r3, #64	@ 0x40
 8002f18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d023      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f26:	6a38      	ldr	r0, [r7, #32]
 8002f28:	f006 fdaa 	bl	8009a80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	3310      	adds	r3, #16
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	78db      	ldrb	r3, [r3, #3]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d108      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	4619      	mov	r1, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f008 ff15 	bl	800bd84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f66:	461a      	mov	r2, r3
 8002f68:	2302      	movs	r3, #2
 8002f6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fc88 	bl	800388e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	3301      	adds	r3, #1
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f47f af2e 	bne.w	8002dee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f007 fb30 	bl	800a5fc <USB_ReadInterrupts>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fa6:	d122      	bne.n	8002fee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d108      	bne.n	8002fd8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fce:	2100      	movs	r1, #0
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fe17 	bl	8003c04 <HAL_PCDEx_LPM_Callback>
 8002fd6:	e002      	b.n	8002fde <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f008 feb3 	bl	800bd44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002fec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f007 fb02 	bl	800a5fc <USB_ReadInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ffe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003002:	d112      	bne.n	800302a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f008 fe6f 	bl	800bcf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003028:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f007 fae4 	bl	800a5fc <USB_ReadInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800303a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800303e:	d121      	bne.n	8003084 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800304e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003056:	2b00      	cmp	r3, #0
 8003058:	d111      	bne.n	800307e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	f003 020f 	and.w	r2, r3, #15
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003074:	2101      	movs	r1, #1
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fdc4 	bl	8003c04 <HAL_PCDEx_LPM_Callback>
 800307c:	e002      	b.n	8003084 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f008 fe3a 	bl	800bcf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f007 fab7 	bl	800a5fc <USB_ReadInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003098:	f040 80b7 	bne.w	800320a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2110      	movs	r1, #16
 80030b6:	4618      	mov	r0, r3
 80030b8:	f006 fce2 	bl	8009a80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030bc:	2300      	movs	r3, #0
 80030be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030c0:	e046      	b.n	8003150 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030ce:	461a      	mov	r2, r3
 80030d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030e6:	0151      	lsls	r1, r2, #5
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	440a      	add	r2, r1
 80030ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80030f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003102:	461a      	mov	r2, r3
 8003104:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003108:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800310a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800311a:	0151      	lsls	r1, r2, #5
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	440a      	add	r2, r1
 8003120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003124:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003128:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800312a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800313a:	0151      	lsls	r1, r2, #5
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	440a      	add	r2, r1
 8003140:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003144:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003148:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314c:	3301      	adds	r3, #1
 800314e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	791b      	ldrb	r3, [r3, #4]
 8003154:	461a      	mov	r2, r3
 8003156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003158:	4293      	cmp	r3, r2
 800315a:	d3b2      	bcc.n	80030c2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800316a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800316e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	7bdb      	ldrb	r3, [r3, #15]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d016      	beq.n	80031a6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800317e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003188:	f043 030b 	orr.w	r3, r3, #11
 800318c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800319e:	f043 030b 	orr.w	r3, r3, #11
 80031a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80031a4:	e015      	b.n	80031d2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b4:	4619      	mov	r1, r3
 80031b6:	f242 032b 	movw	r3, #8235	@ 0x202b
 80031ba:	4313      	orrs	r3, r2
 80031bc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031cc:	f043 030b 	orr.w	r3, r3, #11
 80031d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031e0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80031e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031f4:	461a      	mov	r2, r3
 80031f6:	f007 fac7 	bl	800a788 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f007 f9f4 	bl	800a5fc <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800321a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321e:	d123      	bne.n	8003268 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f007 fa8b 	bl	800a740 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f006 fc58 	bl	8009ae4 <USB_GetDevSpeed>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681c      	ldr	r4, [r3, #0]
 8003240:	f002 fcec 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8003244:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800324a:	461a      	mov	r2, r3
 800324c:	4620      	mov	r0, r4
 800324e:	f006 fb75 	bl	800993c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f008 fd28 	bl	800bca8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003266:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f007 f9c5 	bl	800a5fc <USB_ReadInterrupts>
 8003272:	4603      	mov	r3, r0
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b08      	cmp	r3, #8
 800327a:	d10a      	bne.n	8003292 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f008 fd05 	bl	800bc8c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695a      	ldr	r2, [r3, #20]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f002 0208 	and.w	r2, r2, #8
 8003290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f007 f9b0 	bl	800a5fc <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a2:	2b80      	cmp	r3, #128	@ 0x80
 80032a4:	d123      	bne.n	80032ee <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032b2:	2301      	movs	r3, #1
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b6:	e014      	b.n	80032e2 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 faa8 	bl	800382c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	3301      	adds	r3, #1
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	791b      	ldrb	r3, [r3, #4]
 80032e6:	461a      	mov	r2, r3
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d3e4      	bcc.n	80032b8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f007 f982 	bl	800a5fc <USB_ReadInterrupts>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003302:	d13c      	bne.n	800337e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003304:	2301      	movs	r3, #1
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
 8003308:	e02b      	b.n	8003362 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	3318      	adds	r3, #24
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d115      	bne.n	800335c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003330:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003332:	2b00      	cmp	r3, #0
 8003334:	da12      	bge.n	800335c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	3317      	adds	r3, #23
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003352:	b2db      	uxtb	r3, r3
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fa68 	bl	800382c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	3301      	adds	r3, #1
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	791b      	ldrb	r3, [r3, #4]
 8003366:	461a      	mov	r2, r3
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	4293      	cmp	r3, r2
 800336c:	d3cd      	bcc.n	800330a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800337c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f007 f93a 	bl	800a5fc <USB_ReadInterrupts>
 8003388:	4603      	mov	r3, r0
 800338a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800338e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003392:	d156      	bne.n	8003442 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003394:	2301      	movs	r3, #1
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
 8003398:	e045      	b.n	8003426 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d12e      	bne.n	8003420 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	da2b      	bge.n	8003420 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	0c1a      	lsrs	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80033d2:	4053      	eors	r3, r2
 80033d4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d121      	bne.n	8003420 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003418:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800341c:	6053      	str	r3, [r2, #4]
            break;
 800341e:	e008      	b.n	8003432 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	3301      	adds	r3, #1
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	791b      	ldrb	r3, [r3, #4]
 800342a:	461a      	mov	r2, r3
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	4293      	cmp	r3, r2
 8003430:	d3b3      	bcc.n	800339a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003440:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f007 f8d8 	bl	800a5fc <USB_ReadInterrupts>
 800344c:	4603      	mov	r3, r0
 800344e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003456:	d10a      	bne.n	800346e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f008 fca5 	bl	800bda8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800346c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f007 f8c2 	bl	800a5fc <USB_ReadInterrupts>
 8003478:	4603      	mov	r3, r0
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b04      	cmp	r3, #4
 8003480:	d115      	bne.n	80034ae <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f008 fc95 	bl	800bdc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	e000      	b.n	80034ae <HAL_PCD_IRQHandler+0x996>
      return;
 80034ac:	bf00      	nop
    }
  }
}
 80034ae:	3734      	adds	r7, #52	@ 0x34
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd90      	pop	{r4, r7, pc}

080034b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_PCD_SetAddress+0x1a>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e012      	b.n	80034f4 <HAL_PCD_SetAddress+0x40>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f007 f863 	bl	800a5b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	4608      	mov	r0, r1
 8003506:	4611      	mov	r1, r2
 8003508:	461a      	mov	r2, r3
 800350a:	4603      	mov	r3, r0
 800350c:	70fb      	strb	r3, [r7, #3]
 800350e:	460b      	mov	r3, r1
 8003510:	803b      	strh	r3, [r7, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800351a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800351e:	2b00      	cmp	r3, #0
 8003520:	da0f      	bge.n	8003542 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	f003 020f 	and.w	r2, r3, #15
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	3310      	adds	r3, #16
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	3304      	adds	r3, #4
 8003538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	705a      	strb	r2, [r3, #1]
 8003540:	e00f      	b.n	8003562 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	3304      	adds	r3, #4
 800355a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800356e:	883b      	ldrh	r3, [r7, #0]
 8003570:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	78ba      	ldrb	r2, [r7, #2]
 800357c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	785b      	ldrb	r3, [r3, #1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d004      	beq.n	8003590 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003590:	78bb      	ldrb	r3, [r7, #2]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d102      	bne.n	800359c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_PCD_EP_Open+0xae>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e00e      	b.n	80035c8 <HAL_PCD_EP_Open+0xcc>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68f9      	ldr	r1, [r7, #12]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f006 fab9 	bl	8009b30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80035c6:	7afb      	ldrb	r3, [r7, #11]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	460b      	mov	r3, r1
 80035de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e0:	7afb      	ldrb	r3, [r7, #11]
 80035e2:	f003 020f 	and.w	r2, r3, #15
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4413      	add	r3, r2
 80035f6:	3304      	adds	r3, #4
 80035f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2200      	movs	r2, #0
 8003610:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003612:	7afb      	ldrb	r3, [r7, #11]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	b2da      	uxtb	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	799b      	ldrb	r3, [r3, #6]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d102      	bne.n	800362c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	799b      	ldrb	r3, [r3, #6]
 8003634:	461a      	mov	r2, r3
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	f006 fb02 	bl	8009c40 <USB_EPStartXfer>

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	460b      	mov	r3, r1
 8003654:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	f003 020f 	and.w	r2, r3, #15
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	3310      	adds	r3, #16
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	3304      	adds	r3, #4
 800366c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2200      	movs	r2, #0
 800367e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2201      	movs	r2, #1
 8003684:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003686:	7afb      	ldrb	r3, [r7, #11]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	b2da      	uxtb	r2, r3
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	799b      	ldrb	r3, [r3, #6]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d102      	bne.n	80036a0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	799b      	ldrb	r3, [r3, #6]
 80036a8:	461a      	mov	r2, r3
 80036aa:	6979      	ldr	r1, [r7, #20]
 80036ac:	f006 fac8 	bl	8009c40 <USB_EPStartXfer>

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	7912      	ldrb	r2, [r2, #4]
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e04f      	b.n	8003778 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	da0f      	bge.n	8003700 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	f003 020f 	and.w	r2, r3, #15
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	3310      	adds	r3, #16
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	4413      	add	r3, r2
 80036f4:	3304      	adds	r3, #4
 80036f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	705a      	strb	r2, [r3, #1]
 80036fe:	e00d      	b.n	800371c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	3304      	adds	r3, #4
 8003714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	b2da      	uxtb	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_PCD_EP_SetStall+0x82>
 8003738:	2302      	movs	r3, #2
 800373a:	e01d      	b.n	8003778 <HAL_PCD_EP_SetStall+0xbe>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68f9      	ldr	r1, [r7, #12]
 800374a:	4618      	mov	r0, r3
 800374c:	f006 fe5c 	bl	800a408 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7999      	ldrb	r1, [r3, #6]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003768:	461a      	mov	r2, r3
 800376a:	f007 f80d 	bl	800a788 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	7912      	ldrb	r2, [r2, #4]
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e042      	b.n	8003824 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800379e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	da0f      	bge.n	80037c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	f003 020f 	and.w	r2, r3, #15
 80037ac:	4613      	mov	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	3310      	adds	r3, #16
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	3304      	adds	r3, #4
 80037bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	705a      	strb	r2, [r3, #1]
 80037c4:	e00f      	b.n	80037e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	f003 020f 	and.w	r2, r3, #15
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	4413      	add	r3, r2
 80037dc:	3304      	adds	r3, #4
 80037de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_PCD_EP_ClrStall+0x86>
 8003802:	2302      	movs	r3, #2
 8003804:	e00e      	b.n	8003824 <HAL_PCD_EP_ClrStall+0xa4>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68f9      	ldr	r1, [r7, #12]
 8003814:	4618      	mov	r0, r3
 8003816:	f006 fe65 	bl	800a4e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800383c:	2b00      	cmp	r3, #0
 800383e:	da0c      	bge.n	800385a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	f003 020f 	and.w	r2, r3, #15
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	3310      	adds	r3, #16
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4413      	add	r3, r2
 8003854:	3304      	adds	r3, #4
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e00c      	b.n	8003874 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	f003 020f 	and.w	r2, r3, #15
 8003860:	4613      	mov	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	4413      	add	r3, r2
 8003870:	3304      	adds	r3, #4
 8003872:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68f9      	ldr	r1, [r7, #12]
 800387a:	4618      	mov	r0, r3
 800387c:	f006 fc84 	bl	800a188 <USB_EPStopXfer>
 8003880:	4603      	mov	r3, r0
 8003882:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003884:	7afb      	ldrb	r3, [r7, #11]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b08a      	sub	sp, #40	@ 0x28
 8003892:	af02      	add	r7, sp, #8
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	3310      	adds	r3, #16
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	3304      	adds	r3, #4
 80038b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d901      	bls.n	80038c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06b      	b.n	800399e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d902      	bls.n	80038e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3303      	adds	r3, #3
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038ea:	e02a      	b.n	8003942 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d902      	bls.n	8003908 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	3303      	adds	r3, #3
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	68d9      	ldr	r1, [r3, #12]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	4603      	mov	r3, r0
 8003924:	6978      	ldr	r0, [r7, #20]
 8003926:	f006 fcd9 	bl	800a2dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	441a      	add	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	441a      	add	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	429a      	cmp	r2, r3
 8003956:	d809      	bhi.n	800396c <PCD_WriteEmptyTxFifo+0xde>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003960:	429a      	cmp	r2, r3
 8003962:	d203      	bcs.n	800396c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1bf      	bne.n	80038ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	429a      	cmp	r2, r3
 8003976:	d811      	bhi.n	800399c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	2201      	movs	r2, #1
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800398c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	43db      	mvns	r3, r3
 8003992:	6939      	ldr	r1, [r7, #16]
 8003994:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003998:	4013      	ands	r3, r2
 800399a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	333c      	adds	r3, #60	@ 0x3c
 80039c0:	3304      	adds	r3, #4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	799b      	ldrb	r3, [r3, #6]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d17b      	bne.n	8003ad6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d015      	beq.n	8003a14 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4a61      	ldr	r2, [pc, #388]	@ (8003b70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	f240 80b9 	bls.w	8003b64 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80b3 	beq.w	8003b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a10:	6093      	str	r3, [r2, #8]
 8003a12:	e0a7      	b.n	8003b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	6093      	str	r3, [r2, #8]
 8003a30:	e098      	b.n	8003b64 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f040 8093 	bne.w	8003b64 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	4a4b      	ldr	r2, [pc, #300]	@ (8003b70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d90f      	bls.n	8003a66 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a62:	6093      	str	r3, [r2, #8]
 8003a64:	e07e      	b.n	8003b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	3304      	adds	r3, #4
 8003a7a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a1a      	ldr	r2, [r3, #32]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	0159      	lsls	r1, r3, #5
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	440b      	add	r3, r1
 8003a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a92:	1ad2      	subs	r2, r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d114      	bne.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	f006 fe68 	bl	800a788 <USB_EP0_OutStart>
 8003ab8:	e006      	b.n	8003ac8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	441a      	add	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f008 f8a7 	bl	800bc22 <HAL_PCD_DataOutStageCallback>
 8003ad4:	e046      	b.n	8003b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	4a26      	ldr	r2, [pc, #152]	@ (8003b74 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d124      	bne.n	8003b28 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af4:	461a      	mov	r2, r3
 8003af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003afa:	6093      	str	r3, [r2, #8]
 8003afc:	e032      	b.n	8003b64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b14:	461a      	mov	r2, r3
 8003b16:	2320      	movs	r3, #32
 8003b18:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f008 f87e 	bl	800bc22 <HAL_PCD_DataOutStageCallback>
 8003b26:	e01d      	b.n	8003b64 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d114      	bne.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d108      	bne.n	8003b58 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b50:	461a      	mov	r2, r3
 8003b52:	2100      	movs	r1, #0
 8003b54:	f006 fe18 	bl	800a788 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f008 f85f 	bl	800bc22 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	4f54300a 	.word	0x4f54300a
 8003b74:	4f54310a 	.word	0x4f54310a

08003b78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	333c      	adds	r3, #60	@ 0x3c
 8003b90:	3304      	adds	r3, #4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4a15      	ldr	r2, [pc, #84]	@ (8003c00 <PCD_EP_OutSetupPacket_int+0x88>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d90e      	bls.n	8003bcc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f008 f816 	bl	800bbfe <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003c00 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d90c      	bls.n	8003bf4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	799b      	ldrb	r3, [r3, #6]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d108      	bne.n	8003bf4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bec:	461a      	mov	r2, r3
 8003bee:	2101      	movs	r1, #1
 8003bf0:	f006 fdca 	bl	800a788 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	4f54300a 	.word	0x4f54300a

08003c04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003c24:	4b19      	ldr	r3, [pc, #100]	@ (8003c8c <HAL_PWREx_ConfigSupply+0x70>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d00a      	beq.n	8003c46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c30:	4b16      	ldr	r3, [pc, #88]	@ (8003c8c <HAL_PWREx_ConfigSupply+0x70>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d001      	beq.n	8003c42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e01f      	b.n	8003c82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e01d      	b.n	8003c82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c46:	4b11      	ldr	r3, [pc, #68]	@ (8003c8c <HAL_PWREx_ConfigSupply+0x70>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f023 0207 	bic.w	r2, r3, #7
 8003c4e:	490f      	ldr	r1, [pc, #60]	@ (8003c8c <HAL_PWREx_ConfigSupply+0x70>)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c56:	f7fd fd0b 	bl	8001670 <HAL_GetTick>
 8003c5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c5c:	e009      	b.n	8003c72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c5e:	f7fd fd07 	bl	8001670 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c6c:	d901      	bls.n	8003c72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e007      	b.n	8003c82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <HAL_PWREx_ConfigSupply+0x70>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c7e:	d1ee      	bne.n	8003c5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	58024800 	.word	0x58024800

08003c90 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c98:	f7fd fcea 	bl	8001670 <HAL_GetTick>
 8003c9c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e05f      	b.n	8003d68 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7fd f97d 	bl	8000fb4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003cba:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fe12 	bl	80048e8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	021a      	lsls	r2, r3, #8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2120      	movs	r1, #32
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fe3d 	bl	800496a <QSPI_WaitFlagStateUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003cf4:	7afb      	ldrb	r3, [r7, #11]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d135      	bne.n	8003d66 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b1b      	ldr	r3, [pc, #108]	@ (8003d70 <HAL_QSPI_Init+0xe0>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6852      	ldr	r2, [r2, #4]
 8003d08:	0611      	lsls	r1, r2, #24
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68d2      	ldr	r2, [r2, #12]
 8003d0e:	4311      	orrs	r1, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	69d2      	ldr	r2, [r2, #28]
 8003d14:	4311      	orrs	r1, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6a12      	ldr	r2, [r2, #32]
 8003d1a:	4311      	orrs	r1, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	4b12      	ldr	r3, [pc, #72]	@ (8003d74 <HAL_QSPI_Init+0xe4>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6912      	ldr	r2, [r2, #16]
 8003d32:	0411      	lsls	r1, r2, #16
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6952      	ldr	r2, [r2, #20]
 8003d38:	4311      	orrs	r1, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6992      	ldr	r2, [r2, #24]
 8003d3e:	4311      	orrs	r1, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003d66:	7afb      	ldrb	r3, [r7, #11]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	00ffff2f 	.word	0x00ffff2f
 8003d74:	ffe0f8fe 	.word	0xffe0f8fe

08003d78 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e012      	b.n	8003db0 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fd f9dc 	bl	8001158 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d064      	beq.n	8003ea4 <HAL_QSPI_IRQHandler+0xec>
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05f      	beq.n	8003ea4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3320      	adds	r3, #32
 8003dea:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b12      	cmp	r3, #18
 8003df6:	d125      	bne.n	8003e44 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8003df8:	e01c      	b.n	8003e34 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00f      	beq.n	8003e22 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	781a      	ldrb	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	625a      	str	r2, [r3, #36]	@ 0x24
          hqspi->TxXferCount--;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1a:	1e5a      	subs	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003e20:	e008      	b.n	8003e34 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e30:	601a      	str	r2, [r3, #0]
          break;
 8003e32:	e033      	b.n	8003e9c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1db      	bne.n	8003dfa <HAL_QSPI_IRQHandler+0x42>
 8003e42:	e02b      	b.n	8003e9c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b22      	cmp	r3, #34	@ 0x22
 8003e4e:	d125      	bne.n	8003e9c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8003e50:	e01d      	b.n	8003e8e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d010      	beq.n	8003e7c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hqspi->RxXferCount--;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e74:	1e5a      	subs	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e7a:	e008      	b.n	8003e8e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e8a:	601a      	str	r2, [r3, #0]
          break;
 8003e8c:	e006      	b.n	8003e9c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1da      	bne.n	8003e52 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fd0f 	bl	80048c0 <HAL_QSPI_FifoThresholdCallback>
 8003ea2:	e13c      	b.n	800411e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 80b0 	beq.w	8004010 <HAL_QSPI_IRQHandler+0x258>
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80aa 	beq.w	8004010 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8003ed2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b12      	cmp	r3, #18
 8003ede:	d120      	bne.n	8003f22 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d011      	beq.n	8003f12 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0204 	bic.w	r2, r2, #4
 8003efc:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fc fd96 	bl	8000a4c <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8003f20:	e0fa      	b.n	8004118 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b22      	cmp	r3, #34	@ 0x22
 8003f2c:	d143      	bne.n	8003fb6 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d012      	beq.n	8003f62 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0204 	bic.w	r2, r2, #4
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0201 	bic.w	r2, r2, #1
 8003f5e:	60da      	str	r2, [r3, #12]
 8003f60:	e021      	b.n	8003fa6 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3320      	adds	r3, #32
 8003f68:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8003f6a:	e013      	b.n	8003f94 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d017      	beq.n	8003fa4 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	7812      	ldrb	r2, [r2, #0]
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	631a      	str	r2, [r3, #48]	@ 0x30
            hqspi->RxXferCount--;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	1e5a      	subs	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	639a      	str	r2, [r3, #56]	@ 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e4      	bne.n	8003f6c <HAL_QSPI_IRQHandler+0x1b4>
 8003fa2:	e000      	b.n	8003fa6 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8003fa4:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fc fd38 	bl	8000a24 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8003fb4:	e0b0      	b.n	8004118 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d107      	bne.n	8003fd2 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fc fd16 	bl	80009fc <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8003fd0:	e0a2      	b.n	8004118 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	f040 809c 	bne.w	8004118 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003fee:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fc53 	bl	80048ac <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004006:	e087      	b.n	8004118 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fc45 	bl	8004898 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800400e:	e083      	b.n	8004118 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01f      	beq.n	800405a <HAL_QSPI_IRQHandler+0x2a2>
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01a      	beq.n	800405a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2208      	movs	r2, #8
 800402a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8004048:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fc fd0e 	bl	8000a74 <HAL_QSPI_StatusMatchCallback>
 8004058:	e061      	b.n	800411e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d047      	beq.n	80040f4 <HAL_QSPI_IRQHandler+0x33c>
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d042      	beq.n	80040f4 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2201      	movs	r2, #1
 8004074:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004084:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	f043 0202 	orr.w	r2, r3, #2
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d021      	beq.n	80040e4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0204 	bic.w	r2, r2, #4
 80040ae:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004128 <HAL_QSPI_IRQHandler+0x370>)
 80040b6:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fe fd04 	bl	8002aca <HAL_MDMA_Abort_IT>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d029      	beq.n	800411c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040cc:	f043 0204 	orr.w	r2, r3, #4
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fbdb 	bl	8004898 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80040e2:	e01b      	b.n	800411c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fbd3 	bl	8004898 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80040f2:	e013      	b.n	800411c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00f      	beq.n	800411e <HAL_QSPI_IRQHandler+0x366>
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2210      	movs	r2, #16
 800410e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fbdf 	bl	80048d4 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8004116:	e002      	b.n	800411e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004118:	bf00      	nop
 800411a:	e000      	b.n	800411e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800411c:	bf00      	nop
}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	08004905 	.word	0x08004905

0800412c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004138:	f7fd fa9a 	bl	8001670 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_QSPI_Command+0x22>
 800414a:	2302      	movs	r3, #2
 800414c:	e048      	b.n	80041e0 <HAL_QSPI_Command+0xb4>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d137      	bne.n	80041d2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2200      	movs	r2, #0
 8004178:	2120      	movs	r1, #32
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fbf5 	bl	800496a <QSPI_WaitFlagStateUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004184:	7dfb      	ldrb	r3, [r7, #23]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d125      	bne.n	80041d6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800418a:	2200      	movs	r2, #0
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fc22 	bl	80049d8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	d115      	bne.n	80041c8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2201      	movs	r2, #1
 80041a4:	2102      	movs	r1, #2
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fbdf 	bl	800496a <QSPI_WaitFlagStateUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2202      	movs	r2, #2
 80041bc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041c6:	e006      	b.n	80041d6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041d0:	e001      	b.n	80041d6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80041d2:	2302      	movs	r3, #2
 80041d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_QSPI_Command_IT>:
  * @param cmd structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80041f2:	f7fd fa3d 	bl	8001670 <HAL_GetTick>
 80041f6:	60b8      	str	r0, [r7, #8]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_QSPI_Command_IT+0x20>
 8004204:	2302      	movs	r3, #2
 8004206:	e051      	b.n	80042ac <HAL_QSPI_Command_IT+0xc4>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d140      	bne.n	800429e <HAL_QSPI_Command_IT+0xb6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2200      	movs	r2, #0
 8004234:	2120      	movs	r1, #32
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fb97 	bl	800496a <QSPI_WaitFlagStateUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d126      	bne.n	8004294 <HAL_QSPI_Command_IT+0xac>
    {
      if (cmd->DataMode == QSPI_DATA_NONE)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	2b00      	cmp	r3, #0
 800424c:	d103      	bne.n	8004256 <HAL_QSPI_Command_IT+0x6e>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2203      	movs	r2, #3
 8004254:	60da      	str	r2, [r3, #12]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004256:	2200      	movs	r2, #0
 8004258:	6839      	ldr	r1, [r7, #0]
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fbbc 	bl	80049d8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10c      	bne.n	8004282 <HAL_QSPI_Command_IT+0x9a>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so activate TC and TE interrupts */
        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Enable the QSPI Transfer Error Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e013      	b.n	80042aa <HAL_QSPI_Command_IT+0xc2>
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004292:	e00a      	b.n	80042aa <HAL_QSPI_Command_IT+0xc2>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800429c:	e005      	b.n	80042aa <HAL_QSPI_Command_IT+0xc2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800429e:	2302      	movs	r3, #2
 80042a0:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  /* Return function status */
  return status;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	@ 0x28
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80042c4:	f7fd f9d4 	bl	8001670 <HAL_GetTick>
 80042c8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3320      	adds	r3, #32
 80042d0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_QSPI_Transmit+0x2e>
 80042de:	2302      	movs	r3, #2
 80042e0:	e076      	b.n	80043d0 <HAL_QSPI_Transmit+0x11c>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d165      	bne.n	80043c2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d056      	beq.n	80043b0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2212      	movs	r2, #18
 8004306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004336:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004338:	e01b      	b.n	8004372 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2201      	movs	r2, #1
 8004342:	2104      	movs	r1, #4
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fb10 	bl	800496a <QSPI_WaitFlagStateUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800434e:	7ffb      	ldrb	r3, [r7, #31]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d113      	bne.n	800437c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436c:	1e5a      	subs	r2, r3, #1
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1df      	bne.n	800433a <HAL_QSPI_Transmit+0x86>
 800437a:	e000      	b.n	800437e <HAL_QSPI_Transmit+0xca>
          break;
 800437c:	bf00      	nop
      }

      if (status == HAL_OK)
 800437e:	7ffb      	ldrb	r3, [r7, #31]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d110      	bne.n	80043a6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2201      	movs	r2, #1
 800438c:	2102      	movs	r1, #2
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 faeb 	bl	800496a <QSPI_WaitFlagStateUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004398:	7ffb      	ldrb	r3, [r7, #31]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d103      	bne.n	80043a6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2202      	movs	r2, #2
 80043a4:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043ae:	e00a      	b.n	80043c6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b4:	f043 0208 	orr.w	r2, r3, #8
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e001      	b.n	80043c6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
 80043c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 80043ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	@ 0x28
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80043e8:	f7fd f942 	bl	8001670 <HAL_GetTick>
 80043ec:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3320      	adds	r3, #32
 80043fc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_QSPI_Receive+0x36>
 800440a:	2302      	movs	r3, #2
 800440c:	e07d      	b.n	800450a <HAL_QSPI_Receive+0x132>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b01      	cmp	r3, #1
 8004420:	d16c      	bne.n	80044fc <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d05d      	beq.n	80044ea <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2222      	movs	r2, #34	@ 0x22
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004466:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004470:	e01c      	b.n	80044ac <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2201      	movs	r2, #1
 800447a:	2106      	movs	r1, #6
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fa74 	bl	800496a <QSPI_WaitFlagStateUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004486:	7ffb      	ldrb	r3, [r7, #31]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d114      	bne.n	80044b6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	7812      	ldrb	r2, [r2, #0]
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a6:	1e5a      	subs	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1de      	bne.n	8004472 <HAL_QSPI_Receive+0x9a>
 80044b4:	e000      	b.n	80044b8 <HAL_QSPI_Receive+0xe0>
          break;
 80044b6:	bf00      	nop
      }

      if (status == HAL_OK)
 80044b8:	7ffb      	ldrb	r3, [r7, #31]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d110      	bne.n	80044e0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2201      	movs	r2, #1
 80044c6:	2102      	movs	r1, #2
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fa4e 	bl	800496a <QSPI_WaitFlagStateUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80044d2:	7ffb      	ldrb	r3, [r7, #31]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d103      	bne.n	80044e0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2202      	movs	r2, #2
 80044de:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044e8:	e00a      	b.n	8004500 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ee:	f043 0208 	orr.w	r2, r3, #8
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	77fb      	strb	r3, [r7, #31]
 80044fa:	e001      	b.n	8004500 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80044fc:	2302      	movs	r3, #2
 80044fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8004508:	7ffb      	ldrb	r3, [r7, #31]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_QSPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_QSPI_Transmit_IT+0x1e>
 800452c:	2302      	movs	r3, #2
 800452e:	e04f      	b.n	80045d0 <HAL_QSPI_Transmit_IT+0xbe>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	d13e      	bne.n	80045c2 <HAL_QSPI_Transmit_IT+0xb0>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d02b      	beq.n	80045a8 <HAL_QSPI_Transmit_IT+0x96>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2212      	movs	r2, #18
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2203      	movs	r2, #3
 800457c:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800458c:	615a      	str	r2, [r3, #20]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 22e0 	orr.w	r2, r2, #458752	@ 0x70000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e012      	b.n	80045ce <HAL_QSPI_Transmit_IT+0xbc>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ac:	f043 0208 	orr.w	r2, r3, #8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045c0:	e005      	b.n	80045ce <HAL_QSPI_Transmit_IT+0xbc>
    }
  }
  else
  {
    status = HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
 80045c4:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_QSPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	73fb      	strb	r3, [r7, #15]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_QSPI_Receive_IT+0x26>
 80045fe:	2302      	movs	r3, #2
 8004600:	e055      	b.n	80046ae <HAL_QSPI_Receive_IT+0xd2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d144      	bne.n	80046a0 <HAL_QSPI_Receive_IT+0xc4>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d031      	beq.n	8004686 <HAL_QSPI_Receive_IT+0xaa>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2222      	movs	r2, #34	@ 0x22
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2203      	movs	r2, #3
 800464e:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004662:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	619a      	str	r2, [r3, #24]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 22e0 	orr.w	r2, r2, #458752	@ 0x70000
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	e012      	b.n	80046ac <HAL_QSPI_Receive_IT+0xd0>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	f043 0208 	orr.w	r2, r3, #8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800469e:	e005      	b.n	80046ac <HAL_QSPI_Receive_IT+0xd0>
    }
  }
  else
  {
    status = HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
 80046a2:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b088      	sub	sp, #32
 80046be:	af02      	add	r7, sp, #8
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
 80046c6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80046c8:	f7fc ffd2 	bl	8001670 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_QSPI_AutoPolling+0x24>
 80046da:	2302      	movs	r3, #2
 80046dc:	e060      	b.n	80047a0 <HAL_QSPI_AutoPolling+0xe6>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d14f      	bne.n	8004792 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2242      	movs	r2, #66	@ 0x42
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2200      	movs	r2, #0
 8004708:	2120      	movs	r1, #32
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 f92d 	bl	800496a <QSPI_WaitFlagStateUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004714:	7dfb      	ldrb	r3, [r7, #23]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d13d      	bne.n	8004796 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6852      	ldr	r2, [r2, #4]
 800472c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6892      	ldr	r2, [r2, #8]
 8004736:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	431a      	orrs	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004750:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800475a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f939 	bl	80049d8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2201      	movs	r2, #1
 800476e:	2108      	movs	r1, #8
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f8fa 	bl	800496a <QSPI_WaitFlagStateUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800477a:	7dfb      	ldrb	r3, [r7, #23]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2208      	movs	r2, #8
 8004786:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004790:	e001      	b.n	8004796 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004792:	2302      	movs	r3, #2
 8004794:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800479e:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_QSPI_AutoPolling_IT>:
  * @param  cfg structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80047b4:	f7fc ff5c 	bl	8001670 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_QSPI_AutoPolling_IT+0x22>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e062      	b.n	8004890 <HAL_QSPI_AutoPolling_IT+0xe8>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d151      	bne.n	8004882 <HAL_QSPI_AutoPolling_IT+0xda>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2242      	movs	r2, #66	@ 0x42
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2200      	movs	r2, #0
 80047f6:	2120      	movs	r1, #32
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f8b6 	bl	800496a <QSPI_WaitFlagStateUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004802:	7dfb      	ldrb	r3, [r7, #23]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d137      	bne.n	8004878 <HAL_QSPI_AutoPolling_IT+0xd0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6852      	ldr	r2, [r2, #4]
 800481a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6892      	ldr	r2, [r2, #8]
 8004824:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop mode */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	431a      	orrs	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | cfg->AutomaticStop));

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2209      	movs	r2, #9
 8004848:	60da      	str	r2, [r3, #12]

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004852:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f8bd 	bl	80049d8 <QSPI_Config>

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Enable the QSPI Transfer Error and status match Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 2210 	orr.w	r2, r2, #589824	@ 0x90000
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e00a      	b.n	800488e <HAL_QSPI_AutoPolling_IT+0xe6>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004880:	e005      	b.n	800488e <HAL_QSPI_AutoPolling_IT+0xe6>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004882:	2302      	movs	r3, #2
 8004884:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  /* Return function status */
  return status;
 800488e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004910:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38
  hqspi->TxXferCount = 0U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b08      	cmp	r3, #8
 8004928:	d114      	bne.n	8004954 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2202      	movs	r2, #2
 8004930:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004940:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0202 	orr.w	r2, r2, #2
 8004950:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8004952:	e006      	b.n	8004962 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7ff ff9b 	bl	8004898 <HAL_QSPI_ErrorCallback>
}
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	4613      	mov	r3, r2
 8004978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800497a:	e01a      	b.n	80049b2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d016      	beq.n	80049b2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004984:	f7fc fe74 	bl	8001670 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	429a      	cmp	r2, r3
 8004992:	d302      	bcc.n	800499a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2204      	movs	r2, #4
 800499e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a6:	f043 0201 	orr.w	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e00e      	b.n	80049d0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d1d6      	bne.n	800497c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <QSPI_Config+0x28>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80049f2:	d005      	beq.n	8004a00 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3a01      	subs	r2, #1
 80049fe:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80c1 	beq.w	8004b8c <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d063      	beq.n	8004ada <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	6892      	ldr	r2, [r2, #8]
 8004a1a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d031      	beq.n	8004a88 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a32:	431a      	orrs	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	049b      	lsls	r3, r3, #18
 8004a40:	431a      	orrs	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	ea42 0103 	orr.w	r1, r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004a78:	f000 813f 	beq.w	8004cfa <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	6852      	ldr	r2, [r2, #4]
 8004a84:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 8004a86:	e138      	b.n	8004cfa <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a90:	431a      	orrs	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a96:	431a      	orrs	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	049b      	lsls	r3, r3, #18
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	ea42 0103 	orr.w	r1, r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	619a      	str	r2, [r3, #24]
}
 8004ad8:	e10f      	b.n	8004cfa <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d02e      	beq.n	8004b40 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aea:	431a      	orrs	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	049b      	lsls	r3, r3, #18
 8004afe:	431a      	orrs	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	431a      	orrs	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	ea42 0103 	orr.w	r1, r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004b30:	f000 80e3 	beq.w	8004cfa <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	6852      	ldr	r2, [r2, #4]
 8004b3c:	619a      	str	r2, [r3, #24]
}
 8004b3e:	e0dc      	b.n	8004cfa <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	431a      	orrs	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	049b      	lsls	r3, r3, #18
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	ea42 0103 	orr.w	r1, r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	619a      	str	r2, [r3, #24]
}
 8004b8a:	e0b6      	b.n	8004cfa <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d05d      	beq.n	8004c50 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	6892      	ldr	r2, [r2, #8]
 8004b9c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d02e      	beq.n	8004c04 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	049b      	lsls	r3, r3, #18
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	ea42 0103 	orr.w	r1, r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004bf4:	f000 8081 	beq.w	8004cfa <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	6852      	ldr	r2, [r2, #4]
 8004c00:	619a      	str	r2, [r3, #24]
}
 8004c02:	e07a      	b.n	8004cfa <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c12:	431a      	orrs	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	049b      	lsls	r3, r3, #18
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	ea42 0103 	orr.w	r1, r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	619a      	str	r2, [r3, #24]
}
 8004c4e:	e054      	b.n	8004cfa <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02a      	beq.n	8004cae <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c66:	431a      	orrs	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	049b      	lsls	r3, r3, #18
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	ea42 0103 	orr.w	r1, r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004ca0:	d02b      	beq.n	8004cfa <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	6852      	ldr	r2, [r2, #4]
 8004caa:	619a      	str	r2, [r3, #24]
}
 8004cac:	e025      	b.n	8004cfa <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d021      	beq.n	8004cfa <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	049b      	lsls	r3, r3, #18
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	ea42 0103 	orr.w	r1, r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	619a      	str	r2, [r3, #24]
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08c      	sub	sp, #48	@ 0x30
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f000 bc48 	b.w	80055ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8088 	beq.w	8004e3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d2a:	4b99      	ldr	r3, [pc, #612]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d34:	4b96      	ldr	r3, [pc, #600]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d007      	beq.n	8004d50 <HAL_RCC_OscConfig+0x48>
 8004d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d42:	2b18      	cmp	r3, #24
 8004d44:	d111      	bne.n	8004d6a <HAL_RCC_OscConfig+0x62>
 8004d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d10c      	bne.n	8004d6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d50:	4b8f      	ldr	r3, [pc, #572]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d06d      	beq.n	8004e38 <HAL_RCC_OscConfig+0x130>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d169      	bne.n	8004e38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f000 bc21 	b.w	80055ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d72:	d106      	bne.n	8004d82 <HAL_RCC_OscConfig+0x7a>
 8004d74:	4b86      	ldr	r3, [pc, #536]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a85      	ldr	r2, [pc, #532]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	e02e      	b.n	8004de0 <HAL_RCC_OscConfig+0xd8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x9c>
 8004d8a:	4b81      	ldr	r3, [pc, #516]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a80      	ldr	r2, [pc, #512]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	4b7e      	ldr	r3, [pc, #504]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a7d      	ldr	r2, [pc, #500]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004d9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	e01d      	b.n	8004de0 <HAL_RCC_OscConfig+0xd8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0xc0>
 8004dae:	4b78      	ldr	r3, [pc, #480]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a77      	ldr	r2, [pc, #476]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4b75      	ldr	r3, [pc, #468]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a74      	ldr	r2, [pc, #464]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e00b      	b.n	8004de0 <HAL_RCC_OscConfig+0xd8>
 8004dc8:	4b71      	ldr	r3, [pc, #452]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a70      	ldr	r2, [pc, #448]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	4b6e      	ldr	r3, [pc, #440]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a6d      	ldr	r2, [pc, #436]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d013      	beq.n	8004e10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fc fc42 	bl	8001670 <HAL_GetTick>
 8004dec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df0:	f7fc fc3e 	bl	8001670 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	@ 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e3d4      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e02:	4b63      	ldr	r3, [pc, #396]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0xe8>
 8004e0e:	e014      	b.n	8004e3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e10:	f7fc fc2e 	bl	8001670 <HAL_GetTick>
 8004e14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e18:	f7fc fc2a 	bl	8001670 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b64      	cmp	r3, #100	@ 0x64
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e3c0      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e2a:	4b59      	ldr	r3, [pc, #356]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0x110>
 8004e36:	e000      	b.n	8004e3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 80ca 	beq.w	8004fdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e48:	4b51      	ldr	r3, [pc, #324]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e52:	4b4f      	ldr	r3, [pc, #316]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <HAL_RCC_OscConfig+0x166>
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	2b18      	cmp	r3, #24
 8004e62:	d156      	bne.n	8004f12 <HAL_RCC_OscConfig+0x20a>
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d151      	bne.n	8004f12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e6e:	4b48      	ldr	r3, [pc, #288]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_RCC_OscConfig+0x17e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e392      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e86:	4b42      	ldr	r3, [pc, #264]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 0219 	bic.w	r2, r3, #25
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	493f      	ldr	r1, [pc, #252]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fc fbea 	bl	8001670 <HAL_GetTick>
 8004e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea0:	f7fc fbe6 	bl	8001670 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e37c      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eb2:	4b37      	ldr	r3, [pc, #220]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebe:	f7fc fc07 	bl	80016d0 <HAL_GetREVID>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d817      	bhi.n	8004efc <HAL_RCC_OscConfig+0x1f4>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b40      	cmp	r3, #64	@ 0x40
 8004ed2:	d108      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x1de>
 8004ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004edc:	4a2c      	ldr	r2, [pc, #176]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ee4:	e07a      	b.n	8004fdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	031b      	lsls	r3, r3, #12
 8004ef4:	4926      	ldr	r1, [pc, #152]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004efa:	e06f      	b.n	8004fdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efc:	4b24      	ldr	r3, [pc, #144]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	061b      	lsls	r3, r3, #24
 8004f0a:	4921      	ldr	r1, [pc, #132]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f10:	e064      	b.n	8004fdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d047      	beq.n	8004faa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f023 0219 	bic.w	r2, r3, #25
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	491a      	ldr	r1, [pc, #104]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fc fba0 	bl	8001670 <HAL_GetTick>
 8004f30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f34:	f7fc fb9c 	bl	8001670 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e332      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f46:	4b12      	ldr	r3, [pc, #72]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0f0      	beq.n	8004f34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f52:	f7fc fbbd 	bl	80016d0 <HAL_GetREVID>
 8004f56:	4603      	mov	r3, r0
 8004f58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d819      	bhi.n	8004f94 <HAL_RCC_OscConfig+0x28c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b40      	cmp	r3, #64	@ 0x40
 8004f66:	d108      	bne.n	8004f7a <HAL_RCC_OscConfig+0x272>
 8004f68:	4b09      	ldr	r3, [pc, #36]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f70:	4a07      	ldr	r2, [pc, #28]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f76:	6053      	str	r3, [r2, #4]
 8004f78:	e030      	b.n	8004fdc <HAL_RCC_OscConfig+0x2d4>
 8004f7a:	4b05      	ldr	r3, [pc, #20]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	031b      	lsls	r3, r3, #12
 8004f88:	4901      	ldr	r1, [pc, #4]	@ (8004f90 <HAL_RCC_OscConfig+0x288>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	604b      	str	r3, [r1, #4]
 8004f8e:	e025      	b.n	8004fdc <HAL_RCC_OscConfig+0x2d4>
 8004f90:	58024400 	.word	0x58024400
 8004f94:	4b9a      	ldr	r3, [pc, #616]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	061b      	lsls	r3, r3, #24
 8004fa2:	4997      	ldr	r1, [pc, #604]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	604b      	str	r3, [r1, #4]
 8004fa8:	e018      	b.n	8004fdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004faa:	4b95      	ldr	r3, [pc, #596]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a94      	ldr	r2, [pc, #592]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb6:	f7fc fb5b 	bl	8001670 <HAL_GetTick>
 8004fba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fbe:	f7fc fb57 	bl	8001670 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e2ed      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fd0:	4b8b      	ldr	r3, [pc, #556]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f0      	bne.n	8004fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80a9 	beq.w	800513c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fea:	4b85      	ldr	r3, [pc, #532]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ff2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ff4:	4b82      	ldr	r3, [pc, #520]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d007      	beq.n	8005010 <HAL_RCC_OscConfig+0x308>
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b18      	cmp	r3, #24
 8005004:	d13a      	bne.n	800507c <HAL_RCC_OscConfig+0x374>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d135      	bne.n	800507c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005010:	4b7b      	ldr	r3, [pc, #492]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <HAL_RCC_OscConfig+0x320>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	2b80      	cmp	r3, #128	@ 0x80
 8005022:	d001      	beq.n	8005028 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e2c1      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005028:	f7fc fb52 	bl	80016d0 <HAL_GetREVID>
 800502c:	4603      	mov	r3, r0
 800502e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005032:	4293      	cmp	r3, r2
 8005034:	d817      	bhi.n	8005066 <HAL_RCC_OscConfig+0x35e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	2b20      	cmp	r3, #32
 800503c:	d108      	bne.n	8005050 <HAL_RCC_OscConfig+0x348>
 800503e:	4b70      	ldr	r3, [pc, #448]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005046:	4a6e      	ldr	r2, [pc, #440]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005048:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800504c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800504e:	e075      	b.n	800513c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005050:	4b6b      	ldr	r3, [pc, #428]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	069b      	lsls	r3, r3, #26
 800505e:	4968      	ldr	r1, [pc, #416]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005060:	4313      	orrs	r3, r2
 8005062:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005064:	e06a      	b.n	800513c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005066:	4b66      	ldr	r3, [pc, #408]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	061b      	lsls	r3, r3, #24
 8005074:	4962      	ldr	r1, [pc, #392]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005076:	4313      	orrs	r3, r2
 8005078:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800507a:	e05f      	b.n	800513c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d042      	beq.n	800510a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005084:	4b5e      	ldr	r3, [pc, #376]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a5d      	ldr	r2, [pc, #372]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 800508a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800508e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fc faee 	bl	8001670 <HAL_GetTick>
 8005094:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005098:	f7fc faea 	bl	8001670 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e280      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050aa:	4b55      	ldr	r3, [pc, #340]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050b6:	f7fc fb0b 	bl	80016d0 <HAL_GetREVID>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d817      	bhi.n	80050f4 <HAL_RCC_OscConfig+0x3ec>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d108      	bne.n	80050de <HAL_RCC_OscConfig+0x3d6>
 80050cc:	4b4c      	ldr	r3, [pc, #304]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80050d4:	4a4a      	ldr	r2, [pc, #296]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 80050d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050da:	6053      	str	r3, [r2, #4]
 80050dc:	e02e      	b.n	800513c <HAL_RCC_OscConfig+0x434>
 80050de:	4b48      	ldr	r3, [pc, #288]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	069b      	lsls	r3, r3, #26
 80050ec:	4944      	ldr	r1, [pc, #272]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	604b      	str	r3, [r1, #4]
 80050f2:	e023      	b.n	800513c <HAL_RCC_OscConfig+0x434>
 80050f4:	4b42      	ldr	r3, [pc, #264]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	061b      	lsls	r3, r3, #24
 8005102:	493f      	ldr	r1, [pc, #252]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005104:	4313      	orrs	r3, r2
 8005106:	60cb      	str	r3, [r1, #12]
 8005108:	e018      	b.n	800513c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800510a:	4b3d      	ldr	r3, [pc, #244]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a3c      	ldr	r2, [pc, #240]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005116:	f7fc faab 	bl	8001670 <HAL_GetTick>
 800511a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800511e:	f7fc faa7 	bl	8001670 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e23d      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005130:	4b33      	ldr	r3, [pc, #204]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f0      	bne.n	800511e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d036      	beq.n	80051b6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d019      	beq.n	8005184 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005150:	4b2b      	ldr	r3, [pc, #172]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005154:	4a2a      	ldr	r2, [pc, #168]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515c:	f7fc fa88 	bl	8001670 <HAL_GetTick>
 8005160:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005164:	f7fc fa84 	bl	8001670 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e21a      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005176:	4b22      	ldr	r3, [pc, #136]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x45c>
 8005182:	e018      	b.n	80051b6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005184:	4b1e      	ldr	r3, [pc, #120]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8005186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005188:	4a1d      	ldr	r2, [pc, #116]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 800518a:	f023 0301 	bic.w	r3, r3, #1
 800518e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005190:	f7fc fa6e 	bl	8001670 <HAL_GetTick>
 8005194:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005198:	f7fc fa6a 	bl	8001670 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e200      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051aa:	4b15      	ldr	r3, [pc, #84]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 80051ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d039      	beq.n	8005236 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01c      	beq.n	8005204 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 80051d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051d6:	f7fc fa4b 	bl	8001670 <HAL_GetTick>
 80051da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051de:	f7fc fa47 	bl	8001670 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e1dd      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051f0:	4b03      	ldr	r3, [pc, #12]	@ (8005200 <HAL_RCC_OscConfig+0x4f8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <HAL_RCC_OscConfig+0x4d6>
 80051fc:	e01b      	b.n	8005236 <HAL_RCC_OscConfig+0x52e>
 80051fe:	bf00      	nop
 8005200:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005204:	4b9b      	ldr	r3, [pc, #620]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a9a      	ldr	r2, [pc, #616]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 800520a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800520e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005210:	f7fc fa2e 	bl	8001670 <HAL_GetTick>
 8005214:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005218:	f7fc fa2a 	bl	8001670 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e1c0      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800522a:	4b92      	ldr	r3, [pc, #584]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8081 	beq.w	8005346 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005244:	4b8c      	ldr	r3, [pc, #560]	@ (8005478 <HAL_RCC_OscConfig+0x770>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a8b      	ldr	r2, [pc, #556]	@ (8005478 <HAL_RCC_OscConfig+0x770>)
 800524a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800524e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005250:	f7fc fa0e 	bl	8001670 <HAL_GetTick>
 8005254:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005258:	f7fc fa0a 	bl	8001670 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b64      	cmp	r3, #100	@ 0x64
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e1a0      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800526a:	4b83      	ldr	r3, [pc, #524]	@ (8005478 <HAL_RCC_OscConfig+0x770>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d106      	bne.n	800528c <HAL_RCC_OscConfig+0x584>
 800527e:	4b7d      	ldr	r3, [pc, #500]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005282:	4a7c      	ldr	r2, [pc, #496]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	6713      	str	r3, [r2, #112]	@ 0x70
 800528a:	e02d      	b.n	80052e8 <HAL_RCC_OscConfig+0x5e0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10c      	bne.n	80052ae <HAL_RCC_OscConfig+0x5a6>
 8005294:	4b77      	ldr	r3, [pc, #476]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005298:	4a76      	ldr	r2, [pc, #472]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 800529a:	f023 0301 	bic.w	r3, r3, #1
 800529e:	6713      	str	r3, [r2, #112]	@ 0x70
 80052a0:	4b74      	ldr	r3, [pc, #464]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a4:	4a73      	ldr	r2, [pc, #460]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80052a6:	f023 0304 	bic.w	r3, r3, #4
 80052aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ac:	e01c      	b.n	80052e8 <HAL_RCC_OscConfig+0x5e0>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b05      	cmp	r3, #5
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCC_OscConfig+0x5c8>
 80052b6:	4b6f      	ldr	r3, [pc, #444]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ba:	4a6e      	ldr	r2, [pc, #440]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80052bc:	f043 0304 	orr.w	r3, r3, #4
 80052c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c2:	4b6c      	ldr	r3, [pc, #432]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c6:	4a6b      	ldr	r2, [pc, #428]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ce:	e00b      	b.n	80052e8 <HAL_RCC_OscConfig+0x5e0>
 80052d0:	4b68      	ldr	r3, [pc, #416]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d4:	4a67      	ldr	r2, [pc, #412]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	6713      	str	r3, [r2, #112]	@ 0x70
 80052dc:	4b65      	ldr	r3, [pc, #404]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e0:	4a64      	ldr	r2, [pc, #400]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80052e2:	f023 0304 	bic.w	r3, r3, #4
 80052e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d015      	beq.n	800531c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f0:	f7fc f9be 	bl	8001670 <HAL_GetTick>
 80052f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052f6:	e00a      	b.n	800530e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f8:	f7fc f9ba 	bl	8001670 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e14e      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800530e:	4b59      	ldr	r3, [pc, #356]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0ee      	beq.n	80052f8 <HAL_RCC_OscConfig+0x5f0>
 800531a:	e014      	b.n	8005346 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531c:	f7fc f9a8 	bl	8001670 <HAL_GetTick>
 8005320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005322:	e00a      	b.n	800533a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005324:	f7fc f9a4 	bl	8001670 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e138      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800533a:	4b4e      	ldr	r3, [pc, #312]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1ee      	bne.n	8005324 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 812d 	beq.w	80055aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005350:	4b48      	ldr	r3, [pc, #288]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005358:	2b18      	cmp	r3, #24
 800535a:	f000 80bd 	beq.w	80054d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	2b02      	cmp	r3, #2
 8005364:	f040 809e 	bne.w	80054a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005368:	4b42      	ldr	r3, [pc, #264]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a41      	ldr	r2, [pc, #260]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 800536e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fc f97c 	bl	8001670 <HAL_GetTick>
 8005378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800537c:	f7fc f978 	bl	8001670 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e10e      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800538e:	4b39      	ldr	r3, [pc, #228]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f0      	bne.n	800537c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800539a:	4b36      	ldr	r3, [pc, #216]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 800539c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800539e:	4b37      	ldr	r3, [pc, #220]	@ (800547c <HAL_RCC_OscConfig+0x774>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053aa:	0112      	lsls	r2, r2, #4
 80053ac:	430a      	orrs	r2, r1
 80053ae:	4931      	ldr	r1, [pc, #196]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b8:	3b01      	subs	r3, #1
 80053ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c2:	3b01      	subs	r3, #1
 80053c4:	025b      	lsls	r3, r3, #9
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ce:	3b01      	subs	r3, #1
 80053d0:	041b      	lsls	r3, r3, #16
 80053d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053dc:	3b01      	subs	r3, #1
 80053de:	061b      	lsls	r3, r3, #24
 80053e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053e4:	4923      	ldr	r1, [pc, #140]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80053ea:	4b22      	ldr	r3, [pc, #136]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80053ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ee:	4a21      	ldr	r2, [pc, #132]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 80053f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053fa:	4b21      	ldr	r3, [pc, #132]	@ (8005480 <HAL_RCC_OscConfig+0x778>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005402:	00d2      	lsls	r2, r2, #3
 8005404:	491b      	ldr	r1, [pc, #108]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005406:	4313      	orrs	r3, r2
 8005408:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800540a:	4b1a      	ldr	r3, [pc, #104]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	f023 020c 	bic.w	r2, r3, #12
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005416:	4917      	ldr	r1, [pc, #92]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005418:	4313      	orrs	r3, r2
 800541a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800541c:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 800541e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005420:	f023 0202 	bic.w	r2, r3, #2
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005428:	4912      	ldr	r1, [pc, #72]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 800542a:	4313      	orrs	r3, r2
 800542c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800542e:	4b11      	ldr	r3, [pc, #68]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005432:	4a10      	ldr	r2, [pc, #64]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005438:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800543a:	4b0e      	ldr	r3, [pc, #56]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	4a0d      	ldr	r2, [pc, #52]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005444:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005446:	4b0b      	ldr	r3, [pc, #44]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544a:	4a0a      	ldr	r2, [pc, #40]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 800544c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005450:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005452:	4b08      	ldr	r3, [pc, #32]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005456:	4a07      	ldr	r2, [pc, #28]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800545e:	4b05      	ldr	r3, [pc, #20]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a04      	ldr	r2, [pc, #16]	@ (8005474 <HAL_RCC_OscConfig+0x76c>)
 8005464:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546a:	f7fc f901 	bl	8001670 <HAL_GetTick>
 800546e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005470:	e011      	b.n	8005496 <HAL_RCC_OscConfig+0x78e>
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
 8005478:	58024800 	.word	0x58024800
 800547c:	fffffc0c 	.word	0xfffffc0c
 8005480:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005484:	f7fc f8f4 	bl	8001670 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e08a      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005496:	4b47      	ldr	r3, [pc, #284]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x77c>
 80054a2:	e082      	b.n	80055aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a4:	4b43      	ldr	r3, [pc, #268]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a42      	ldr	r2, [pc, #264]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 80054aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fc f8de 	bl	8001670 <HAL_GetTick>
 80054b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b8:	f7fc f8da 	bl	8001670 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e070      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054ca:	4b3a      	ldr	r3, [pc, #232]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f0      	bne.n	80054b8 <HAL_RCC_OscConfig+0x7b0>
 80054d6:	e068      	b.n	80055aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80054d8:	4b36      	ldr	r3, [pc, #216]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 80054da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80054de:	4b35      	ldr	r3, [pc, #212]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 80054e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d031      	beq.n	8005550 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f003 0203 	and.w	r2, r3, #3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d12a      	bne.n	8005550 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005506:	429a      	cmp	r2, r3
 8005508:	d122      	bne.n	8005550 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005514:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005516:	429a      	cmp	r2, r3
 8005518:	d11a      	bne.n	8005550 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	0a5b      	lsrs	r3, r3, #9
 800551e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005526:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005528:	429a      	cmp	r2, r3
 800552a:	d111      	bne.n	8005550 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	0c1b      	lsrs	r3, r3, #16
 8005530:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005538:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800553a:	429a      	cmp	r2, r3
 800553c:	d108      	bne.n	8005550 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	0e1b      	lsrs	r3, r3, #24
 8005542:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800554c:	429a      	cmp	r2, r3
 800554e:	d001      	beq.n	8005554 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e02b      	b.n	80055ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005554:	4b17      	ldr	r3, [pc, #92]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 8005556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005558:	08db      	lsrs	r3, r3, #3
 800555a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800555e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	429a      	cmp	r2, r3
 8005568:	d01f      	beq.n	80055aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800556a:	4b12      	ldr	r3, [pc, #72]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 800556c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556e:	4a11      	ldr	r2, [pc, #68]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 8005570:	f023 0301 	bic.w	r3, r3, #1
 8005574:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005576:	f7fc f87b 	bl	8001670 <HAL_GetTick>
 800557a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800557c:	bf00      	nop
 800557e:	f7fc f877 	bl	8001670 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	4293      	cmp	r3, r2
 8005588:	d0f9      	beq.n	800557e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800558a:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 800558c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800558e:	4b0a      	ldr	r3, [pc, #40]	@ (80055b8 <HAL_RCC_OscConfig+0x8b0>)
 8005590:	4013      	ands	r3, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005596:	00d2      	lsls	r2, r2, #3
 8005598:	4906      	ldr	r1, [pc, #24]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 800559a:	4313      	orrs	r3, r2
 800559c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800559e:	4b05      	ldr	r3, [pc, #20]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 80055a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a2:	4a04      	ldr	r2, [pc, #16]	@ (80055b4 <HAL_RCC_OscConfig+0x8ac>)
 80055a4:	f043 0301 	orr.w	r3, r3, #1
 80055a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3730      	adds	r7, #48	@ 0x30
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	58024400 	.word	0x58024400
 80055b8:	ffff0007 	.word	0xffff0007

080055bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e19c      	b.n	800590a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055d0:	4b8a      	ldr	r3, [pc, #552]	@ (80057fc <HAL_RCC_ClockConfig+0x240>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d910      	bls.n	8005600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055de:	4b87      	ldr	r3, [pc, #540]	@ (80057fc <HAL_RCC_ClockConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 020f 	bic.w	r2, r3, #15
 80055e6:	4985      	ldr	r1, [pc, #532]	@ (80057fc <HAL_RCC_ClockConfig+0x240>)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ee:	4b83      	ldr	r3, [pc, #524]	@ (80057fc <HAL_RCC_ClockConfig+0x240>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d001      	beq.n	8005600 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e184      	b.n	800590a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d010      	beq.n	800562e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	4b7b      	ldr	r3, [pc, #492]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005618:	429a      	cmp	r2, r3
 800561a:	d908      	bls.n	800562e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800561c:	4b78      	ldr	r3, [pc, #480]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	4975      	ldr	r1, [pc, #468]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 800562a:	4313      	orrs	r3, r2
 800562c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	695a      	ldr	r2, [r3, #20]
 800563e:	4b70      	ldr	r3, [pc, #448]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005646:	429a      	cmp	r2, r3
 8005648:	d908      	bls.n	800565c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800564a:	4b6d      	ldr	r3, [pc, #436]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	496a      	ldr	r1, [pc, #424]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 8005658:	4313      	orrs	r3, r2
 800565a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b00      	cmp	r3, #0
 8005666:	d010      	beq.n	800568a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	4b64      	ldr	r3, [pc, #400]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005674:	429a      	cmp	r2, r3
 8005676:	d908      	bls.n	800568a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005678:	4b61      	ldr	r3, [pc, #388]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	495e      	ldr	r1, [pc, #376]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 8005686:	4313      	orrs	r3, r2
 8005688:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d010      	beq.n	80056b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69da      	ldr	r2, [r3, #28]
 800569a:	4b59      	ldr	r3, [pc, #356]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d908      	bls.n	80056b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056a6:	4b56      	ldr	r3, [pc, #344]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	4953      	ldr	r1, [pc, #332]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d010      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d908      	bls.n	80056e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d4:	4b4a      	ldr	r3, [pc, #296]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	f023 020f 	bic.w	r2, r3, #15
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	4947      	ldr	r1, [pc, #284]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d055      	beq.n	800579e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80056f2:	4b43      	ldr	r3, [pc, #268]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	4940      	ldr	r1, [pc, #256]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 8005700:	4313      	orrs	r3, r2
 8005702:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d107      	bne.n	800571c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800570c:	4b3c      	ldr	r3, [pc, #240]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d121      	bne.n	800575c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0f6      	b.n	800590a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b03      	cmp	r3, #3
 8005722:	d107      	bne.n	8005734 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005724:	4b36      	ldr	r3, [pc, #216]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d115      	bne.n	800575c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0ea      	b.n	800590a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d107      	bne.n	800574c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800573c:	4b30      	ldr	r3, [pc, #192]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d109      	bne.n	800575c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0de      	b.n	800590a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800574c:	4b2c      	ldr	r3, [pc, #176]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e0d6      	b.n	800590a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800575c:	4b28      	ldr	r3, [pc, #160]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f023 0207 	bic.w	r2, r3, #7
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4925      	ldr	r1, [pc, #148]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 800576a:	4313      	orrs	r3, r2
 800576c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800576e:	f7fb ff7f 	bl	8001670 <HAL_GetTick>
 8005772:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005774:	e00a      	b.n	800578c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005776:	f7fb ff7b 	bl	8001670 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005784:	4293      	cmp	r3, r2
 8005786:	d901      	bls.n	800578c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e0be      	b.n	800590a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578c:	4b1c      	ldr	r3, [pc, #112]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	429a      	cmp	r2, r3
 800579c:	d1eb      	bne.n	8005776 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d010      	beq.n	80057cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	4b14      	ldr	r3, [pc, #80]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d208      	bcs.n	80057cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ba:	4b11      	ldr	r3, [pc, #68]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f023 020f 	bic.w	r2, r3, #15
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	490e      	ldr	r1, [pc, #56]	@ (8005800 <HAL_RCC_ClockConfig+0x244>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057cc:	4b0b      	ldr	r3, [pc, #44]	@ (80057fc <HAL_RCC_ClockConfig+0x240>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d214      	bcs.n	8005804 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057da:	4b08      	ldr	r3, [pc, #32]	@ (80057fc <HAL_RCC_ClockConfig+0x240>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 020f 	bic.w	r2, r3, #15
 80057e2:	4906      	ldr	r1, [pc, #24]	@ (80057fc <HAL_RCC_ClockConfig+0x240>)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ea:	4b04      	ldr	r3, [pc, #16]	@ (80057fc <HAL_RCC_ClockConfig+0x240>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d005      	beq.n	8005804 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e086      	b.n	800590a <HAL_RCC_ClockConfig+0x34e>
 80057fc:	52002000 	.word	0x52002000
 8005800:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d010      	beq.n	8005832 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	4b3f      	ldr	r3, [pc, #252]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800581c:	429a      	cmp	r2, r3
 800581e:	d208      	bcs.n	8005832 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005820:	4b3c      	ldr	r3, [pc, #240]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	4939      	ldr	r1, [pc, #228]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 800582e:	4313      	orrs	r3, r2
 8005830:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d010      	beq.n	8005860 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	4b34      	ldr	r3, [pc, #208]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800584a:	429a      	cmp	r2, r3
 800584c:	d208      	bcs.n	8005860 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800584e:	4b31      	ldr	r3, [pc, #196]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	492e      	ldr	r1, [pc, #184]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 800585c:	4313      	orrs	r3, r2
 800585e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	d010      	beq.n	800588e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699a      	ldr	r2, [r3, #24]
 8005870:	4b28      	ldr	r3, [pc, #160]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005878:	429a      	cmp	r2, r3
 800587a:	d208      	bcs.n	800588e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800587c:	4b25      	ldr	r3, [pc, #148]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	4922      	ldr	r1, [pc, #136]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 800588a:	4313      	orrs	r3, r2
 800588c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d010      	beq.n	80058bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69da      	ldr	r2, [r3, #28]
 800589e:	4b1d      	ldr	r3, [pc, #116]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d208      	bcs.n	80058bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4917      	ldr	r1, [pc, #92]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80058bc:	f000 f834 	bl	8005928 <HAL_RCC_GetSysClockFreq>
 80058c0:	4602      	mov	r2, r0
 80058c2:	4b14      	ldr	r3, [pc, #80]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	f003 030f 	and.w	r3, r3, #15
 80058cc:	4912      	ldr	r1, [pc, #72]	@ (8005918 <HAL_RCC_ClockConfig+0x35c>)
 80058ce:	5ccb      	ldrb	r3, [r1, r3]
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
 80058d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058da:	4b0e      	ldr	r3, [pc, #56]	@ (8005914 <HAL_RCC_ClockConfig+0x358>)
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	4a0d      	ldr	r2, [pc, #52]	@ (8005918 <HAL_RCC_ClockConfig+0x35c>)
 80058e4:	5cd3      	ldrb	r3, [r2, r3]
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
 80058f0:	4a0a      	ldr	r2, [pc, #40]	@ (800591c <HAL_RCC_ClockConfig+0x360>)
 80058f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005920 <HAL_RCC_ClockConfig+0x364>)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80058fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <HAL_RCC_ClockConfig+0x368>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fb fe6c 	bl	80015dc <HAL_InitTick>
 8005904:	4603      	mov	r3, r0
 8005906:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	58024400 	.word	0x58024400
 8005918:	0800c08c 	.word	0x0800c08c
 800591c:	240000f8 	.word	0x240000f8
 8005920:	240000f4 	.word	0x240000f4
 8005924:	240000fc 	.word	0x240000fc

08005928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005928:	b480      	push	{r7}
 800592a:	b089      	sub	sp, #36	@ 0x24
 800592c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800592e:	4bb3      	ldr	r3, [pc, #716]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005936:	2b18      	cmp	r3, #24
 8005938:	f200 8155 	bhi.w	8005be6 <HAL_RCC_GetSysClockFreq+0x2be>
 800593c:	a201      	add	r2, pc, #4	@ (adr r2, 8005944 <HAL_RCC_GetSysClockFreq+0x1c>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	080059a9 	.word	0x080059a9
 8005948:	08005be7 	.word	0x08005be7
 800594c:	08005be7 	.word	0x08005be7
 8005950:	08005be7 	.word	0x08005be7
 8005954:	08005be7 	.word	0x08005be7
 8005958:	08005be7 	.word	0x08005be7
 800595c:	08005be7 	.word	0x08005be7
 8005960:	08005be7 	.word	0x08005be7
 8005964:	080059cf 	.word	0x080059cf
 8005968:	08005be7 	.word	0x08005be7
 800596c:	08005be7 	.word	0x08005be7
 8005970:	08005be7 	.word	0x08005be7
 8005974:	08005be7 	.word	0x08005be7
 8005978:	08005be7 	.word	0x08005be7
 800597c:	08005be7 	.word	0x08005be7
 8005980:	08005be7 	.word	0x08005be7
 8005984:	080059d5 	.word	0x080059d5
 8005988:	08005be7 	.word	0x08005be7
 800598c:	08005be7 	.word	0x08005be7
 8005990:	08005be7 	.word	0x08005be7
 8005994:	08005be7 	.word	0x08005be7
 8005998:	08005be7 	.word	0x08005be7
 800599c:	08005be7 	.word	0x08005be7
 80059a0:	08005be7 	.word	0x08005be7
 80059a4:	080059db 	.word	0x080059db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059a8:	4b94      	ldr	r3, [pc, #592]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d009      	beq.n	80059c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059b4:	4b91      	ldr	r3, [pc, #580]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	08db      	lsrs	r3, r3, #3
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	4a90      	ldr	r2, [pc, #576]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059c0:	fa22 f303 	lsr.w	r3, r2, r3
 80059c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80059c6:	e111      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80059c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059ca:	61bb      	str	r3, [r7, #24]
      break;
 80059cc:	e10e      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80059ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005c04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059d0:	61bb      	str	r3, [r7, #24]
      break;
 80059d2:	e10b      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80059d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80059d6:	61bb      	str	r3, [r7, #24]
      break;
 80059d8:	e108      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059da:	4b88      	ldr	r3, [pc, #544]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80059e4:	4b85      	ldr	r3, [pc, #532]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e8:	091b      	lsrs	r3, r3, #4
 80059ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80059f0:	4b82      	ldr	r3, [pc, #520]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80059fa:	4b80      	ldr	r3, [pc, #512]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fe:	08db      	lsrs	r3, r3, #3
 8005a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80e1 	beq.w	8005be0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	f000 8083 	beq.w	8005b2c <HAL_RCC_GetSysClockFreq+0x204>
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	f200 80a1 	bhi.w	8005b70 <HAL_RCC_GetSysClockFreq+0x248>
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <HAL_RCC_GetSysClockFreq+0x114>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d056      	beq.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a3a:	e099      	b.n	8005b70 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a3c:	4b6f      	ldr	r3, [pc, #444]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d02d      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a48:	4b6c      	ldr	r3, [pc, #432]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	08db      	lsrs	r3, r3, #3
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	4a6b      	ldr	r2, [pc, #428]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
 8005a58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	ee07 3a90 	vmov	s15, r3
 8005a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a72:	4b62      	ldr	r3, [pc, #392]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a86:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005aa2:	e087      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005c10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab6:	4b51      	ldr	r3, [pc, #324]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ae6:	e065      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005c14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afa:	4b40      	ldr	r3, [pc, #256]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b0e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b2a:	e043      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b36:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005c18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b52:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b6e:	e021      	b.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005c14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b82:	4b1e      	ldr	r3, [pc, #120]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b96:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005c0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005bb4:	4b11      	ldr	r3, [pc, #68]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb8:	0a5b      	lsrs	r3, r3, #9
 8005bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	ee07 3a90 	vmov	s15, r3
 8005bc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bd8:	ee17 3a90 	vmov	r3, s15
 8005bdc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005bde:	e005      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61bb      	str	r3, [r7, #24]
      break;
 8005be4:	e002      	b.n	8005bec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005be6:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005be8:	61bb      	str	r3, [r7, #24]
      break;
 8005bea:	bf00      	nop
  }

  return sysclockfreq;
 8005bec:	69bb      	ldr	r3, [r7, #24]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3724      	adds	r7, #36	@ 0x24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	58024400 	.word	0x58024400
 8005c00:	03d09000 	.word	0x03d09000
 8005c04:	003d0900 	.word	0x003d0900
 8005c08:	017d7840 	.word	0x017d7840
 8005c0c:	46000000 	.word	0x46000000
 8005c10:	4c742400 	.word	0x4c742400
 8005c14:	4a742400 	.word	0x4a742400
 8005c18:	4bbebc20 	.word	0x4bbebc20

08005c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c22:	f7ff fe81 	bl	8005928 <HAL_RCC_GetSysClockFreq>
 8005c26:	4602      	mov	r2, r0
 8005c28:	4b10      	ldr	r3, [pc, #64]	@ (8005c6c <HAL_RCC_GetHCLKFreq+0x50>)
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	0a1b      	lsrs	r3, r3, #8
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	490f      	ldr	r1, [pc, #60]	@ (8005c70 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c34:	5ccb      	ldrb	r3, [r1, r3]
 8005c36:	f003 031f 	and.w	r3, r3, #31
 8005c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c40:	4b0a      	ldr	r3, [pc, #40]	@ (8005c6c <HAL_RCC_GetHCLKFreq+0x50>)
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	4a09      	ldr	r2, [pc, #36]	@ (8005c70 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c4a:	5cd3      	ldrb	r3, [r2, r3]
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	fa22 f303 	lsr.w	r3, r2, r3
 8005c56:	4a07      	ldr	r2, [pc, #28]	@ (8005c74 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c5a:	4a07      	ldr	r2, [pc, #28]	@ (8005c78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005c60:	4b04      	ldr	r3, [pc, #16]	@ (8005c74 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	58024400 	.word	0x58024400
 8005c70:	0800c08c 	.word	0x0800c08c
 8005c74:	240000f8 	.word	0x240000f8
 8005c78:	240000f4 	.word	0x240000f4

08005c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c80:	f7ff ffcc 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005c84:	4602      	mov	r2, r0
 8005c86:	4b06      	ldr	r3, [pc, #24]	@ (8005ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	4904      	ldr	r1, [pc, #16]	@ (8005ca4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c92:	5ccb      	ldrb	r3, [r1, r3]
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	58024400 	.word	0x58024400
 8005ca4:	0800c08c 	.word	0x0800c08c

08005ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005cac:	f7ff ffb6 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	4b06      	ldr	r3, [pc, #24]	@ (8005ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	0a1b      	lsrs	r3, r3, #8
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	4904      	ldr	r1, [pc, #16]	@ (8005cd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cbe:	5ccb      	ldrb	r3, [r1, r3]
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	58024400 	.word	0x58024400
 8005cd0:	0800c08c 	.word	0x0800c08c

08005cd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd8:	b0ca      	sub	sp, #296	@ 0x128
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005cf8:	2500      	movs	r5, #0
 8005cfa:	ea54 0305 	orrs.w	r3, r4, r5
 8005cfe:	d049      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d0a:	d02f      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005d0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d10:	d828      	bhi.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d16:	d01a      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d1c:	d822      	bhi.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d26:	d007      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d28:	e01c      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d2a:	4bb8      	ldr	r3, [pc, #736]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2e:	4ab7      	ldr	r2, [pc, #732]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d36:	e01a      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	2102      	movs	r1, #2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 fc8f 	bl	8007664 <RCCEx_PLL2_Config>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d4c:	e00f      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d52:	3328      	adds	r3, #40	@ 0x28
 8005d54:	2102      	movs	r1, #2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 fd36 	bl	80077c8 <RCCEx_PLL3_Config>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d62:	e004      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d6a:	e000      	b.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10a      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d76:	4ba5      	ldr	r3, [pc, #660]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d84:	4aa1      	ldr	r2, [pc, #644]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d86:	430b      	orrs	r3, r1
 8005d88:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d8a:	e003      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005da0:	f04f 0900 	mov.w	r9, #0
 8005da4:	ea58 0309 	orrs.w	r3, r8, r9
 8005da8:	d047      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d82a      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005db4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005dd1 	.word	0x08005dd1
 8005dc0:	08005ddf 	.word	0x08005ddf
 8005dc4:	08005df5 	.word	0x08005df5
 8005dc8:	08005e13 	.word	0x08005e13
 8005dcc:	08005e13 	.word	0x08005e13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd0:	4b8e      	ldr	r3, [pc, #568]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd4:	4a8d      	ldr	r2, [pc, #564]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ddc:	e01a      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de2:	3308      	adds	r3, #8
 8005de4:	2100      	movs	r1, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 fc3c 	bl	8007664 <RCCEx_PLL2_Config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005df2:	e00f      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df8:	3328      	adds	r3, #40	@ 0x28
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 fce3 	bl	80077c8 <RCCEx_PLL3_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e08:	e004      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e10:	e000      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e1c:	4b7b      	ldr	r3, [pc, #492]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e20:	f023 0107 	bic.w	r1, r3, #7
 8005e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2a:	4a78      	ldr	r2, [pc, #480]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e30:	e003      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005e46:	f04f 0b00 	mov.w	fp, #0
 8005e4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e4e:	d04c      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e5a:	d030      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e60:	d829      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e62:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e64:	d02d      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e68:	d825      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e6a:	2b80      	cmp	r3, #128	@ 0x80
 8005e6c:	d018      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005e6e:	2b80      	cmp	r3, #128	@ 0x80
 8005e70:	d821      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005e76:	2b40      	cmp	r3, #64	@ 0x40
 8005e78:	d007      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005e7a:	e01c      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e7c:	4b63      	ldr	r3, [pc, #396]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e80:	4a62      	ldr	r2, [pc, #392]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e88:	e01c      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8e:	3308      	adds	r3, #8
 8005e90:	2100      	movs	r1, #0
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 fbe6 	bl	8007664 <RCCEx_PLL2_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005e9e:	e011      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea4:	3328      	adds	r3, #40	@ 0x28
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 fc8d 	bl	80077c8 <RCCEx_PLL3_Config>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005eb4:	e006      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ebc:	e002      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005ecc:	4b4f      	ldr	r3, [pc, #316]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eda:	4a4c      	ldr	r2, [pc, #304]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005edc:	430b      	orrs	r3, r1
 8005ede:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ee0:	e003      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005ef6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005efa:	2300      	movs	r3, #0
 8005efc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005f00:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005f04:	460b      	mov	r3, r1
 8005f06:	4313      	orrs	r3, r2
 8005f08:	d053      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f16:	d035      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005f18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f1c:	d82e      	bhi.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f22:	d031      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005f24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f28:	d828      	bhi.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f2e:	d01a      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005f30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f34:	d822      	bhi.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005f3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f3e:	d007      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005f40:	e01c      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f42:	4b32      	ldr	r3, [pc, #200]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f46:	4a31      	ldr	r2, [pc, #196]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f4e:	e01c      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f54:	3308      	adds	r3, #8
 8005f56:	2100      	movs	r1, #0
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f001 fb83 	bl	8007664 <RCCEx_PLL2_Config>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f64:	e011      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6a:	3328      	adds	r3, #40	@ 0x28
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 fc2a 	bl	80077c8 <RCCEx_PLL3_Config>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f7a:	e006      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f82:	e002      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f84:	bf00      	nop
 8005f86:	e000      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005f92:	4b1e      	ldr	r3, [pc, #120]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f96:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fa8:	e003      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005fbe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005fc8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	d056      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005fda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fde:	d038      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fe4:	d831      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005fe6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fea:	d034      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005fec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ff0:	d82b      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ff2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ff6:	d01d      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005ff8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ffc:	d825      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d006      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006002:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006006:	d00a      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006008:	e01f      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800600a:	bf00      	nop
 800600c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006010:	4ba2      	ldr	r3, [pc, #648]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006014:	4aa1      	ldr	r2, [pc, #644]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800601a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800601c:	e01c      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006022:	3308      	adds	r3, #8
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f001 fb1c 	bl	8007664 <RCCEx_PLL2_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006032:	e011      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006038:	3328      	adds	r3, #40	@ 0x28
 800603a:	2100      	movs	r1, #0
 800603c:	4618      	mov	r0, r3
 800603e:	f001 fbc3 	bl	80077c8 <RCCEx_PLL3_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006048:	e006      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006050:	e002      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006052:	bf00      	nop
 8006054:	e000      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10b      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006060:	4b8e      	ldr	r3, [pc, #568]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006064:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006070:	4a8a      	ldr	r2, [pc, #552]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006072:	430b      	orrs	r3, r1
 8006074:	6593      	str	r3, [r2, #88]	@ 0x58
 8006076:	e003      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800607c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800608c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006090:	2300      	movs	r3, #0
 8006092:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006096:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800609a:	460b      	mov	r3, r1
 800609c:	4313      	orrs	r3, r2
 800609e:	d03a      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a6:	2b30      	cmp	r3, #48	@ 0x30
 80060a8:	d01f      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80060aa:	2b30      	cmp	r3, #48	@ 0x30
 80060ac:	d819      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d00c      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d815      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d019      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80060ba:	2b10      	cmp	r3, #16
 80060bc:	d111      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060be:	4b77      	ldr	r3, [pc, #476]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c2:	4a76      	ldr	r2, [pc, #472]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80060ca:	e011      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d0:	3308      	adds	r3, #8
 80060d2:	2102      	movs	r1, #2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f001 fac5 	bl	8007664 <RCCEx_PLL2_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80060e0:	e006      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060e8:	e002      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80060ea:	bf00      	nop
 80060ec:	e000      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80060ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80060f8:	4b68      	ldr	r3, [pc, #416]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006106:	4a65      	ldr	r2, [pc, #404]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006108:	430b      	orrs	r3, r1
 800610a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800610c:	e003      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006122:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006126:	2300      	movs	r3, #0
 8006128:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800612c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006130:	460b      	mov	r3, r1
 8006132:	4313      	orrs	r3, r2
 8006134:	d051      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800613c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006140:	d035      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006142:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006146:	d82e      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006148:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800614c:	d031      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800614e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006152:	d828      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006158:	d01a      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800615a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800615e:	d822      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006168:	d007      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800616a:	e01c      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800616c:	4b4b      	ldr	r3, [pc, #300]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800616e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006170:	4a4a      	ldr	r2, [pc, #296]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006178:	e01c      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617e:	3308      	adds	r3, #8
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f001 fa6e 	bl	8007664 <RCCEx_PLL2_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800618e:	e011      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006194:	3328      	adds	r3, #40	@ 0x28
 8006196:	2100      	movs	r1, #0
 8006198:	4618      	mov	r0, r3
 800619a:	f001 fb15 	bl	80077c8 <RCCEx_PLL3_Config>
 800619e:	4603      	mov	r3, r0
 80061a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061a4:	e006      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061ac:	e002      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80061ae:	bf00      	nop
 80061b0:	e000      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80061b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061bc:	4b37      	ldr	r3, [pc, #220]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80061c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ca:	4a34      	ldr	r2, [pc, #208]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061cc:	430b      	orrs	r3, r1
 80061ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80061d0:	e003      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80061da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80061e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061ea:	2300      	movs	r3, #0
 80061ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80061f4:	460b      	mov	r3, r1
 80061f6:	4313      	orrs	r3, r2
 80061f8:	d056      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80061fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006204:	d033      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006206:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800620a:	d82c      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800620c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006210:	d02f      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006212:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006216:	d826      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006218:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800621c:	d02b      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800621e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006222:	d820      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006228:	d012      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800622a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800622e:	d81a      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d022      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006238:	d115      	bne.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800623a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800623e:	3308      	adds	r3, #8
 8006240:	2101      	movs	r1, #1
 8006242:	4618      	mov	r0, r3
 8006244:	f001 fa0e 	bl	8007664 <RCCEx_PLL2_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800624e:	e015      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006254:	3328      	adds	r3, #40	@ 0x28
 8006256:	2101      	movs	r1, #1
 8006258:	4618      	mov	r0, r3
 800625a:	f001 fab5 	bl	80077c8 <RCCEx_PLL3_Config>
 800625e:	4603      	mov	r3, r0
 8006260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006264:	e00a      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800626c:	e006      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800626e:	bf00      	nop
 8006270:	e004      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006272:	bf00      	nop
 8006274:	e002      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006276:	bf00      	nop
 8006278:	e000      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800627a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10d      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006284:	4b05      	ldr	r3, [pc, #20]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006288:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800628c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006292:	4a02      	ldr	r2, [pc, #8]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006294:	430b      	orrs	r3, r1
 8006296:	6513      	str	r3, [r2, #80]	@ 0x50
 8006298:	e006      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800629a:	bf00      	nop
 800629c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80062b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062b8:	2300      	movs	r3, #0
 80062ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4313      	orrs	r3, r2
 80062c6:	d055      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80062c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062d4:	d033      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80062d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062da:	d82c      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e0:	d02f      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80062e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e6:	d826      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062ec:	d02b      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80062ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062f2:	d820      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062f8:	d012      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80062fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062fe:	d81a      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d022      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006304:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006308:	d115      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630e:	3308      	adds	r3, #8
 8006310:	2101      	movs	r1, #1
 8006312:	4618      	mov	r0, r3
 8006314:	f001 f9a6 	bl	8007664 <RCCEx_PLL2_Config>
 8006318:	4603      	mov	r3, r0
 800631a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800631e:	e015      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006324:	3328      	adds	r3, #40	@ 0x28
 8006326:	2101      	movs	r1, #1
 8006328:	4618      	mov	r0, r3
 800632a:	f001 fa4d 	bl	80077c8 <RCCEx_PLL3_Config>
 800632e:	4603      	mov	r3, r0
 8006330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006334:	e00a      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800633c:	e006      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800633e:	bf00      	nop
 8006340:	e004      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006342:	bf00      	nop
 8006344:	e002      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006346:	bf00      	nop
 8006348:	e000      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800634a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10b      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006354:	4ba3      	ldr	r3, [pc, #652]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006358:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800635c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006364:	4a9f      	ldr	r2, [pc, #636]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006366:	430b      	orrs	r3, r1
 8006368:	6593      	str	r3, [r2, #88]	@ 0x58
 800636a:	e003      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006370:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006380:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006384:	2300      	movs	r3, #0
 8006386:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800638a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800638e:	460b      	mov	r3, r1
 8006390:	4313      	orrs	r3, r2
 8006392:	d037      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800639e:	d00e      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80063a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063a4:	d816      	bhi.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d018      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80063aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ae:	d111      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b0:	4b8c      	ldr	r3, [pc, #560]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b4:	4a8b      	ldr	r2, [pc, #556]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063bc:	e00f      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c2:	3308      	adds	r3, #8
 80063c4:	2101      	movs	r1, #1
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 f94c 	bl	8007664 <RCCEx_PLL2_Config>
 80063cc:	4603      	mov	r3, r0
 80063ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063d2:	e004      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063da:	e000      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80063dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10a      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063e6:	4b7f      	ldr	r3, [pc, #508]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f4:	4a7b      	ldr	r2, [pc, #492]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063f6:	430b      	orrs	r3, r1
 80063f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80063fa:	e003      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006400:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006410:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006414:	2300      	movs	r3, #0
 8006416:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800641a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800641e:	460b      	mov	r3, r1
 8006420:	4313      	orrs	r3, r2
 8006422:	d039      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800642a:	2b03      	cmp	r3, #3
 800642c:	d81c      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800642e:	a201      	add	r2, pc, #4	@ (adr r2, 8006434 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006471 	.word	0x08006471
 8006438:	08006445 	.word	0x08006445
 800643c:	08006453 	.word	0x08006453
 8006440:	08006471 	.word	0x08006471
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006444:	4b67      	ldr	r3, [pc, #412]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	4a66      	ldr	r2, [pc, #408]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800644a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800644e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006450:	e00f      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006456:	3308      	adds	r3, #8
 8006458:	2102      	movs	r1, #2
 800645a:	4618      	mov	r0, r3
 800645c:	f001 f902 	bl	8007664 <RCCEx_PLL2_Config>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006466:	e004      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800646e:	e000      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800647a:	4b5a      	ldr	r3, [pc, #360]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800647c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800647e:	f023 0103 	bic.w	r1, r3, #3
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006488:	4a56      	ldr	r2, [pc, #344]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800648a:	430b      	orrs	r3, r1
 800648c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800648e:	e003      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80064a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064a8:	2300      	movs	r3, #0
 80064aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80064b2:	460b      	mov	r3, r1
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f000 809f 	beq.w	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064ba:	4b4b      	ldr	r3, [pc, #300]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a4a      	ldr	r2, [pc, #296]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064c6:	f7fb f8d3 	bl	8001670 <HAL_GetTick>
 80064ca:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064ce:	e00b      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d0:	f7fb f8ce 	bl	8001670 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b64      	cmp	r3, #100	@ 0x64
 80064de:	d903      	bls.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064e6:	e005      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064e8:	4b3f      	ldr	r3, [pc, #252]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0ed      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80064f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d179      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80064fc:	4b39      	ldr	r3, [pc, #228]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006508:	4053      	eors	r3, r2
 800650a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800650e:	2b00      	cmp	r3, #0
 8006510:	d015      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006512:	4b34      	ldr	r3, [pc, #208]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800651a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800651e:	4b31      	ldr	r3, [pc, #196]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006522:	4a30      	ldr	r2, [pc, #192]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006528:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800652a:	4b2e      	ldr	r3, [pc, #184]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800652c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652e:	4a2d      	ldr	r2, [pc, #180]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006534:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006536:	4a2b      	ldr	r2, [pc, #172]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800653c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800653e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006542:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800654a:	d118      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654c:	f7fb f890 	bl	8001670 <HAL_GetTick>
 8006550:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006554:	e00d      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006556:	f7fb f88b 	bl	8001670 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006560:	1ad2      	subs	r2, r2, r3
 8006562:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006566:	429a      	cmp	r2, r3
 8006568:	d903      	bls.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006570:	e005      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006572:	4b1c      	ldr	r3, [pc, #112]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0eb      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800657e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006582:	2b00      	cmp	r3, #0
 8006584:	d129      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800658e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006596:	d10e      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006598:	4b12      	ldr	r3, [pc, #72]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065a8:	091a      	lsrs	r2, r3, #4
 80065aa:	4b10      	ldr	r3, [pc, #64]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	4a0d      	ldr	r2, [pc, #52]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065b0:	430b      	orrs	r3, r1
 80065b2:	6113      	str	r3, [r2, #16]
 80065b4:	e005      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80065b6:	4b0b      	ldr	r3, [pc, #44]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	4a0a      	ldr	r2, [pc, #40]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065c0:	6113      	str	r3, [r2, #16]
 80065c2:	4b08      	ldr	r3, [pc, #32]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065c4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80065c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065d2:	4a04      	ldr	r2, [pc, #16]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80065d8:	e00e      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80065e2:	e009      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80065e4:	58024400 	.word	0x58024400
 80065e8:	58024800 	.word	0x58024800
 80065ec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f002 0301 	and.w	r3, r2, #1
 8006604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006608:	2300      	movs	r3, #0
 800660a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800660e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006612:	460b      	mov	r3, r1
 8006614:	4313      	orrs	r3, r2
 8006616:	f000 8089 	beq.w	800672c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006620:	2b28      	cmp	r3, #40	@ 0x28
 8006622:	d86b      	bhi.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006624:	a201      	add	r2, pc, #4	@ (adr r2, 800662c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662a:	bf00      	nop
 800662c:	08006705 	.word	0x08006705
 8006630:	080066fd 	.word	0x080066fd
 8006634:	080066fd 	.word	0x080066fd
 8006638:	080066fd 	.word	0x080066fd
 800663c:	080066fd 	.word	0x080066fd
 8006640:	080066fd 	.word	0x080066fd
 8006644:	080066fd 	.word	0x080066fd
 8006648:	080066fd 	.word	0x080066fd
 800664c:	080066d1 	.word	0x080066d1
 8006650:	080066fd 	.word	0x080066fd
 8006654:	080066fd 	.word	0x080066fd
 8006658:	080066fd 	.word	0x080066fd
 800665c:	080066fd 	.word	0x080066fd
 8006660:	080066fd 	.word	0x080066fd
 8006664:	080066fd 	.word	0x080066fd
 8006668:	080066fd 	.word	0x080066fd
 800666c:	080066e7 	.word	0x080066e7
 8006670:	080066fd 	.word	0x080066fd
 8006674:	080066fd 	.word	0x080066fd
 8006678:	080066fd 	.word	0x080066fd
 800667c:	080066fd 	.word	0x080066fd
 8006680:	080066fd 	.word	0x080066fd
 8006684:	080066fd 	.word	0x080066fd
 8006688:	080066fd 	.word	0x080066fd
 800668c:	08006705 	.word	0x08006705
 8006690:	080066fd 	.word	0x080066fd
 8006694:	080066fd 	.word	0x080066fd
 8006698:	080066fd 	.word	0x080066fd
 800669c:	080066fd 	.word	0x080066fd
 80066a0:	080066fd 	.word	0x080066fd
 80066a4:	080066fd 	.word	0x080066fd
 80066a8:	080066fd 	.word	0x080066fd
 80066ac:	08006705 	.word	0x08006705
 80066b0:	080066fd 	.word	0x080066fd
 80066b4:	080066fd 	.word	0x080066fd
 80066b8:	080066fd 	.word	0x080066fd
 80066bc:	080066fd 	.word	0x080066fd
 80066c0:	080066fd 	.word	0x080066fd
 80066c4:	080066fd 	.word	0x080066fd
 80066c8:	080066fd 	.word	0x080066fd
 80066cc:	08006705 	.word	0x08006705
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d4:	3308      	adds	r3, #8
 80066d6:	2101      	movs	r1, #1
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 ffc3 	bl	8007664 <RCCEx_PLL2_Config>
 80066de:	4603      	mov	r3, r0
 80066e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066e4:	e00f      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ea:	3328      	adds	r3, #40	@ 0x28
 80066ec:	2101      	movs	r1, #1
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 f86a 	bl	80077c8 <RCCEx_PLL3_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066fa:	e004      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006702:	e000      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800670e:	4bbf      	ldr	r3, [pc, #764]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006712:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800671c:	4abb      	ldr	r2, [pc, #748]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800671e:	430b      	orrs	r3, r1
 8006720:	6553      	str	r3, [r2, #84]	@ 0x54
 8006722:	e003      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f002 0302 	and.w	r3, r2, #2
 8006738:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800673c:	2300      	movs	r3, #0
 800673e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006742:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006746:	460b      	mov	r3, r1
 8006748:	4313      	orrs	r3, r2
 800674a:	d041      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800674c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006750:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006752:	2b05      	cmp	r3, #5
 8006754:	d824      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006756:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	080067a9 	.word	0x080067a9
 8006760:	08006775 	.word	0x08006775
 8006764:	0800678b 	.word	0x0800678b
 8006768:	080067a9 	.word	0x080067a9
 800676c:	080067a9 	.word	0x080067a9
 8006770:	080067a9 	.word	0x080067a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006778:	3308      	adds	r3, #8
 800677a:	2101      	movs	r1, #1
 800677c:	4618      	mov	r0, r3
 800677e:	f000 ff71 	bl	8007664 <RCCEx_PLL2_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006788:	e00f      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800678a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678e:	3328      	adds	r3, #40	@ 0x28
 8006790:	2101      	movs	r1, #1
 8006792:	4618      	mov	r0, r3
 8006794:	f001 f818 	bl	80077c8 <RCCEx_PLL3_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800679e:	e004      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067a6:	e000      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80067a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80067b2:	4b96      	ldr	r3, [pc, #600]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b6:	f023 0107 	bic.w	r1, r3, #7
 80067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067c0:	4a92      	ldr	r2, [pc, #584]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067c2:	430b      	orrs	r3, r1
 80067c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80067c6:	e003      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f002 0304 	and.w	r3, r2, #4
 80067dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067e0:	2300      	movs	r3, #0
 80067e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4313      	orrs	r3, r2
 80067ee:	d044      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80067f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067f8:	2b05      	cmp	r3, #5
 80067fa:	d825      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80067fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006804 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80067fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006802:	bf00      	nop
 8006804:	08006851 	.word	0x08006851
 8006808:	0800681d 	.word	0x0800681d
 800680c:	08006833 	.word	0x08006833
 8006810:	08006851 	.word	0x08006851
 8006814:	08006851 	.word	0x08006851
 8006818:	08006851 	.word	0x08006851
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800681c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006820:	3308      	adds	r3, #8
 8006822:	2101      	movs	r1, #1
 8006824:	4618      	mov	r0, r3
 8006826:	f000 ff1d 	bl	8007664 <RCCEx_PLL2_Config>
 800682a:	4603      	mov	r3, r0
 800682c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006830:	e00f      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006836:	3328      	adds	r3, #40	@ 0x28
 8006838:	2101      	movs	r1, #1
 800683a:	4618      	mov	r0, r3
 800683c:	f000 ffc4 	bl	80077c8 <RCCEx_PLL3_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006846:	e004      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800684e:	e000      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10b      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800685a:	4b6c      	ldr	r3, [pc, #432]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800685c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685e:	f023 0107 	bic.w	r1, r3, #7
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800686a:	4a68      	ldr	r2, [pc, #416]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800686c:	430b      	orrs	r3, r1
 800686e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006870:	e003      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800687a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f002 0320 	and.w	r3, r2, #32
 8006886:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800688a:	2300      	movs	r3, #0
 800688c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006890:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006894:	460b      	mov	r3, r1
 8006896:	4313      	orrs	r3, r2
 8006898:	d055      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800689a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068a6:	d033      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80068a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068ac:	d82c      	bhi.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b2:	d02f      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80068b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b8:	d826      	bhi.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068be:	d02b      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80068c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068c4:	d820      	bhi.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068ca:	d012      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80068cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068d0:	d81a      	bhi.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d022      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80068d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068da:	d115      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e0:	3308      	adds	r3, #8
 80068e2:	2100      	movs	r1, #0
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 febd 	bl	8007664 <RCCEx_PLL2_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80068f0:	e015      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f6:	3328      	adds	r3, #40	@ 0x28
 80068f8:	2102      	movs	r1, #2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 ff64 	bl	80077c8 <RCCEx_PLL3_Config>
 8006900:	4603      	mov	r3, r0
 8006902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006906:	e00a      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800690e:	e006      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006910:	bf00      	nop
 8006912:	e004      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006914:	bf00      	nop
 8006916:	e002      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006918:	bf00      	nop
 800691a:	e000      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800691c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10b      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006926:	4b39      	ldr	r3, [pc, #228]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800692a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006936:	4a35      	ldr	r2, [pc, #212]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006938:	430b      	orrs	r3, r1
 800693a:	6553      	str	r3, [r2, #84]	@ 0x54
 800693c:	e003      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006952:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006956:	2300      	movs	r3, #0
 8006958:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800695c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006960:	460b      	mov	r3, r1
 8006962:	4313      	orrs	r3, r2
 8006964:	d058      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800696e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006972:	d033      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006974:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006978:	d82c      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800697e:	d02f      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006984:	d826      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006986:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800698a:	d02b      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800698c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006990:	d820      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006992:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006996:	d012      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800699c:	d81a      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d022      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80069a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069a6:	d115      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ac:	3308      	adds	r3, #8
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fe57 	bl	8007664 <RCCEx_PLL2_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069bc:	e015      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c2:	3328      	adds	r3, #40	@ 0x28
 80069c4:	2102      	movs	r1, #2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fefe 	bl	80077c8 <RCCEx_PLL3_Config>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069d2:	e00a      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069da:	e006      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069dc:	bf00      	nop
 80069de:	e004      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069e0:	bf00      	nop
 80069e2:	e002      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069e4:	bf00      	nop
 80069e6:	e000      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10e      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069f2:	4b06      	ldr	r3, [pc, #24]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a02:	4a02      	ldr	r2, [pc, #8]	@ (8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a04:	430b      	orrs	r3, r1
 8006a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a08:	e006      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006a0a:	bf00      	nop
 8006a0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a32:	460b      	mov	r3, r1
 8006a34:	4313      	orrs	r3, r2
 8006a36:	d055      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a40:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a44:	d033      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006a46:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a4a:	d82c      	bhi.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a50:	d02f      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a56:	d826      	bhi.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a58:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a5c:	d02b      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006a5e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a62:	d820      	bhi.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a68:	d012      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006a6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a6e:	d81a      	bhi.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d022      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a78:	d115      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7e:	3308      	adds	r3, #8
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fdee 	bl	8007664 <RCCEx_PLL2_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a8e:	e015      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a94:	3328      	adds	r3, #40	@ 0x28
 8006a96:	2102      	movs	r1, #2
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fe95 	bl	80077c8 <RCCEx_PLL3_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006aa4:	e00a      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aac:	e006      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006aae:	bf00      	nop
 8006ab0:	e004      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ab2:	bf00      	nop
 8006ab4:	e002      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ab6:	bf00      	nop
 8006ab8:	e000      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10b      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ac4:	4ba1      	ldr	r3, [pc, #644]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ad4:	4a9d      	ldr	r2, [pc, #628]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ada:	e003      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f002 0308 	and.w	r3, r2, #8
 8006af0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006af4:	2300      	movs	r3, #0
 8006af6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006afa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006afe:	460b      	mov	r3, r1
 8006b00:	4313      	orrs	r3, r2
 8006b02:	d01e      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b16:	3328      	adds	r3, #40	@ 0x28
 8006b18:	2102      	movs	r1, #2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fe54 	bl	80077c8 <RCCEx_PLL3_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b2c:	4b87      	ldr	r3, [pc, #540]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b30:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b3c:	4a83      	ldr	r2, [pc, #524]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f002 0310 	and.w	r3, r2, #16
 8006b4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b52:	2300      	movs	r3, #0
 8006b54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b58:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	d01e      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b6e:	d10c      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b74:	3328      	adds	r3, #40	@ 0x28
 8006b76:	2102      	movs	r1, #2
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fe25 	bl	80077c8 <RCCEx_PLL3_Config>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b8a:	4b70      	ldr	r3, [pc, #448]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b9a:	4a6c      	ldr	r2, [pc, #432]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006bac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bb6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	d03e      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bcc:	d022      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006bce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bd2:	d81b      	bhi.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bdc:	d00b      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006bde:	e015      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be4:	3308      	adds	r3, #8
 8006be6:	2100      	movs	r1, #0
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fd3b 	bl	8007664 <RCCEx_PLL2_Config>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006bf4:	e00f      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfa:	3328      	adds	r3, #40	@ 0x28
 8006bfc:	2102      	movs	r1, #2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fde2 	bl	80077c8 <RCCEx_PLL3_Config>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c0a:	e004      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c12:	e000      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c22:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c2e:	4a47      	ldr	r2, [pc, #284]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c34:	e003      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c50:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c54:	460b      	mov	r3, r1
 8006c56:	4313      	orrs	r3, r2
 8006c58:	d03b      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c66:	d01f      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006c68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c6c:	d818      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c72:	d003      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006c74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c78:	d007      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006c7a:	e011      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c7c:	4b33      	ldr	r3, [pc, #204]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c80:	4a32      	ldr	r2, [pc, #200]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c88:	e00f      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8e:	3328      	adds	r3, #40	@ 0x28
 8006c90:	2101      	movs	r1, #1
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fd98 	bl	80077c8 <RCCEx_PLL3_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c9e:	e004      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ca6:	e000      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10b      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cb2:	4b26      	ldr	r3, [pc, #152]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc2:	4a22      	ldr	r2, [pc, #136]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cc8:	e003      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006cde:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006ce4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4313      	orrs	r3, r2
 8006cec:	d034      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cfc:	d007      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006cfe:	e011      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d00:	4b12      	ldr	r3, [pc, #72]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	4a11      	ldr	r2, [pc, #68]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d0c:	e00e      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d12:	3308      	adds	r3, #8
 8006d14:	2102      	movs	r1, #2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fca4 	bl	8007664 <RCCEx_PLL2_Config>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d22:	e003      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10d      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d34:	4b05      	ldr	r3, [pc, #20]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d38:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d42:	4a02      	ldr	r2, [pc, #8]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d44:	430b      	orrs	r3, r1
 8006d46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d48:	e006      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006d4a:	bf00      	nop
 8006d4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d60:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d66:	2300      	movs	r3, #0
 8006d68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d6a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4313      	orrs	r3, r2
 8006d72:	d00c      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d78:	3328      	adds	r3, #40	@ 0x28
 8006d7a:	2102      	movs	r1, #2
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fd23 	bl	80077c8 <RCCEx_PLL3_Config>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006d9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006da0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006da4:	460b      	mov	r3, r1
 8006da6:	4313      	orrs	r3, r2
 8006da8:	d038      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006db2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006db6:	d018      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006db8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dbc:	d811      	bhi.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006dbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dc2:	d014      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dc8:	d80b      	bhi.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d011      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006dce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dd2:	d106      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd4:	4bc3      	ldr	r3, [pc, #780]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd8:	4ac2      	ldr	r2, [pc, #776]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006de0:	e008      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006de8:	e004      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006dea:	bf00      	nop
 8006dec:	e002      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006dfc:	4bb9      	ldr	r3, [pc, #740]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e0c:	4ab5      	ldr	r2, [pc, #724]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e12:	e003      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006e28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e32:	460b      	mov	r3, r1
 8006e34:	4313      	orrs	r3, r2
 8006e36:	d009      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e38:	4baa      	ldr	r3, [pc, #680]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e46:	4aa7      	ldr	r2, [pc, #668]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006e58:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e62:	460b      	mov	r3, r1
 8006e64:	4313      	orrs	r3, r2
 8006e66:	d00a      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e68:	4b9e      	ldr	r3, [pc, #632]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e78:	4a9a      	ldr	r2, [pc, #616]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e7a:	430b      	orrs	r3, r1
 8006e7c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006e94:	460b      	mov	r3, r1
 8006e96:	4313      	orrs	r3, r2
 8006e98:	d009      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e9a:	4b92      	ldr	r3, [pc, #584]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e9e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ea8:	4a8e      	ldr	r2, [pc, #568]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006eba:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ec0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	d00e      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006eca:	4b86      	ldr	r3, [pc, #536]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	4a85      	ldr	r2, [pc, #532]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ed0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ed4:	6113      	str	r3, [r2, #16]
 8006ed6:	4b83      	ldr	r3, [pc, #524]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ed8:	6919      	ldr	r1, [r3, #16]
 8006eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ede:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006ee2:	4a80      	ldr	r2, [pc, #512]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006efa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006efe:	460b      	mov	r3, r1
 8006f00:	4313      	orrs	r3, r2
 8006f02:	d009      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f04:	4b77      	ldr	r3, [pc, #476]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f08:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f12:	4a74      	ldr	r2, [pc, #464]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f14:	430b      	orrs	r3, r1
 8006f16:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f26:	2300      	movs	r3, #0
 8006f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4313      	orrs	r3, r2
 8006f32:	d00a      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f34:	4b6b      	ldr	r3, [pc, #428]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f38:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f44:	4a67      	ldr	r2, [pc, #412]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f46:	430b      	orrs	r3, r1
 8006f48:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	2100      	movs	r1, #0
 8006f54:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f60:	460b      	mov	r3, r1
 8006f62:	4313      	orrs	r3, r2
 8006f64:	d011      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fb78 	bl	8007664 <RCCEx_PLL2_Config>
 8006f74:	4603      	mov	r3, r0
 8006f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	2100      	movs	r1, #0
 8006f94:	6239      	str	r1, [r7, #32]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	d011      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006faa:	3308      	adds	r3, #8
 8006fac:	2101      	movs	r1, #1
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fb58 	bl	8007664 <RCCEx_PLL2_Config>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	61b9      	str	r1, [r7, #24]
 8006fd6:	f003 0304 	and.w	r3, r3, #4
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	d011      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fea:	3308      	adds	r3, #8
 8006fec:	2102      	movs	r1, #2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fb38 	bl	8007664 <RCCEx_PLL2_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800700a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	2100      	movs	r1, #0
 8007014:	6139      	str	r1, [r7, #16]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007020:	460b      	mov	r3, r1
 8007022:	4313      	orrs	r3, r2
 8007024:	d011      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702a:	3328      	adds	r3, #40	@ 0x28
 800702c:	2100      	movs	r1, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fbca 	bl	80077c8 <RCCEx_PLL3_Config>
 8007034:	4603      	mov	r3, r0
 8007036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800703a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800704a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	2100      	movs	r1, #0
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	f003 0310 	and.w	r3, r3, #16
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007060:	460b      	mov	r3, r1
 8007062:	4313      	orrs	r3, r2
 8007064:	d011      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706a:	3328      	adds	r3, #40	@ 0x28
 800706c:	2101      	movs	r1, #1
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fbaa 	bl	80077c8 <RCCEx_PLL3_Config>
 8007074:	4603      	mov	r3, r0
 8007076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800707a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800708a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007092:	2100      	movs	r1, #0
 8007094:	6039      	str	r1, [r7, #0]
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	607b      	str	r3, [r7, #4]
 800709c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80070a0:	460b      	mov	r3, r1
 80070a2:	4313      	orrs	r3, r2
 80070a4:	d011      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070aa:	3328      	adds	r3, #40	@ 0x28
 80070ac:	2102      	movs	r1, #2
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fb8a 	bl	80077c8 <RCCEx_PLL3_Config>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80070ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80070ca:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e000      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
}
 80070d8:	4618      	mov	r0, r3
 80070da:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80070de:	46bd      	mov	sp, r7
 80070e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070e4:	58024400 	.word	0x58024400

080070e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80070ec:	f7fe fd96 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 80070f0:	4602      	mov	r2, r0
 80070f2:	4b06      	ldr	r3, [pc, #24]	@ (800710c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	091b      	lsrs	r3, r3, #4
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	4904      	ldr	r1, [pc, #16]	@ (8007110 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070fe:	5ccb      	ldrb	r3, [r1, r3]
 8007100:	f003 031f 	and.w	r3, r3, #31
 8007104:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007108:	4618      	mov	r0, r3
 800710a:	bd80      	pop	{r7, pc}
 800710c:	58024400 	.word	0x58024400
 8007110:	0800c08c 	.word	0x0800c08c

08007114 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007114:	b480      	push	{r7}
 8007116:	b089      	sub	sp, #36	@ 0x24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800711c:	4ba1      	ldr	r3, [pc, #644]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007120:	f003 0303 	and.w	r3, r3, #3
 8007124:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007126:	4b9f      	ldr	r3, [pc, #636]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712a:	0b1b      	lsrs	r3, r3, #12
 800712c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007130:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007132:	4b9c      	ldr	r3, [pc, #624]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007136:	091b      	lsrs	r3, r3, #4
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800713e:	4b99      	ldr	r3, [pc, #612]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007142:	08db      	lsrs	r3, r3, #3
 8007144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	fb02 f303 	mul.w	r3, r2, r3
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007156:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8111 	beq.w	8007384 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b02      	cmp	r3, #2
 8007166:	f000 8083 	beq.w	8007270 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b02      	cmp	r3, #2
 800716e:	f200 80a1 	bhi.w	80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d056      	beq.n	800722c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800717e:	e099      	b.n	80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007180:	4b88      	ldr	r3, [pc, #544]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b00      	cmp	r3, #0
 800718a:	d02d      	beq.n	80071e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800718c:	4b85      	ldr	r3, [pc, #532]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	08db      	lsrs	r3, r3, #3
 8007192:	f003 0303 	and.w	r3, r3, #3
 8007196:	4a84      	ldr	r2, [pc, #528]	@ (80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007198:	fa22 f303 	lsr.w	r3, r2, r3
 800719c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	ee07 3a90 	vmov	s15, r3
 80071a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b6:	4b7b      	ldr	r3, [pc, #492]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071e6:	e087      	b.n	80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fa:	4b6a      	ldr	r3, [pc, #424]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720a:	ed97 6a03 	vldr	s12, [r7, #12]
 800720e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800721e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800722a:	e065      	b.n	80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007236:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800723a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723e:	4b59      	ldr	r3, [pc, #356]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007252:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800726e:	e043      	b.n	80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800727e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007282:	4b48      	ldr	r3, [pc, #288]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007292:	ed97 6a03 	vldr	s12, [r7, #12]
 8007296:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800729a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b2:	e021      	b.n	80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c6:	4b37      	ldr	r3, [pc, #220]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80072f8:	4b2a      	ldr	r3, [pc, #168]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fc:	0a5b      	lsrs	r3, r3, #9
 80072fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800730e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007312:	edd7 6a07 	vldr	s13, [r7, #28]
 8007316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800731a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800731e:	ee17 2a90 	vmov	r2, s15
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007326:	4b1f      	ldr	r3, [pc, #124]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732a:	0c1b      	lsrs	r3, r3, #16
 800732c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007330:	ee07 3a90 	vmov	s15, r3
 8007334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007338:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800733c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007340:	edd7 6a07 	vldr	s13, [r7, #28]
 8007344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734c:	ee17 2a90 	vmov	r2, s15
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007354:	4b13      	ldr	r3, [pc, #76]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007358:	0e1b      	lsrs	r3, r3, #24
 800735a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800735e:	ee07 3a90 	vmov	s15, r3
 8007362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007366:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800736a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800736e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800737a:	ee17 2a90 	vmov	r2, s15
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007382:	e008      	b.n	8007396 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	609a      	str	r2, [r3, #8]
}
 8007396:	bf00      	nop
 8007398:	3724      	adds	r7, #36	@ 0x24
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	58024400 	.word	0x58024400
 80073a8:	03d09000 	.word	0x03d09000
 80073ac:	46000000 	.word	0x46000000
 80073b0:	4c742400 	.word	0x4c742400
 80073b4:	4a742400 	.word	0x4a742400
 80073b8:	4bbebc20 	.word	0x4bbebc20

080073bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073bc:	b480      	push	{r7}
 80073be:	b089      	sub	sp, #36	@ 0x24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073c4:	4ba1      	ldr	r3, [pc, #644]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c8:	f003 0303 	and.w	r3, r3, #3
 80073cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80073ce:	4b9f      	ldr	r3, [pc, #636]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d2:	0d1b      	lsrs	r3, r3, #20
 80073d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073da:	4b9c      	ldr	r3, [pc, #624]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073de:	0a1b      	lsrs	r3, r3, #8
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80073e6:	4b99      	ldr	r3, [pc, #612]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ea:	08db      	lsrs	r3, r3, #3
 80073ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	fb02 f303 	mul.w	r3, r2, r3
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8111 	beq.w	800762c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2b02      	cmp	r3, #2
 800740e:	f000 8083 	beq.w	8007518 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	2b02      	cmp	r3, #2
 8007416:	f200 80a1 	bhi.w	800755c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d056      	beq.n	80074d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007426:	e099      	b.n	800755c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007428:	4b88      	ldr	r3, [pc, #544]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b00      	cmp	r3, #0
 8007432:	d02d      	beq.n	8007490 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007434:	4b85      	ldr	r3, [pc, #532]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	08db      	lsrs	r3, r3, #3
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	4a84      	ldr	r2, [pc, #528]	@ (8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007440:	fa22 f303 	lsr.w	r3, r2, r3
 8007444:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	ee07 3a90 	vmov	s15, r3
 800744c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800745e:	4b7b      	ldr	r3, [pc, #492]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007472:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800747a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800748e:	e087      	b.n	80075a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800749e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a2:	4b6a      	ldr	r3, [pc, #424]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074d2:	e065      	b.n	80075a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800765c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074e6:	4b59      	ldr	r3, [pc, #356]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800750a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800750e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007516:	e043      	b.n	80075a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007522:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800752a:	4b48      	ldr	r3, [pc, #288]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800752c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800753a:	ed97 6a03 	vldr	s12, [r7, #12]
 800753e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800754a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800754e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800755a:	e021      	b.n	80075a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007566:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800765c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800756a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800756e:	4b37      	ldr	r3, [pc, #220]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800757e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007582:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007654 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800758a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800758e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800759e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075a0:	4b2a      	ldr	r3, [pc, #168]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a4:	0a5b      	lsrs	r3, r3, #9
 80075a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80075be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c6:	ee17 2a90 	vmov	r2, s15
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80075ce:	4b1f      	ldr	r3, [pc, #124]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d2:	0c1b      	lsrs	r3, r3, #16
 80075d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f4:	ee17 2a90 	vmov	r2, s15
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80075fc:	4b13      	ldr	r3, [pc, #76]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007600:	0e1b      	lsrs	r3, r3, #24
 8007602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007612:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007616:	edd7 6a07 	vldr	s13, [r7, #28]
 800761a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007622:	ee17 2a90 	vmov	r2, s15
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800762a:	e008      	b.n	800763e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	609a      	str	r2, [r3, #8]
}
 800763e:	bf00      	nop
 8007640:	3724      	adds	r7, #36	@ 0x24
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	58024400 	.word	0x58024400
 8007650:	03d09000 	.word	0x03d09000
 8007654:	46000000 	.word	0x46000000
 8007658:	4c742400 	.word	0x4c742400
 800765c:	4a742400 	.word	0x4a742400
 8007660:	4bbebc20 	.word	0x4bbebc20

08007664 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007672:	4b53      	ldr	r3, [pc, #332]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	2b03      	cmp	r3, #3
 800767c:	d101      	bne.n	8007682 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e099      	b.n	80077b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007682:	4b4f      	ldr	r3, [pc, #316]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a4e      	ldr	r2, [pc, #312]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007688:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800768c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800768e:	f7f9 ffef 	bl	8001670 <HAL_GetTick>
 8007692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007694:	e008      	b.n	80076a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007696:	f7f9 ffeb 	bl	8001670 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e086      	b.n	80077b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076a8:	4b45      	ldr	r3, [pc, #276]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1f0      	bne.n	8007696 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076b4:	4b42      	ldr	r3, [pc, #264]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 80076b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	031b      	lsls	r3, r3, #12
 80076c2:	493f      	ldr	r1, [pc, #252]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	025b      	lsls	r3, r3, #9
 80076da:	b29b      	uxth	r3, r3
 80076dc:	431a      	orrs	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	061b      	lsls	r3, r3, #24
 80076f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076f8:	4931      	ldr	r1, [pc, #196]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076fe:	4b30      	ldr	r3, [pc, #192]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	492d      	ldr	r1, [pc, #180]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 800770c:	4313      	orrs	r3, r2
 800770e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007710:	4b2b      	ldr	r3, [pc, #172]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007714:	f023 0220 	bic.w	r2, r3, #32
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	4928      	ldr	r1, [pc, #160]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 800771e:	4313      	orrs	r3, r2
 8007720:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007722:	4b27      	ldr	r3, [pc, #156]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007726:	4a26      	ldr	r2, [pc, #152]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007728:	f023 0310 	bic.w	r3, r3, #16
 800772c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800772e:	4b24      	ldr	r3, [pc, #144]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007732:	4b24      	ldr	r3, [pc, #144]	@ (80077c4 <RCCEx_PLL2_Config+0x160>)
 8007734:	4013      	ands	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	69d2      	ldr	r2, [r2, #28]
 800773a:	00d2      	lsls	r2, r2, #3
 800773c:	4920      	ldr	r1, [pc, #128]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 800773e:	4313      	orrs	r3, r2
 8007740:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007742:	4b1f      	ldr	r3, [pc, #124]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007746:	4a1e      	ldr	r2, [pc, #120]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007748:	f043 0310 	orr.w	r3, r3, #16
 800774c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007754:	4b1a      	ldr	r3, [pc, #104]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007758:	4a19      	ldr	r2, [pc, #100]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 800775a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800775e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007760:	e00f      	b.n	8007782 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d106      	bne.n	8007776 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007768:	4b15      	ldr	r3, [pc, #84]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 800776a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776c:	4a14      	ldr	r2, [pc, #80]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 800776e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007772:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007774:	e005      	b.n	8007782 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007776:	4b12      	ldr	r3, [pc, #72]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777a:	4a11      	ldr	r2, [pc, #68]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 800777c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007780:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007782:	4b0f      	ldr	r3, [pc, #60]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a0e      	ldr	r2, [pc, #56]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 8007788:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800778c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800778e:	f7f9 ff6f 	bl	8001670 <HAL_GetTick>
 8007792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007794:	e008      	b.n	80077a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007796:	f7f9 ff6b 	bl	8001670 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d901      	bls.n	80077a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e006      	b.n	80077b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077a8:	4b05      	ldr	r3, [pc, #20]	@ (80077c0 <RCCEx_PLL2_Config+0x15c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0f0      	beq.n	8007796 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	58024400 	.word	0x58024400
 80077c4:	ffff0007 	.word	0xffff0007

080077c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077d6:	4b53      	ldr	r3, [pc, #332]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80077d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d101      	bne.n	80077e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e099      	b.n	800791a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077e6:	4b4f      	ldr	r3, [pc, #316]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a4e      	ldr	r2, [pc, #312]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80077ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077f2:	f7f9 ff3d 	bl	8001670 <HAL_GetTick>
 80077f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077f8:	e008      	b.n	800780c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077fa:	f7f9 ff39 	bl	8001670 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e086      	b.n	800791a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800780c:	4b45      	ldr	r3, [pc, #276]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f0      	bne.n	80077fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007818:	4b42      	ldr	r3, [pc, #264]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 800781a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	051b      	lsls	r3, r3, #20
 8007826:	493f      	ldr	r1, [pc, #252]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 8007828:	4313      	orrs	r3, r2
 800782a:	628b      	str	r3, [r1, #40]	@ 0x28
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	3b01      	subs	r3, #1
 8007832:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	3b01      	subs	r3, #1
 800783c:	025b      	lsls	r3, r3, #9
 800783e:	b29b      	uxth	r3, r3
 8007840:	431a      	orrs	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	3b01      	subs	r3, #1
 8007848:	041b      	lsls	r3, r3, #16
 800784a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	3b01      	subs	r3, #1
 8007856:	061b      	lsls	r3, r3, #24
 8007858:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800785c:	4931      	ldr	r1, [pc, #196]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 800785e:	4313      	orrs	r3, r2
 8007860:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007862:	4b30      	ldr	r3, [pc, #192]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 8007864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007866:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	492d      	ldr	r1, [pc, #180]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 8007870:	4313      	orrs	r3, r2
 8007872:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007874:	4b2b      	ldr	r3, [pc, #172]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 8007876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007878:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	4928      	ldr	r1, [pc, #160]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 8007882:	4313      	orrs	r3, r2
 8007884:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007886:	4b27      	ldr	r3, [pc, #156]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 8007888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788a:	4a26      	ldr	r2, [pc, #152]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 800788c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007890:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007892:	4b24      	ldr	r3, [pc, #144]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 8007894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007896:	4b24      	ldr	r3, [pc, #144]	@ (8007928 <RCCEx_PLL3_Config+0x160>)
 8007898:	4013      	ands	r3, r2
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	69d2      	ldr	r2, [r2, #28]
 800789e:	00d2      	lsls	r2, r2, #3
 80078a0:	4920      	ldr	r1, [pc, #128]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80078a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80078ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d106      	bne.n	80078c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80078ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078bc:	4a19      	ldr	r2, [pc, #100]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80078be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80078c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078c4:	e00f      	b.n	80078e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d106      	bne.n	80078da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078cc:	4b15      	ldr	r3, [pc, #84]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80078ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d0:	4a14      	ldr	r2, [pc, #80]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80078d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80078d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078d8:	e005      	b.n	80078e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078da:	4b12      	ldr	r3, [pc, #72]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80078dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078de:	4a11      	ldr	r2, [pc, #68]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80078e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a0e      	ldr	r2, [pc, #56]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 80078ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078f2:	f7f9 febd 	bl	8001670 <HAL_GetTick>
 80078f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078f8:	e008      	b.n	800790c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078fa:	f7f9 feb9 	bl	8001670 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	2b02      	cmp	r3, #2
 8007906:	d901      	bls.n	800790c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e006      	b.n	800791a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800790c:	4b05      	ldr	r3, [pc, #20]	@ (8007924 <RCCEx_PLL3_Config+0x15c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0f0      	beq.n	80078fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	58024400 	.word	0x58024400
 8007928:	ffff0007 	.word	0xffff0007

0800792c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e049      	b.n	80079d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7f9 fc30 	bl	80011b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3304      	adds	r3, #4
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f000 f96e 	bl	8007c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d020      	beq.n	8007a3e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01b      	beq.n	8007a3e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f06f 0202 	mvn.w	r2, #2
 8007a0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	f003 0303 	and.w	r3, r3, #3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f8f3 	bl	8007c10 <HAL_TIM_IC_CaptureCallback>
 8007a2a:	e005      	b.n	8007a38 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f8e5 	bl	8007bfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f8f6 	bl	8007c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d020      	beq.n	8007a8a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f003 0304 	and.w	r3, r3, #4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d01b      	beq.n	8007a8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f06f 0204 	mvn.w	r2, #4
 8007a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f8cd 	bl	8007c10 <HAL_TIM_IC_CaptureCallback>
 8007a76:	e005      	b.n	8007a84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f8bf 	bl	8007bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f8d0 	bl	8007c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d020      	beq.n	8007ad6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d01b      	beq.n	8007ad6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f06f 0208 	mvn.w	r2, #8
 8007aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2204      	movs	r2, #4
 8007aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f8a7 	bl	8007c10 <HAL_TIM_IC_CaptureCallback>
 8007ac2:	e005      	b.n	8007ad0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f899 	bl	8007bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f8aa 	bl	8007c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f003 0310 	and.w	r3, r3, #16
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d020      	beq.n	8007b22 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f003 0310 	and.w	r3, r3, #16
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d01b      	beq.n	8007b22 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f06f 0210 	mvn.w	r2, #16
 8007af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2208      	movs	r2, #8
 8007af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f881 	bl	8007c10 <HAL_TIM_IC_CaptureCallback>
 8007b0e:	e005      	b.n	8007b1c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f873 	bl	8007bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f884 	bl	8007c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00c      	beq.n	8007b46 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d007      	beq.n	8007b46 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f06f 0201 	mvn.w	r2, #1
 8007b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f851 	bl	8007be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d104      	bne.n	8007b5a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00c      	beq.n	8007b74 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d007      	beq.n	8007b74 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f9a4 	bl	8007ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00c      	beq.n	8007b98 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f99c 	bl	8007ed0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00c      	beq.n	8007bbc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d007      	beq.n	8007bbc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f83e 	bl	8007c38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00c      	beq.n	8007be0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f003 0320 	and.w	r3, r3, #32
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d007      	beq.n	8007be0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f06f 0220 	mvn.w	r2, #32
 8007bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f964 	bl	8007ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a43      	ldr	r2, [pc, #268]	@ (8007d6c <TIM_Base_SetConfig+0x120>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d013      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c6a:	d00f      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a40      	ldr	r2, [pc, #256]	@ (8007d70 <TIM_Base_SetConfig+0x124>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00b      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a3f      	ldr	r2, [pc, #252]	@ (8007d74 <TIM_Base_SetConfig+0x128>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d007      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a3e      	ldr	r2, [pc, #248]	@ (8007d78 <TIM_Base_SetConfig+0x12c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d003      	beq.n	8007c8c <TIM_Base_SetConfig+0x40>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a3d      	ldr	r2, [pc, #244]	@ (8007d7c <TIM_Base_SetConfig+0x130>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d108      	bne.n	8007c9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a32      	ldr	r2, [pc, #200]	@ (8007d6c <TIM_Base_SetConfig+0x120>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d01f      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cac:	d01b      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a2f      	ldr	r2, [pc, #188]	@ (8007d70 <TIM_Base_SetConfig+0x124>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d017      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a2e      	ldr	r2, [pc, #184]	@ (8007d74 <TIM_Base_SetConfig+0x128>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d013      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d78 <TIM_Base_SetConfig+0x12c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00f      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8007d7c <TIM_Base_SetConfig+0x130>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d00b      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8007d80 <TIM_Base_SetConfig+0x134>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d007      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8007d84 <TIM_Base_SetConfig+0x138>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d003      	beq.n	8007ce6 <TIM_Base_SetConfig+0x9a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a29      	ldr	r2, [pc, #164]	@ (8007d88 <TIM_Base_SetConfig+0x13c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d108      	bne.n	8007cf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	689a      	ldr	r2, [r3, #8]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a14      	ldr	r2, [pc, #80]	@ (8007d6c <TIM_Base_SetConfig+0x120>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d00f      	beq.n	8007d3e <TIM_Base_SetConfig+0xf2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a16      	ldr	r2, [pc, #88]	@ (8007d7c <TIM_Base_SetConfig+0x130>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d00b      	beq.n	8007d3e <TIM_Base_SetConfig+0xf2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a15      	ldr	r2, [pc, #84]	@ (8007d80 <TIM_Base_SetConfig+0x134>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d007      	beq.n	8007d3e <TIM_Base_SetConfig+0xf2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a14      	ldr	r2, [pc, #80]	@ (8007d84 <TIM_Base_SetConfig+0x138>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d003      	beq.n	8007d3e <TIM_Base_SetConfig+0xf2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a13      	ldr	r2, [pc, #76]	@ (8007d88 <TIM_Base_SetConfig+0x13c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d103      	bne.n	8007d46 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	691a      	ldr	r2, [r3, #16]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f043 0204 	orr.w	r2, r3, #4
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	601a      	str	r2, [r3, #0]
}
 8007d5e:	bf00      	nop
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	40010000 	.word	0x40010000
 8007d70:	40000400 	.word	0x40000400
 8007d74:	40000800 	.word	0x40000800
 8007d78:	40000c00 	.word	0x40000c00
 8007d7c:	40010400 	.word	0x40010400
 8007d80:	40014000 	.word	0x40014000
 8007d84:	40014400 	.word	0x40014400
 8007d88:	40014800 	.word	0x40014800

08007d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d101      	bne.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007da0:	2302      	movs	r3, #2
 8007da2:	e06d      	b.n	8007e80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a30      	ldr	r2, [pc, #192]	@ (8007e8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d004      	beq.n	8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8007e90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d108      	bne.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007dde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a20      	ldr	r2, [pc, #128]	@ (8007e8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d022      	beq.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e16:	d01d      	beq.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d018      	beq.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a1c      	ldr	r2, [pc, #112]	@ (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d013      	beq.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1a      	ldr	r2, [pc, #104]	@ (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d00e      	beq.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a15      	ldr	r2, [pc, #84]	@ (8007e90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d009      	beq.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a16      	ldr	r2, [pc, #88]	@ (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d004      	beq.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a15      	ldr	r2, [pc, #84]	@ (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d10c      	bne.n	8007e6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	40010000 	.word	0x40010000
 8007e90:	40010400 	.word	0x40010400
 8007e94:	40000400 	.word	0x40000400
 8007e98:	40000800 	.word	0x40000800
 8007e9c:	40000c00 	.word	0x40000c00
 8007ea0:	40001800 	.word	0x40001800
 8007ea4:	40014000 	.word	0x40014000

08007ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e042      	b.n	8007f7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d106      	bne.n	8007f0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7f9 f97d 	bl	8001208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2224      	movs	r2, #36	@ 0x24
 8007f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0201 	bic.w	r2, r2, #1
 8007f24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 f986 	bl	8009240 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fc1b 	bl	8008770 <UART_SetConfig>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e01b      	b.n	8007f7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0201 	orr.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 fa05 	bl	8009384 <UART_CheckIdleState>
 8007f7a:	4603      	mov	r3, r0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b0ba      	sub	sp, #232	@ 0xe8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007faa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007fae:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007fb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d11b      	bne.n	8007ff8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d015      	beq.n	8007ff8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fd0:	f003 0320 	and.w	r3, r3, #32
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d105      	bne.n	8007fe4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 8393 	beq.w	8008714 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	4798      	blx	r3
      }
      return;
 8007ff6:	e38d      	b.n	8008714 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 8123 	beq.w	8008248 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008002:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008006:	4b8d      	ldr	r3, [pc, #564]	@ (800823c <HAL_UART_IRQHandler+0x2b8>)
 8008008:	4013      	ands	r3, r2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d106      	bne.n	800801c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800800e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008012:	4b8b      	ldr	r3, [pc, #556]	@ (8008240 <HAL_UART_IRQHandler+0x2bc>)
 8008014:	4013      	ands	r3, r2
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 8116 	beq.w	8008248 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800801c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d011      	beq.n	800804c <HAL_UART_IRQHandler+0xc8>
 8008028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800802c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2201      	movs	r2, #1
 800803a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008042:	f043 0201 	orr.w	r2, r3, #1
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800804c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d011      	beq.n	800807c <HAL_UART_IRQHandler+0xf8>
 8008058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2202      	movs	r2, #2
 800806a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008072:	f043 0204 	orr.w	r2, r3, #4
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800807c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b00      	cmp	r3, #0
 8008086:	d011      	beq.n	80080ac <HAL_UART_IRQHandler+0x128>
 8008088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00b      	beq.n	80080ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2204      	movs	r2, #4
 800809a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a2:	f043 0202 	orr.w	r2, r3, #2
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b0:	f003 0308 	and.w	r3, r3, #8
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d017      	beq.n	80080e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080bc:	f003 0320 	and.w	r3, r3, #32
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d105      	bne.n	80080d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80080c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080c8:	4b5c      	ldr	r3, [pc, #368]	@ (800823c <HAL_UART_IRQHandler+0x2b8>)
 80080ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00b      	beq.n	80080e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2208      	movs	r2, #8
 80080d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080de:	f043 0208 	orr.w	r2, r3, #8
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d012      	beq.n	800811a <HAL_UART_IRQHandler+0x196>
 80080f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00c      	beq.n	800811a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008110:	f043 0220 	orr.w	r2, r3, #32
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 82f9 	beq.w	8008718 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800812a:	f003 0320 	and.w	r3, r3, #32
 800812e:	2b00      	cmp	r3, #0
 8008130:	d013      	beq.n	800815a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008136:	f003 0320 	and.w	r3, r3, #32
 800813a:	2b00      	cmp	r3, #0
 800813c:	d105      	bne.n	800814a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800813e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d007      	beq.n	800815a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008160:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800816e:	2b40      	cmp	r3, #64	@ 0x40
 8008170:	d005      	beq.n	800817e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008176:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800817a:	2b00      	cmp	r3, #0
 800817c:	d054      	beq.n	8008228 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 fa18 	bl	80095b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800818e:	2b40      	cmp	r3, #64	@ 0x40
 8008190:	d146      	bne.n	8008220 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3308      	adds	r3, #8
 8008198:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3308      	adds	r3, #8
 80081ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80081c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80081ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1d9      	bne.n	8008192 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d017      	beq.n	8008218 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081ee:	4a15      	ldr	r2, [pc, #84]	@ (8008244 <HAL_UART_IRQHandler+0x2c0>)
 80081f0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7f9 ff4d 	bl	8002098 <HAL_DMA_Abort_IT>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d019      	beq.n	8008238 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800820a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008212:	4610      	mov	r0, r2
 8008214:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008216:	e00f      	b.n	8008238 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fa93 	bl	8008744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800821e:	e00b      	b.n	8008238 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fa8f 	bl	8008744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008226:	e007      	b.n	8008238 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fa8b 	bl	8008744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008236:	e26f      	b.n	8008718 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008238:	bf00      	nop
    return;
 800823a:	e26d      	b.n	8008718 <HAL_UART_IRQHandler+0x794>
 800823c:	10000001 	.word	0x10000001
 8008240:	04000120 	.word	0x04000120
 8008244:	08009681 	.word	0x08009681

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800824c:	2b01      	cmp	r3, #1
 800824e:	f040 8203 	bne.w	8008658 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008256:	f003 0310 	and.w	r3, r3, #16
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 81fc 	beq.w	8008658 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008264:	f003 0310 	and.w	r3, r3, #16
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 81f5 	beq.w	8008658 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2210      	movs	r2, #16
 8008274:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008280:	2b40      	cmp	r3, #64	@ 0x40
 8008282:	f040 816d 	bne.w	8008560 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4aa4      	ldr	r2, [pc, #656]	@ (8008520 <HAL_UART_IRQHandler+0x59c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d068      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4aa1      	ldr	r2, [pc, #644]	@ (8008524 <HAL_UART_IRQHandler+0x5a0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d061      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a9f      	ldr	r2, [pc, #636]	@ (8008528 <HAL_UART_IRQHandler+0x5a4>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d05a      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a9c      	ldr	r2, [pc, #624]	@ (800852c <HAL_UART_IRQHandler+0x5a8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d053      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a9a      	ldr	r2, [pc, #616]	@ (8008530 <HAL_UART_IRQHandler+0x5ac>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d04c      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a97      	ldr	r2, [pc, #604]	@ (8008534 <HAL_UART_IRQHandler+0x5b0>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d045      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a95      	ldr	r2, [pc, #596]	@ (8008538 <HAL_UART_IRQHandler+0x5b4>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d03e      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a92      	ldr	r2, [pc, #584]	@ (800853c <HAL_UART_IRQHandler+0x5b8>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d037      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a90      	ldr	r2, [pc, #576]	@ (8008540 <HAL_UART_IRQHandler+0x5bc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d030      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a8d      	ldr	r2, [pc, #564]	@ (8008544 <HAL_UART_IRQHandler+0x5c0>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d029      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a8b      	ldr	r2, [pc, #556]	@ (8008548 <HAL_UART_IRQHandler+0x5c4>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d022      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a88      	ldr	r2, [pc, #544]	@ (800854c <HAL_UART_IRQHandler+0x5c8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d01b      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a86      	ldr	r2, [pc, #536]	@ (8008550 <HAL_UART_IRQHandler+0x5cc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d014      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a83      	ldr	r2, [pc, #524]	@ (8008554 <HAL_UART_IRQHandler+0x5d0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00d      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a81      	ldr	r2, [pc, #516]	@ (8008558 <HAL_UART_IRQHandler+0x5d4>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d006      	beq.n	8008366 <HAL_UART_IRQHandler+0x3e2>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a7e      	ldr	r2, [pc, #504]	@ (800855c <HAL_UART_IRQHandler+0x5d8>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d106      	bne.n	8008374 <HAL_UART_IRQHandler+0x3f0>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	b29b      	uxth	r3, r3
 8008372:	e005      	b.n	8008380 <HAL_UART_IRQHandler+0x3fc>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	b29b      	uxth	r3, r3
 8008380:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008384:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 80ad 	beq.w	80084e8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008394:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008398:	429a      	cmp	r2, r3
 800839a:	f080 80a5 	bcs.w	80084e8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b4:	f000 8087 	beq.w	80084c6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80083cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80083e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80083ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80083fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1da      	bne.n	80083b8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3308      	adds	r3, #8
 8008408:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800840c:	e853 3f00 	ldrex	r3, [r3]
 8008410:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008412:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008414:	f023 0301 	bic.w	r3, r3, #1
 8008418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008426:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800842a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800842e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008438:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e1      	bne.n	8008402 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3308      	adds	r3, #8
 8008444:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800844e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3308      	adds	r3, #8
 800845e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008462:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008464:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008466:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008468:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800846a:	e841 2300 	strex	r3, r2, [r1]
 800846e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1e3      	bne.n	800843e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2220      	movs	r2, #32
 800847a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008494:	f023 0310 	bic.w	r3, r3, #16
 8008498:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
 80084a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e4      	bne.n	8008484 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7f9 facb 	bl	8001a5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2202      	movs	r2, #2
 80084ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084d8:	b29b      	uxth	r3, r3
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	b29b      	uxth	r3, r3
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f939 	bl	8008758 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80084e6:	e119      	b.n	800871c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084f2:	429a      	cmp	r2, r3
 80084f4:	f040 8112 	bne.w	800871c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008504:	f040 810a 	bne.w	800871c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f91e 	bl	8008758 <HAL_UARTEx_RxEventCallback>
      return;
 800851c:	e0fe      	b.n	800871c <HAL_UART_IRQHandler+0x798>
 800851e:	bf00      	nop
 8008520:	40020010 	.word	0x40020010
 8008524:	40020028 	.word	0x40020028
 8008528:	40020040 	.word	0x40020040
 800852c:	40020058 	.word	0x40020058
 8008530:	40020070 	.word	0x40020070
 8008534:	40020088 	.word	0x40020088
 8008538:	400200a0 	.word	0x400200a0
 800853c:	400200b8 	.word	0x400200b8
 8008540:	40020410 	.word	0x40020410
 8008544:	40020428 	.word	0x40020428
 8008548:	40020440 	.word	0x40020440
 800854c:	40020458 	.word	0x40020458
 8008550:	40020470 	.word	0x40020470
 8008554:	40020488 	.word	0x40020488
 8008558:	400204a0 	.word	0x400204a0
 800855c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800856c:	b29b      	uxth	r3, r3
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800857a:	b29b      	uxth	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 80cf 	beq.w	8008720 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8008582:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 80ca 	beq.w	8008720 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008594:	e853 3f00 	ldrex	r3, [r3]
 8008598:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800859a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800859c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	461a      	mov	r2, r3
 80085aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80085b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e4      	bne.n	800858c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	623b      	str	r3, [r7, #32]
   return(result);
 80085d2:	6a3a      	ldr	r2, [r7, #32]
 80085d4:	4b55      	ldr	r3, [pc, #340]	@ (800872c <HAL_UART_IRQHandler+0x7a8>)
 80085d6:	4013      	ands	r3, r2
 80085d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3308      	adds	r3, #8
 80085e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80085e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80085e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085ee:	e841 2300 	strex	r3, r2, [r1]
 80085f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e3      	bne.n	80085c2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	e853 3f00 	ldrex	r3, [r3]
 800861a:	60fb      	str	r3, [r7, #12]
   return(result);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 0310 	bic.w	r3, r3, #16
 8008622:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	461a      	mov	r2, r3
 800862c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008630:	61fb      	str	r3, [r7, #28]
 8008632:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	69b9      	ldr	r1, [r7, #24]
 8008636:	69fa      	ldr	r2, [r7, #28]
 8008638:	e841 2300 	strex	r3, r2, [r1]
 800863c:	617b      	str	r3, [r7, #20]
   return(result);
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e4      	bne.n	800860e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800864a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f881 	bl	8008758 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008656:	e063      	b.n	8008720 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800865c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00e      	beq.n	8008682 <HAL_UART_IRQHandler+0x6fe>
 8008664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008668:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d008      	beq.n	8008682 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008678:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f001 f83d 	bl	80096fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008680:	e051      	b.n	8008726 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800868a:	2b00      	cmp	r3, #0
 800868c:	d014      	beq.n	80086b8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800868e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008696:	2b00      	cmp	r3, #0
 8008698:	d105      	bne.n	80086a6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800869a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800869e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d008      	beq.n	80086b8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d03a      	beq.n	8008724 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	4798      	blx	r3
    }
    return;
 80086b6:	e035      	b.n	8008724 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d009      	beq.n	80086d8 <HAL_UART_IRQHandler+0x754>
 80086c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 ffe7 	bl	80096a4 <UART_EndTransmit_IT>
    return;
 80086d6:	e026      	b.n	8008726 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d009      	beq.n	80086f8 <HAL_UART_IRQHandler+0x774>
 80086e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 f816 	bl	8009722 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086f6:	e016      	b.n	8008726 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d010      	beq.n	8008726 <HAL_UART_IRQHandler+0x7a2>
 8008704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008708:	2b00      	cmp	r3, #0
 800870a:	da0c      	bge.n	8008726 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fffe 	bl	800970e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008712:	e008      	b.n	8008726 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008714:	bf00      	nop
 8008716:	e006      	b.n	8008726 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008718:	bf00      	nop
 800871a:	e004      	b.n	8008726 <HAL_UART_IRQHandler+0x7a2>
      return;
 800871c:	bf00      	nop
 800871e:	e002      	b.n	8008726 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008720:	bf00      	nop
 8008722:	e000      	b.n	8008726 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008724:	bf00      	nop
  }
}
 8008726:	37e8      	adds	r7, #232	@ 0xe8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	effffffe 	.word	0xeffffffe

08008730 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008774:	b092      	sub	sp, #72	@ 0x48
 8008776:	af00      	add	r7, sp, #0
 8008778:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	431a      	orrs	r2, r3
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	431a      	orrs	r2, r3
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	4313      	orrs	r3, r2
 8008796:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	4bbe      	ldr	r3, [pc, #760]	@ (8008a98 <UART_SetConfig+0x328>)
 80087a0:	4013      	ands	r3, r2
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	6812      	ldr	r2, [r2, #0]
 80087a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087a8:	430b      	orrs	r3, r1
 80087aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4ab3      	ldr	r2, [pc, #716]	@ (8008a9c <UART_SetConfig+0x32c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d004      	beq.n	80087dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087d8:	4313      	orrs	r3, r2
 80087da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689a      	ldr	r2, [r3, #8]
 80087e2:	4baf      	ldr	r3, [pc, #700]	@ (8008aa0 <UART_SetConfig+0x330>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80087ec:	430b      	orrs	r3, r1
 80087ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f6:	f023 010f 	bic.w	r1, r3, #15
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4aa6      	ldr	r2, [pc, #664]	@ (8008aa4 <UART_SetConfig+0x334>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d177      	bne.n	8008900 <UART_SetConfig+0x190>
 8008810:	4ba5      	ldr	r3, [pc, #660]	@ (8008aa8 <UART_SetConfig+0x338>)
 8008812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008814:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008818:	2b28      	cmp	r3, #40	@ 0x28
 800881a:	d86d      	bhi.n	80088f8 <UART_SetConfig+0x188>
 800881c:	a201      	add	r2, pc, #4	@ (adr r2, 8008824 <UART_SetConfig+0xb4>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	080088c9 	.word	0x080088c9
 8008828:	080088f9 	.word	0x080088f9
 800882c:	080088f9 	.word	0x080088f9
 8008830:	080088f9 	.word	0x080088f9
 8008834:	080088f9 	.word	0x080088f9
 8008838:	080088f9 	.word	0x080088f9
 800883c:	080088f9 	.word	0x080088f9
 8008840:	080088f9 	.word	0x080088f9
 8008844:	080088d1 	.word	0x080088d1
 8008848:	080088f9 	.word	0x080088f9
 800884c:	080088f9 	.word	0x080088f9
 8008850:	080088f9 	.word	0x080088f9
 8008854:	080088f9 	.word	0x080088f9
 8008858:	080088f9 	.word	0x080088f9
 800885c:	080088f9 	.word	0x080088f9
 8008860:	080088f9 	.word	0x080088f9
 8008864:	080088d9 	.word	0x080088d9
 8008868:	080088f9 	.word	0x080088f9
 800886c:	080088f9 	.word	0x080088f9
 8008870:	080088f9 	.word	0x080088f9
 8008874:	080088f9 	.word	0x080088f9
 8008878:	080088f9 	.word	0x080088f9
 800887c:	080088f9 	.word	0x080088f9
 8008880:	080088f9 	.word	0x080088f9
 8008884:	080088e1 	.word	0x080088e1
 8008888:	080088f9 	.word	0x080088f9
 800888c:	080088f9 	.word	0x080088f9
 8008890:	080088f9 	.word	0x080088f9
 8008894:	080088f9 	.word	0x080088f9
 8008898:	080088f9 	.word	0x080088f9
 800889c:	080088f9 	.word	0x080088f9
 80088a0:	080088f9 	.word	0x080088f9
 80088a4:	080088e9 	.word	0x080088e9
 80088a8:	080088f9 	.word	0x080088f9
 80088ac:	080088f9 	.word	0x080088f9
 80088b0:	080088f9 	.word	0x080088f9
 80088b4:	080088f9 	.word	0x080088f9
 80088b8:	080088f9 	.word	0x080088f9
 80088bc:	080088f9 	.word	0x080088f9
 80088c0:	080088f9 	.word	0x080088f9
 80088c4:	080088f1 	.word	0x080088f1
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e222      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80088d0:	2304      	movs	r3, #4
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e21e      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80088d8:	2308      	movs	r3, #8
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e21a      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80088e0:	2310      	movs	r3, #16
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e216      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80088e8:	2320      	movs	r3, #32
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e212      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80088f0:	2340      	movs	r3, #64	@ 0x40
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e20e      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80088f8:	2380      	movs	r3, #128	@ 0x80
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fe:	e20a      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a69      	ldr	r2, [pc, #420]	@ (8008aac <UART_SetConfig+0x33c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d130      	bne.n	800896c <UART_SetConfig+0x1fc>
 800890a:	4b67      	ldr	r3, [pc, #412]	@ (8008aa8 <UART_SetConfig+0x338>)
 800890c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	2b05      	cmp	r3, #5
 8008914:	d826      	bhi.n	8008964 <UART_SetConfig+0x1f4>
 8008916:	a201      	add	r2, pc, #4	@ (adr r2, 800891c <UART_SetConfig+0x1ac>)
 8008918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891c:	08008935 	.word	0x08008935
 8008920:	0800893d 	.word	0x0800893d
 8008924:	08008945 	.word	0x08008945
 8008928:	0800894d 	.word	0x0800894d
 800892c:	08008955 	.word	0x08008955
 8008930:	0800895d 	.word	0x0800895d
 8008934:	2300      	movs	r3, #0
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e1ec      	b.n	8008d16 <UART_SetConfig+0x5a6>
 800893c:	2304      	movs	r3, #4
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008942:	e1e8      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008944:	2308      	movs	r3, #8
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894a:	e1e4      	b.n	8008d16 <UART_SetConfig+0x5a6>
 800894c:	2310      	movs	r3, #16
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008952:	e1e0      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008954:	2320      	movs	r3, #32
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895a:	e1dc      	b.n	8008d16 <UART_SetConfig+0x5a6>
 800895c:	2340      	movs	r3, #64	@ 0x40
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008962:	e1d8      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008964:	2380      	movs	r3, #128	@ 0x80
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896a:	e1d4      	b.n	8008d16 <UART_SetConfig+0x5a6>
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a4f      	ldr	r2, [pc, #316]	@ (8008ab0 <UART_SetConfig+0x340>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d130      	bne.n	80089d8 <UART_SetConfig+0x268>
 8008976:	4b4c      	ldr	r3, [pc, #304]	@ (8008aa8 <UART_SetConfig+0x338>)
 8008978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800897a:	f003 0307 	and.w	r3, r3, #7
 800897e:	2b05      	cmp	r3, #5
 8008980:	d826      	bhi.n	80089d0 <UART_SetConfig+0x260>
 8008982:	a201      	add	r2, pc, #4	@ (adr r2, 8008988 <UART_SetConfig+0x218>)
 8008984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008988:	080089a1 	.word	0x080089a1
 800898c:	080089a9 	.word	0x080089a9
 8008990:	080089b1 	.word	0x080089b1
 8008994:	080089b9 	.word	0x080089b9
 8008998:	080089c1 	.word	0x080089c1
 800899c:	080089c9 	.word	0x080089c9
 80089a0:	2300      	movs	r3, #0
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e1b6      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80089a8:	2304      	movs	r3, #4
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ae:	e1b2      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80089b0:	2308      	movs	r3, #8
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b6:	e1ae      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80089b8:	2310      	movs	r3, #16
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089be:	e1aa      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80089c0:	2320      	movs	r3, #32
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c6:	e1a6      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80089c8:	2340      	movs	r3, #64	@ 0x40
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ce:	e1a2      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80089d0:	2380      	movs	r3, #128	@ 0x80
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d6:	e19e      	b.n	8008d16 <UART_SetConfig+0x5a6>
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a35      	ldr	r2, [pc, #212]	@ (8008ab4 <UART_SetConfig+0x344>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d130      	bne.n	8008a44 <UART_SetConfig+0x2d4>
 80089e2:	4b31      	ldr	r3, [pc, #196]	@ (8008aa8 <UART_SetConfig+0x338>)
 80089e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	2b05      	cmp	r3, #5
 80089ec:	d826      	bhi.n	8008a3c <UART_SetConfig+0x2cc>
 80089ee:	a201      	add	r2, pc, #4	@ (adr r2, 80089f4 <UART_SetConfig+0x284>)
 80089f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f4:	08008a0d 	.word	0x08008a0d
 80089f8:	08008a15 	.word	0x08008a15
 80089fc:	08008a1d 	.word	0x08008a1d
 8008a00:	08008a25 	.word	0x08008a25
 8008a04:	08008a2d 	.word	0x08008a2d
 8008a08:	08008a35 	.word	0x08008a35
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e180      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008a14:	2304      	movs	r3, #4
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1a:	e17c      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008a1c:	2308      	movs	r3, #8
 8008a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a22:	e178      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008a24:	2310      	movs	r3, #16
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2a:	e174      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008a2c:	2320      	movs	r3, #32
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a32:	e170      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008a34:	2340      	movs	r3, #64	@ 0x40
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3a:	e16c      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008a3c:	2380      	movs	r3, #128	@ 0x80
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a42:	e168      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a1b      	ldr	r2, [pc, #108]	@ (8008ab8 <UART_SetConfig+0x348>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d142      	bne.n	8008ad4 <UART_SetConfig+0x364>
 8008a4e:	4b16      	ldr	r3, [pc, #88]	@ (8008aa8 <UART_SetConfig+0x338>)
 8008a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a52:	f003 0307 	and.w	r3, r3, #7
 8008a56:	2b05      	cmp	r3, #5
 8008a58:	d838      	bhi.n	8008acc <UART_SetConfig+0x35c>
 8008a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <UART_SetConfig+0x2f0>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008a79 	.word	0x08008a79
 8008a64:	08008a81 	.word	0x08008a81
 8008a68:	08008a89 	.word	0x08008a89
 8008a6c:	08008a91 	.word	0x08008a91
 8008a70:	08008abd 	.word	0x08008abd
 8008a74:	08008ac5 	.word	0x08008ac5
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e14a      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008a80:	2304      	movs	r3, #4
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a86:	e146      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008a88:	2308      	movs	r3, #8
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a8e:	e142      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008a90:	2310      	movs	r3, #16
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a96:	e13e      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008a98:	cfff69f3 	.word	0xcfff69f3
 8008a9c:	58000c00 	.word	0x58000c00
 8008aa0:	11fff4ff 	.word	0x11fff4ff
 8008aa4:	40011000 	.word	0x40011000
 8008aa8:	58024400 	.word	0x58024400
 8008aac:	40004400 	.word	0x40004400
 8008ab0:	40004800 	.word	0x40004800
 8008ab4:	40004c00 	.word	0x40004c00
 8008ab8:	40005000 	.word	0x40005000
 8008abc:	2320      	movs	r3, #32
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac2:	e128      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008ac4:	2340      	movs	r3, #64	@ 0x40
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aca:	e124      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008acc:	2380      	movs	r3, #128	@ 0x80
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e120      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4acb      	ldr	r2, [pc, #812]	@ (8008e08 <UART_SetConfig+0x698>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d176      	bne.n	8008bcc <UART_SetConfig+0x45c>
 8008ade:	4bcb      	ldr	r3, [pc, #812]	@ (8008e0c <UART_SetConfig+0x69c>)
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ae2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ae6:	2b28      	cmp	r3, #40	@ 0x28
 8008ae8:	d86c      	bhi.n	8008bc4 <UART_SetConfig+0x454>
 8008aea:	a201      	add	r2, pc, #4	@ (adr r2, 8008af0 <UART_SetConfig+0x380>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b95 	.word	0x08008b95
 8008af4:	08008bc5 	.word	0x08008bc5
 8008af8:	08008bc5 	.word	0x08008bc5
 8008afc:	08008bc5 	.word	0x08008bc5
 8008b00:	08008bc5 	.word	0x08008bc5
 8008b04:	08008bc5 	.word	0x08008bc5
 8008b08:	08008bc5 	.word	0x08008bc5
 8008b0c:	08008bc5 	.word	0x08008bc5
 8008b10:	08008b9d 	.word	0x08008b9d
 8008b14:	08008bc5 	.word	0x08008bc5
 8008b18:	08008bc5 	.word	0x08008bc5
 8008b1c:	08008bc5 	.word	0x08008bc5
 8008b20:	08008bc5 	.word	0x08008bc5
 8008b24:	08008bc5 	.word	0x08008bc5
 8008b28:	08008bc5 	.word	0x08008bc5
 8008b2c:	08008bc5 	.word	0x08008bc5
 8008b30:	08008ba5 	.word	0x08008ba5
 8008b34:	08008bc5 	.word	0x08008bc5
 8008b38:	08008bc5 	.word	0x08008bc5
 8008b3c:	08008bc5 	.word	0x08008bc5
 8008b40:	08008bc5 	.word	0x08008bc5
 8008b44:	08008bc5 	.word	0x08008bc5
 8008b48:	08008bc5 	.word	0x08008bc5
 8008b4c:	08008bc5 	.word	0x08008bc5
 8008b50:	08008bad 	.word	0x08008bad
 8008b54:	08008bc5 	.word	0x08008bc5
 8008b58:	08008bc5 	.word	0x08008bc5
 8008b5c:	08008bc5 	.word	0x08008bc5
 8008b60:	08008bc5 	.word	0x08008bc5
 8008b64:	08008bc5 	.word	0x08008bc5
 8008b68:	08008bc5 	.word	0x08008bc5
 8008b6c:	08008bc5 	.word	0x08008bc5
 8008b70:	08008bb5 	.word	0x08008bb5
 8008b74:	08008bc5 	.word	0x08008bc5
 8008b78:	08008bc5 	.word	0x08008bc5
 8008b7c:	08008bc5 	.word	0x08008bc5
 8008b80:	08008bc5 	.word	0x08008bc5
 8008b84:	08008bc5 	.word	0x08008bc5
 8008b88:	08008bc5 	.word	0x08008bc5
 8008b8c:	08008bc5 	.word	0x08008bc5
 8008b90:	08008bbd 	.word	0x08008bbd
 8008b94:	2301      	movs	r3, #1
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9a:	e0bc      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008b9c:	2304      	movs	r3, #4
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba2:	e0b8      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008ba4:	2308      	movs	r3, #8
 8008ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008baa:	e0b4      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008bac:	2310      	movs	r3, #16
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb2:	e0b0      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008bb4:	2320      	movs	r3, #32
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bba:	e0ac      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008bbc:	2340      	movs	r3, #64	@ 0x40
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc2:	e0a8      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008bc4:	2380      	movs	r3, #128	@ 0x80
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bca:	e0a4      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a8f      	ldr	r2, [pc, #572]	@ (8008e10 <UART_SetConfig+0x6a0>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d130      	bne.n	8008c38 <UART_SetConfig+0x4c8>
 8008bd6:	4b8d      	ldr	r3, [pc, #564]	@ (8008e0c <UART_SetConfig+0x69c>)
 8008bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d826      	bhi.n	8008c30 <UART_SetConfig+0x4c0>
 8008be2:	a201      	add	r2, pc, #4	@ (adr r2, 8008be8 <UART_SetConfig+0x478>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008c01 	.word	0x08008c01
 8008bec:	08008c09 	.word	0x08008c09
 8008bf0:	08008c11 	.word	0x08008c11
 8008bf4:	08008c19 	.word	0x08008c19
 8008bf8:	08008c21 	.word	0x08008c21
 8008bfc:	08008c29 	.word	0x08008c29
 8008c00:	2300      	movs	r3, #0
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c06:	e086      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c08:	2304      	movs	r3, #4
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0e:	e082      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c10:	2308      	movs	r3, #8
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c16:	e07e      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c18:	2310      	movs	r3, #16
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1e:	e07a      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c20:	2320      	movs	r3, #32
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c26:	e076      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c28:	2340      	movs	r3, #64	@ 0x40
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2e:	e072      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c30:	2380      	movs	r3, #128	@ 0x80
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c36:	e06e      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a75      	ldr	r2, [pc, #468]	@ (8008e14 <UART_SetConfig+0x6a4>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d130      	bne.n	8008ca4 <UART_SetConfig+0x534>
 8008c42:	4b72      	ldr	r3, [pc, #456]	@ (8008e0c <UART_SetConfig+0x69c>)
 8008c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	2b05      	cmp	r3, #5
 8008c4c:	d826      	bhi.n	8008c9c <UART_SetConfig+0x52c>
 8008c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c54 <UART_SetConfig+0x4e4>)
 8008c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c54:	08008c6d 	.word	0x08008c6d
 8008c58:	08008c75 	.word	0x08008c75
 8008c5c:	08008c7d 	.word	0x08008c7d
 8008c60:	08008c85 	.word	0x08008c85
 8008c64:	08008c8d 	.word	0x08008c8d
 8008c68:	08008c95 	.word	0x08008c95
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c72:	e050      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c74:	2304      	movs	r3, #4
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7a:	e04c      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c7c:	2308      	movs	r3, #8
 8008c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c82:	e048      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c84:	2310      	movs	r3, #16
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8a:	e044      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c8c:	2320      	movs	r3, #32
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c92:	e040      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c94:	2340      	movs	r3, #64	@ 0x40
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9a:	e03c      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008c9c:	2380      	movs	r3, #128	@ 0x80
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca2:	e038      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a5b      	ldr	r2, [pc, #364]	@ (8008e18 <UART_SetConfig+0x6a8>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d130      	bne.n	8008d10 <UART_SetConfig+0x5a0>
 8008cae:	4b57      	ldr	r3, [pc, #348]	@ (8008e0c <UART_SetConfig+0x69c>)
 8008cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cb2:	f003 0307 	and.w	r3, r3, #7
 8008cb6:	2b05      	cmp	r3, #5
 8008cb8:	d826      	bhi.n	8008d08 <UART_SetConfig+0x598>
 8008cba:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc0 <UART_SetConfig+0x550>)
 8008cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc0:	08008cd9 	.word	0x08008cd9
 8008cc4:	08008ce1 	.word	0x08008ce1
 8008cc8:	08008ce9 	.word	0x08008ce9
 8008ccc:	08008cf1 	.word	0x08008cf1
 8008cd0:	08008cf9 	.word	0x08008cf9
 8008cd4:	08008d01 	.word	0x08008d01
 8008cd8:	2302      	movs	r3, #2
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cde:	e01a      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008ce0:	2304      	movs	r3, #4
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce6:	e016      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008ce8:	2308      	movs	r3, #8
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cee:	e012      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008cf0:	2310      	movs	r3, #16
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf6:	e00e      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008cf8:	2320      	movs	r3, #32
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfe:	e00a      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008d00:	2340      	movs	r3, #64	@ 0x40
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d06:	e006      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008d08:	2380      	movs	r3, #128	@ 0x80
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0e:	e002      	b.n	8008d16 <UART_SetConfig+0x5a6>
 8008d10:	2380      	movs	r3, #128	@ 0x80
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8008e18 <UART_SetConfig+0x6a8>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	f040 80f8 	bne.w	8008f12 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d26:	2b20      	cmp	r3, #32
 8008d28:	dc46      	bgt.n	8008db8 <UART_SetConfig+0x648>
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	f2c0 8082 	blt.w	8008e34 <UART_SetConfig+0x6c4>
 8008d30:	3b02      	subs	r3, #2
 8008d32:	2b1e      	cmp	r3, #30
 8008d34:	d87e      	bhi.n	8008e34 <UART_SetConfig+0x6c4>
 8008d36:	a201      	add	r2, pc, #4	@ (adr r2, 8008d3c <UART_SetConfig+0x5cc>)
 8008d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3c:	08008dbf 	.word	0x08008dbf
 8008d40:	08008e35 	.word	0x08008e35
 8008d44:	08008dc7 	.word	0x08008dc7
 8008d48:	08008e35 	.word	0x08008e35
 8008d4c:	08008e35 	.word	0x08008e35
 8008d50:	08008e35 	.word	0x08008e35
 8008d54:	08008dd7 	.word	0x08008dd7
 8008d58:	08008e35 	.word	0x08008e35
 8008d5c:	08008e35 	.word	0x08008e35
 8008d60:	08008e35 	.word	0x08008e35
 8008d64:	08008e35 	.word	0x08008e35
 8008d68:	08008e35 	.word	0x08008e35
 8008d6c:	08008e35 	.word	0x08008e35
 8008d70:	08008e35 	.word	0x08008e35
 8008d74:	08008de7 	.word	0x08008de7
 8008d78:	08008e35 	.word	0x08008e35
 8008d7c:	08008e35 	.word	0x08008e35
 8008d80:	08008e35 	.word	0x08008e35
 8008d84:	08008e35 	.word	0x08008e35
 8008d88:	08008e35 	.word	0x08008e35
 8008d8c:	08008e35 	.word	0x08008e35
 8008d90:	08008e35 	.word	0x08008e35
 8008d94:	08008e35 	.word	0x08008e35
 8008d98:	08008e35 	.word	0x08008e35
 8008d9c:	08008e35 	.word	0x08008e35
 8008da0:	08008e35 	.word	0x08008e35
 8008da4:	08008e35 	.word	0x08008e35
 8008da8:	08008e35 	.word	0x08008e35
 8008dac:	08008e35 	.word	0x08008e35
 8008db0:	08008e35 	.word	0x08008e35
 8008db4:	08008e27 	.word	0x08008e27
 8008db8:	2b40      	cmp	r3, #64	@ 0x40
 8008dba:	d037      	beq.n	8008e2c <UART_SetConfig+0x6bc>
 8008dbc:	e03a      	b.n	8008e34 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008dbe:	f7fe f993 	bl	80070e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008dc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008dc4:	e03c      	b.n	8008e40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe f9a2 	bl	8007114 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd4:	e034      	b.n	8008e40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dd6:	f107 0318 	add.w	r3, r7, #24
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe faee 	bl	80073bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de4:	e02c      	b.n	8008e40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008de6:	4b09      	ldr	r3, [pc, #36]	@ (8008e0c <UART_SetConfig+0x69c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0320 	and.w	r3, r3, #32
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d016      	beq.n	8008e20 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008df2:	4b06      	ldr	r3, [pc, #24]	@ (8008e0c <UART_SetConfig+0x69c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	08db      	lsrs	r3, r3, #3
 8008df8:	f003 0303 	and.w	r3, r3, #3
 8008dfc:	4a07      	ldr	r2, [pc, #28]	@ (8008e1c <UART_SetConfig+0x6ac>)
 8008dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8008e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e04:	e01c      	b.n	8008e40 <UART_SetConfig+0x6d0>
 8008e06:	bf00      	nop
 8008e08:	40011400 	.word	0x40011400
 8008e0c:	58024400 	.word	0x58024400
 8008e10:	40007800 	.word	0x40007800
 8008e14:	40007c00 	.word	0x40007c00
 8008e18:	58000c00 	.word	0x58000c00
 8008e1c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008e20:	4b9d      	ldr	r3, [pc, #628]	@ (8009098 <UART_SetConfig+0x928>)
 8008e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e24:	e00c      	b.n	8008e40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e26:	4b9d      	ldr	r3, [pc, #628]	@ (800909c <UART_SetConfig+0x92c>)
 8008e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e2a:	e009      	b.n	8008e40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e32:	e005      	b.n	8008e40 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 81de 	beq.w	8009204 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4c:	4a94      	ldr	r2, [pc, #592]	@ (80090a0 <UART_SetConfig+0x930>)
 8008e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e52:	461a      	mov	r2, r3
 8008e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e5a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	4613      	mov	r3, r2
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	4413      	add	r3, r2
 8008e66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d305      	bcc.n	8008e78 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d903      	bls.n	8008e80 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e7e:	e1c1      	b.n	8009204 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e82:	2200      	movs	r2, #0
 8008e84:	60bb      	str	r3, [r7, #8]
 8008e86:	60fa      	str	r2, [r7, #12]
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8c:	4a84      	ldr	r2, [pc, #528]	@ (80090a0 <UART_SetConfig+0x930>)
 8008e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	2200      	movs	r2, #0
 8008e96:	603b      	str	r3, [r7, #0]
 8008e98:	607a      	str	r2, [r7, #4]
 8008e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ea2:	f7f7 fa21 	bl	80002e8 <__aeabi_uldivmod>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4610      	mov	r0, r2
 8008eac:	4619      	mov	r1, r3
 8008eae:	f04f 0200 	mov.w	r2, #0
 8008eb2:	f04f 0300 	mov.w	r3, #0
 8008eb6:	020b      	lsls	r3, r1, #8
 8008eb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ebc:	0202      	lsls	r2, r0, #8
 8008ebe:	6979      	ldr	r1, [r7, #20]
 8008ec0:	6849      	ldr	r1, [r1, #4]
 8008ec2:	0849      	lsrs	r1, r1, #1
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	4605      	mov	r5, r0
 8008eca:	eb12 0804 	adds.w	r8, r2, r4
 8008ece:	eb43 0905 	adc.w	r9, r3, r5
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	469a      	mov	sl, r3
 8008eda:	4693      	mov	fp, r2
 8008edc:	4652      	mov	r2, sl
 8008ede:	465b      	mov	r3, fp
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	f7f7 fa00 	bl	80002e8 <__aeabi_uldivmod>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	4613      	mov	r3, r2
 8008eee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ef6:	d308      	bcc.n	8008f0a <UART_SetConfig+0x79a>
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008efe:	d204      	bcs.n	8008f0a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f06:	60da      	str	r2, [r3, #12]
 8008f08:	e17c      	b.n	8009204 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f10:	e178      	b.n	8009204 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f1a:	f040 80c5 	bne.w	80090a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008f1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f22:	2b20      	cmp	r3, #32
 8008f24:	dc48      	bgt.n	8008fb8 <UART_SetConfig+0x848>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	db7b      	blt.n	8009022 <UART_SetConfig+0x8b2>
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	d879      	bhi.n	8009022 <UART_SetConfig+0x8b2>
 8008f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f34 <UART_SetConfig+0x7c4>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008fbf 	.word	0x08008fbf
 8008f38:	08008fc7 	.word	0x08008fc7
 8008f3c:	08009023 	.word	0x08009023
 8008f40:	08009023 	.word	0x08009023
 8008f44:	08008fcf 	.word	0x08008fcf
 8008f48:	08009023 	.word	0x08009023
 8008f4c:	08009023 	.word	0x08009023
 8008f50:	08009023 	.word	0x08009023
 8008f54:	08008fdf 	.word	0x08008fdf
 8008f58:	08009023 	.word	0x08009023
 8008f5c:	08009023 	.word	0x08009023
 8008f60:	08009023 	.word	0x08009023
 8008f64:	08009023 	.word	0x08009023
 8008f68:	08009023 	.word	0x08009023
 8008f6c:	08009023 	.word	0x08009023
 8008f70:	08009023 	.word	0x08009023
 8008f74:	08008fef 	.word	0x08008fef
 8008f78:	08009023 	.word	0x08009023
 8008f7c:	08009023 	.word	0x08009023
 8008f80:	08009023 	.word	0x08009023
 8008f84:	08009023 	.word	0x08009023
 8008f88:	08009023 	.word	0x08009023
 8008f8c:	08009023 	.word	0x08009023
 8008f90:	08009023 	.word	0x08009023
 8008f94:	08009023 	.word	0x08009023
 8008f98:	08009023 	.word	0x08009023
 8008f9c:	08009023 	.word	0x08009023
 8008fa0:	08009023 	.word	0x08009023
 8008fa4:	08009023 	.word	0x08009023
 8008fa8:	08009023 	.word	0x08009023
 8008fac:	08009023 	.word	0x08009023
 8008fb0:	08009023 	.word	0x08009023
 8008fb4:	08009015 	.word	0x08009015
 8008fb8:	2b40      	cmp	r3, #64	@ 0x40
 8008fba:	d02e      	beq.n	800901a <UART_SetConfig+0x8aa>
 8008fbc:	e031      	b.n	8009022 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fbe:	f7fc fe5d 	bl	8005c7c <HAL_RCC_GetPCLK1Freq>
 8008fc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fc4:	e033      	b.n	800902e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fc6:	f7fc fe6f 	bl	8005ca8 <HAL_RCC_GetPCLK2Freq>
 8008fca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008fcc:	e02f      	b.n	800902e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe f89e 	bl	8007114 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fdc:	e027      	b.n	800902e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fde:	f107 0318 	add.w	r3, r7, #24
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe f9ea 	bl	80073bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fec:	e01f      	b.n	800902e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fee:	4b2d      	ldr	r3, [pc, #180]	@ (80090a4 <UART_SetConfig+0x934>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0320 	and.w	r3, r3, #32
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d009      	beq.n	800900e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80090a4 <UART_SetConfig+0x934>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	08db      	lsrs	r3, r3, #3
 8009000:	f003 0303 	and.w	r3, r3, #3
 8009004:	4a24      	ldr	r2, [pc, #144]	@ (8009098 <UART_SetConfig+0x928>)
 8009006:	fa22 f303 	lsr.w	r3, r2, r3
 800900a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800900c:	e00f      	b.n	800902e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800900e:	4b22      	ldr	r3, [pc, #136]	@ (8009098 <UART_SetConfig+0x928>)
 8009010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009012:	e00c      	b.n	800902e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009014:	4b21      	ldr	r3, [pc, #132]	@ (800909c <UART_SetConfig+0x92c>)
 8009016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009018:	e009      	b.n	800902e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800901a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800901e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009020:	e005      	b.n	800902e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800902c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800902e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 80e7 	beq.w	8009204 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903a:	4a19      	ldr	r2, [pc, #100]	@ (80090a0 <UART_SetConfig+0x930>)
 800903c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009040:	461a      	mov	r2, r3
 8009042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009044:	fbb3 f3f2 	udiv	r3, r3, r2
 8009048:	005a      	lsls	r2, r3, #1
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	085b      	lsrs	r3, r3, #1
 8009050:	441a      	add	r2, r3
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	fbb2 f3f3 	udiv	r3, r2, r3
 800905a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800905c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905e:	2b0f      	cmp	r3, #15
 8009060:	d916      	bls.n	8009090 <UART_SetConfig+0x920>
 8009062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009068:	d212      	bcs.n	8009090 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800906a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906c:	b29b      	uxth	r3, r3
 800906e:	f023 030f 	bic.w	r3, r3, #15
 8009072:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009076:	085b      	lsrs	r3, r3, #1
 8009078:	b29b      	uxth	r3, r3
 800907a:	f003 0307 	and.w	r3, r3, #7
 800907e:	b29a      	uxth	r2, r3
 8009080:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009082:	4313      	orrs	r3, r2
 8009084:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800908c:	60da      	str	r2, [r3, #12]
 800908e:	e0b9      	b.n	8009204 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009096:	e0b5      	b.n	8009204 <UART_SetConfig+0xa94>
 8009098:	03d09000 	.word	0x03d09000
 800909c:	003d0900 	.word	0x003d0900
 80090a0:	0800c09c 	.word	0x0800c09c
 80090a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80090a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80090ac:	2b20      	cmp	r3, #32
 80090ae:	dc49      	bgt.n	8009144 <UART_SetConfig+0x9d4>
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	db7c      	blt.n	80091ae <UART_SetConfig+0xa3e>
 80090b4:	2b20      	cmp	r3, #32
 80090b6:	d87a      	bhi.n	80091ae <UART_SetConfig+0xa3e>
 80090b8:	a201      	add	r2, pc, #4	@ (adr r2, 80090c0 <UART_SetConfig+0x950>)
 80090ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090be:	bf00      	nop
 80090c0:	0800914b 	.word	0x0800914b
 80090c4:	08009153 	.word	0x08009153
 80090c8:	080091af 	.word	0x080091af
 80090cc:	080091af 	.word	0x080091af
 80090d0:	0800915b 	.word	0x0800915b
 80090d4:	080091af 	.word	0x080091af
 80090d8:	080091af 	.word	0x080091af
 80090dc:	080091af 	.word	0x080091af
 80090e0:	0800916b 	.word	0x0800916b
 80090e4:	080091af 	.word	0x080091af
 80090e8:	080091af 	.word	0x080091af
 80090ec:	080091af 	.word	0x080091af
 80090f0:	080091af 	.word	0x080091af
 80090f4:	080091af 	.word	0x080091af
 80090f8:	080091af 	.word	0x080091af
 80090fc:	080091af 	.word	0x080091af
 8009100:	0800917b 	.word	0x0800917b
 8009104:	080091af 	.word	0x080091af
 8009108:	080091af 	.word	0x080091af
 800910c:	080091af 	.word	0x080091af
 8009110:	080091af 	.word	0x080091af
 8009114:	080091af 	.word	0x080091af
 8009118:	080091af 	.word	0x080091af
 800911c:	080091af 	.word	0x080091af
 8009120:	080091af 	.word	0x080091af
 8009124:	080091af 	.word	0x080091af
 8009128:	080091af 	.word	0x080091af
 800912c:	080091af 	.word	0x080091af
 8009130:	080091af 	.word	0x080091af
 8009134:	080091af 	.word	0x080091af
 8009138:	080091af 	.word	0x080091af
 800913c:	080091af 	.word	0x080091af
 8009140:	080091a1 	.word	0x080091a1
 8009144:	2b40      	cmp	r3, #64	@ 0x40
 8009146:	d02e      	beq.n	80091a6 <UART_SetConfig+0xa36>
 8009148:	e031      	b.n	80091ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800914a:	f7fc fd97 	bl	8005c7c <HAL_RCC_GetPCLK1Freq>
 800914e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009150:	e033      	b.n	80091ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009152:	f7fc fda9 	bl	8005ca8 <HAL_RCC_GetPCLK2Freq>
 8009156:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009158:	e02f      	b.n	80091ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800915a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800915e:	4618      	mov	r0, r3
 8009160:	f7fd ffd8 	bl	8007114 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009168:	e027      	b.n	80091ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916a:	f107 0318 	add.w	r3, r7, #24
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe f924 	bl	80073bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009178:	e01f      	b.n	80091ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800917a:	4b2d      	ldr	r3, [pc, #180]	@ (8009230 <UART_SetConfig+0xac0>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b00      	cmp	r3, #0
 8009184:	d009      	beq.n	800919a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009186:	4b2a      	ldr	r3, [pc, #168]	@ (8009230 <UART_SetConfig+0xac0>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	08db      	lsrs	r3, r3, #3
 800918c:	f003 0303 	and.w	r3, r3, #3
 8009190:	4a28      	ldr	r2, [pc, #160]	@ (8009234 <UART_SetConfig+0xac4>)
 8009192:	fa22 f303 	lsr.w	r3, r2, r3
 8009196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009198:	e00f      	b.n	80091ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800919a:	4b26      	ldr	r3, [pc, #152]	@ (8009234 <UART_SetConfig+0xac4>)
 800919c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800919e:	e00c      	b.n	80091ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091a0:	4b25      	ldr	r3, [pc, #148]	@ (8009238 <UART_SetConfig+0xac8>)
 80091a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a4:	e009      	b.n	80091ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ac:	e005      	b.n	80091ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091b8:	bf00      	nop
    }

    if (pclk != 0U)
 80091ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d021      	beq.n	8009204 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c4:	4a1d      	ldr	r2, [pc, #116]	@ (800923c <UART_SetConfig+0xacc>)
 80091c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091ca:	461a      	mov	r2, r3
 80091cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	085b      	lsrs	r3, r3, #1
 80091d8:	441a      	add	r2, r3
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e6:	2b0f      	cmp	r3, #15
 80091e8:	d909      	bls.n	80091fe <UART_SetConfig+0xa8e>
 80091ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091f0:	d205      	bcs.n	80091fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	60da      	str	r2, [r3, #12]
 80091fc:	e002      	b.n	8009204 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	2201      	movs	r2, #1
 8009208:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	2201      	movs	r2, #1
 8009210:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	2200      	movs	r2, #0
 8009218:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2200      	movs	r2, #0
 800921e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009220:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009224:	4618      	mov	r0, r3
 8009226:	3748      	adds	r7, #72	@ 0x48
 8009228:	46bd      	mov	sp, r7
 800922a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800922e:	bf00      	nop
 8009230:	58024400 	.word	0x58024400
 8009234:	03d09000 	.word	0x03d09000
 8009238:	003d0900 	.word	0x003d0900
 800923c:	0800c09c 	.word	0x0800c09c

08009240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924c:	f003 0308 	and.w	r3, r3, #8
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00a      	beq.n	800926a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00a      	beq.n	800928c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00a      	beq.n	80092ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b2:	f003 0304 	and.w	r3, r3, #4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d4:	f003 0310 	and.w	r3, r3, #16
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00a      	beq.n	80092f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f6:	f003 0320 	and.w	r3, r3, #32
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01a      	beq.n	8009356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800933e:	d10a      	bne.n	8009356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00a      	beq.n	8009378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	430a      	orrs	r2, r1
 8009376:	605a      	str	r2, [r3, #4]
  }
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b098      	sub	sp, #96	@ 0x60
 8009388:	af02      	add	r7, sp, #8
 800938a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009394:	f7f8 f96c 	bl	8001670 <HAL_GetTick>
 8009398:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	2b08      	cmp	r3, #8
 80093a6:	d12f      	bne.n	8009408 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093b0:	2200      	movs	r2, #0
 80093b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f88e 	bl	80094d8 <UART_WaitOnFlagUntilTimeout>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d022      	beq.n	8009408 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ca:	e853 3f00 	ldrex	r3, [r3]
 80093ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	461a      	mov	r2, r3
 80093de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80093e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093e8:	e841 2300 	strex	r3, r2, [r1]
 80093ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1e6      	bne.n	80093c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2220      	movs	r2, #32
 80093f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e063      	b.n	80094d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b04      	cmp	r3, #4
 8009414:	d149      	bne.n	80094aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009416:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800941e:	2200      	movs	r2, #0
 8009420:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f857 	bl	80094d8 <UART_WaitOnFlagUntilTimeout>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d03c      	beq.n	80094aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	623b      	str	r3, [r7, #32]
   return(result);
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009444:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800944e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009450:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800945c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e6      	bne.n	8009430 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3308      	adds	r3, #8
 8009468:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	60fb      	str	r3, [r7, #12]
   return(result);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f023 0301 	bic.w	r3, r3, #1
 8009478:	64bb      	str	r3, [r7, #72]	@ 0x48
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3308      	adds	r3, #8
 8009480:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009482:	61fa      	str	r2, [r7, #28]
 8009484:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	69b9      	ldr	r1, [r7, #24]
 8009488:	69fa      	ldr	r2, [r7, #28]
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	617b      	str	r3, [r7, #20]
   return(result);
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e5      	bne.n	8009462 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2220      	movs	r2, #32
 800949a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e012      	b.n	80094d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2220      	movs	r2, #32
 80094b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3758      	adds	r7, #88	@ 0x58
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	4613      	mov	r3, r2
 80094e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094e8:	e04f      	b.n	800958a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f0:	d04b      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f2:	f7f8 f8bd 	bl	8001670 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d302      	bcc.n	8009508 <UART_WaitOnFlagUntilTimeout+0x30>
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e04e      	b.n	80095aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0304 	and.w	r3, r3, #4
 8009516:	2b00      	cmp	r3, #0
 8009518:	d037      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0xb2>
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b80      	cmp	r3, #128	@ 0x80
 800951e:	d034      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2b40      	cmp	r3, #64	@ 0x40
 8009524:	d031      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	69db      	ldr	r3, [r3, #28]
 800952c:	f003 0308 	and.w	r3, r3, #8
 8009530:	2b08      	cmp	r3, #8
 8009532:	d110      	bne.n	8009556 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2208      	movs	r2, #8
 800953a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f000 f839 	bl	80095b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2208      	movs	r2, #8
 8009546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e029      	b.n	80095aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009560:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009564:	d111      	bne.n	800958a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800956e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f000 f81f 	bl	80095b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2220      	movs	r2, #32
 800957a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e00f      	b.n	80095aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	69da      	ldr	r2, [r3, #28]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4013      	ands	r3, r2
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	429a      	cmp	r2, r3
 8009598:	bf0c      	ite	eq
 800959a:	2301      	moveq	r3, #1
 800959c:	2300      	movne	r3, #0
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	461a      	mov	r2, r3
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d0a0      	beq.n	80094ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b095      	sub	sp, #84	@ 0x54
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095da:	643b      	str	r3, [r7, #64]	@ 0x40
 80095dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1e6      	bne.n	80095bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3308      	adds	r3, #8
 80095f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	4b1e      	ldr	r3, [pc, #120]	@ (800967c <UART_EndRxTransfer+0xc8>)
 8009602:	4013      	ands	r3, r2
 8009604:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3308      	adds	r3, #8
 800960c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800960e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009610:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e5      	bne.n	80095ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009626:	2b01      	cmp	r3, #1
 8009628:	d118      	bne.n	800965c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	e853 3f00 	ldrex	r3, [r3]
 8009636:	60bb      	str	r3, [r7, #8]
   return(result);
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	f023 0310 	bic.w	r3, r3, #16
 800963e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	461a      	mov	r2, r3
 8009646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009648:	61bb      	str	r3, [r7, #24]
 800964a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964c:	6979      	ldr	r1, [r7, #20]
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	e841 2300 	strex	r3, r2, [r1]
 8009654:	613b      	str	r3, [r7, #16]
   return(result);
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1e6      	bne.n	800962a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2220      	movs	r2, #32
 8009660:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009670:	bf00      	nop
 8009672:	3754      	adds	r7, #84	@ 0x54
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	effffffe 	.word	0xeffffffe

08009680 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800968c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7ff f854 	bl	8008744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800969c:	bf00      	nop
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096c0:	61fb      	str	r3, [r7, #28]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	61bb      	str	r3, [r7, #24]
 80096cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6979      	ldr	r1, [r7, #20]
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	613b      	str	r3, [r7, #16]
   return(result);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e6      	bne.n	80096ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2220      	movs	r2, #32
 80096e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7ff f81f 	bl	8008730 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f2:	bf00      	nop
 80096f4:	3720      	adds	r7, #32
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b083      	sub	sp, #12
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009702:	bf00      	nop
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800970e:	b480      	push	{r7}
 8009710:	b083      	sub	sp, #12
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009716:	bf00      	nop
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009722:	b480      	push	{r7}
 8009724:	b083      	sub	sp, #12
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800972a:	bf00      	nop
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009736:	b480      	push	{r7}
 8009738:	b085      	sub	sp, #20
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009744:	2b01      	cmp	r3, #1
 8009746:	d101      	bne.n	800974c <HAL_UARTEx_DisableFifoMode+0x16>
 8009748:	2302      	movs	r3, #2
 800974a:	e027      	b.n	800979c <HAL_UARTEx_DisableFifoMode+0x66>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2224      	movs	r2, #36	@ 0x24
 8009758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f022 0201 	bic.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800977a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2220      	movs	r2, #32
 800978e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d101      	bne.n	80097c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097bc:	2302      	movs	r3, #2
 80097be:	e02d      	b.n	800981c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2224      	movs	r2, #36	@ 0x24
 80097cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0201 	bic.w	r2, r2, #1
 80097e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	430a      	orrs	r2, r1
 80097fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f84f 	bl	80098a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2220      	movs	r2, #32
 800980e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009834:	2b01      	cmp	r3, #1
 8009836:	d101      	bne.n	800983c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009838:	2302      	movs	r3, #2
 800983a:	e02d      	b.n	8009898 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2224      	movs	r2, #36	@ 0x24
 8009848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 0201 	bic.w	r2, r2, #1
 8009862:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	430a      	orrs	r2, r1
 8009876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f811 	bl	80098a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2220      	movs	r2, #32
 800988a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d108      	bne.n	80098c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098c0:	e031      	b.n	8009926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098c2:	2310      	movs	r3, #16
 80098c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098c6:	2310      	movs	r3, #16
 80098c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	0e5b      	lsrs	r3, r3, #25
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	f003 0307 	and.w	r3, r3, #7
 80098d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	0f5b      	lsrs	r3, r3, #29
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	f003 0307 	and.w	r3, r3, #7
 80098e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	7b3a      	ldrb	r2, [r7, #12]
 80098ee:	4911      	ldr	r1, [pc, #68]	@ (8009934 <UARTEx_SetNbDataToProcess+0x94>)
 80098f0:	5c8a      	ldrb	r2, [r1, r2]
 80098f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098f6:	7b3a      	ldrb	r2, [r7, #12]
 80098f8:	490f      	ldr	r1, [pc, #60]	@ (8009938 <UARTEx_SetNbDataToProcess+0x98>)
 80098fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009900:	b29a      	uxth	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	7b7a      	ldrb	r2, [r7, #13]
 800990c:	4909      	ldr	r1, [pc, #36]	@ (8009934 <UARTEx_SetNbDataToProcess+0x94>)
 800990e:	5c8a      	ldrb	r2, [r1, r2]
 8009910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009914:	7b7a      	ldrb	r2, [r7, #13]
 8009916:	4908      	ldr	r1, [pc, #32]	@ (8009938 <UARTEx_SetNbDataToProcess+0x98>)
 8009918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800991a:	fb93 f3f2 	sdiv	r3, r3, r2
 800991e:	b29a      	uxth	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009926:	bf00      	nop
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	0800c0b4 	.word	0x0800c0b4
 8009938:	0800c0bc 	.word	0x0800c0bc

0800993c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	4613      	mov	r3, r2
 8009948:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	2b02      	cmp	r3, #2
 800994e:	d165      	bne.n	8009a1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	4a41      	ldr	r2, [pc, #260]	@ (8009a58 <USB_SetTurnaroundTime+0x11c>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d906      	bls.n	8009966 <USB_SetTurnaroundTime+0x2a>
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4a40      	ldr	r2, [pc, #256]	@ (8009a5c <USB_SetTurnaroundTime+0x120>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d202      	bcs.n	8009966 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009960:	230f      	movs	r3, #15
 8009962:	617b      	str	r3, [r7, #20]
 8009964:	e062      	b.n	8009a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	4a3c      	ldr	r2, [pc, #240]	@ (8009a5c <USB_SetTurnaroundTime+0x120>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d306      	bcc.n	800997c <USB_SetTurnaroundTime+0x40>
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	4a3b      	ldr	r2, [pc, #236]	@ (8009a60 <USB_SetTurnaroundTime+0x124>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d202      	bcs.n	800997c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009976:	230e      	movs	r3, #14
 8009978:	617b      	str	r3, [r7, #20]
 800997a:	e057      	b.n	8009a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	4a38      	ldr	r2, [pc, #224]	@ (8009a60 <USB_SetTurnaroundTime+0x124>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d306      	bcc.n	8009992 <USB_SetTurnaroundTime+0x56>
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	4a37      	ldr	r2, [pc, #220]	@ (8009a64 <USB_SetTurnaroundTime+0x128>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d202      	bcs.n	8009992 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800998c:	230d      	movs	r3, #13
 800998e:	617b      	str	r3, [r7, #20]
 8009990:	e04c      	b.n	8009a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	4a33      	ldr	r2, [pc, #204]	@ (8009a64 <USB_SetTurnaroundTime+0x128>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d306      	bcc.n	80099a8 <USB_SetTurnaroundTime+0x6c>
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	4a32      	ldr	r2, [pc, #200]	@ (8009a68 <USB_SetTurnaroundTime+0x12c>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d802      	bhi.n	80099a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80099a2:	230c      	movs	r3, #12
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	e041      	b.n	8009a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	4a2f      	ldr	r2, [pc, #188]	@ (8009a68 <USB_SetTurnaroundTime+0x12c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d906      	bls.n	80099be <USB_SetTurnaroundTime+0x82>
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	4a2e      	ldr	r2, [pc, #184]	@ (8009a6c <USB_SetTurnaroundTime+0x130>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d802      	bhi.n	80099be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80099b8:	230b      	movs	r3, #11
 80099ba:	617b      	str	r3, [r7, #20]
 80099bc:	e036      	b.n	8009a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	4a2a      	ldr	r2, [pc, #168]	@ (8009a6c <USB_SetTurnaroundTime+0x130>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d906      	bls.n	80099d4 <USB_SetTurnaroundTime+0x98>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	4a29      	ldr	r2, [pc, #164]	@ (8009a70 <USB_SetTurnaroundTime+0x134>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d802      	bhi.n	80099d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80099ce:	230a      	movs	r3, #10
 80099d0:	617b      	str	r3, [r7, #20]
 80099d2:	e02b      	b.n	8009a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	4a26      	ldr	r2, [pc, #152]	@ (8009a70 <USB_SetTurnaroundTime+0x134>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d906      	bls.n	80099ea <USB_SetTurnaroundTime+0xae>
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	4a25      	ldr	r2, [pc, #148]	@ (8009a74 <USB_SetTurnaroundTime+0x138>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d202      	bcs.n	80099ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80099e4:	2309      	movs	r3, #9
 80099e6:	617b      	str	r3, [r7, #20]
 80099e8:	e020      	b.n	8009a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	4a21      	ldr	r2, [pc, #132]	@ (8009a74 <USB_SetTurnaroundTime+0x138>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d306      	bcc.n	8009a00 <USB_SetTurnaroundTime+0xc4>
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	4a20      	ldr	r2, [pc, #128]	@ (8009a78 <USB_SetTurnaroundTime+0x13c>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d802      	bhi.n	8009a00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80099fa:	2308      	movs	r3, #8
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	e015      	b.n	8009a2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	4a1d      	ldr	r2, [pc, #116]	@ (8009a78 <USB_SetTurnaroundTime+0x13c>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d906      	bls.n	8009a16 <USB_SetTurnaroundTime+0xda>
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8009a7c <USB_SetTurnaroundTime+0x140>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d202      	bcs.n	8009a16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009a10:	2307      	movs	r3, #7
 8009a12:	617b      	str	r3, [r7, #20]
 8009a14:	e00a      	b.n	8009a2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009a16:	2306      	movs	r3, #6
 8009a18:	617b      	str	r3, [r7, #20]
 8009a1a:	e007      	b.n	8009a2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009a1c:	79fb      	ldrb	r3, [r7, #7]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d102      	bne.n	8009a28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009a22:	2309      	movs	r3, #9
 8009a24:	617b      	str	r3, [r7, #20]
 8009a26:	e001      	b.n	8009a2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009a28:	2309      	movs	r3, #9
 8009a2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	029b      	lsls	r3, r3, #10
 8009a40:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009a44:	431a      	orrs	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	371c      	adds	r7, #28
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	00d8acbf 	.word	0x00d8acbf
 8009a5c:	00e4e1c0 	.word	0x00e4e1c0
 8009a60:	00f42400 	.word	0x00f42400
 8009a64:	01067380 	.word	0x01067380
 8009a68:	011a499f 	.word	0x011a499f
 8009a6c:	01312cff 	.word	0x01312cff
 8009a70:	014ca43f 	.word	0x014ca43f
 8009a74:	016e3600 	.word	0x016e3600
 8009a78:	01a6ab1f 	.word	0x01a6ab1f
 8009a7c:	01e84800 	.word	0x01e84800

08009a80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	3301      	adds	r3, #1
 8009a92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a9a:	d901      	bls.n	8009aa0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e01b      	b.n	8009ad8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	daf2      	bge.n	8009a8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	019b      	lsls	r3, r3, #6
 8009ab0:	f043 0220 	orr.w	r2, r3, #32
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3301      	adds	r3, #1
 8009abc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ac4:	d901      	bls.n	8009aca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e006      	b.n	8009ad8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	f003 0320 	and.w	r3, r3, #32
 8009ad2:	2b20      	cmp	r3, #32
 8009ad4:	d0f0      	beq.n	8009ab8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3714      	adds	r7, #20
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f003 0306 	and.w	r3, r3, #6
 8009afc:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d102      	bne.n	8009b0a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009b04:	2300      	movs	r3, #0
 8009b06:	75fb      	strb	r3, [r7, #23]
 8009b08:	e00a      	b.n	8009b20 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d002      	beq.n	8009b16 <USB_GetDevSpeed+0x32>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b06      	cmp	r3, #6
 8009b14:	d102      	bne.n	8009b1c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b16:	2302      	movs	r3, #2
 8009b18:	75fb      	strb	r3, [r7, #23]
 8009b1a:	e001      	b.n	8009b20 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b1c:	230f      	movs	r3, #15
 8009b1e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	371c      	adds	r7, #28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
	...

08009b30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	785b      	ldrb	r3, [r3, #1]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d139      	bne.n	8009bc0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b52:	69da      	ldr	r2, [r3, #28]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	f003 030f 	and.w	r3, r3, #15
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	68f9      	ldr	r1, [r7, #12]
 8009b66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d153      	bne.n	8009c2c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	791b      	ldrb	r3, [r3, #4]
 8009b9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ba0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	059b      	lsls	r3, r3, #22
 8009ba6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	0159      	lsls	r1, r3, #5
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	440b      	add	r3, r1
 8009bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	4b20      	ldr	r3, [pc, #128]	@ (8009c3c <USB_ActivateEndpoint+0x10c>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	600b      	str	r3, [r1, #0]
 8009bbe:	e035      	b.n	8009c2c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc6:	69da      	ldr	r2, [r3, #28]
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	f003 030f 	and.w	r3, r3, #15
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd6:	041b      	lsls	r3, r3, #16
 8009bd8:	68f9      	ldr	r1, [r7, #12]
 8009bda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bde:	4313      	orrs	r3, r2
 8009be0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d119      	bne.n	8009c2c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	791b      	ldrb	r3, [r3, #4]
 8009c12:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c14:	430b      	orrs	r3, r1
 8009c16:	431a      	orrs	r2, r3
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	0159      	lsls	r1, r3, #5
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	440b      	add	r3, r1
 8009c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c24:	4619      	mov	r1, r3
 8009c26:	4b05      	ldr	r3, [pc, #20]	@ (8009c3c <USB_ActivateEndpoint+0x10c>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	10008000 	.word	0x10008000

08009c40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08a      	sub	sp, #40	@ 0x28
 8009c44:	af02      	add	r7, sp, #8
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	785b      	ldrb	r3, [r3, #1]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	f040 8185 	bne.w	8009f6c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d132      	bne.n	8009cd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	015a      	lsls	r2, r3, #5
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	4413      	add	r3, r2
 8009c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c76:	691a      	ldr	r2, [r3, #16]
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	0159      	lsls	r1, r3, #5
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	440b      	add	r3, r1
 8009c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c84:	4619      	mov	r1, r3
 8009c86:	4ba7      	ldr	r3, [pc, #668]	@ (8009f24 <USB_EPStartXfer+0x2e4>)
 8009c88:	4013      	ands	r3, r2
 8009c8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	0151      	lsls	r1, r2, #5
 8009c9e:	69fa      	ldr	r2, [r7, #28]
 8009ca0:	440a      	add	r2, r1
 8009ca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ca6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009caa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cb8:	691a      	ldr	r2, [r3, #16]
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	0159      	lsls	r1, r3, #5
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	440b      	add	r3, r1
 8009cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	4b97      	ldr	r3, [pc, #604]	@ (8009f28 <USB_EPStartXfer+0x2e8>)
 8009cca:	4013      	ands	r3, r2
 8009ccc:	610b      	str	r3, [r1, #16]
 8009cce:	e097      	b.n	8009e00 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cdc:	691a      	ldr	r2, [r3, #16]
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	0159      	lsls	r1, r3, #5
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	440b      	add	r3, r1
 8009ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cea:	4619      	mov	r1, r3
 8009cec:	4b8e      	ldr	r3, [pc, #568]	@ (8009f28 <USB_EPStartXfer+0x2e8>)
 8009cee:	4013      	ands	r3, r2
 8009cf0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cfe:	691a      	ldr	r2, [r3, #16]
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	0159      	lsls	r1, r3, #5
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	440b      	add	r3, r1
 8009d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4b85      	ldr	r3, [pc, #532]	@ (8009f24 <USB_EPStartXfer+0x2e4>)
 8009d10:	4013      	ands	r3, r2
 8009d12:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d11a      	bne.n	8009d50 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	691a      	ldr	r2, [r3, #16]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d903      	bls.n	8009d2e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	689a      	ldr	r2, [r3, #8]
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	015a      	lsls	r2, r3, #5
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	4413      	add	r3, r2
 8009d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	69ba      	ldr	r2, [r7, #24]
 8009d3e:	0151      	lsls	r1, r2, #5
 8009d40:	69fa      	ldr	r2, [r7, #28]
 8009d42:	440a      	add	r2, r1
 8009d44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d4c:	6113      	str	r3, [r2, #16]
 8009d4e:	e044      	b.n	8009dda <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	691a      	ldr	r2, [r3, #16]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	4413      	add	r3, r2
 8009d5a:	1e5a      	subs	r2, r3, #1
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d64:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	015a      	lsls	r2, r3, #5
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d72:	691a      	ldr	r2, [r3, #16]
 8009d74:	8afb      	ldrh	r3, [r7, #22]
 8009d76:	04d9      	lsls	r1, r3, #19
 8009d78:	4b6c      	ldr	r3, [pc, #432]	@ (8009f2c <USB_EPStartXfer+0x2ec>)
 8009d7a:	400b      	ands	r3, r1
 8009d7c:	69b9      	ldr	r1, [r7, #24]
 8009d7e:	0148      	lsls	r0, r1, #5
 8009d80:	69f9      	ldr	r1, [r7, #28]
 8009d82:	4401      	add	r1, r0
 8009d84:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	791b      	ldrb	r3, [r3, #4]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d122      	bne.n	8009dda <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	69ba      	ldr	r2, [r7, #24]
 8009da4:	0151      	lsls	r1, r2, #5
 8009da6:	69fa      	ldr	r2, [r7, #28]
 8009da8:	440a      	add	r2, r1
 8009daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009db2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc0:	691a      	ldr	r2, [r3, #16]
 8009dc2:	8afb      	ldrh	r3, [r7, #22]
 8009dc4:	075b      	lsls	r3, r3, #29
 8009dc6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009dca:	69b9      	ldr	r1, [r7, #24]
 8009dcc:	0148      	lsls	r0, r1, #5
 8009dce:	69f9      	ldr	r1, [r7, #28]
 8009dd0:	4401      	add	r1, r0
 8009dd2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009de6:	691a      	ldr	r2, [r3, #16]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009df0:	69b9      	ldr	r1, [r7, #24]
 8009df2:	0148      	lsls	r0, r1, #5
 8009df4:	69f9      	ldr	r1, [r7, #28]
 8009df6:	4401      	add	r1, r0
 8009df8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d14b      	bne.n	8009e9e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d009      	beq.n	8009e22 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	015a      	lsls	r2, r3, #5
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	4413      	add	r3, r2
 8009e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	791b      	ldrb	r3, [r3, #4]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d128      	bne.n	8009e7c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d110      	bne.n	8009e5c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	0151      	lsls	r1, r2, #5
 8009e4c:	69fa      	ldr	r2, [r7, #28]
 8009e4e:	440a      	add	r2, r1
 8009e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e58:	6013      	str	r3, [r2, #0]
 8009e5a:	e00f      	b.n	8009e7c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	69ba      	ldr	r2, [r7, #24]
 8009e6c:	0151      	lsls	r1, r2, #5
 8009e6e:	69fa      	ldr	r2, [r7, #28]
 8009e70:	440a      	add	r2, r1
 8009e72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e7a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69ba      	ldr	r2, [r7, #24]
 8009e8c:	0151      	lsls	r1, r2, #5
 8009e8e:	69fa      	ldr	r2, [r7, #28]
 8009e90:	440a      	add	r2, r1
 8009e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	e169      	b.n	800a172 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	015a      	lsls	r2, r3, #5
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	0151      	lsls	r1, r2, #5
 8009eb0:	69fa      	ldr	r2, [r7, #28]
 8009eb2:	440a      	add	r2, r1
 8009eb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eb8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ebc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	791b      	ldrb	r3, [r3, #4]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d015      	beq.n	8009ef2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 8151 	beq.w	800a172 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	f003 030f 	and.w	r3, r3, #15
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee6:	69f9      	ldr	r1, [r7, #28]
 8009ee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009eec:	4313      	orrs	r3, r2
 8009eee:	634b      	str	r3, [r1, #52]	@ 0x34
 8009ef0:	e13f      	b.n	800a172 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d116      	bne.n	8009f30 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	015a      	lsls	r2, r3, #5
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	4413      	add	r3, r2
 8009f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	69ba      	ldr	r2, [r7, #24]
 8009f12:	0151      	lsls	r1, r2, #5
 8009f14:	69fa      	ldr	r2, [r7, #28]
 8009f16:	440a      	add	r2, r1
 8009f18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f20:	6013      	str	r3, [r2, #0]
 8009f22:	e015      	b.n	8009f50 <USB_EPStartXfer+0x310>
 8009f24:	e007ffff 	.word	0xe007ffff
 8009f28:	fff80000 	.word	0xfff80000
 8009f2c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	69ba      	ldr	r2, [r7, #24]
 8009f40:	0151      	lsls	r1, r2, #5
 8009f42:	69fa      	ldr	r2, [r7, #28]
 8009f44:	440a      	add	r2, r1
 8009f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f4e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	68d9      	ldr	r1, [r3, #12]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	781a      	ldrb	r2, [r3, #0]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	b298      	uxth	r0, r3
 8009f5e:	79fb      	ldrb	r3, [r7, #7]
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	4603      	mov	r3, r0
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f000 f9b9 	bl	800a2dc <USB_WritePacket>
 8009f6a:	e102      	b.n	800a172 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f78:	691a      	ldr	r2, [r3, #16]
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	0159      	lsls	r1, r3, #5
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	440b      	add	r3, r1
 8009f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f86:	4619      	mov	r1, r3
 8009f88:	4b7c      	ldr	r3, [pc, #496]	@ (800a17c <USB_EPStartXfer+0x53c>)
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f9a:	691a      	ldr	r2, [r3, #16]
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	0159      	lsls	r1, r3, #5
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	440b      	add	r3, r1
 8009fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4b75      	ldr	r3, [pc, #468]	@ (800a180 <USB_EPStartXfer+0x540>)
 8009fac:	4013      	ands	r3, r2
 8009fae:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d12f      	bne.n	800a016 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d003      	beq.n	8009fc6 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	689a      	ldr	r2, [r3, #8]
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	689a      	ldr	r2, [r3, #8]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fda:	691a      	ldr	r2, [r3, #16]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fe4:	69b9      	ldr	r1, [r7, #24]
 8009fe6:	0148      	lsls	r0, r1, #5
 8009fe8:	69f9      	ldr	r1, [r7, #28]
 8009fea:	4401      	add	r1, r0
 8009fec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	0151      	lsls	r1, r2, #5
 800a006:	69fa      	ldr	r2, [r7, #28]
 800a008:	440a      	add	r2, r1
 800a00a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a00e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a012:	6113      	str	r3, [r2, #16]
 800a014:	e05f      	b.n	800a0d6 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d123      	bne.n	800a066 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	015a      	lsls	r2, r3, #5
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	4413      	add	r3, r2
 800a026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a02a:	691a      	ldr	r2, [r3, #16]
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a034:	69b9      	ldr	r1, [r7, #24]
 800a036:	0148      	lsls	r0, r1, #5
 800a038:	69f9      	ldr	r1, [r7, #28]
 800a03a:	4401      	add	r1, r0
 800a03c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a040:	4313      	orrs	r3, r2
 800a042:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	015a      	lsls	r2, r3, #5
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	69ba      	ldr	r2, [r7, #24]
 800a054:	0151      	lsls	r1, r2, #5
 800a056:	69fa      	ldr	r2, [r7, #28]
 800a058:	440a      	add	r2, r1
 800a05a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a05e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a062:	6113      	str	r3, [r2, #16]
 800a064:	e037      	b.n	800a0d6 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	691a      	ldr	r2, [r3, #16]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	4413      	add	r3, r2
 800a070:	1e5a      	subs	r2, r3, #1
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	fbb2 f3f3 	udiv	r3, r2, r3
 800a07a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	8afa      	ldrh	r2, [r7, #22]
 800a082:	fb03 f202 	mul.w	r2, r3, r2
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	4413      	add	r3, r2
 800a092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a096:	691a      	ldr	r2, [r3, #16]
 800a098:	8afb      	ldrh	r3, [r7, #22]
 800a09a:	04d9      	lsls	r1, r3, #19
 800a09c:	4b39      	ldr	r3, [pc, #228]	@ (800a184 <USB_EPStartXfer+0x544>)
 800a09e:	400b      	ands	r3, r1
 800a0a0:	69b9      	ldr	r1, [r7, #24]
 800a0a2:	0148      	lsls	r0, r1, #5
 800a0a4:	69f9      	ldr	r1, [r7, #28]
 800a0a6:	4401      	add	r1, r0
 800a0a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0bc:	691a      	ldr	r2, [r3, #16]
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0c6:	69b9      	ldr	r1, [r7, #24]
 800a0c8:	0148      	lsls	r0, r1, #5
 800a0ca:	69f9      	ldr	r1, [r7, #28]
 800a0cc:	4401      	add	r1, r0
 800a0ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d10d      	bne.n	800a0f8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d009      	beq.n	800a0f8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	68d9      	ldr	r1, [r3, #12]
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	015a      	lsls	r2, r3, #5
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f4:	460a      	mov	r2, r1
 800a0f6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	791b      	ldrb	r3, [r3, #4]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d128      	bne.n	800a152 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d110      	bne.n	800a132 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	4413      	add	r3, r2
 800a118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69ba      	ldr	r2, [r7, #24]
 800a120:	0151      	lsls	r1, r2, #5
 800a122:	69fa      	ldr	r2, [r7, #28]
 800a124:	440a      	add	r2, r1
 800a126:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a12a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a12e:	6013      	str	r3, [r2, #0]
 800a130:	e00f      	b.n	800a152 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	015a      	lsls	r2, r3, #5
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	4413      	add	r3, r2
 800a13a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	0151      	lsls	r1, r2, #5
 800a144:	69fa      	ldr	r2, [r7, #28]
 800a146:	440a      	add	r2, r1
 800a148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a14c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a150:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	015a      	lsls	r2, r3, #5
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	4413      	add	r3, r2
 800a15a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	69ba      	ldr	r2, [r7, #24]
 800a162:	0151      	lsls	r1, r2, #5
 800a164:	69fa      	ldr	r2, [r7, #28]
 800a166:	440a      	add	r2, r1
 800a168:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a16c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a170:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3720      	adds	r7, #32
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	fff80000 	.word	0xfff80000
 800a180:	e007ffff 	.word	0xe007ffff
 800a184:	1ff80000 	.word	0x1ff80000

0800a188 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a188:	b480      	push	{r7}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	785b      	ldrb	r3, [r3, #1]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d14a      	bne.n	800a23c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1be:	f040 8086 	bne.w	800a2ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	7812      	ldrb	r2, [r2, #0]
 800a1d6:	0151      	lsls	r1, r2, #5
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	440a      	add	r2, r1
 800a1dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a1e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	015a      	lsls	r2, r3, #5
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	7812      	ldrb	r2, [r2, #0]
 800a1fa:	0151      	lsls	r1, r2, #5
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	440a      	add	r2, r1
 800a200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a204:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a208:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3301      	adds	r3, #1
 800a20e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a216:	4293      	cmp	r3, r2
 800a218:	d902      	bls.n	800a220 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	75fb      	strb	r3, [r7, #23]
          break;
 800a21e:	e056      	b.n	800a2ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a238:	d0e7      	beq.n	800a20a <USB_EPStopXfer+0x82>
 800a23a:	e048      	b.n	800a2ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a250:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a254:	d13b      	bne.n	800a2ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	7812      	ldrb	r2, [r2, #0]
 800a26a:	0151      	lsls	r1, r2, #5
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	440a      	add	r2, r1
 800a270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a274:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a278:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	7812      	ldrb	r2, [r2, #0]
 800a28e:	0151      	lsls	r1, r2, #5
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	440a      	add	r2, r1
 800a294:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a298:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a29c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d902      	bls.n	800a2b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	75fb      	strb	r3, [r7, #23]
          break;
 800a2b2:	e00c      	b.n	800a2ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	015a      	lsls	r2, r3, #5
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2cc:	d0e7      	beq.n	800a29e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	371c      	adds	r7, #28
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b089      	sub	sp, #36	@ 0x24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	71fb      	strb	r3, [r7, #7]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a2fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d123      	bne.n	800a34a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a302:	88bb      	ldrh	r3, [r7, #4]
 800a304:	3303      	adds	r3, #3
 800a306:	089b      	lsrs	r3, r3, #2
 800a308:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a30a:	2300      	movs	r3, #0
 800a30c:	61bb      	str	r3, [r7, #24]
 800a30e:	e018      	b.n	800a342 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	031a      	lsls	r2, r3, #12
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	4413      	add	r3, r2
 800a318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a31c:	461a      	mov	r2, r3
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	3301      	adds	r3, #1
 800a328:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	3301      	adds	r3, #1
 800a32e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	3301      	adds	r3, #1
 800a334:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	3301      	adds	r3, #1
 800a33a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	3301      	adds	r3, #1
 800a340:	61bb      	str	r3, [r7, #24]
 800a342:	69ba      	ldr	r2, [r7, #24]
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	429a      	cmp	r2, r3
 800a348:	d3e2      	bcc.n	800a310 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3724      	adds	r7, #36	@ 0x24
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a358:	b480      	push	{r7}
 800a35a:	b08b      	sub	sp, #44	@ 0x2c
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	4613      	mov	r3, r2
 800a364:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a36e:	88fb      	ldrh	r3, [r7, #6]
 800a370:	089b      	lsrs	r3, r3, #2
 800a372:	b29b      	uxth	r3, r3
 800a374:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a376:	88fb      	ldrh	r3, [r7, #6]
 800a378:	f003 0303 	and.w	r3, r3, #3
 800a37c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a37e:	2300      	movs	r3, #0
 800a380:	623b      	str	r3, [r7, #32]
 800a382:	e014      	b.n	800a3ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a392:	3301      	adds	r3, #1
 800a394:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a398:	3301      	adds	r3, #1
 800a39a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39e:	3301      	adds	r3, #1
 800a3a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	623b      	str	r3, [r7, #32]
 800a3ae:	6a3a      	ldr	r2, [r7, #32]
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d3e6      	bcc.n	800a384 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a3b6:	8bfb      	ldrh	r3, [r7, #30]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d01e      	beq.n	800a3fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f107 0310 	add.w	r3, r7, #16
 800a3cc:	6812      	ldr	r2, [r2, #0]
 800a3ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e0:	701a      	strb	r2, [r3, #0]
      i++;
 800a3e2:	6a3b      	ldr	r3, [r7, #32]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a3ee:	8bfb      	ldrh	r3, [r7, #30]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a3f4:	8bfb      	ldrh	r3, [r7, #30]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1ea      	bne.n	800a3d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	372c      	adds	r7, #44	@ 0x2c
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	785b      	ldrb	r3, [r3, #1]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d12c      	bne.n	800a47e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	db12      	blt.n	800a45c <USB_EPSetStall+0x54>
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00f      	beq.n	800a45c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	0151      	lsls	r1, r2, #5
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	440a      	add	r2, r1
 800a452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a456:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a45a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	0151      	lsls	r1, r2, #5
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	440a      	add	r2, r1
 800a472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a476:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	e02b      	b.n	800a4d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	015a      	lsls	r2, r3, #5
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	4413      	add	r3, r2
 800a486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	db12      	blt.n	800a4b6 <USB_EPSetStall+0xae>
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00f      	beq.n	800a4b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	015a      	lsls	r2, r3, #5
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	4413      	add	r3, r2
 800a49e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	0151      	lsls	r1, r2, #5
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	440a      	add	r2, r1
 800a4ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a4b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	0151      	lsls	r1, r2, #5
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	440a      	add	r2, r1
 800a4cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a4d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	785b      	ldrb	r3, [r3, #1]
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d128      	bne.n	800a552 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	0151      	lsls	r1, r2, #5
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	440a      	add	r2, r1
 800a516:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a51a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a51e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	791b      	ldrb	r3, [r3, #4]
 800a524:	2b03      	cmp	r3, #3
 800a526:	d003      	beq.n	800a530 <USB_EPClearStall+0x4c>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	791b      	ldrb	r3, [r3, #4]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d138      	bne.n	800a5a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	0151      	lsls	r1, r2, #5
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	440a      	add	r2, r1
 800a546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a54a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	e027      	b.n	800a5a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	015a      	lsls	r2, r3, #5
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	4413      	add	r3, r2
 800a55a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	0151      	lsls	r1, r2, #5
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	440a      	add	r2, r1
 800a568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a56c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a570:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	791b      	ldrb	r3, [r3, #4]
 800a576:	2b03      	cmp	r3, #3
 800a578:	d003      	beq.n	800a582 <USB_EPClearStall+0x9e>
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	791b      	ldrb	r3, [r3, #4]
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d10f      	bne.n	800a5a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	0151      	lsls	r1, r2, #5
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	440a      	add	r2, r1
 800a598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a59c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a5d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	78fb      	ldrb	r3, [r7, #3]
 800a5de:	011b      	lsls	r3, r3, #4
 800a5e0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a5e4:	68f9      	ldr	r1, [r7, #12]
 800a5e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	695b      	ldr	r3, [r3, #20]
 800a608:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	4013      	ands	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a614:	68fb      	ldr	r3, [r7, #12]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a622:	b480      	push	{r7}
 800a624:	b085      	sub	sp, #20
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a63e:	69db      	ldr	r3, [r3, #28]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	4013      	ands	r3, r2
 800a644:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	0c1b      	lsrs	r3, r3, #16
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3714      	adds	r7, #20
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a656:	b480      	push	{r7}
 800a658:	b085      	sub	sp, #20
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a672:	69db      	ldr	r3, [r3, #28]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	4013      	ands	r3, r2
 800a678:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	b29b      	uxth	r3, r3
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b085      	sub	sp, #20
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	460b      	mov	r3, r1
 800a694:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	015a      	lsls	r2, r3, #5
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a6b8:	68bb      	ldr	r3, [r7, #8]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b087      	sub	sp, #28
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a6ea:	78fb      	ldrb	r3, [r7, #3]
 800a6ec:	f003 030f 	and.w	r3, r3, #15
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f6:	01db      	lsls	r3, r3, #7
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a700:	78fb      	ldrb	r3, [r7, #3]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	4013      	ands	r3, r2
 800a712:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a714:	68bb      	ldr	r3, [r7, #8]
}
 800a716:	4618      	mov	r0, r3
 800a718:	371c      	adds	r7, #28
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a722:	b480      	push	{r7}
 800a724:	b083      	sub	sp, #12
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	f003 0301 	and.w	r3, r3, #1
}
 800a732:	4618      	mov	r0, r3
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
	...

0800a740 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a75a:	4619      	mov	r1, r3
 800a75c:	4b09      	ldr	r3, [pc, #36]	@ (800a784 <USB_ActivateSetup+0x44>)
 800a75e:	4013      	ands	r3, r2
 800a760:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a774:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	fffff800 	.word	0xfffff800

0800a788 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a788:	b480      	push	{r7}
 800a78a:	b087      	sub	sp, #28
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	460b      	mov	r3, r1
 800a792:	607a      	str	r2, [r7, #4]
 800a794:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	333c      	adds	r3, #60	@ 0x3c
 800a79e:	3304      	adds	r3, #4
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	4a26      	ldr	r2, [pc, #152]	@ (800a840 <USB_EP0_OutStart+0xb8>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d90a      	bls.n	800a7c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7bc:	d101      	bne.n	800a7c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e037      	b.n	800a832 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a7e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7f0:	f043 0318 	orr.w	r3, r3, #24
 800a7f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a804:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a808:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a80a:	7afb      	ldrb	r3, [r7, #11]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d10f      	bne.n	800a830 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a816:	461a      	mov	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a82a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a82e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	371c      	adds	r7, #28
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	4f54300a 	.word	0x4f54300a

0800a844 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a84c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a84e:	4618      	mov	r0, r3
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	460b      	mov	r3, r1
 800a864:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a870:	2b00      	cmp	r3, #0
 800a872:	d009      	beq.n	800a888 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	78fa      	ldrb	r2, [r7, #3]
 800a87e:	4611      	mov	r1, r2
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	4798      	blx	r3
 800a884:	4603      	mov	r3, r0
 800a886:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a888:	7bfb      	ldrb	r3, [r7, #15]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b084      	sub	sp, #16
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	460b      	mov	r3, r1
 800a89c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	78fa      	ldrb	r2, [r7, #3]
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	4798      	blx	r3
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b084      	sub	sp, #16
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f001 f8e2 	bl	800baa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a8fa:	f003 031f 	and.w	r3, r3, #31
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d01a      	beq.n	800a938 <USBD_LL_SetupStage+0x72>
 800a902:	2b02      	cmp	r3, #2
 800a904:	d822      	bhi.n	800a94c <USBD_LL_SetupStage+0x86>
 800a906:	2b00      	cmp	r3, #0
 800a908:	d002      	beq.n	800a910 <USBD_LL_SetupStage+0x4a>
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d00a      	beq.n	800a924 <USBD_LL_SetupStage+0x5e>
 800a90e:	e01d      	b.n	800a94c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fb0f 	bl	800af3c <USBD_StdDevReq>
 800a91e:	4603      	mov	r3, r0
 800a920:	73fb      	strb	r3, [r7, #15]
      break;
 800a922:	e020      	b.n	800a966 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fb77 	bl	800b020 <USBD_StdItfReq>
 800a932:	4603      	mov	r3, r0
 800a934:	73fb      	strb	r3, [r7, #15]
      break;
 800a936:	e016      	b.n	800a966 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fbd9 	bl	800b0f8 <USBD_StdEPReq>
 800a946:	4603      	mov	r3, r0
 800a948:	73fb      	strb	r3, [r7, #15]
      break;
 800a94a:	e00c      	b.n	800a966 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a952:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a956:	b2db      	uxtb	r3, r3
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f001 fa66 	bl	800be2c <USBD_LL_StallEP>
 800a960:	4603      	mov	r3, r0
 800a962:	73fb      	strb	r3, [r7, #15]
      break;
 800a964:	bf00      	nop
  }

  return ret;
 800a966:	7bfb      	ldrb	r3, [r7, #15]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	460b      	mov	r3, r1
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a982:	7afb      	ldrb	r3, [r7, #11]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d16e      	bne.n	800aa66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a98e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a996:	2b03      	cmp	r3, #3
 800a998:	f040 8098 	bne.w	800aacc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	689a      	ldr	r2, [r3, #8]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d913      	bls.n	800a9d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	689a      	ldr	r2, [r3, #8]
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	1ad2      	subs	r2, r2, r3
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	68da      	ldr	r2, [r3, #12]
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	bf28      	it	cs
 800a9c2:	4613      	movcs	r3, r2
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	6879      	ldr	r1, [r7, #4]
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f001 f8e1 	bl	800bb90 <USBD_CtlContinueRx>
 800a9ce:	e07d      	b.n	800aacc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a9d6:	f003 031f 	and.w	r3, r3, #31
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d014      	beq.n	800aa08 <USBD_LL_DataOutStage+0x98>
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d81d      	bhi.n	800aa1e <USBD_LL_DataOutStage+0xae>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <USBD_LL_DataOutStage+0x7c>
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d003      	beq.n	800a9f2 <USBD_LL_DataOutStage+0x82>
 800a9ea:	e018      	b.n	800aa1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	75bb      	strb	r3, [r7, #22]
            break;
 800a9f0:	e018      	b.n	800aa24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f000 fa64 	bl	800aeca <USBD_CoreFindIF>
 800aa02:	4603      	mov	r3, r0
 800aa04:	75bb      	strb	r3, [r7, #22]
            break;
 800aa06:	e00d      	b.n	800aa24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	4619      	mov	r1, r3
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f000 fa66 	bl	800aee4 <USBD_CoreFindEP>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	75bb      	strb	r3, [r7, #22]
            break;
 800aa1c:	e002      	b.n	800aa24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	75bb      	strb	r3, [r7, #22]
            break;
 800aa22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aa24:	7dbb      	ldrb	r3, [r7, #22]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d119      	bne.n	800aa5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d113      	bne.n	800aa5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aa36:	7dba      	ldrb	r2, [r7, #22]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	32ae      	adds	r2, #174	@ 0xae
 800aa3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00b      	beq.n	800aa5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aa46:	7dba      	ldrb	r2, [r7, #22]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aa4e:	7dba      	ldrb	r2, [r7, #22]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	32ae      	adds	r2, #174	@ 0xae
 800aa54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f001 f8a7 	bl	800bbb2 <USBD_CtlSendStatus>
 800aa64:	e032      	b.n	800aacc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800aa66:	7afb      	ldrb	r3, [r7, #11]
 800aa68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	4619      	mov	r1, r3
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f000 fa37 	bl	800aee4 <USBD_CoreFindEP>
 800aa76:	4603      	mov	r3, r0
 800aa78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa7a:	7dbb      	ldrb	r3, [r7, #22]
 800aa7c:	2bff      	cmp	r3, #255	@ 0xff
 800aa7e:	d025      	beq.n	800aacc <USBD_LL_DataOutStage+0x15c>
 800aa80:	7dbb      	ldrb	r3, [r7, #22]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d122      	bne.n	800aacc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d117      	bne.n	800aac2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aa92:	7dba      	ldrb	r2, [r7, #22]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	32ae      	adds	r2, #174	@ 0xae
 800aa98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00f      	beq.n	800aac2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aaa2:	7dba      	ldrb	r2, [r7, #22]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800aaaa:	7dba      	ldrb	r2, [r7, #22]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	32ae      	adds	r2, #174	@ 0xae
 800aab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	7afa      	ldrb	r2, [r7, #11]
 800aab8:	4611      	mov	r1, r2
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	4798      	blx	r3
 800aabe:	4603      	mov	r3, r0
 800aac0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	e000      	b.n	800aace <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b086      	sub	sp, #24
 800aada:	af00      	add	r7, sp, #0
 800aadc:	60f8      	str	r0, [r7, #12]
 800aade:	460b      	mov	r3, r1
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aae4:	7afb      	ldrb	r3, [r7, #11]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d16f      	bne.n	800abca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3314      	adds	r3, #20
 800aaee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d15a      	bne.n	800abb0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	689a      	ldr	r2, [r3, #8]
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d914      	bls.n	800ab30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	689a      	ldr	r2, [r3, #8]
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	1ad2      	subs	r2, r2, r3
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	461a      	mov	r2, r3
 800ab1a:	6879      	ldr	r1, [r7, #4]
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f001 f826 	bl	800bb6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab22:	2300      	movs	r3, #0
 800ab24:	2200      	movs	r2, #0
 800ab26:	2100      	movs	r1, #0
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f001 fa29 	bl	800bf80 <USBD_LL_PrepareReceive>
 800ab2e:	e03f      	b.n	800abb0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	68da      	ldr	r2, [r3, #12]
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d11c      	bne.n	800ab76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	685a      	ldr	r2, [r3, #4]
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d316      	bcc.n	800ab76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d20f      	bcs.n	800ab76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab56:	2200      	movs	r2, #0
 800ab58:	2100      	movs	r1, #0
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f001 f807 	bl	800bb6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab68:	2300      	movs	r3, #0
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f001 fa06 	bl	800bf80 <USBD_LL_PrepareReceive>
 800ab74:	e01c      	b.n	800abb0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d10f      	bne.n	800aba2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d009      	beq.n	800aba2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aba2:	2180      	movs	r1, #128	@ 0x80
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f001 f941 	bl	800be2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f001 f814 	bl	800bbd8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d03a      	beq.n	800ac30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7ff fe42 	bl	800a844 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800abc8:	e032      	b.n	800ac30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800abca:	7afb      	ldrb	r3, [r7, #11]
 800abcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	4619      	mov	r1, r3
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f000 f985 	bl	800aee4 <USBD_CoreFindEP>
 800abda:	4603      	mov	r3, r0
 800abdc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abde:	7dfb      	ldrb	r3, [r7, #23]
 800abe0:	2bff      	cmp	r3, #255	@ 0xff
 800abe2:	d025      	beq.n	800ac30 <USBD_LL_DataInStage+0x15a>
 800abe4:	7dfb      	ldrb	r3, [r7, #23]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d122      	bne.n	800ac30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d11c      	bne.n	800ac30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800abf6:	7dfa      	ldrb	r2, [r7, #23]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	32ae      	adds	r2, #174	@ 0xae
 800abfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d014      	beq.n	800ac30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ac06:	7dfa      	ldrb	r2, [r7, #23]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ac0e:	7dfa      	ldrb	r2, [r7, #23]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	32ae      	adds	r2, #174	@ 0xae
 800ac14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac18:	695b      	ldr	r3, [r3, #20]
 800ac1a:	7afa      	ldrb	r2, [r7, #11]
 800ac1c:	4611      	mov	r1, r2
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	4798      	blx	r3
 800ac22:	4603      	mov	r3, r0
 800ac24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ac26:	7dbb      	ldrb	r3, [r7, #22]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d001      	beq.n	800ac30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ac2c:	7dbb      	ldrb	r3, [r7, #22]
 800ac2e:	e000      	b.n	800ac32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d014      	beq.n	800aca0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00e      	beq.n	800aca0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	6852      	ldr	r2, [r2, #4]
 800ac8e:	b2d2      	uxtb	r2, r2
 800ac90:	4611      	mov	r1, r2
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	4798      	blx	r3
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aca0:	2340      	movs	r3, #64	@ 0x40
 800aca2:	2200      	movs	r2, #0
 800aca4:	2100      	movs	r1, #0
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f001 f89a 	bl	800bde0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2240      	movs	r2, #64	@ 0x40
 800acb8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acbc:	2340      	movs	r3, #64	@ 0x40
 800acbe:	2200      	movs	r2, #0
 800acc0:	2180      	movs	r1, #128	@ 0x80
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f001 f88c 	bl	800bde0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2240      	movs	r2, #64	@ 0x40
 800acd2:	621a      	str	r2, [r3, #32]

  return ret;
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800acde:	b480      	push	{r7}
 800ace0:	b083      	sub	sp, #12
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	460b      	mov	r3, r1
 800ace8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	78fa      	ldrb	r2, [r7, #3]
 800acee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b083      	sub	sp, #12
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b04      	cmp	r3, #4
 800ad10:	d006      	beq.n	800ad20 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad18:	b2da      	uxtb	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2204      	movs	r2, #4
 800ad24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	370c      	adds	r7, #12
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b083      	sub	sp, #12
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b04      	cmp	r3, #4
 800ad48:	d106      	bne.n	800ad58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ad50:	b2da      	uxtb	r2, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b082      	sub	sp, #8
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	d110      	bne.n	800ad9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00b      	beq.n	800ad9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d005      	beq.n	800ad9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b082      	sub	sp, #8
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	460b      	mov	r3, r1
 800adb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	32ae      	adds	r2, #174	@ 0xae
 800adbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d101      	bne.n	800adc8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e01c      	b.n	800ae02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b03      	cmp	r3, #3
 800add2:	d115      	bne.n	800ae00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	32ae      	adds	r2, #174	@ 0xae
 800adde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00b      	beq.n	800ae00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	32ae      	adds	r2, #174	@ 0xae
 800adf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf6:	6a1b      	ldr	r3, [r3, #32]
 800adf8:	78fa      	ldrb	r2, [r7, #3]
 800adfa:	4611      	mov	r1, r2
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b082      	sub	sp, #8
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	460b      	mov	r3, r1
 800ae14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	32ae      	adds	r2, #174	@ 0xae
 800ae20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d101      	bne.n	800ae2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	e01c      	b.n	800ae66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b03      	cmp	r3, #3
 800ae36:	d115      	bne.n	800ae64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	32ae      	adds	r2, #174	@ 0xae
 800ae42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00b      	beq.n	800ae64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	32ae      	adds	r2, #174	@ 0xae
 800ae56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae5c:	78fa      	ldrb	r2, [r7, #3]
 800ae5e:	4611      	mov	r1, r2
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00e      	beq.n	800aec0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	6852      	ldr	r2, [r2, #4]
 800aeae:	b2d2      	uxtb	r2, r2
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	4798      	blx	r3
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800aebc:	2303      	movs	r3, #3
 800aebe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aeca:	b480      	push	{r7}
 800aecc:	b083      	sub	sp, #12
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	460b      	mov	r3, r1
 800aed4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aed6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	460b      	mov	r3, r1
 800aeee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aef0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aefe:	b480      	push	{r7}
 800af00:	b087      	sub	sp, #28
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	3301      	adds	r3, #1
 800af14:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800af1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800af20:	021b      	lsls	r3, r3, #8
 800af22:	b21a      	sxth	r2, r3
 800af24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af28:	4313      	orrs	r3, r2
 800af2a:	b21b      	sxth	r3, r3
 800af2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800af2e:	89fb      	ldrh	r3, [r7, #14]
}
 800af30:	4618      	mov	r0, r3
 800af32:	371c      	adds	r7, #28
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af52:	2b40      	cmp	r3, #64	@ 0x40
 800af54:	d005      	beq.n	800af62 <USBD_StdDevReq+0x26>
 800af56:	2b40      	cmp	r3, #64	@ 0x40
 800af58:	d857      	bhi.n	800b00a <USBD_StdDevReq+0xce>
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00f      	beq.n	800af7e <USBD_StdDevReq+0x42>
 800af5e:	2b20      	cmp	r3, #32
 800af60:	d153      	bne.n	800b00a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	32ae      	adds	r2, #174	@ 0xae
 800af6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	4798      	blx	r3
 800af78:	4603      	mov	r3, r0
 800af7a:	73fb      	strb	r3, [r7, #15]
      break;
 800af7c:	e04a      	b.n	800b014 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	785b      	ldrb	r3, [r3, #1]
 800af82:	2b09      	cmp	r3, #9
 800af84:	d83b      	bhi.n	800affe <USBD_StdDevReq+0xc2>
 800af86:	a201      	add	r2, pc, #4	@ (adr r2, 800af8c <USBD_StdDevReq+0x50>)
 800af88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8c:	0800afe1 	.word	0x0800afe1
 800af90:	0800aff5 	.word	0x0800aff5
 800af94:	0800afff 	.word	0x0800afff
 800af98:	0800afeb 	.word	0x0800afeb
 800af9c:	0800afff 	.word	0x0800afff
 800afa0:	0800afbf 	.word	0x0800afbf
 800afa4:	0800afb5 	.word	0x0800afb5
 800afa8:	0800afff 	.word	0x0800afff
 800afac:	0800afd7 	.word	0x0800afd7
 800afb0:	0800afc9 	.word	0x0800afc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fa3c 	bl	800b434 <USBD_GetDescriptor>
          break;
 800afbc:	e024      	b.n	800b008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fbcb 	bl	800b75c <USBD_SetAddress>
          break;
 800afc6:	e01f      	b.n	800b008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fc0a 	bl	800b7e4 <USBD_SetConfig>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73fb      	strb	r3, [r7, #15]
          break;
 800afd4:	e018      	b.n	800b008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fcad 	bl	800b938 <USBD_GetConfig>
          break;
 800afde:	e013      	b.n	800b008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800afe0:	6839      	ldr	r1, [r7, #0]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fcde 	bl	800b9a4 <USBD_GetStatus>
          break;
 800afe8:	e00e      	b.n	800b008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fd0d 	bl	800ba0c <USBD_SetFeature>
          break;
 800aff2:	e009      	b.n	800b008 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fd31 	bl	800ba5e <USBD_ClrFeature>
          break;
 800affc:	e004      	b.n	800b008 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800affe:	6839      	ldr	r1, [r7, #0]
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 fd88 	bl	800bb16 <USBD_CtlError>
          break;
 800b006:	bf00      	nop
      }
      break;
 800b008:	e004      	b.n	800b014 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fd82 	bl	800bb16 <USBD_CtlError>
      break;
 800b012:	bf00      	nop
  }

  return ret;
 800b014:	7bfb      	ldrb	r3, [r7, #15]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop

0800b020 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b036:	2b40      	cmp	r3, #64	@ 0x40
 800b038:	d005      	beq.n	800b046 <USBD_StdItfReq+0x26>
 800b03a:	2b40      	cmp	r3, #64	@ 0x40
 800b03c:	d852      	bhi.n	800b0e4 <USBD_StdItfReq+0xc4>
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d001      	beq.n	800b046 <USBD_StdItfReq+0x26>
 800b042:	2b20      	cmp	r3, #32
 800b044:	d14e      	bne.n	800b0e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	3b01      	subs	r3, #1
 800b050:	2b02      	cmp	r3, #2
 800b052:	d840      	bhi.n	800b0d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	889b      	ldrh	r3, [r3, #4]
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d836      	bhi.n	800b0cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	889b      	ldrh	r3, [r3, #4]
 800b062:	b2db      	uxtb	r3, r3
 800b064:	4619      	mov	r1, r3
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff ff2f 	bl	800aeca <USBD_CoreFindIF>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	2bff      	cmp	r3, #255	@ 0xff
 800b074:	d01d      	beq.n	800b0b2 <USBD_StdItfReq+0x92>
 800b076:	7bbb      	ldrb	r3, [r7, #14]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d11a      	bne.n	800b0b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b07c:	7bba      	ldrb	r2, [r7, #14]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	32ae      	adds	r2, #174	@ 0xae
 800b082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00f      	beq.n	800b0ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b08c:	7bba      	ldrb	r2, [r7, #14]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b094:	7bba      	ldrb	r2, [r7, #14]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	32ae      	adds	r2, #174	@ 0xae
 800b09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	6839      	ldr	r1, [r7, #0]
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	4798      	blx	r3
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b0aa:	e004      	b.n	800b0b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b0b0:	e001      	b.n	800b0b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b0b2:	2303      	movs	r3, #3
 800b0b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	88db      	ldrh	r3, [r3, #6]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d110      	bne.n	800b0e0 <USBD_StdItfReq+0xc0>
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10d      	bne.n	800b0e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 fd74 	bl	800bbb2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b0ca:	e009      	b.n	800b0e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fd21 	bl	800bb16 <USBD_CtlError>
          break;
 800b0d4:	e004      	b.n	800b0e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fd1c 	bl	800bb16 <USBD_CtlError>
          break;
 800b0de:	e000      	b.n	800b0e2 <USBD_StdItfReq+0xc2>
          break;
 800b0e0:	bf00      	nop
      }
      break;
 800b0e2:	e004      	b.n	800b0ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fd15 	bl	800bb16 <USBD_CtlError>
      break;
 800b0ec:	bf00      	nop
  }

  return ret;
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	889b      	ldrh	r3, [r3, #4]
 800b10a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b114:	2b40      	cmp	r3, #64	@ 0x40
 800b116:	d007      	beq.n	800b128 <USBD_StdEPReq+0x30>
 800b118:	2b40      	cmp	r3, #64	@ 0x40
 800b11a:	f200 817f 	bhi.w	800b41c <USBD_StdEPReq+0x324>
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d02a      	beq.n	800b178 <USBD_StdEPReq+0x80>
 800b122:	2b20      	cmp	r3, #32
 800b124:	f040 817a 	bne.w	800b41c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7ff fed9 	bl	800aee4 <USBD_CoreFindEP>
 800b132:	4603      	mov	r3, r0
 800b134:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b136:	7b7b      	ldrb	r3, [r7, #13]
 800b138:	2bff      	cmp	r3, #255	@ 0xff
 800b13a:	f000 8174 	beq.w	800b426 <USBD_StdEPReq+0x32e>
 800b13e:	7b7b      	ldrb	r3, [r7, #13]
 800b140:	2b00      	cmp	r3, #0
 800b142:	f040 8170 	bne.w	800b426 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b146:	7b7a      	ldrb	r2, [r7, #13]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b14e:	7b7a      	ldrb	r2, [r7, #13]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	32ae      	adds	r2, #174	@ 0xae
 800b154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 8163 	beq.w	800b426 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b160:	7b7a      	ldrb	r2, [r7, #13]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	32ae      	adds	r2, #174	@ 0xae
 800b166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	4798      	blx	r3
 800b172:	4603      	mov	r3, r0
 800b174:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b176:	e156      	b.n	800b426 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	785b      	ldrb	r3, [r3, #1]
 800b17c:	2b03      	cmp	r3, #3
 800b17e:	d008      	beq.n	800b192 <USBD_StdEPReq+0x9a>
 800b180:	2b03      	cmp	r3, #3
 800b182:	f300 8145 	bgt.w	800b410 <USBD_StdEPReq+0x318>
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 809b 	beq.w	800b2c2 <USBD_StdEPReq+0x1ca>
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d03c      	beq.n	800b20a <USBD_StdEPReq+0x112>
 800b190:	e13e      	b.n	800b410 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d002      	beq.n	800b1a4 <USBD_StdEPReq+0xac>
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	d016      	beq.n	800b1d0 <USBD_StdEPReq+0xd8>
 800b1a2:	e02c      	b.n	800b1fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1a4:	7bbb      	ldrb	r3, [r7, #14]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d00d      	beq.n	800b1c6 <USBD_StdEPReq+0xce>
 800b1aa:	7bbb      	ldrb	r3, [r7, #14]
 800b1ac:	2b80      	cmp	r3, #128	@ 0x80
 800b1ae:	d00a      	beq.n	800b1c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1b0:	7bbb      	ldrb	r3, [r7, #14]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fe39 	bl	800be2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1ba:	2180      	movs	r1, #128	@ 0x80
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fe35 	bl	800be2c <USBD_LL_StallEP>
 800b1c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1c4:	e020      	b.n	800b208 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fca4 	bl	800bb16 <USBD_CtlError>
              break;
 800b1ce:	e01b      	b.n	800b208 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	885b      	ldrh	r3, [r3, #2]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10e      	bne.n	800b1f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00b      	beq.n	800b1f6 <USBD_StdEPReq+0xfe>
 800b1de:	7bbb      	ldrb	r3, [r7, #14]
 800b1e0:	2b80      	cmp	r3, #128	@ 0x80
 800b1e2:	d008      	beq.n	800b1f6 <USBD_StdEPReq+0xfe>
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	88db      	ldrh	r3, [r3, #6]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d104      	bne.n	800b1f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fe1b 	bl	800be2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fcdb 	bl	800bbb2 <USBD_CtlSendStatus>

              break;
 800b1fc:	e004      	b.n	800b208 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 fc88 	bl	800bb16 <USBD_CtlError>
              break;
 800b206:	bf00      	nop
          }
          break;
 800b208:	e107      	b.n	800b41a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b210:	b2db      	uxtb	r3, r3
 800b212:	2b02      	cmp	r3, #2
 800b214:	d002      	beq.n	800b21c <USBD_StdEPReq+0x124>
 800b216:	2b03      	cmp	r3, #3
 800b218:	d016      	beq.n	800b248 <USBD_StdEPReq+0x150>
 800b21a:	e04b      	b.n	800b2b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00d      	beq.n	800b23e <USBD_StdEPReq+0x146>
 800b222:	7bbb      	ldrb	r3, [r7, #14]
 800b224:	2b80      	cmp	r3, #128	@ 0x80
 800b226:	d00a      	beq.n	800b23e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b228:	7bbb      	ldrb	r3, [r7, #14]
 800b22a:	4619      	mov	r1, r3
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fdfd 	bl	800be2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b232:	2180      	movs	r1, #128	@ 0x80
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fdf9 	bl	800be2c <USBD_LL_StallEP>
 800b23a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b23c:	e040      	b.n	800b2c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fc68 	bl	800bb16 <USBD_CtlError>
              break;
 800b246:	e03b      	b.n	800b2c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	885b      	ldrh	r3, [r3, #2]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d136      	bne.n	800b2be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b250:	7bbb      	ldrb	r3, [r7, #14]
 800b252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b256:	2b00      	cmp	r3, #0
 800b258:	d004      	beq.n	800b264 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b25a:	7bbb      	ldrb	r3, [r7, #14]
 800b25c:	4619      	mov	r1, r3
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fe03 	bl	800be6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fca4 	bl	800bbb2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b26a:	7bbb      	ldrb	r3, [r7, #14]
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7ff fe38 	bl	800aee4 <USBD_CoreFindEP>
 800b274:	4603      	mov	r3, r0
 800b276:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b278:	7b7b      	ldrb	r3, [r7, #13]
 800b27a:	2bff      	cmp	r3, #255	@ 0xff
 800b27c:	d01f      	beq.n	800b2be <USBD_StdEPReq+0x1c6>
 800b27e:	7b7b      	ldrb	r3, [r7, #13]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d11c      	bne.n	800b2be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b284:	7b7a      	ldrb	r2, [r7, #13]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b28c:	7b7a      	ldrb	r2, [r7, #13]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	32ae      	adds	r2, #174	@ 0xae
 800b292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d010      	beq.n	800b2be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b29c:	7b7a      	ldrb	r2, [r7, #13]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	32ae      	adds	r2, #174	@ 0xae
 800b2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	4798      	blx	r3
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b2b2:	e004      	b.n	800b2be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fc2d 	bl	800bb16 <USBD_CtlError>
              break;
 800b2bc:	e000      	b.n	800b2c0 <USBD_StdEPReq+0x1c8>
              break;
 800b2be:	bf00      	nop
          }
          break;
 800b2c0:	e0ab      	b.n	800b41a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d002      	beq.n	800b2d4 <USBD_StdEPReq+0x1dc>
 800b2ce:	2b03      	cmp	r3, #3
 800b2d0:	d032      	beq.n	800b338 <USBD_StdEPReq+0x240>
 800b2d2:	e097      	b.n	800b404 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2d4:	7bbb      	ldrb	r3, [r7, #14]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d007      	beq.n	800b2ea <USBD_StdEPReq+0x1f2>
 800b2da:	7bbb      	ldrb	r3, [r7, #14]
 800b2dc:	2b80      	cmp	r3, #128	@ 0x80
 800b2de:	d004      	beq.n	800b2ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b2e0:	6839      	ldr	r1, [r7, #0]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 fc17 	bl	800bb16 <USBD_CtlError>
                break;
 800b2e8:	e091      	b.n	800b40e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	da0b      	bge.n	800b30a <USBD_StdEPReq+0x212>
 800b2f2:	7bbb      	ldrb	r3, [r7, #14]
 800b2f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	3310      	adds	r3, #16
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	4413      	add	r3, r2
 800b306:	3304      	adds	r3, #4
 800b308:	e00b      	b.n	800b322 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b30a:	7bbb      	ldrb	r3, [r7, #14]
 800b30c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b310:	4613      	mov	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	4413      	add	r3, r2
 800b320:	3304      	adds	r3, #4
 800b322:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2200      	movs	r2, #0
 800b328:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	2202      	movs	r2, #2
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 fc01 	bl	800bb38 <USBD_CtlSendData>
              break;
 800b336:	e06a      	b.n	800b40e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	da11      	bge.n	800b364 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b340:	7bbb      	ldrb	r3, [r7, #14]
 800b342:	f003 020f 	and.w	r2, r3, #15
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	4613      	mov	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	4413      	add	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	440b      	add	r3, r1
 800b352:	3324      	adds	r3, #36	@ 0x24
 800b354:	881b      	ldrh	r3, [r3, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d117      	bne.n	800b38a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 fbda 	bl	800bb16 <USBD_CtlError>
                  break;
 800b362:	e054      	b.n	800b40e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b364:	7bbb      	ldrb	r3, [r7, #14]
 800b366:	f003 020f 	and.w	r2, r3, #15
 800b36a:	6879      	ldr	r1, [r7, #4]
 800b36c:	4613      	mov	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	440b      	add	r3, r1
 800b376:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b37a:	881b      	ldrh	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d104      	bne.n	800b38a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fbc7 	bl	800bb16 <USBD_CtlError>
                  break;
 800b388:	e041      	b.n	800b40e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b38a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	da0b      	bge.n	800b3aa <USBD_StdEPReq+0x2b2>
 800b392:	7bbb      	ldrb	r3, [r7, #14]
 800b394:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b398:	4613      	mov	r3, r2
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	4413      	add	r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	3310      	adds	r3, #16
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	3304      	adds	r3, #4
 800b3a8:	e00b      	b.n	800b3c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3aa:	7bbb      	ldrb	r3, [r7, #14]
 800b3ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4413      	add	r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	4413      	add	r3, r2
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3c4:	7bbb      	ldrb	r3, [r7, #14]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d002      	beq.n	800b3d0 <USBD_StdEPReq+0x2d8>
 800b3ca:	7bbb      	ldrb	r3, [r7, #14]
 800b3cc:	2b80      	cmp	r3, #128	@ 0x80
 800b3ce:	d103      	bne.n	800b3d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	e00e      	b.n	800b3f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b3d8:	7bbb      	ldrb	r3, [r7, #14]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fd63 	bl	800bea8 <USBD_LL_IsStallEP>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d003      	beq.n	800b3f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	601a      	str	r2, [r3, #0]
 800b3ee:	e002      	b.n	800b3f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	2202      	movs	r2, #2
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fb9b 	bl	800bb38 <USBD_CtlSendData>
              break;
 800b402:	e004      	b.n	800b40e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fb85 	bl	800bb16 <USBD_CtlError>
              break;
 800b40c:	bf00      	nop
          }
          break;
 800b40e:	e004      	b.n	800b41a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fb7f 	bl	800bb16 <USBD_CtlError>
          break;
 800b418:	bf00      	nop
      }
      break;
 800b41a:	e005      	b.n	800b428 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b41c:	6839      	ldr	r1, [r7, #0]
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fb79 	bl	800bb16 <USBD_CtlError>
      break;
 800b424:	e000      	b.n	800b428 <USBD_StdEPReq+0x330>
      break;
 800b426:	bf00      	nop
  }

  return ret;
 800b428:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
	...

0800b434 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b43e:	2300      	movs	r3, #0
 800b440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b442:	2300      	movs	r3, #0
 800b444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b446:	2300      	movs	r3, #0
 800b448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	885b      	ldrh	r3, [r3, #2]
 800b44e:	0a1b      	lsrs	r3, r3, #8
 800b450:	b29b      	uxth	r3, r3
 800b452:	3b01      	subs	r3, #1
 800b454:	2b0e      	cmp	r3, #14
 800b456:	f200 8152 	bhi.w	800b6fe <USBD_GetDescriptor+0x2ca>
 800b45a:	a201      	add	r2, pc, #4	@ (adr r2, 800b460 <USBD_GetDescriptor+0x2c>)
 800b45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b460:	0800b4d1 	.word	0x0800b4d1
 800b464:	0800b4e9 	.word	0x0800b4e9
 800b468:	0800b529 	.word	0x0800b529
 800b46c:	0800b6ff 	.word	0x0800b6ff
 800b470:	0800b6ff 	.word	0x0800b6ff
 800b474:	0800b69f 	.word	0x0800b69f
 800b478:	0800b6cb 	.word	0x0800b6cb
 800b47c:	0800b6ff 	.word	0x0800b6ff
 800b480:	0800b6ff 	.word	0x0800b6ff
 800b484:	0800b6ff 	.word	0x0800b6ff
 800b488:	0800b6ff 	.word	0x0800b6ff
 800b48c:	0800b6ff 	.word	0x0800b6ff
 800b490:	0800b6ff 	.word	0x0800b6ff
 800b494:	0800b6ff 	.word	0x0800b6ff
 800b498:	0800b49d 	.word	0x0800b49d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4a2:	69db      	ldr	r3, [r3, #28]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00b      	beq.n	800b4c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4ae:	69db      	ldr	r3, [r3, #28]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	7c12      	ldrb	r2, [r2, #16]
 800b4b4:	f107 0108 	add.w	r1, r7, #8
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	4798      	blx	r3
 800b4bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4be:	e126      	b.n	800b70e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fb27 	bl	800bb16 <USBD_CtlError>
        err++;
 800b4c8:	7afb      	ldrb	r3, [r7, #11]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	72fb      	strb	r3, [r7, #11]
      break;
 800b4ce:	e11e      	b.n	800b70e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	7c12      	ldrb	r2, [r2, #16]
 800b4dc:	f107 0108 	add.w	r1, r7, #8
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	4798      	blx	r3
 800b4e4:	60f8      	str	r0, [r7, #12]
      break;
 800b4e6:	e112      	b.n	800b70e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	7c1b      	ldrb	r3, [r3, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10d      	bne.n	800b50c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f8:	f107 0208 	add.w	r2, r7, #8
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	4798      	blx	r3
 800b500:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3301      	adds	r3, #1
 800b506:	2202      	movs	r2, #2
 800b508:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b50a:	e100      	b.n	800b70e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b514:	f107 0208 	add.w	r2, r7, #8
 800b518:	4610      	mov	r0, r2
 800b51a:	4798      	blx	r3
 800b51c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	3301      	adds	r3, #1
 800b522:	2202      	movs	r2, #2
 800b524:	701a      	strb	r2, [r3, #0]
      break;
 800b526:	e0f2      	b.n	800b70e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	885b      	ldrh	r3, [r3, #2]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	2b05      	cmp	r3, #5
 800b530:	f200 80ac 	bhi.w	800b68c <USBD_GetDescriptor+0x258>
 800b534:	a201      	add	r2, pc, #4	@ (adr r2, 800b53c <USBD_GetDescriptor+0x108>)
 800b536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53a:	bf00      	nop
 800b53c:	0800b555 	.word	0x0800b555
 800b540:	0800b589 	.word	0x0800b589
 800b544:	0800b5bd 	.word	0x0800b5bd
 800b548:	0800b5f1 	.word	0x0800b5f1
 800b54c:	0800b625 	.word	0x0800b625
 800b550:	0800b659 	.word	0x0800b659
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00b      	beq.n	800b578 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	7c12      	ldrb	r2, [r2, #16]
 800b56c:	f107 0108 	add.w	r1, r7, #8
 800b570:	4610      	mov	r0, r2
 800b572:	4798      	blx	r3
 800b574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b576:	e091      	b.n	800b69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 facb 	bl	800bb16 <USBD_CtlError>
            err++;
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	3301      	adds	r3, #1
 800b584:	72fb      	strb	r3, [r7, #11]
          break;
 800b586:	e089      	b.n	800b69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	7c12      	ldrb	r2, [r2, #16]
 800b5a0:	f107 0108 	add.w	r1, r7, #8
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	4798      	blx	r3
 800b5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5aa:	e077      	b.n	800b69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fab1 	bl	800bb16 <USBD_CtlError>
            err++;
 800b5b4:	7afb      	ldrb	r3, [r7, #11]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ba:	e06f      	b.n	800b69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00b      	beq.n	800b5e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	7c12      	ldrb	r2, [r2, #16]
 800b5d4:	f107 0108 	add.w	r1, r7, #8
 800b5d8:	4610      	mov	r0, r2
 800b5da:	4798      	blx	r3
 800b5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5de:	e05d      	b.n	800b69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa97 	bl	800bb16 <USBD_CtlError>
            err++;
 800b5e8:	7afb      	ldrb	r3, [r7, #11]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ee:	e055      	b.n	800b69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00b      	beq.n	800b614 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	7c12      	ldrb	r2, [r2, #16]
 800b608:	f107 0108 	add.w	r1, r7, #8
 800b60c:	4610      	mov	r0, r2
 800b60e:	4798      	blx	r3
 800b610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b612:	e043      	b.n	800b69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fa7d 	bl	800bb16 <USBD_CtlError>
            err++;
 800b61c:	7afb      	ldrb	r3, [r7, #11]
 800b61e:	3301      	adds	r3, #1
 800b620:	72fb      	strb	r3, [r7, #11]
          break;
 800b622:	e03b      	b.n	800b69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00b      	beq.n	800b648 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b636:	695b      	ldr	r3, [r3, #20]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	7c12      	ldrb	r2, [r2, #16]
 800b63c:	f107 0108 	add.w	r1, r7, #8
 800b640:	4610      	mov	r0, r2
 800b642:	4798      	blx	r3
 800b644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b646:	e029      	b.n	800b69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fa63 	bl	800bb16 <USBD_CtlError>
            err++;
 800b650:	7afb      	ldrb	r3, [r7, #11]
 800b652:	3301      	adds	r3, #1
 800b654:	72fb      	strb	r3, [r7, #11]
          break;
 800b656:	e021      	b.n	800b69c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00b      	beq.n	800b67c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b66a:	699b      	ldr	r3, [r3, #24]
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	7c12      	ldrb	r2, [r2, #16]
 800b670:	f107 0108 	add.w	r1, r7, #8
 800b674:	4610      	mov	r0, r2
 800b676:	4798      	blx	r3
 800b678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b67a:	e00f      	b.n	800b69c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fa49 	bl	800bb16 <USBD_CtlError>
            err++;
 800b684:	7afb      	ldrb	r3, [r7, #11]
 800b686:	3301      	adds	r3, #1
 800b688:	72fb      	strb	r3, [r7, #11]
          break;
 800b68a:	e007      	b.n	800b69c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fa41 	bl	800bb16 <USBD_CtlError>
          err++;
 800b694:	7afb      	ldrb	r3, [r7, #11]
 800b696:	3301      	adds	r3, #1
 800b698:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b69a:	bf00      	nop
      }
      break;
 800b69c:	e037      	b.n	800b70e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	7c1b      	ldrb	r3, [r3, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d109      	bne.n	800b6ba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6ae:	f107 0208 	add.w	r2, r7, #8
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	4798      	blx	r3
 800b6b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6b8:	e029      	b.n	800b70e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fa2a 	bl	800bb16 <USBD_CtlError>
        err++;
 800b6c2:	7afb      	ldrb	r3, [r7, #11]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	72fb      	strb	r3, [r7, #11]
      break;
 800b6c8:	e021      	b.n	800b70e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	7c1b      	ldrb	r3, [r3, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10d      	bne.n	800b6ee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6da:	f107 0208 	add.w	r2, r7, #8
 800b6de:	4610      	mov	r0, r2
 800b6e0:	4798      	blx	r3
 800b6e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	2207      	movs	r2, #7
 800b6ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6ec:	e00f      	b.n	800b70e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fa10 	bl	800bb16 <USBD_CtlError>
        err++;
 800b6f6:	7afb      	ldrb	r3, [r7, #11]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b6fc:	e007      	b.n	800b70e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fa08 	bl	800bb16 <USBD_CtlError>
      err++;
 800b706:	7afb      	ldrb	r3, [r7, #11]
 800b708:	3301      	adds	r3, #1
 800b70a:	72fb      	strb	r3, [r7, #11]
      break;
 800b70c:	bf00      	nop
  }

  if (err != 0U)
 800b70e:	7afb      	ldrb	r3, [r7, #11]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d11e      	bne.n	800b752 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	88db      	ldrh	r3, [r3, #6]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d016      	beq.n	800b74a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b71c:	893b      	ldrh	r3, [r7, #8]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00e      	beq.n	800b740 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	88da      	ldrh	r2, [r3, #6]
 800b726:	893b      	ldrh	r3, [r7, #8]
 800b728:	4293      	cmp	r3, r2
 800b72a:	bf28      	it	cs
 800b72c:	4613      	movcs	r3, r2
 800b72e:	b29b      	uxth	r3, r3
 800b730:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b732:	893b      	ldrh	r3, [r7, #8]
 800b734:	461a      	mov	r2, r3
 800b736:	68f9      	ldr	r1, [r7, #12]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f9fd 	bl	800bb38 <USBD_CtlSendData>
 800b73e:	e009      	b.n	800b754 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f9e7 	bl	800bb16 <USBD_CtlError>
 800b748:	e004      	b.n	800b754 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fa31 	bl	800bbb2 <USBD_CtlSendStatus>
 800b750:	e000      	b.n	800b754 <USBD_GetDescriptor+0x320>
    return;
 800b752:	bf00      	nop
  }
}
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop

0800b75c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	889b      	ldrh	r3, [r3, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d131      	bne.n	800b7d2 <USBD_SetAddress+0x76>
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	88db      	ldrh	r3, [r3, #6]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d12d      	bne.n	800b7d2 <USBD_SetAddress+0x76>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	885b      	ldrh	r3, [r3, #2]
 800b77a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b77c:	d829      	bhi.n	800b7d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	885b      	ldrh	r3, [r3, #2]
 800b782:	b2db      	uxtb	r3, r3
 800b784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b788:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b790:	b2db      	uxtb	r3, r3
 800b792:	2b03      	cmp	r3, #3
 800b794:	d104      	bne.n	800b7a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f9bc 	bl	800bb16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b79e:	e01d      	b.n	800b7dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	7bfa      	ldrb	r2, [r7, #15]
 800b7a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fba7 	bl	800bf00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f9fd 	bl	800bbb2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b7b8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d004      	beq.n	800b7c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2202      	movs	r2, #2
 800b7c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7c6:	e009      	b.n	800b7dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7d0:	e004      	b.n	800b7dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f99e 	bl	800bb16 <USBD_CtlError>
  }
}
 800b7da:	bf00      	nop
 800b7dc:	bf00      	nop
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	885b      	ldrh	r3, [r3, #2]
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	4b4e      	ldr	r3, [pc, #312]	@ (800b934 <USBD_SetConfig+0x150>)
 800b7fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7fc:	4b4d      	ldr	r3, [pc, #308]	@ (800b934 <USBD_SetConfig+0x150>)
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d905      	bls.n	800b810 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f985 	bl	800bb16 <USBD_CtlError>
    return USBD_FAIL;
 800b80c:	2303      	movs	r3, #3
 800b80e:	e08c      	b.n	800b92a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b816:	b2db      	uxtb	r3, r3
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d002      	beq.n	800b822 <USBD_SetConfig+0x3e>
 800b81c:	2b03      	cmp	r3, #3
 800b81e:	d029      	beq.n	800b874 <USBD_SetConfig+0x90>
 800b820:	e075      	b.n	800b90e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b822:	4b44      	ldr	r3, [pc, #272]	@ (800b934 <USBD_SetConfig+0x150>)
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d020      	beq.n	800b86c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b82a:	4b42      	ldr	r3, [pc, #264]	@ (800b934 <USBD_SetConfig+0x150>)
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	461a      	mov	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b834:	4b3f      	ldr	r3, [pc, #252]	@ (800b934 <USBD_SetConfig+0x150>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	4619      	mov	r1, r3
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7ff f80d 	bl	800a85a <USBD_SetClassConfig>
 800b840:	4603      	mov	r3, r0
 800b842:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b844:	7bfb      	ldrb	r3, [r7, #15]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d008      	beq.n	800b85c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f962 	bl	800bb16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2202      	movs	r2, #2
 800b856:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b85a:	e065      	b.n	800b928 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f9a8 	bl	800bbb2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2203      	movs	r2, #3
 800b866:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b86a:	e05d      	b.n	800b928 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f9a0 	bl	800bbb2 <USBD_CtlSendStatus>
      break;
 800b872:	e059      	b.n	800b928 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b874:	4b2f      	ldr	r3, [pc, #188]	@ (800b934 <USBD_SetConfig+0x150>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d112      	bne.n	800b8a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2202      	movs	r2, #2
 800b880:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b884:	4b2b      	ldr	r3, [pc, #172]	@ (800b934 <USBD_SetConfig+0x150>)
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	461a      	mov	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b88e:	4b29      	ldr	r3, [pc, #164]	@ (800b934 <USBD_SetConfig+0x150>)
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	4619      	mov	r1, r3
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7fe fffc 	bl	800a892 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f989 	bl	800bbb2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b8a0:	e042      	b.n	800b928 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b8a2:	4b24      	ldr	r3, [pc, #144]	@ (800b934 <USBD_SetConfig+0x150>)
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d02a      	beq.n	800b906 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7fe ffea 	bl	800a892 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b8be:	4b1d      	ldr	r3, [pc, #116]	@ (800b934 <USBD_SetConfig+0x150>)
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b934 <USBD_SetConfig+0x150>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7fe ffc3 	bl	800a85a <USBD_SetClassConfig>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b8d8:	7bfb      	ldrb	r3, [r7, #15]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00f      	beq.n	800b8fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 f918 	bl	800bb16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f7fe ffcf 	bl	800a892 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2202      	movs	r2, #2
 800b8f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b8fc:	e014      	b.n	800b928 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f957 	bl	800bbb2 <USBD_CtlSendStatus>
      break;
 800b904:	e010      	b.n	800b928 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f953 	bl	800bbb2 <USBD_CtlSendStatus>
      break;
 800b90c:	e00c      	b.n	800b928 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 f900 	bl	800bb16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b916:	4b07      	ldr	r3, [pc, #28]	@ (800b934 <USBD_SetConfig+0x150>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7fe ffb8 	bl	800a892 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b922:	2303      	movs	r3, #3
 800b924:	73fb      	strb	r3, [r7, #15]
      break;
 800b926:	bf00      	nop
  }

  return ret;
 800b928:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	2400037c 	.word	0x2400037c

0800b938 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	88db      	ldrh	r3, [r3, #6]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d004      	beq.n	800b954 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 f8e2 	bl	800bb16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b952:	e023      	b.n	800b99c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	dc02      	bgt.n	800b966 <USBD_GetConfig+0x2e>
 800b960:	2b00      	cmp	r3, #0
 800b962:	dc03      	bgt.n	800b96c <USBD_GetConfig+0x34>
 800b964:	e015      	b.n	800b992 <USBD_GetConfig+0x5a>
 800b966:	2b03      	cmp	r3, #3
 800b968:	d00b      	beq.n	800b982 <USBD_GetConfig+0x4a>
 800b96a:	e012      	b.n	800b992 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	3308      	adds	r3, #8
 800b976:	2201      	movs	r2, #1
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 f8dc 	bl	800bb38 <USBD_CtlSendData>
        break;
 800b980:	e00c      	b.n	800b99c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	3304      	adds	r3, #4
 800b986:	2201      	movs	r2, #1
 800b988:	4619      	mov	r1, r3
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f8d4 	bl	800bb38 <USBD_CtlSendData>
        break;
 800b990:	e004      	b.n	800b99c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 f8be 	bl	800bb16 <USBD_CtlError>
        break;
 800b99a:	bf00      	nop
}
 800b99c:	bf00      	nop
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d81e      	bhi.n	800b9fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	88db      	ldrh	r3, [r3, #6]
 800b9c0:	2b02      	cmp	r3, #2
 800b9c2:	d004      	beq.n	800b9ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b9c4:	6839      	ldr	r1, [r7, #0]
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f8a5 	bl	800bb16 <USBD_CtlError>
        break;
 800b9cc:	e01a      	b.n	800ba04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d005      	beq.n	800b9ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	f043 0202 	orr.w	r2, r3, #2
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	330c      	adds	r3, #12
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f8a0 	bl	800bb38 <USBD_CtlSendData>
      break;
 800b9f8:	e004      	b.n	800ba04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 f88a 	bl	800bb16 <USBD_CtlError>
      break;
 800ba02:	bf00      	nop
  }
}
 800ba04:	bf00      	nop
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	885b      	ldrh	r3, [r3, #2]
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d107      	bne.n	800ba2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f8c3 	bl	800bbb2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ba2c:	e013      	b.n	800ba56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	885b      	ldrh	r3, [r3, #2]
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	d10b      	bne.n	800ba4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	889b      	ldrh	r3, [r3, #4]
 800ba3a:	0a1b      	lsrs	r3, r3, #8
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	b2da      	uxtb	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 f8b3 	bl	800bbb2 <USBD_CtlSendStatus>
}
 800ba4c:	e003      	b.n	800ba56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f860 	bl	800bb16 <USBD_CtlError>
}
 800ba56:	bf00      	nop
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	3b01      	subs	r3, #1
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d80b      	bhi.n	800ba8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	885b      	ldrh	r3, [r3, #2]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d10c      	bne.n	800ba98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f893 	bl	800bbb2 <USBD_CtlSendStatus>
      }
      break;
 800ba8c:	e004      	b.n	800ba98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba8e:	6839      	ldr	r1, [r7, #0]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 f840 	bl	800bb16 <USBD_CtlError>
      break;
 800ba96:	e000      	b.n	800ba9a <USBD_ClrFeature+0x3c>
      break;
 800ba98:	bf00      	nop
  }
}
 800ba9a:	bf00      	nop
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	781a      	ldrb	r2, [r3, #0]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	3301      	adds	r3, #1
 800babc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	781a      	ldrb	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	3301      	adds	r3, #1
 800baca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f7ff fa16 	bl	800aefe <SWAPBYTE>
 800bad2:	4603      	mov	r3, r0
 800bad4:	461a      	mov	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	3301      	adds	r3, #1
 800bade:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	3301      	adds	r3, #1
 800bae4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f7ff fa09 	bl	800aefe <SWAPBYTE>
 800baec:	4603      	mov	r3, r0
 800baee:	461a      	mov	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	3301      	adds	r3, #1
 800baf8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	3301      	adds	r3, #1
 800bafe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f7ff f9fc 	bl	800aefe <SWAPBYTE>
 800bb06:	4603      	mov	r3, r0
 800bb08:	461a      	mov	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	80da      	strh	r2, [r3, #6]
}
 800bb0e:	bf00      	nop
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b082      	sub	sp, #8
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb20:	2180      	movs	r1, #128	@ 0x80
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f982 	bl	800be2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bb28:	2100      	movs	r1, #0
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f97e 	bl	800be2c <USBD_LL_StallEP>
}
 800bb30:	bf00      	nop
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2202      	movs	r2, #2
 800bb48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f000 f9ed 	bl	800bf3e <USBD_LL_Transmit>

  return USBD_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b084      	sub	sp, #16
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	60f8      	str	r0, [r7, #12]
 800bb76:	60b9      	str	r1, [r7, #8]
 800bb78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	2100      	movs	r1, #0
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f000 f9dc 	bl	800bf3e <USBD_LL_Transmit>

  return USBD_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	2100      	movs	r1, #0
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f000 f9ec 	bl	800bf80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b082      	sub	sp, #8
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2204      	movs	r2, #4
 800bbbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f9b8 	bl	800bf3e <USBD_LL_Transmit>

  return USBD_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2205      	movs	r2, #5
 800bbe4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbe8:	2300      	movs	r3, #0
 800bbea:	2200      	movs	r2, #0
 800bbec:	2100      	movs	r1, #0
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f9c6 	bl	800bf80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b082      	sub	sp, #8
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bc12:	4619      	mov	r1, r3
 800bc14:	4610      	mov	r0, r2
 800bc16:	f7fe fe56 	bl	800a8c6 <USBD_LL_SetupStage>
}
 800bc1a:	bf00      	nop
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bc34:	78fa      	ldrb	r2, [r7, #3]
 800bc36:	6879      	ldr	r1, [r7, #4]
 800bc38:	4613      	mov	r3, r2
 800bc3a:	00db      	lsls	r3, r3, #3
 800bc3c:	4413      	add	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	440b      	add	r3, r1
 800bc42:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	78fb      	ldrb	r3, [r7, #3]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	f7fe fe90 	bl	800a970 <USBD_LL_DataOutStage>
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	460b      	mov	r3, r1
 800bc62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bc6a:	78fa      	ldrb	r2, [r7, #3]
 800bc6c:	6879      	ldr	r1, [r7, #4]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	00db      	lsls	r3, r3, #3
 800bc72:	4413      	add	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	440b      	add	r3, r1
 800bc78:	3320      	adds	r3, #32
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	78fb      	ldrb	r3, [r7, #3]
 800bc7e:	4619      	mov	r1, r3
 800bc80:	f7fe ff29 	bl	800aad6 <USBD_LL_DataInStage>
}
 800bc84:	bf00      	nop
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7ff f863 	bl	800ad66 <USBD_LL_SOF>
}
 800bca0:	bf00      	nop
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	79db      	ldrb	r3, [r3, #7]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d102      	bne.n	800bcc2 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	73fb      	strb	r3, [r7, #15]
 800bcc0:	e008      	b.n	800bcd4 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	79db      	ldrb	r3, [r3, #7]
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d102      	bne.n	800bcd0 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bcca:	2301      	movs	r3, #1
 800bccc:	73fb      	strb	r3, [r7, #15]
 800bcce:	e001      	b.n	800bcd4 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bcd0:	f7f5 f94e 	bl	8000f70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bcda:	7bfa      	ldrb	r2, [r7, #15]
 800bcdc:	4611      	mov	r1, r2
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe fffd 	bl	800acde <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe ffa5 	bl	800ac3a <USBD_LL_Reset>
}
 800bcf0:	bf00      	nop
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fe fff9 	bl	800acfe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	6812      	ldr	r2, [r2, #0]
 800bd1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bd1e:	f043 0301 	orr.w	r3, r3, #1
 800bd22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	7adb      	ldrb	r3, [r3, #11]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d005      	beq.n	800bd38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd2c:	4b04      	ldr	r3, [pc, #16]	@ (800bd40 <HAL_PCD_SuspendCallback+0x48>)
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	4a03      	ldr	r2, [pc, #12]	@ (800bd40 <HAL_PCD_SuspendCallback+0x48>)
 800bd32:	f043 0306 	orr.w	r3, r3, #6
 800bd36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bd38:	bf00      	nop
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	e000ed00 	.word	0xe000ed00

0800bd44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fe ffef 	bl	800ad36 <USBD_LL_Resume>
}
 800bd58:	bf00      	nop
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd72:	78fa      	ldrb	r2, [r7, #3]
 800bd74:	4611      	mov	r1, r2
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7ff f847 	bl	800ae0a <USBD_LL_IsoOUTIncomplete>
}
 800bd7c:	bf00      	nop
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd96:	78fa      	ldrb	r2, [r7, #3]
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7ff f803 	bl	800ada6 <USBD_LL_IsoINIncomplete>
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7ff f859 	bl	800ae6e <USBD_LL_DevConnected>
}
 800bdbc:	bf00      	nop
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7ff f856 	bl	800ae84 <USBD_LL_DevDisconnected>
}
 800bdd8:	bf00      	nop
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	4608      	mov	r0, r1
 800bdea:	4611      	mov	r1, r2
 800bdec:	461a      	mov	r2, r3
 800bdee:	4603      	mov	r3, r0
 800bdf0:	70fb      	strb	r3, [r7, #3]
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	70bb      	strb	r3, [r7, #2]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800be08:	78bb      	ldrb	r3, [r7, #2]
 800be0a:	883a      	ldrh	r2, [r7, #0]
 800be0c:	78f9      	ldrb	r1, [r7, #3]
 800be0e:	f7f7 fb75 	bl	80034fc <HAL_PCD_EP_Open>
 800be12:	4603      	mov	r3, r0
 800be14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be16:	7bfb      	ldrb	r3, [r7, #15]
 800be18:	4618      	mov	r0, r3
 800be1a:	f000 f8d3 	bl	800bfc4 <USBD_Get_USB_Status>
 800be1e:	4603      	mov	r3, r0
 800be20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be22:	7bbb      	ldrb	r3, [r7, #14]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	460b      	mov	r3, r1
 800be36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be38:	2300      	movs	r3, #0
 800be3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be46:	78fa      	ldrb	r2, [r7, #3]
 800be48:	4611      	mov	r1, r2
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7f7 fc35 	bl	80036ba <HAL_PCD_EP_SetStall>
 800be50:	4603      	mov	r3, r0
 800be52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be54:	7bfb      	ldrb	r3, [r7, #15]
 800be56:	4618      	mov	r0, r3
 800be58:	f000 f8b4 	bl	800bfc4 <USBD_Get_USB_Status>
 800be5c:	4603      	mov	r3, r0
 800be5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be60:	7bbb      	ldrb	r3, [r7, #14]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b084      	sub	sp, #16
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
 800be72:	460b      	mov	r3, r1
 800be74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be76:	2300      	movs	r3, #0
 800be78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be84:	78fa      	ldrb	r2, [r7, #3]
 800be86:	4611      	mov	r1, r2
 800be88:	4618      	mov	r0, r3
 800be8a:	f7f7 fc79 	bl	8003780 <HAL_PCD_EP_ClrStall>
 800be8e:	4603      	mov	r3, r0
 800be90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be92:	7bfb      	ldrb	r3, [r7, #15]
 800be94:	4618      	mov	r0, r3
 800be96:	f000 f895 	bl	800bfc4 <USBD_Get_USB_Status>
 800be9a:	4603      	mov	r3, r0
 800be9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	460b      	mov	r3, r1
 800beb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800beba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	da0b      	bge.n	800bedc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bec4:	78fb      	ldrb	r3, [r7, #3]
 800bec6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800beca:	68f9      	ldr	r1, [r7, #12]
 800becc:	4613      	mov	r3, r2
 800bece:	00db      	lsls	r3, r3, #3
 800bed0:	4413      	add	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	440b      	add	r3, r1
 800bed6:	3316      	adds	r3, #22
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	e00b      	b.n	800bef4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bedc:	78fb      	ldrb	r3, [r7, #3]
 800bede:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bee2:	68f9      	ldr	r1, [r7, #12]
 800bee4:	4613      	mov	r3, r2
 800bee6:	00db      	lsls	r3, r3, #3
 800bee8:	4413      	add	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	440b      	add	r3, r1
 800beee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bef2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf1a:	78fa      	ldrb	r2, [r7, #3]
 800bf1c:	4611      	mov	r1, r2
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7f7 fac8 	bl	80034b4 <HAL_PCD_SetAddress>
 800bf24:	4603      	mov	r3, r0
 800bf26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf28:	7bfb      	ldrb	r3, [r7, #15]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 f84a 	bl	800bfc4 <USBD_Get_USB_Status>
 800bf30:	4603      	mov	r3, r0
 800bf32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf34:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b086      	sub	sp, #24
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	60f8      	str	r0, [r7, #12]
 800bf46:	607a      	str	r2, [r7, #4]
 800bf48:	603b      	str	r3, [r7, #0]
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf5c:	7af9      	ldrb	r1, [r7, #11]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	f7f7 fb70 	bl	8003646 <HAL_PCD_EP_Transmit>
 800bf66:	4603      	mov	r3, r0
 800bf68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 f829 	bl	800bfc4 <USBD_Get_USB_Status>
 800bf72:	4603      	mov	r3, r0
 800bf74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf76:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3718      	adds	r7, #24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	607a      	str	r2, [r7, #4]
 800bf8a:	603b      	str	r3, [r7, #0]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf9e:	7af9      	ldrb	r1, [r7, #11]
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	f7f7 fb14 	bl	80035d0 <HAL_PCD_EP_Receive>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfac:	7dfb      	ldrb	r3, [r7, #23]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 f808 	bl	800bfc4 <USBD_Get_USB_Status>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bfb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
	...

0800bfc4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	4603      	mov	r3, r0
 800bfcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfd2:	79fb      	ldrb	r3, [r7, #7]
 800bfd4:	2b03      	cmp	r3, #3
 800bfd6:	d817      	bhi.n	800c008 <USBD_Get_USB_Status+0x44>
 800bfd8:	a201      	add	r2, pc, #4	@ (adr r2, 800bfe0 <USBD_Get_USB_Status+0x1c>)
 800bfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfde:	bf00      	nop
 800bfe0:	0800bff1 	.word	0x0800bff1
 800bfe4:	0800bff7 	.word	0x0800bff7
 800bfe8:	0800bffd 	.word	0x0800bffd
 800bfec:	0800c003 	.word	0x0800c003
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	73fb      	strb	r3, [r7, #15]
    break;
 800bff4:	e00b      	b.n	800c00e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bff6:	2303      	movs	r3, #3
 800bff8:	73fb      	strb	r3, [r7, #15]
    break;
 800bffa:	e008      	b.n	800c00e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bffc:	2301      	movs	r3, #1
 800bffe:	73fb      	strb	r3, [r7, #15]
    break;
 800c000:	e005      	b.n	800c00e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c002:	2303      	movs	r3, #3
 800c004:	73fb      	strb	r3, [r7, #15]
    break;
 800c006:	e002      	b.n	800c00e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c008:	2303      	movs	r3, #3
 800c00a:	73fb      	strb	r3, [r7, #15]
    break;
 800c00c:	bf00      	nop
  }
  return usb_status;
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <memset>:
 800c01c:	4402      	add	r2, r0
 800c01e:	4603      	mov	r3, r0
 800c020:	4293      	cmp	r3, r2
 800c022:	d100      	bne.n	800c026 <memset+0xa>
 800c024:	4770      	bx	lr
 800c026:	f803 1b01 	strb.w	r1, [r3], #1
 800c02a:	e7f9      	b.n	800c020 <memset+0x4>

0800c02c <__libc_init_array>:
 800c02c:	b570      	push	{r4, r5, r6, lr}
 800c02e:	4d0d      	ldr	r5, [pc, #52]	@ (800c064 <__libc_init_array+0x38>)
 800c030:	4c0d      	ldr	r4, [pc, #52]	@ (800c068 <__libc_init_array+0x3c>)
 800c032:	1b64      	subs	r4, r4, r5
 800c034:	10a4      	asrs	r4, r4, #2
 800c036:	2600      	movs	r6, #0
 800c038:	42a6      	cmp	r6, r4
 800c03a:	d109      	bne.n	800c050 <__libc_init_array+0x24>
 800c03c:	4d0b      	ldr	r5, [pc, #44]	@ (800c06c <__libc_init_array+0x40>)
 800c03e:	4c0c      	ldr	r4, [pc, #48]	@ (800c070 <__libc_init_array+0x44>)
 800c040:	f000 f818 	bl	800c074 <_init>
 800c044:	1b64      	subs	r4, r4, r5
 800c046:	10a4      	asrs	r4, r4, #2
 800c048:	2600      	movs	r6, #0
 800c04a:	42a6      	cmp	r6, r4
 800c04c:	d105      	bne.n	800c05a <__libc_init_array+0x2e>
 800c04e:	bd70      	pop	{r4, r5, r6, pc}
 800c050:	f855 3b04 	ldr.w	r3, [r5], #4
 800c054:	4798      	blx	r3
 800c056:	3601      	adds	r6, #1
 800c058:	e7ee      	b.n	800c038 <__libc_init_array+0xc>
 800c05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c05e:	4798      	blx	r3
 800c060:	3601      	adds	r6, #1
 800c062:	e7f2      	b.n	800c04a <__libc_init_array+0x1e>
 800c064:	0800c0cc 	.word	0x0800c0cc
 800c068:	0800c0cc 	.word	0x0800c0cc
 800c06c:	0800c0cc 	.word	0x0800c0cc
 800c070:	0800c0d0 	.word	0x0800c0d0

0800c074 <_init>:
 800c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c076:	bf00      	nop
 800c078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07a:	bc08      	pop	{r3}
 800c07c:	469e      	mov	lr, r3
 800c07e:	4770      	bx	lr

0800c080 <_fini>:
 800c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c082:	bf00      	nop
 800c084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c086:	bc08      	pop	{r3}
 800c088:	469e      	mov	lr, r3
 800c08a:	4770      	bx	lr
