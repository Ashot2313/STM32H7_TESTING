
QSPI_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e454  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800e6ec  0800e6ec  0000f6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e78c  0800e78c  0000f78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e794  0800e794  0000f794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e798  0800e798  0000f798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000104  24000000  0800e79c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dc4  24000104  0800e8a0  00010104  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  24000ec8  0800e8a0  00010ec8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY
 10 .debug_info   000253f7  00000000  00000000  00010132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b9e  00000000  00000000  00035529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b48  00000000  00000000  0003a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001517  00000000  00000000  0003bc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c3b5  00000000  00000000  0003d127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027827  00000000  00000000  000794dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b5c5  00000000  00000000  000a0d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020c2c8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000073b4  00000000  00000000  0020c30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  002136c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000104 	.word	0x24000104
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e6d4 	.word	0x0800e6d4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000108 	.word	0x24000108
 80002d4:	0800e6d4 	.word	0x0800e6d4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800060a:	f000 fac3 	bl	8000b94 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800060e:	4b3a      	ldr	r3, [pc, #232]	@ (80006f8 <main+0xf4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000616:	2b00      	cmp	r3, #0
 8000618:	d11b      	bne.n	8000652 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800061a:	f3bf 8f4f 	dsb	sy
}
 800061e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000620:	f3bf 8f6f 	isb	sy
}
 8000624:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000626:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <main+0xf4>)
 8000628:	2200      	movs	r2, #0
 800062a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800062e:	f3bf 8f4f 	dsb	sy
}
 8000632:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000634:	f3bf 8f6f 	isb	sy
}
 8000638:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800063a:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <main+0xf4>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a2e      	ldr	r2, [pc, #184]	@ (80006f8 <main+0xf4>)
 8000640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000644:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000646:	f3bf 8f4f 	dsb	sy
}
 800064a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800064c:	f3bf 8f6f 	isb	sy
}
 8000650:	e000      	b.n	8000654 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000652:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000654:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <main+0xf4>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800065c:	2b00      	cmp	r3, #0
 800065e:	d138      	bne.n	80006d2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000660:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <main+0xf4>)
 8000662:	2200      	movs	r2, #0
 8000664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000668:	f3bf 8f4f 	dsb	sy
}
 800066c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800066e:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <main+0xf4>)
 8000670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000674:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	0b5b      	lsrs	r3, r3, #13
 800067a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800067e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	08db      	lsrs	r3, r3, #3
 8000684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000688:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	015a      	lsls	r2, r3, #5
 800068e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000692:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000698:	4917      	ldr	r1, [pc, #92]	@ (80006f8 <main+0xf4>)
 800069a:	4313      	orrs	r3, r2
 800069c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	1e5a      	subs	r2, r3, #1
 80006a4:	607a      	str	r2, [r7, #4]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1ef      	bne.n	800068a <main+0x86>
    } while(sets-- != 0U);
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1e5a      	subs	r2, r3, #1
 80006ae:	60ba      	str	r2, [r7, #8]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1e5      	bne.n	8000680 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80006b4:	f3bf 8f4f 	dsb	sy
}
 80006b8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <main+0xf4>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <main+0xf4>)
 80006c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006c4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c6:	f3bf 8f4f 	dsb	sy
}
 80006ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006cc:	f3bf 8f6f 	isb	sy
}
 80006d0:	e000      	b.n	80006d4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006d2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fd82 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f810 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 f936 	bl	800094c <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80006e0:	f000 f886 	bl	80007f0 <MX_QUADSPI_Init>
  MX_TIM7_Init();
 80006e4:	f000 f8b0 	bl	8000848 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80006e8:	f000 f8e4 	bl	80008b4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006ec:	f00d faba 	bl	800dc64 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  init_qspi_flash();
 80006f0:	f000 fa0c 	bl	8000b0c <init_qspi_flash>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <main+0xf0>
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09c      	sub	sp, #112	@ 0x70
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000706:	224c      	movs	r2, #76	@ 0x4c
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f00d ffb6 	bl	800e67c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f00d ffb0 	bl	800e67c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800071c:	2002      	movs	r0, #2
 800071e:	f003 fb05 	bl	8003d2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b30      	ldr	r3, [pc, #192]	@ (80007e8 <SystemClock_Config+0xec>)
 8000728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800072a:	4a2f      	ldr	r2, [pc, #188]	@ (80007e8 <SystemClock_Config+0xec>)
 800072c:	f023 0301 	bic.w	r3, r3, #1
 8000730:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000732:	4b2d      	ldr	r3, [pc, #180]	@ (80007e8 <SystemClock_Config+0xec>)
 8000734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b2b      	ldr	r3, [pc, #172]	@ (80007ec <SystemClock_Config+0xf0>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a2a      	ldr	r2, [pc, #168]	@ (80007ec <SystemClock_Config+0xf0>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <SystemClock_Config+0xf0>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000754:	bf00      	nop
 8000756:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <SystemClock_Config+0xf0>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800075e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000762:	d1f8      	bne.n	8000756 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000764:	2301      	movs	r3, #1
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800076c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	2302      	movs	r3, #2
 8000774:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000776:	2305      	movs	r3, #5
 8000778:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800077a:	23a0      	movs	r3, #160	@ 0xa0
 800077c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800078a:	2308      	movs	r3, #8
 800078c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078e:	2300      	movs	r3, #0
 8000790:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fdfe 	bl	800439c <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007a6:	f000 fa21 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	233f      	movs	r3, #63	@ 0x3f
 80007ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2303      	movs	r3, #3
 80007b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007b6:	2308      	movs	r3, #8
 80007b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ba:	2340      	movs	r3, #64	@ 0x40
 80007bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007be:	2340      	movs	r3, #64	@ 0x40
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007c8:	2340      	movs	r3, #64	@ 0x40
 80007ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2102      	movs	r1, #2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f004 fa3d 	bl	8004c50 <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80007dc:	f000 fa06 	bl	8000bec <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3770      	adds	r7, #112	@ 0x70
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	58000400 	.word	0x58000400
 80007ec:	58024800 	.word	0x58024800

080007f0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_QUADSPI_Init+0x50>)
 80007f6:	4a13      	ldr	r2, [pc, #76]	@ (8000844 <MX_QUADSPI_Init+0x54>)
 80007f8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_QUADSPI_Init+0x50>)
 80007fc:	22ff      	movs	r2, #255	@ 0xff
 80007fe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_QUADSPI_Init+0x50>)
 8000802:	2201      	movs	r2, #1
 8000804:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_QUADSPI_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_QUADSPI_Init+0x50>)
 800080e:	2201      	movs	r2, #1
 8000810:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_QUADSPI_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_QUADSPI_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_QUADSPI_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_QUADSPI_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_QUADSPI_Init+0x50>)
 800082c:	f003 fac8 	bl	8003dc0 <HAL_QSPI_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000836:	f000 f9d9 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	24000120 	.word	0x24000120
 8000844:	52005000 	.word	0x52005000

08000848 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_TIM7_Init+0x64>)
 800085a:	4a15      	ldr	r2, [pc, #84]	@ (80008b0 <MX_TIM7_Init+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 199;
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <MX_TIM7_Init+0x64>)
 8000860:	22c7      	movs	r2, #199	@ 0xc7
 8000862:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_TIM7_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_TIM7_Init+0x64>)
 800086c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000870:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_TIM7_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000878:	480c      	ldr	r0, [pc, #48]	@ (80008ac <MX_TIM7_Init+0x64>)
 800087a:	f006 fba1 	bl	8006fc0 <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000884:	f000 f9b2 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_TIM7_Init+0x64>)
 8000896:	f006 fdc3 	bl	8007420 <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 f9a4 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2400016c 	.word	0x2400016c
 80008b0:	40001400 	.word	0x40001400

080008b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b8:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 80008ba:	4a23      	ldr	r2, [pc, #140]	@ (8000948 <MX_USART1_UART_Init+0x94>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008be:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f6:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008fc:	4811      	ldr	r0, [pc, #68]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 80008fe:	f006 fe3b 	bl	8007578 <HAL_UART_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 f970 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090c:	2100      	movs	r1, #0
 800090e:	480d      	ldr	r0, [pc, #52]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 8000910:	f008 fa94 	bl	8008e3c <HAL_UARTEx_SetTxFifoThreshold>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 f967 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4808      	ldr	r0, [pc, #32]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 8000922:	f008 fac9 	bl	8008eb8 <HAL_UARTEx_SetRxFifoThreshold>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800092c:	f000 f95e 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	@ (8000944 <MX_USART1_UART_Init+0x90>)
 8000932:	f008 fa4a 	bl	8008dca <HAL_UARTEx_DisableFifoMode>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800093c:	f000 f956 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	240001b8 	.word	0x240001b8
 8000948:	40011000 	.word	0x40011000

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	@ 0x30
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000962:	4b3f      	ldr	r3, [pc, #252]	@ (8000a60 <MX_GPIO_Init+0x114>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000968:	4a3d      	ldr	r2, [pc, #244]	@ (8000a60 <MX_GPIO_Init+0x114>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000972:	4b3b      	ldr	r3, [pc, #236]	@ (8000a60 <MX_GPIO_Init+0x114>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000978:	f003 0310 	and.w	r3, r3, #16
 800097c:	61bb      	str	r3, [r7, #24]
 800097e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000980:	4b37      	ldr	r3, [pc, #220]	@ (8000a60 <MX_GPIO_Init+0x114>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000986:	4a36      	ldr	r2, [pc, #216]	@ (8000a60 <MX_GPIO_Init+0x114>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000990:	4b33      	ldr	r3, [pc, #204]	@ (8000a60 <MX_GPIO_Init+0x114>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <MX_GPIO_Init+0x114>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a4:	4a2e      	ldr	r2, [pc, #184]	@ (8000a60 <MX_GPIO_Init+0x114>)
 80009a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000a60 <MX_GPIO_Init+0x114>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009bc:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <MX_GPIO_Init+0x114>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c2:	4a27      	ldr	r2, [pc, #156]	@ (8000a60 <MX_GPIO_Init+0x114>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <MX_GPIO_Init+0x114>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <MX_GPIO_Init+0x114>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a60 <MX_GPIO_Init+0x114>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <MX_GPIO_Init+0x114>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f0:	f003 0308 	and.w	r3, r3, #8
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <MX_GPIO_Init+0x114>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fe:	4a18      	ldr	r2, [pc, #96]	@ (8000a60 <MX_GPIO_Init+0x114>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a08:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <MX_GPIO_Init+0x114>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2108      	movs	r1, #8
 8000a1a:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <MX_GPIO_Init+0x118>)
 8000a1c:	f001 fe78 	bl	8002710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000a20:	2308      	movs	r3, #8
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	480b      	ldr	r0, [pc, #44]	@ (8000a64 <MX_GPIO_Init+0x118>)
 8000a38:	f001 fbb0 	bl	800219c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_BUTTON_Pin */
  GPIO_InitStruct.Pin = EXT_BUTTON_Pin;
 8000a3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a46:	2302      	movs	r3, #2
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EXT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_GPIO_Init+0x11c>)
 8000a52:	f001 fba3 	bl	800219c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	@ 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	58024400 	.word	0x58024400
 8000a64:	58021000 	.word	0x58021000
 8000a68:	58020800 	.word	0x58020800

08000a6c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callbacks.
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  CmdCplt++;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_QSPI_CmdCpltCallback+0x24>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <HAL_QSPI_CmdCpltCallback+0x24>)
 8000a80:	701a      	strb	r2, [r3, #0]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	24000284 	.word	0x24000284

08000a94 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  RxCplt++;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_QSPI_RxCpltCallback+0x24>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <HAL_QSPI_RxCpltCallback+0x24>)
 8000aa8:	701a      	strb	r2, [r3, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	24000285 	.word	0x24000285

08000abc <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  TxCplt++;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_QSPI_TxCpltCallback+0x24>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	3301      	adds	r3, #1
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <HAL_QSPI_TxCpltCallback+0x24>)
 8000ad0:	701a      	strb	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	24000286 	.word	0x24000286

08000ae4 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callbacks
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  StatusMatch++;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_QSPI_StatusMatchCallback+0x24>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	3301      	adds	r3, #1
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <HAL_QSPI_StatusMatchCallback+0x24>)
 8000af8:	701a      	strb	r2, [r3, #0]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	24000287 	.word	0x24000287

08000b0c <init_qspi_flash>:




void init_qspi_flash(void){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	hqspi.Instance = QUADSPI;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <init_qspi_flash+0x7c>)
 8000b12:	4a1e      	ldr	r2, [pc, #120]	@ (8000b8c <init_qspi_flash+0x80>)
 8000b14:	601a      	str	r2, [r3, #0]
	  HAL_QSPI_DeInit(&hqspi);
 8000b16:	481c      	ldr	r0, [pc, #112]	@ (8000b88 <init_qspi_flash+0x7c>)
 8000b18:	f003 f9c6 	bl	8003ea8 <HAL_QSPI_DeInit>

	  hqspi.Init.ClockPrescaler     = 16;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <init_qspi_flash+0x7c>)
 8000b1e:	2210      	movs	r2, #16
 8000b20:	605a      	str	r2, [r3, #4]
	  hqspi.Init.FifoThreshold      = 4;
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <init_qspi_flash+0x7c>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	609a      	str	r2, [r3, #8]
	  hqspi.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <init_qspi_flash+0x7c>)
 8000b2a:	2210      	movs	r2, #16
 8000b2c:	60da      	str	r2, [r3, #12]
	  hqspi.Init.FlashSize          = QSPI_FLASH_SIZE;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <init_qspi_flash+0x7c>)
 8000b30:	2219      	movs	r2, #25
 8000b32:	611a      	str	r2, [r3, #16]
	  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <init_qspi_flash+0x7c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
	  hqspi.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <init_qspi_flash+0x7c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
	  hqspi.Init.FlashID            = QSPI_FLASH_ID_1;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <init_qspi_flash+0x7c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
	  hqspi.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <init_qspi_flash+0x7c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]

	  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b4c:	480e      	ldr	r0, [pc, #56]	@ (8000b88 <init_qspi_flash+0x7c>)
 8000b4e:	f003 f937 	bl	8003dc0 <HAL_QSPI_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <init_qspi_flash+0x50>
	  {
	    Error_Handler();
 8000b58:	f000 f848 	bl	8000bec <Error_Handler>
	  }

	  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <init_qspi_flash+0x84>)
 8000b5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b62:	619a      	str	r2, [r3, #24]
	  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <init_qspi_flash+0x84>)
 8000b66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b6a:	60da      	str	r2, [r3, #12]
	  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <init_qspi_flash+0x84>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
	  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <init_qspi_flash+0x84>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	62da      	str	r2, [r3, #44]	@ 0x2c
	  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <init_qspi_flash+0x84>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	631a      	str	r2, [r3, #48]	@ 0x30
	  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <init_qspi_flash+0x84>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	24000120 	.word	0x24000120
 8000b8c:	52005000 	.word	0x52005000
 8000b90:	2400024c 	.word	0x2400024c

08000b94 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ba6:	f000 fd1d 	bl	80015e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000baa:	2301      	movs	r3, #1
 8000bac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bb6:	231f      	movs	r3, #31
 8000bb8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bba:	2387      	movs	r3, #135	@ 0x87
 8000bbc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fd3b 	bl	8001654 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bde:	2004      	movs	r0, #4
 8000be0:	f000 fd18 	bl	8001614 <HAL_MPU_Enable>

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <HAL_MspInit+0x30>)
 8000c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c04:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <HAL_MspInit+0x30>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_MspInit+0x30>)
 8000c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	58024400 	.word	0x58024400

08000c2c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0bc      	sub	sp, #240	@ 0xf0
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	22c0      	movs	r2, #192	@ 0xc0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00d fd15 	bl	800e67c <memset>
  if(hqspi->Instance==QUADSPI)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a59      	ldr	r2, [pc, #356]	@ (8000dbc <HAL_QSPI_MspInit+0x190>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	f040 80ab 	bne.w	8000db4 <HAL_QSPI_MspInit+0x188>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000c5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6e:	f107 0318 	add.w	r3, r7, #24
 8000c72:	4618      	mov	r0, r3
 8000c74:	f004 fb78 	bl	8005368 <HAL_RCCEx_PeriphCLKConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8000c7e:	f7ff ffb5 	bl	8000bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000c82:	4b4f      	ldr	r3, [pc, #316]	@ (8000dc0 <HAL_QSPI_MspInit+0x194>)
 8000c84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c88:	4a4d      	ldr	r2, [pc, #308]	@ (8000dc0 <HAL_QSPI_MspInit+0x194>)
 8000c8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000c92:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc0 <HAL_QSPI_MspInit+0x194>)
 8000c94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca0:	4b47      	ldr	r3, [pc, #284]	@ (8000dc0 <HAL_QSPI_MspInit+0x194>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	4a46      	ldr	r2, [pc, #280]	@ (8000dc0 <HAL_QSPI_MspInit+0x194>)
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb0:	4b43      	ldr	r3, [pc, #268]	@ (8000dc0 <HAL_QSPI_MspInit+0x194>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	4b40      	ldr	r3, [pc, #256]	@ (8000dc0 <HAL_QSPI_MspInit+0x194>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	4a3e      	ldr	r2, [pc, #248]	@ (8000dc0 <HAL_QSPI_MspInit+0x194>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cce:	4b3c      	ldr	r3, [pc, #240]	@ (8000dc0 <HAL_QSPI_MspInit+0x194>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cdc:	4b38      	ldr	r3, [pc, #224]	@ (8000dc0 <HAL_QSPI_MspInit+0x194>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	4a37      	ldr	r2, [pc, #220]	@ (8000dc0 <HAL_QSPI_MspInit+0x194>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cec:	4b34      	ldr	r3, [pc, #208]	@ (8000dc0 <HAL_QSPI_MspInit+0x194>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d12:	2309      	movs	r3, #9
 8000d14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d18:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4829      	ldr	r0, [pc, #164]	@ (8000dc4 <HAL_QSPI_MspInit+0x198>)
 8000d20:	f001 fa3c 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d24:	2304      	movs	r3, #4
 8000d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d3c:	2309      	movs	r3, #9
 8000d3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d46:	4619      	mov	r1, r3
 8000d48:	481f      	ldr	r0, [pc, #124]	@ (8000dc8 <HAL_QSPI_MspInit+0x19c>)
 8000d4a:	f001 fa27 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000d4e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d68:	2309      	movs	r3, #9
 8000d6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d72:	4619      	mov	r1, r3
 8000d74:	4815      	ldr	r0, [pc, #84]	@ (8000dcc <HAL_QSPI_MspInit+0x1a0>)
 8000d76:	f001 fa11 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d7a:	2340      	movs	r3, #64	@ 0x40
 8000d7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d92:	230a      	movs	r3, #10
 8000d94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480a      	ldr	r0, [pc, #40]	@ (8000dc8 <HAL_QSPI_MspInit+0x19c>)
 8000da0:	f001 f9fc 	bl	800219c <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	205c      	movs	r0, #92	@ 0x5c
 8000daa:	f000 fbd8 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8000dae:	205c      	movs	r0, #92	@ 0x5c
 8000db0:	f000 fbef 	bl	8001592 <HAL_NVIC_EnableIRQ>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000db4:	bf00      	nop
 8000db6:	37f0      	adds	r7, #240	@ 0xf0
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	52005000 	.word	0x52005000
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	58021000 	.word	0x58021000
 8000dc8:	58020400 	.word	0x58020400
 8000dcc:	58020c00 	.word	0x58020c00

08000dd0 <HAL_QSPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8000e1c <HAL_QSPI_MspDeInit+0x4c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d117      	bne.n	8000e12 <HAL_QSPI_MspDeInit+0x42>
  {
    /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

    /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <HAL_QSPI_MspDeInit+0x50>)
 8000de4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <HAL_QSPI_MspDeInit+0x50>)
 8000dea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000dee:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8000df2:	2104      	movs	r1, #4
 8000df4:	480b      	ldr	r0, [pc, #44]	@ (8000e24 <HAL_QSPI_MspDeInit+0x54>)
 8000df6:	f001 fb81 	bl	80024fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8000dfa:	2144      	movs	r1, #68	@ 0x44
 8000dfc:	480a      	ldr	r0, [pc, #40]	@ (8000e28 <HAL_QSPI_MspDeInit+0x58>)
 8000dfe:	f001 fb7d 	bl	80024fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13);
 8000e02:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 8000e06:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <HAL_QSPI_MspDeInit+0x5c>)
 8000e08:	f001 fb78 	bl	80024fc <HAL_GPIO_DeInit>

    /* QUADSPI interrupt DeInit */
    HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8000e0c:	205c      	movs	r0, #92	@ 0x5c
 8000e0e:	f000 fbce 	bl	80015ae <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

    /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	52005000 	.word	0x52005000
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58021000 	.word	0x58021000
 8000e28:	58020400 	.word	0x58020400
 8000e2c:	58020c00 	.word	0x58020c00

08000e30 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <HAL_TIM_Base_MspInit+0x48>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d116      	bne.n	8000e70 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e42:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <HAL_TIM_Base_MspInit+0x4c>)
 8000e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e48:	4a0c      	ldr	r2, [pc, #48]	@ (8000e7c <HAL_TIM_Base_MspInit+0x4c>)
 8000e4a:	f043 0320 	orr.w	r3, r3, #32
 8000e4e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_TIM_Base_MspInit+0x4c>)
 8000e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e58:	f003 0320 	and.w	r3, r3, #32
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2037      	movs	r0, #55	@ 0x37
 8000e66:	f000 fb7a 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e6a:	2037      	movs	r0, #55	@ 0x37
 8000e6c:	f000 fb91 	bl	8001592 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40001400 	.word	0x40001400
 8000e7c:	58024400 	.word	0x58024400

08000e80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0ba      	sub	sp, #232	@ 0xe8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	22c0      	movs	r2, #192	@ 0xc0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f00d fbeb 	bl	800e67c <memset>
  if(huart->Instance==USART1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8000f58 <HAL_UART_MspInit+0xd8>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d14e      	bne.n	8000f4e <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000eb0:	f04f 0201 	mov.w	r2, #1
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f004 fa4e 	bl	8005368 <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ed2:	f7ff fe8b 	bl	8000bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed6:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <HAL_UART_MspInit+0xdc>)
 8000ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000edc:	4a1f      	ldr	r2, [pc, #124]	@ (8000f5c <HAL_UART_MspInit+0xdc>)
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <HAL_UART_MspInit+0xdc>)
 8000ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <HAL_UART_MspInit+0xdc>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efa:	4a18      	ldr	r2, [pc, #96]	@ (8000f5c <HAL_UART_MspInit+0xdc>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_UART_MspInit+0xdc>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f12:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f36:	4619      	mov	r1, r3
 8000f38:	4809      	ldr	r0, [pc, #36]	@ (8000f60 <HAL_UART_MspInit+0xe0>)
 8000f3a:	f001 f92f 	bl	800219c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	2025      	movs	r0, #37	@ 0x25
 8000f44:	f000 fb0b 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f48:	2025      	movs	r0, #37	@ 0x25
 8000f4a:	f000 fb22 	bl	8001592 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f4e:	bf00      	nop
 8000f50:	37e8      	adds	r7, #232	@ 0xe8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40011000 	.word	0x40011000
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	58020000 	.word	0x58020000

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f981 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <USART1_IRQHandler+0x10>)
 8000fca:	f006 fb25 	bl	8007618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	240001b8 	.word	0x240001b8

08000fd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <TIM7_IRQHandler+0x10>)
 8000fde:	f006 f846 	bl	800706e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2400016c 	.word	0x2400016c

08000fec <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <QUADSPI_IRQHandler+0x10>)
 8000ff2:	f002 ff79 	bl	8003ee8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	24000120 	.word	0x24000120

08001000 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <OTG_FS_IRQHandler+0x10>)
 8001006:	f001 fd04 	bl	8002a12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2400076c 	.word	0x2400076c

08001014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001018:	4b43      	ldr	r3, [pc, #268]	@ (8001128 <SystemInit+0x114>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800101e:	4a42      	ldr	r2, [pc, #264]	@ (8001128 <SystemInit+0x114>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001028:	4b40      	ldr	r3, [pc, #256]	@ (800112c <SystemInit+0x118>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 030f 	and.w	r3, r3, #15
 8001030:	2b06      	cmp	r3, #6
 8001032:	d807      	bhi.n	8001044 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001034:	4b3d      	ldr	r3, [pc, #244]	@ (800112c <SystemInit+0x118>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f023 030f 	bic.w	r3, r3, #15
 800103c:	4a3b      	ldr	r2, [pc, #236]	@ (800112c <SystemInit+0x118>)
 800103e:	f043 0307 	orr.w	r3, r3, #7
 8001042:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001044:	4b3a      	ldr	r3, [pc, #232]	@ (8001130 <SystemInit+0x11c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a39      	ldr	r2, [pc, #228]	@ (8001130 <SystemInit+0x11c>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001050:	4b37      	ldr	r3, [pc, #220]	@ (8001130 <SystemInit+0x11c>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001056:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <SystemInit+0x11c>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4935      	ldr	r1, [pc, #212]	@ (8001130 <SystemInit+0x11c>)
 800105c:	4b35      	ldr	r3, [pc, #212]	@ (8001134 <SystemInit+0x120>)
 800105e:	4013      	ands	r3, r2
 8001060:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001062:	4b32      	ldr	r3, [pc, #200]	@ (800112c <SystemInit+0x118>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800106e:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <SystemInit+0x118>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 030f 	bic.w	r3, r3, #15
 8001076:	4a2d      	ldr	r2, [pc, #180]	@ (800112c <SystemInit+0x118>)
 8001078:	f043 0307 	orr.w	r3, r3, #7
 800107c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800107e:	4b2c      	ldr	r3, [pc, #176]	@ (8001130 <SystemInit+0x11c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001084:	4b2a      	ldr	r3, [pc, #168]	@ (8001130 <SystemInit+0x11c>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800108a:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <SystemInit+0x11c>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001090:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <SystemInit+0x11c>)
 8001092:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <SystemInit+0x124>)
 8001094:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001096:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <SystemInit+0x11c>)
 8001098:	4a28      	ldr	r2, [pc, #160]	@ (800113c <SystemInit+0x128>)
 800109a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800109c:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <SystemInit+0x11c>)
 800109e:	4a28      	ldr	r2, [pc, #160]	@ (8001140 <SystemInit+0x12c>)
 80010a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010a2:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <SystemInit+0x11c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010a8:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <SystemInit+0x11c>)
 80010aa:	4a25      	ldr	r2, [pc, #148]	@ (8001140 <SystemInit+0x12c>)
 80010ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ae:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <SystemInit+0x11c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <SystemInit+0x11c>)
 80010b6:	4a22      	ldr	r2, [pc, #136]	@ (8001140 <SystemInit+0x12c>)
 80010b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <SystemInit+0x11c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <SystemInit+0x11c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001130 <SystemInit+0x11c>)
 80010c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <SystemInit+0x11c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <SystemInit+0x130>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001148 <SystemInit+0x134>)
 80010d8:	4013      	ands	r3, r2
 80010da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010de:	d202      	bcs.n	80010e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <SystemInit+0x138>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80010e6:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <SystemInit+0x11c>)
 80010e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d113      	bne.n	800111c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80010f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <SystemInit+0x11c>)
 80010f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <SystemInit+0x11c>)
 80010fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001100:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <SystemInit+0x13c>)
 8001106:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800110a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <SystemInit+0x11c>)
 800110e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001112:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <SystemInit+0x11c>)
 8001114:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001118:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00
 800112c:	52002000 	.word	0x52002000
 8001130:	58024400 	.word	0x58024400
 8001134:	eaf6ed7f 	.word	0xeaf6ed7f
 8001138:	02020200 	.word	0x02020200
 800113c:	01ff0000 	.word	0x01ff0000
 8001140:	01010280 	.word	0x01010280
 8001144:	5c001000 	.word	0x5c001000
 8001148:	ffff0000 	.word	0xffff0000
 800114c:	51008108 	.word	0x51008108
 8001150:	52004000 	.word	0x52004000

08001154 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <ExitRun0Mode+0x2c>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4a08      	ldr	r2, [pc, #32]	@ (8001180 <ExitRun0Mode+0x2c>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001164:	bf00      	nop
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <ExitRun0Mode+0x2c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f9      	beq.n	8001166 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	58024800 	.word	0x58024800

08001184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80011c0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001188:	f7ff ffe4 	bl	8001154 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800118c:	f7ff ff42 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	@ (80011c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	@ (80011d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b6:	f00d fa69 	bl	800e68c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff fa23 	bl	8000604 <main>
  bx  lr
 80011be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011c8:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 80011cc:	0800e79c 	.word	0x0800e79c
  ldr r2, =_sbss
 80011d0:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 80011d4:	24000ec8 	.word	0x24000ec8

080011d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC3_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e2:	2003      	movs	r0, #3
 80011e4:	f000 f9b0 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011e8:	f003 fee8 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 80011ec:	4602      	mov	r2, r0
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <HAL_Init+0x68>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	0a1b      	lsrs	r3, r3, #8
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	4913      	ldr	r1, [pc, #76]	@ (8001248 <HAL_Init+0x6c>)
 80011fa:	5ccb      	ldrb	r3, [r1, r3]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <HAL_Init+0x68>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	4a0e      	ldr	r2, [pc, #56]	@ (8001248 <HAL_Init+0x6c>)
 8001210:	5cd3      	ldrb	r3, [r2, r3]
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	4a0b      	ldr	r2, [pc, #44]	@ (800124c <HAL_Init+0x70>)
 800121e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001220:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <HAL_Init+0x74>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001226:	200f      	movs	r0, #15
 8001228:	f000 f814 	bl	8001254 <HAL_InitTick>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e002      	b.n	800123c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001236:	f7ff fcdf 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58024400 	.word	0x58024400
 8001248:	0800e730 	.word	0x0800e730
 800124c:	24000004 	.word	0x24000004
 8001250:	24000000 	.word	0x24000000

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_InitTick+0x60>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e021      	b.n	80012ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <HAL_InitTick+0x64>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <HAL_InitTick+0x60>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f9a3 	bl	80015ca <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f95f 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	@ (80012bc <HAL_InitTick+0x68>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2400000c 	.word	0x2400000c
 80012b8:	24000000 	.word	0x24000000
 80012bc:	24000008 	.word	0x24000008

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	2400000c 	.word	0x2400000c
 80012e4:	24000288 	.word	0x24000288

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	24000288 	.word	0x24000288

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2400000c 	.word	0x2400000c

08001348 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800134c:	4b03      	ldr	r3, [pc, #12]	@ (800135c <HAL_GetREVID+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	0c1b      	lsrs	r3, r3, #16
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	5c001000 	.word	0x5c001000

08001360 <__NVIC_SetPriorityGrouping>:
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	4313      	orrs	r3, r2
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	@ (80013a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00
 80013a4:	05fa0000 	.word	0x05fa0000

080013a8 <__NVIC_GetPriorityGrouping>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4907      	ldr	r1, [pc, #28]	@ (80013fc <__NVIC_EnableIRQ+0x38>)
 80013de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_DisableIRQ>:
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db12      	blt.n	8001438 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	490a      	ldr	r1, [pc, #40]	@ (8001444 <__NVIC_DisableIRQ+0x44>)
 800141a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	3320      	adds	r3, #32
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800142c:	f3bf 8f4f 	dsb	sy
}
 8001430:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001432:	f3bf 8f6f 	isb	sy
}
 8001436:	bf00      	nop
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	@ (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	@ (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	@ 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	@ 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff05 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff1c 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff90 	bl	800149c <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5f 	bl	8001448 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff0f 	bl	80013c4 <__NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff1f 	bl	8001400 <__NVIC_DisableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff96 	bl	8001504 <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015e8:	f3bf 8f5f 	dmb	sy
}
 80015ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <HAL_MPU_Disable+0x28>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f2:	4a06      	ldr	r2, [pc, #24]	@ (800160c <HAL_MPU_Disable+0x28>)
 80015f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015fa:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <HAL_MPU_Disable+0x2c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00
 8001610:	e000ed90 	.word	0xe000ed90

08001614 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800161c:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <HAL_MPU_Enable+0x38>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <HAL_MPU_Enable+0x3c>)
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	4a09      	ldr	r2, [pc, #36]	@ (8001650 <HAL_MPU_Enable+0x3c>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001630:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed90 	.word	0xe000ed90
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	785a      	ldrb	r2, [r3, #1]
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001662:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001664:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	4a19      	ldr	r2, [pc, #100]	@ (80016d0 <HAL_MPU_ConfigRegion+0x7c>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001670:	4a17      	ldr	r2, [pc, #92]	@ (80016d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7b1b      	ldrb	r3, [r3, #12]
 800167c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7adb      	ldrb	r3, [r3, #11]
 8001682:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001684:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7a9b      	ldrb	r3, [r3, #10]
 800168a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800168c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7b5b      	ldrb	r3, [r3, #13]
 8001692:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001694:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7b9b      	ldrb	r3, [r3, #14]
 800169a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800169c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7bdb      	ldrb	r3, [r3, #15]
 80016a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7a5b      	ldrb	r3, [r3, #9]
 80016aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7a1b      	ldrb	r3, [r3, #8]
 80016b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016bc:	4a04      	ldr	r2, [pc, #16]	@ (80016d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016c0:	6113      	str	r3, [r2, #16]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed90 	.word	0xe000ed90

080016d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff fe04 	bl	80012e8 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e2dc      	b.n	8001ca6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d008      	beq.n	800170a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2280      	movs	r2, #128	@ 0x80
 80016fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e2cd      	b.n	8001ca6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a76      	ldr	r2, [pc, #472]	@ (80018e8 <HAL_DMA_Abort+0x214>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d04a      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a74      	ldr	r2, [pc, #464]	@ (80018ec <HAL_DMA_Abort+0x218>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d045      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a73      	ldr	r2, [pc, #460]	@ (80018f0 <HAL_DMA_Abort+0x21c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d040      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a71      	ldr	r2, [pc, #452]	@ (80018f4 <HAL_DMA_Abort+0x220>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d03b      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a70      	ldr	r2, [pc, #448]	@ (80018f8 <HAL_DMA_Abort+0x224>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d036      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a6e      	ldr	r2, [pc, #440]	@ (80018fc <HAL_DMA_Abort+0x228>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d031      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a6d      	ldr	r2, [pc, #436]	@ (8001900 <HAL_DMA_Abort+0x22c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d02c      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a6b      	ldr	r2, [pc, #428]	@ (8001904 <HAL_DMA_Abort+0x230>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d027      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a6a      	ldr	r2, [pc, #424]	@ (8001908 <HAL_DMA_Abort+0x234>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d022      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a68      	ldr	r2, [pc, #416]	@ (800190c <HAL_DMA_Abort+0x238>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01d      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a67      	ldr	r2, [pc, #412]	@ (8001910 <HAL_DMA_Abort+0x23c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d018      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a65      	ldr	r2, [pc, #404]	@ (8001914 <HAL_DMA_Abort+0x240>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a64      	ldr	r2, [pc, #400]	@ (8001918 <HAL_DMA_Abort+0x244>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00e      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a62      	ldr	r2, [pc, #392]	@ (800191c <HAL_DMA_Abort+0x248>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d009      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a61      	ldr	r2, [pc, #388]	@ (8001920 <HAL_DMA_Abort+0x24c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d004      	beq.n	80017aa <HAL_DMA_Abort+0xd6>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001924 <HAL_DMA_Abort+0x250>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d101      	bne.n	80017ae <HAL_DMA_Abort+0xda>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_DMA_Abort+0xdc>
 80017ae:	2300      	movs	r3, #0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 021e 	bic.w	r2, r2, #30
 80017c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e00a      	b.n	80017f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 020e 	bic.w	r2, r2, #14
 80017ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a3c      	ldr	r2, [pc, #240]	@ (80018e8 <HAL_DMA_Abort+0x214>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d072      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a3a      	ldr	r2, [pc, #232]	@ (80018ec <HAL_DMA_Abort+0x218>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d06d      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a39      	ldr	r2, [pc, #228]	@ (80018f0 <HAL_DMA_Abort+0x21c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d068      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a37      	ldr	r2, [pc, #220]	@ (80018f4 <HAL_DMA_Abort+0x220>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d063      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a36      	ldr	r2, [pc, #216]	@ (80018f8 <HAL_DMA_Abort+0x224>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d05e      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a34      	ldr	r2, [pc, #208]	@ (80018fc <HAL_DMA_Abort+0x228>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d059      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a33      	ldr	r2, [pc, #204]	@ (8001900 <HAL_DMA_Abort+0x22c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d054      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a31      	ldr	r2, [pc, #196]	@ (8001904 <HAL_DMA_Abort+0x230>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d04f      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a30      	ldr	r2, [pc, #192]	@ (8001908 <HAL_DMA_Abort+0x234>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d04a      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2e      	ldr	r2, [pc, #184]	@ (800190c <HAL_DMA_Abort+0x238>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d045      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a2d      	ldr	r2, [pc, #180]	@ (8001910 <HAL_DMA_Abort+0x23c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d040      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a2b      	ldr	r2, [pc, #172]	@ (8001914 <HAL_DMA_Abort+0x240>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d03b      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a2a      	ldr	r2, [pc, #168]	@ (8001918 <HAL_DMA_Abort+0x244>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d036      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a28      	ldr	r2, [pc, #160]	@ (800191c <HAL_DMA_Abort+0x248>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d031      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a27      	ldr	r2, [pc, #156]	@ (8001920 <HAL_DMA_Abort+0x24c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d02c      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a25      	ldr	r2, [pc, #148]	@ (8001924 <HAL_DMA_Abort+0x250>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d027      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a24      	ldr	r2, [pc, #144]	@ (8001928 <HAL_DMA_Abort+0x254>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d022      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a22      	ldr	r2, [pc, #136]	@ (800192c <HAL_DMA_Abort+0x258>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01d      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a21      	ldr	r2, [pc, #132]	@ (8001930 <HAL_DMA_Abort+0x25c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d018      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001934 <HAL_DMA_Abort+0x260>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a1e      	ldr	r2, [pc, #120]	@ (8001938 <HAL_DMA_Abort+0x264>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00e      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1c      	ldr	r2, [pc, #112]	@ (800193c <HAL_DMA_Abort+0x268>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d009      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001940 <HAL_DMA_Abort+0x26c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d004      	beq.n	80018e2 <HAL_DMA_Abort+0x20e>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a19      	ldr	r2, [pc, #100]	@ (8001944 <HAL_DMA_Abort+0x270>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d132      	bne.n	8001948 <HAL_DMA_Abort+0x274>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e031      	b.n	800194a <HAL_DMA_Abort+0x276>
 80018e6:	bf00      	nop
 80018e8:	40020010 	.word	0x40020010
 80018ec:	40020028 	.word	0x40020028
 80018f0:	40020040 	.word	0x40020040
 80018f4:	40020058 	.word	0x40020058
 80018f8:	40020070 	.word	0x40020070
 80018fc:	40020088 	.word	0x40020088
 8001900:	400200a0 	.word	0x400200a0
 8001904:	400200b8 	.word	0x400200b8
 8001908:	40020410 	.word	0x40020410
 800190c:	40020428 	.word	0x40020428
 8001910:	40020440 	.word	0x40020440
 8001914:	40020458 	.word	0x40020458
 8001918:	40020470 	.word	0x40020470
 800191c:	40020488 	.word	0x40020488
 8001920:	400204a0 	.word	0x400204a0
 8001924:	400204b8 	.word	0x400204b8
 8001928:	58025408 	.word	0x58025408
 800192c:	5802541c 	.word	0x5802541c
 8001930:	58025430 	.word	0x58025430
 8001934:	58025444 	.word	0x58025444
 8001938:	58025458 	.word	0x58025458
 800193c:	5802546c 	.word	0x5802546c
 8001940:	58025480 	.word	0x58025480
 8001944:	58025494 	.word	0x58025494
 8001948:	2300      	movs	r3, #0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800195c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a6d      	ldr	r2, [pc, #436]	@ (8001b18 <HAL_DMA_Abort+0x444>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d04a      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a6b      	ldr	r2, [pc, #428]	@ (8001b1c <HAL_DMA_Abort+0x448>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d045      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a6a      	ldr	r2, [pc, #424]	@ (8001b20 <HAL_DMA_Abort+0x44c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d040      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a68      	ldr	r2, [pc, #416]	@ (8001b24 <HAL_DMA_Abort+0x450>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d03b      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a67      	ldr	r2, [pc, #412]	@ (8001b28 <HAL_DMA_Abort+0x454>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d036      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a65      	ldr	r2, [pc, #404]	@ (8001b2c <HAL_DMA_Abort+0x458>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d031      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a64      	ldr	r2, [pc, #400]	@ (8001b30 <HAL_DMA_Abort+0x45c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d02c      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a62      	ldr	r2, [pc, #392]	@ (8001b34 <HAL_DMA_Abort+0x460>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d027      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a61      	ldr	r2, [pc, #388]	@ (8001b38 <HAL_DMA_Abort+0x464>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d022      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a5f      	ldr	r2, [pc, #380]	@ (8001b3c <HAL_DMA_Abort+0x468>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d01d      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b40 <HAL_DMA_Abort+0x46c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d018      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a5c      	ldr	r2, [pc, #368]	@ (8001b44 <HAL_DMA_Abort+0x470>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d013      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a5b      	ldr	r2, [pc, #364]	@ (8001b48 <HAL_DMA_Abort+0x474>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d00e      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a59      	ldr	r2, [pc, #356]	@ (8001b4c <HAL_DMA_Abort+0x478>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d009      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a58      	ldr	r2, [pc, #352]	@ (8001b50 <HAL_DMA_Abort+0x47c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d004      	beq.n	80019fe <HAL_DMA_Abort+0x32a>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a56      	ldr	r2, [pc, #344]	@ (8001b54 <HAL_DMA_Abort+0x480>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d108      	bne.n	8001a10 <HAL_DMA_Abort+0x33c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0201 	bic.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e007      	b.n	8001a20 <HAL_DMA_Abort+0x34c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a20:	e013      	b.n	8001a4a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a22:	f7ff fc61 	bl	80012e8 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d90c      	bls.n	8001a4a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2220      	movs	r2, #32
 8001a34:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e12d      	b.n	8001ca6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1e5      	bne.n	8001a22 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001b18 <HAL_DMA_Abort+0x444>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d04a      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2d      	ldr	r2, [pc, #180]	@ (8001b1c <HAL_DMA_Abort+0x448>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d045      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b20 <HAL_DMA_Abort+0x44c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d040      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2a      	ldr	r2, [pc, #168]	@ (8001b24 <HAL_DMA_Abort+0x450>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d03b      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a29      	ldr	r2, [pc, #164]	@ (8001b28 <HAL_DMA_Abort+0x454>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d036      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a27      	ldr	r2, [pc, #156]	@ (8001b2c <HAL_DMA_Abort+0x458>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d031      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a26      	ldr	r2, [pc, #152]	@ (8001b30 <HAL_DMA_Abort+0x45c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d02c      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a24      	ldr	r2, [pc, #144]	@ (8001b34 <HAL_DMA_Abort+0x460>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d027      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a23      	ldr	r2, [pc, #140]	@ (8001b38 <HAL_DMA_Abort+0x464>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d022      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a21      	ldr	r2, [pc, #132]	@ (8001b3c <HAL_DMA_Abort+0x468>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01d      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a20      	ldr	r2, [pc, #128]	@ (8001b40 <HAL_DMA_Abort+0x46c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d018      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <HAL_DMA_Abort+0x470>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b48 <HAL_DMA_Abort+0x474>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00e      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b4c <HAL_DMA_Abort+0x478>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d009      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b50 <HAL_DMA_Abort+0x47c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d004      	beq.n	8001af6 <HAL_DMA_Abort+0x422>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a18      	ldr	r2, [pc, #96]	@ (8001b54 <HAL_DMA_Abort+0x480>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_DMA_Abort+0x426>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_DMA_Abort+0x428>
 8001afa:	2300      	movs	r3, #0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d02b      	beq.n	8001b58 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b04:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	223f      	movs	r2, #63	@ 0x3f
 8001b10:	409a      	lsls	r2, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	e02a      	b.n	8001b6e <HAL_DMA_Abort+0x49a>
 8001b18:	40020010 	.word	0x40020010
 8001b1c:	40020028 	.word	0x40020028
 8001b20:	40020040 	.word	0x40020040
 8001b24:	40020058 	.word	0x40020058
 8001b28:	40020070 	.word	0x40020070
 8001b2c:	40020088 	.word	0x40020088
 8001b30:	400200a0 	.word	0x400200a0
 8001b34:	400200b8 	.word	0x400200b8
 8001b38:	40020410 	.word	0x40020410
 8001b3c:	40020428 	.word	0x40020428
 8001b40:	40020440 	.word	0x40020440
 8001b44:	40020458 	.word	0x40020458
 8001b48:	40020470 	.word	0x40020470
 8001b4c:	40020488 	.word	0x40020488
 8001b50:	400204a0 	.word	0x400204a0
 8001b54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2201      	movs	r2, #1
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a4f      	ldr	r2, [pc, #316]	@ (8001cb0 <HAL_DMA_Abort+0x5dc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d072      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001cb4 <HAL_DMA_Abort+0x5e0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d06d      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a4c      	ldr	r2, [pc, #304]	@ (8001cb8 <HAL_DMA_Abort+0x5e4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d068      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a4a      	ldr	r2, [pc, #296]	@ (8001cbc <HAL_DMA_Abort+0x5e8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d063      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a49      	ldr	r2, [pc, #292]	@ (8001cc0 <HAL_DMA_Abort+0x5ec>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d05e      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a47      	ldr	r2, [pc, #284]	@ (8001cc4 <HAL_DMA_Abort+0x5f0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d059      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a46      	ldr	r2, [pc, #280]	@ (8001cc8 <HAL_DMA_Abort+0x5f4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d054      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a44      	ldr	r2, [pc, #272]	@ (8001ccc <HAL_DMA_Abort+0x5f8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d04f      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a43      	ldr	r2, [pc, #268]	@ (8001cd0 <HAL_DMA_Abort+0x5fc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d04a      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a41      	ldr	r2, [pc, #260]	@ (8001cd4 <HAL_DMA_Abort+0x600>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d045      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a40      	ldr	r2, [pc, #256]	@ (8001cd8 <HAL_DMA_Abort+0x604>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d040      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a3e      	ldr	r2, [pc, #248]	@ (8001cdc <HAL_DMA_Abort+0x608>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d03b      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a3d      	ldr	r2, [pc, #244]	@ (8001ce0 <HAL_DMA_Abort+0x60c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d036      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ce4 <HAL_DMA_Abort+0x610>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d031      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a3a      	ldr	r2, [pc, #232]	@ (8001ce8 <HAL_DMA_Abort+0x614>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d02c      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a38      	ldr	r2, [pc, #224]	@ (8001cec <HAL_DMA_Abort+0x618>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d027      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a37      	ldr	r2, [pc, #220]	@ (8001cf0 <HAL_DMA_Abort+0x61c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d022      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a35      	ldr	r2, [pc, #212]	@ (8001cf4 <HAL_DMA_Abort+0x620>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d01d      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a34      	ldr	r2, [pc, #208]	@ (8001cf8 <HAL_DMA_Abort+0x624>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d018      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a32      	ldr	r2, [pc, #200]	@ (8001cfc <HAL_DMA_Abort+0x628>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a31      	ldr	r2, [pc, #196]	@ (8001d00 <HAL_DMA_Abort+0x62c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00e      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2f      	ldr	r2, [pc, #188]	@ (8001d04 <HAL_DMA_Abort+0x630>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d009      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8001d08 <HAL_DMA_Abort+0x634>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d004      	beq.n	8001c5e <HAL_DMA_Abort+0x58a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a2c      	ldr	r2, [pc, #176]	@ (8001d0c <HAL_DMA_Abort+0x638>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_DMA_Abort+0x58e>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_DMA_Abort+0x590>
 8001c62:	2300      	movs	r3, #0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d015      	beq.n	8001c94 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c70:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00c      	beq.n	8001c94 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c88:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001c92:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40020010 	.word	0x40020010
 8001cb4:	40020028 	.word	0x40020028
 8001cb8:	40020040 	.word	0x40020040
 8001cbc:	40020058 	.word	0x40020058
 8001cc0:	40020070 	.word	0x40020070
 8001cc4:	40020088 	.word	0x40020088
 8001cc8:	400200a0 	.word	0x400200a0
 8001ccc:	400200b8 	.word	0x400200b8
 8001cd0:	40020410 	.word	0x40020410
 8001cd4:	40020428 	.word	0x40020428
 8001cd8:	40020440 	.word	0x40020440
 8001cdc:	40020458 	.word	0x40020458
 8001ce0:	40020470 	.word	0x40020470
 8001ce4:	40020488 	.word	0x40020488
 8001ce8:	400204a0 	.word	0x400204a0
 8001cec:	400204b8 	.word	0x400204b8
 8001cf0:	58025408 	.word	0x58025408
 8001cf4:	5802541c 	.word	0x5802541c
 8001cf8:	58025430 	.word	0x58025430
 8001cfc:	58025444 	.word	0x58025444
 8001d00:	58025458 	.word	0x58025458
 8001d04:	5802546c 	.word	0x5802546c
 8001d08:	58025480 	.word	0x58025480
 8001d0c:	58025494 	.word	0x58025494

08001d10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e237      	b.n	8002192 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d004      	beq.n	8001d38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2280      	movs	r2, #128	@ 0x80
 8001d32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e22c      	b.n	8002192 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a5c      	ldr	r2, [pc, #368]	@ (8001eb0 <HAL_DMA_Abort_IT+0x1a0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d04a      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a5b      	ldr	r2, [pc, #364]	@ (8001eb4 <HAL_DMA_Abort_IT+0x1a4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d045      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a59      	ldr	r2, [pc, #356]	@ (8001eb8 <HAL_DMA_Abort_IT+0x1a8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d040      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a58      	ldr	r2, [pc, #352]	@ (8001ebc <HAL_DMA_Abort_IT+0x1ac>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d03b      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a56      	ldr	r2, [pc, #344]	@ (8001ec0 <HAL_DMA_Abort_IT+0x1b0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d036      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a55      	ldr	r2, [pc, #340]	@ (8001ec4 <HAL_DMA_Abort_IT+0x1b4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d031      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a53      	ldr	r2, [pc, #332]	@ (8001ec8 <HAL_DMA_Abort_IT+0x1b8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d02c      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a52      	ldr	r2, [pc, #328]	@ (8001ecc <HAL_DMA_Abort_IT+0x1bc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d027      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a50      	ldr	r2, [pc, #320]	@ (8001ed0 <HAL_DMA_Abort_IT+0x1c0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d022      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a4f      	ldr	r2, [pc, #316]	@ (8001ed4 <HAL_DMA_Abort_IT+0x1c4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d01d      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed8 <HAL_DMA_Abort_IT+0x1c8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d018      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a4c      	ldr	r2, [pc, #304]	@ (8001edc <HAL_DMA_Abort_IT+0x1cc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee0 <HAL_DMA_Abort_IT+0x1d0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00e      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a49      	ldr	r2, [pc, #292]	@ (8001ee4 <HAL_DMA_Abort_IT+0x1d4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d009      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a47      	ldr	r2, [pc, #284]	@ (8001ee8 <HAL_DMA_Abort_IT+0x1d8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0xc8>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a46      	ldr	r2, [pc, #280]	@ (8001eec <HAL_DMA_Abort_IT+0x1dc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d101      	bne.n	8001ddc <HAL_DMA_Abort_IT+0xcc>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_DMA_Abort_IT+0xce>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8086 	beq.w	8001ef0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2204      	movs	r2, #4
 8001de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2f      	ldr	r2, [pc, #188]	@ (8001eb0 <HAL_DMA_Abort_IT+0x1a0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d04a      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8001eb4 <HAL_DMA_Abort_IT+0x1a4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d045      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a2c      	ldr	r2, [pc, #176]	@ (8001eb8 <HAL_DMA_Abort_IT+0x1a8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d040      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8001ebc <HAL_DMA_Abort_IT+0x1ac>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d03b      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a29      	ldr	r2, [pc, #164]	@ (8001ec0 <HAL_DMA_Abort_IT+0x1b0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d036      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a28      	ldr	r2, [pc, #160]	@ (8001ec4 <HAL_DMA_Abort_IT+0x1b4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d031      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a26      	ldr	r2, [pc, #152]	@ (8001ec8 <HAL_DMA_Abort_IT+0x1b8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d02c      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a25      	ldr	r2, [pc, #148]	@ (8001ecc <HAL_DMA_Abort_IT+0x1bc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d027      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a23      	ldr	r2, [pc, #140]	@ (8001ed0 <HAL_DMA_Abort_IT+0x1c0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d022      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a22      	ldr	r2, [pc, #136]	@ (8001ed4 <HAL_DMA_Abort_IT+0x1c4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d01d      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a20      	ldr	r2, [pc, #128]	@ (8001ed8 <HAL_DMA_Abort_IT+0x1c8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d018      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001edc <HAL_DMA_Abort_IT+0x1cc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d013      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee0 <HAL_DMA_Abort_IT+0x1d0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00e      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee4 <HAL_DMA_Abort_IT+0x1d4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee8 <HAL_DMA_Abort_IT+0x1d8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d004      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x17c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a19      	ldr	r2, [pc, #100]	@ (8001eec <HAL_DMA_Abort_IT+0x1dc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d108      	bne.n	8001e9e <HAL_DMA_Abort_IT+0x18e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e178      	b.n	8002190 <HAL_DMA_Abort_IT+0x480>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e16f      	b.n	8002190 <HAL_DMA_Abort_IT+0x480>
 8001eb0:	40020010 	.word	0x40020010
 8001eb4:	40020028 	.word	0x40020028
 8001eb8:	40020040 	.word	0x40020040
 8001ebc:	40020058 	.word	0x40020058
 8001ec0:	40020070 	.word	0x40020070
 8001ec4:	40020088 	.word	0x40020088
 8001ec8:	400200a0 	.word	0x400200a0
 8001ecc:	400200b8 	.word	0x400200b8
 8001ed0:	40020410 	.word	0x40020410
 8001ed4:	40020428 	.word	0x40020428
 8001ed8:	40020440 	.word	0x40020440
 8001edc:	40020458 	.word	0x40020458
 8001ee0:	40020470 	.word	0x40020470
 8001ee4:	40020488 	.word	0x40020488
 8001ee8:	400204a0 	.word	0x400204a0
 8001eec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 020e 	bic.w	r2, r2, #14
 8001efe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a6c      	ldr	r2, [pc, #432]	@ (80020b8 <HAL_DMA_Abort_IT+0x3a8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d04a      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6b      	ldr	r2, [pc, #428]	@ (80020bc <HAL_DMA_Abort_IT+0x3ac>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d045      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a69      	ldr	r2, [pc, #420]	@ (80020c0 <HAL_DMA_Abort_IT+0x3b0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d040      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a68      	ldr	r2, [pc, #416]	@ (80020c4 <HAL_DMA_Abort_IT+0x3b4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d03b      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a66      	ldr	r2, [pc, #408]	@ (80020c8 <HAL_DMA_Abort_IT+0x3b8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d036      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a65      	ldr	r2, [pc, #404]	@ (80020cc <HAL_DMA_Abort_IT+0x3bc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d031      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a63      	ldr	r2, [pc, #396]	@ (80020d0 <HAL_DMA_Abort_IT+0x3c0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d02c      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a62      	ldr	r2, [pc, #392]	@ (80020d4 <HAL_DMA_Abort_IT+0x3c4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d027      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a60      	ldr	r2, [pc, #384]	@ (80020d8 <HAL_DMA_Abort_IT+0x3c8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d022      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a5f      	ldr	r2, [pc, #380]	@ (80020dc <HAL_DMA_Abort_IT+0x3cc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d01d      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a5d      	ldr	r2, [pc, #372]	@ (80020e0 <HAL_DMA_Abort_IT+0x3d0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d018      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a5c      	ldr	r2, [pc, #368]	@ (80020e4 <HAL_DMA_Abort_IT+0x3d4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a5a      	ldr	r2, [pc, #360]	@ (80020e8 <HAL_DMA_Abort_IT+0x3d8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00e      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a59      	ldr	r2, [pc, #356]	@ (80020ec <HAL_DMA_Abort_IT+0x3dc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d009      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a57      	ldr	r2, [pc, #348]	@ (80020f0 <HAL_DMA_Abort_IT+0x3e0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d004      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x290>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a56      	ldr	r2, [pc, #344]	@ (80020f4 <HAL_DMA_Abort_IT+0x3e4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d108      	bne.n	8001fb2 <HAL_DMA_Abort_IT+0x2a2>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e007      	b.n	8001fc2 <HAL_DMA_Abort_IT+0x2b2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3c      	ldr	r2, [pc, #240]	@ (80020b8 <HAL_DMA_Abort_IT+0x3a8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d072      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a3a      	ldr	r2, [pc, #232]	@ (80020bc <HAL_DMA_Abort_IT+0x3ac>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d06d      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a39      	ldr	r2, [pc, #228]	@ (80020c0 <HAL_DMA_Abort_IT+0x3b0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d068      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a37      	ldr	r2, [pc, #220]	@ (80020c4 <HAL_DMA_Abort_IT+0x3b4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d063      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a36      	ldr	r2, [pc, #216]	@ (80020c8 <HAL_DMA_Abort_IT+0x3b8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d05e      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a34      	ldr	r2, [pc, #208]	@ (80020cc <HAL_DMA_Abort_IT+0x3bc>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d059      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a33      	ldr	r2, [pc, #204]	@ (80020d0 <HAL_DMA_Abort_IT+0x3c0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d054      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a31      	ldr	r2, [pc, #196]	@ (80020d4 <HAL_DMA_Abort_IT+0x3c4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d04f      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a30      	ldr	r2, [pc, #192]	@ (80020d8 <HAL_DMA_Abort_IT+0x3c8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d04a      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2e      	ldr	r2, [pc, #184]	@ (80020dc <HAL_DMA_Abort_IT+0x3cc>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d045      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2d      	ldr	r2, [pc, #180]	@ (80020e0 <HAL_DMA_Abort_IT+0x3d0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d040      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a2b      	ldr	r2, [pc, #172]	@ (80020e4 <HAL_DMA_Abort_IT+0x3d4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d03b      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a2a      	ldr	r2, [pc, #168]	@ (80020e8 <HAL_DMA_Abort_IT+0x3d8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d036      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a28      	ldr	r2, [pc, #160]	@ (80020ec <HAL_DMA_Abort_IT+0x3dc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d031      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a27      	ldr	r2, [pc, #156]	@ (80020f0 <HAL_DMA_Abort_IT+0x3e0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d02c      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a25      	ldr	r2, [pc, #148]	@ (80020f4 <HAL_DMA_Abort_IT+0x3e4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d027      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a24      	ldr	r2, [pc, #144]	@ (80020f8 <HAL_DMA_Abort_IT+0x3e8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d022      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a22      	ldr	r2, [pc, #136]	@ (80020fc <HAL_DMA_Abort_IT+0x3ec>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01d      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a21      	ldr	r2, [pc, #132]	@ (8002100 <HAL_DMA_Abort_IT+0x3f0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d018      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a1f      	ldr	r2, [pc, #124]	@ (8002104 <HAL_DMA_Abort_IT+0x3f4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a1e      	ldr	r2, [pc, #120]	@ (8002108 <HAL_DMA_Abort_IT+0x3f8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00e      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1c      	ldr	r2, [pc, #112]	@ (800210c <HAL_DMA_Abort_IT+0x3fc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d009      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002110 <HAL_DMA_Abort_IT+0x400>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d004      	beq.n	80020b2 <HAL_DMA_Abort_IT+0x3a2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a19      	ldr	r2, [pc, #100]	@ (8002114 <HAL_DMA_Abort_IT+0x404>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d132      	bne.n	8002118 <HAL_DMA_Abort_IT+0x408>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e031      	b.n	800211a <HAL_DMA_Abort_IT+0x40a>
 80020b6:	bf00      	nop
 80020b8:	40020010 	.word	0x40020010
 80020bc:	40020028 	.word	0x40020028
 80020c0:	40020040 	.word	0x40020040
 80020c4:	40020058 	.word	0x40020058
 80020c8:	40020070 	.word	0x40020070
 80020cc:	40020088 	.word	0x40020088
 80020d0:	400200a0 	.word	0x400200a0
 80020d4:	400200b8 	.word	0x400200b8
 80020d8:	40020410 	.word	0x40020410
 80020dc:	40020428 	.word	0x40020428
 80020e0:	40020440 	.word	0x40020440
 80020e4:	40020458 	.word	0x40020458
 80020e8:	40020470 	.word	0x40020470
 80020ec:	40020488 	.word	0x40020488
 80020f0:	400204a0 	.word	0x400204a0
 80020f4:	400204b8 	.word	0x400204b8
 80020f8:	58025408 	.word	0x58025408
 80020fc:	5802541c 	.word	0x5802541c
 8002100:	58025430 	.word	0x58025430
 8002104:	58025444 	.word	0x58025444
 8002108:	58025458 	.word	0x58025458
 800210c:	5802546c 	.word	0x5802546c
 8002110:	58025480 	.word	0x58025480
 8002114:	58025494 	.word	0x58025494
 8002118:	2300      	movs	r3, #0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d028      	beq.n	8002170 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002128:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800212c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002132:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2201      	movs	r2, #1
 800213e:	409a      	lsls	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800214c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00c      	beq.n	8002170 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002160:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002164:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800216e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	@ 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021aa:	4b89      	ldr	r3, [pc, #548]	@ (80023d0 <HAL_GPIO_Init+0x234>)
 80021ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021ae:	e194      	b.n	80024da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8186 	beq.w	80024d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d005      	beq.n	80021e0 <HAL_GPIO_Init+0x44>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d130      	bne.n	8002242 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002216:	2201      	movs	r2, #1
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	f003 0201 	and.w	r2, r3, #1
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b03      	cmp	r3, #3
 800224c:	d017      	beq.n	800227e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d123      	bne.n	80022d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	08da      	lsrs	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3208      	adds	r2, #8
 8002292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	220f      	movs	r2, #15
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	08da      	lsrs	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	69b9      	ldr	r1, [r7, #24]
 80022ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0203 	and.w	r2, r3, #3
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80e0 	beq.w	80024d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002314:	4b2f      	ldr	r3, [pc, #188]	@ (80023d4 <HAL_GPIO_Init+0x238>)
 8002316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800231a:	4a2e      	ldr	r2, [pc, #184]	@ (80023d4 <HAL_GPIO_Init+0x238>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002324:	4b2b      	ldr	r3, [pc, #172]	@ (80023d4 <HAL_GPIO_Init+0x238>)
 8002326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002332:	4a29      	ldr	r2, [pc, #164]	@ (80023d8 <HAL_GPIO_Init+0x23c>)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a20      	ldr	r2, [pc, #128]	@ (80023dc <HAL_GPIO_Init+0x240>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d052      	beq.n	8002404 <HAL_GPIO_Init+0x268>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a1f      	ldr	r2, [pc, #124]	@ (80023e0 <HAL_GPIO_Init+0x244>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d031      	beq.n	80023ca <HAL_GPIO_Init+0x22e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a1e      	ldr	r2, [pc, #120]	@ (80023e4 <HAL_GPIO_Init+0x248>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02b      	beq.n	80023c6 <HAL_GPIO_Init+0x22a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a1d      	ldr	r2, [pc, #116]	@ (80023e8 <HAL_GPIO_Init+0x24c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d025      	beq.n	80023c2 <HAL_GPIO_Init+0x226>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a1c      	ldr	r2, [pc, #112]	@ (80023ec <HAL_GPIO_Init+0x250>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <HAL_GPIO_Init+0x222>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a1b      	ldr	r2, [pc, #108]	@ (80023f0 <HAL_GPIO_Init+0x254>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x21e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1a      	ldr	r2, [pc, #104]	@ (80023f4 <HAL_GPIO_Init+0x258>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x21a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a19      	ldr	r2, [pc, #100]	@ (80023f8 <HAL_GPIO_Init+0x25c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x216>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a18      	ldr	r2, [pc, #96]	@ (80023fc <HAL_GPIO_Init+0x260>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x212>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a17      	ldr	r2, [pc, #92]	@ (8002400 <HAL_GPIO_Init+0x264>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x20e>
 80023a6:	2309      	movs	r3, #9
 80023a8:	e02d      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023aa:	230a      	movs	r3, #10
 80023ac:	e02b      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023ae:	2308      	movs	r3, #8
 80023b0:	e029      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023b2:	2307      	movs	r3, #7
 80023b4:	e027      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023b6:	2306      	movs	r3, #6
 80023b8:	e025      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023ba:	2305      	movs	r3, #5
 80023bc:	e023      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023be:	2304      	movs	r3, #4
 80023c0:	e021      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023c2:	2303      	movs	r3, #3
 80023c4:	e01f      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e01d      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e01b      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023ce:	bf00      	nop
 80023d0:	58000080 	.word	0x58000080
 80023d4:	58024400 	.word	0x58024400
 80023d8:	58000400 	.word	0x58000400
 80023dc:	58020000 	.word	0x58020000
 80023e0:	58020400 	.word	0x58020400
 80023e4:	58020800 	.word	0x58020800
 80023e8:	58020c00 	.word	0x58020c00
 80023ec:	58021000 	.word	0x58021000
 80023f0:	58021400 	.word	0x58021400
 80023f4:	58021800 	.word	0x58021800
 80023f8:	58021c00 	.word	0x58021c00
 80023fc:	58022000 	.word	0x58022000
 8002400:	58022400 	.word	0x58022400
 8002404:	2300      	movs	r3, #0
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	f002 0203 	and.w	r2, r2, #3
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	4093      	lsls	r3, r2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002416:	4938      	ldr	r1, [pc, #224]	@ (80024f8 <HAL_GPIO_Init+0x35c>)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800244a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3301      	adds	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f ae63 	bne.w	80021b0 <HAL_GPIO_Init+0x14>
  }
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	3724      	adds	r7, #36	@ 0x24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	58000400 	.word	0x58000400

080024fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800250a:	4b75      	ldr	r3, [pc, #468]	@ (80026e0 <HAL_GPIO_DeInit+0x1e4>)
 800250c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800250e:	e0d9      	b.n	80026c4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002510:	2201      	movs	r2, #1
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	4013      	ands	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80cc 	beq.w	80026be <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002526:	4a6f      	ldr	r2, [pc, #444]	@ (80026e4 <HAL_GPIO_DeInit+0x1e8>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002532:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	220f      	movs	r2, #15
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a67      	ldr	r2, [pc, #412]	@ (80026e8 <HAL_GPIO_DeInit+0x1ec>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d037      	beq.n	80025c0 <HAL_GPIO_DeInit+0xc4>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a66      	ldr	r2, [pc, #408]	@ (80026ec <HAL_GPIO_DeInit+0x1f0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d031      	beq.n	80025bc <HAL_GPIO_DeInit+0xc0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a65      	ldr	r2, [pc, #404]	@ (80026f0 <HAL_GPIO_DeInit+0x1f4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d02b      	beq.n	80025b8 <HAL_GPIO_DeInit+0xbc>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a64      	ldr	r2, [pc, #400]	@ (80026f4 <HAL_GPIO_DeInit+0x1f8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d025      	beq.n	80025b4 <HAL_GPIO_DeInit+0xb8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a63      	ldr	r2, [pc, #396]	@ (80026f8 <HAL_GPIO_DeInit+0x1fc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d01f      	beq.n	80025b0 <HAL_GPIO_DeInit+0xb4>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a62      	ldr	r2, [pc, #392]	@ (80026fc <HAL_GPIO_DeInit+0x200>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d019      	beq.n	80025ac <HAL_GPIO_DeInit+0xb0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a61      	ldr	r2, [pc, #388]	@ (8002700 <HAL_GPIO_DeInit+0x204>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_GPIO_DeInit+0xac>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a60      	ldr	r2, [pc, #384]	@ (8002704 <HAL_GPIO_DeInit+0x208>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00d      	beq.n	80025a4 <HAL_GPIO_DeInit+0xa8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a5f      	ldr	r2, [pc, #380]	@ (8002708 <HAL_GPIO_DeInit+0x20c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d007      	beq.n	80025a0 <HAL_GPIO_DeInit+0xa4>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a5e      	ldr	r2, [pc, #376]	@ (800270c <HAL_GPIO_DeInit+0x210>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_GPIO_DeInit+0xa0>
 8002598:	2309      	movs	r3, #9
 800259a:	e012      	b.n	80025c2 <HAL_GPIO_DeInit+0xc6>
 800259c:	230a      	movs	r3, #10
 800259e:	e010      	b.n	80025c2 <HAL_GPIO_DeInit+0xc6>
 80025a0:	2308      	movs	r3, #8
 80025a2:	e00e      	b.n	80025c2 <HAL_GPIO_DeInit+0xc6>
 80025a4:	2307      	movs	r3, #7
 80025a6:	e00c      	b.n	80025c2 <HAL_GPIO_DeInit+0xc6>
 80025a8:	2306      	movs	r3, #6
 80025aa:	e00a      	b.n	80025c2 <HAL_GPIO_DeInit+0xc6>
 80025ac:	2305      	movs	r3, #5
 80025ae:	e008      	b.n	80025c2 <HAL_GPIO_DeInit+0xc6>
 80025b0:	2304      	movs	r3, #4
 80025b2:	e006      	b.n	80025c2 <HAL_GPIO_DeInit+0xc6>
 80025b4:	2303      	movs	r3, #3
 80025b6:	e004      	b.n	80025c2 <HAL_GPIO_DeInit+0xc6>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e002      	b.n	80025c2 <HAL_GPIO_DeInit+0xc6>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_GPIO_DeInit+0xc6>
 80025c0:	2300      	movs	r3, #0
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	f002 0203 	and.w	r2, r2, #3
 80025c8:	0092      	lsls	r2, r2, #2
 80025ca:	4093      	lsls	r3, r2
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d136      	bne.n	8002640 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	401a      	ands	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	401a      	ands	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80025ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025fc:	4013      	ands	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	43db      	mvns	r3, r3
 800260a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800260e:	4013      	ands	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002622:	4a30      	ldr	r2, [pc, #192]	@ (80026e4 <HAL_GPIO_DeInit+0x1e8>)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	43da      	mvns	r2, r3
 8002632:	482c      	ldr	r0, [pc, #176]	@ (80026e4 <HAL_GPIO_DeInit+0x1e8>)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	400a      	ands	r2, r1
 800263a:	3302      	adds	r3, #2
 800263c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	2103      	movs	r1, #3
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	08da      	lsrs	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3208      	adds	r2, #8
 800265c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	08d2      	lsrs	r2, r2, #3
 8002674:	4019      	ands	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2103      	movs	r1, #3
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	401a      	ands	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	2101      	movs	r1, #1
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	401a      	ands	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2103      	movs	r1, #3
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	401a      	ands	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	609a      	str	r2, [r3, #8]
    }

    position++;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3301      	adds	r3, #1
 80026c2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f47f af1f 	bne.w	8002510 <HAL_GPIO_DeInit+0x14>
  }
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	58000080 	.word	0x58000080
 80026e4:	58000400 	.word	0x58000400
 80026e8:	58020000 	.word	0x58020000
 80026ec:	58020400 	.word	0x58020400
 80026f0:	58020800 	.word	0x58020800
 80026f4:	58020c00 	.word	0x58020c00
 80026f8:	58021000 	.word	0x58021000
 80026fc:	58021400 	.word	0x58021400
 8002700:	58021800 	.word	0x58021800
 8002704:	58021c00 	.word	0x58021c00
 8002708:	58022000 	.word	0x58022000
 800270c:	58022400 	.word	0x58022400

08002710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
 800271c:	4613      	mov	r3, r2
 800271e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002720:	787b      	ldrb	r3, [r7, #1]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002726:	887a      	ldrh	r2, [r7, #2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800272c:	e003      	b.n	8002736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	041a      	lsls	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	619a      	str	r2, [r3, #24]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e017      	b.n	8002784 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d004      	beq.n	800276a <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2280      	movs	r2, #128	@ 0x80
 8002764:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e00c      	b.n	8002784 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2204      	movs	r2, #4
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af02      	add	r7, sp, #8
 8002796:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0fe      	b.n	80029a0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f00b fbfa 	bl	800dfb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2203      	movs	r2, #3
 80027c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f006 fd26 	bl	800921a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7c1a      	ldrb	r2, [r3, #16]
 80027d6:	f88d 2000 	strb.w	r2, [sp]
 80027da:	3304      	adds	r3, #4
 80027dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027de:	f006 fbf7 	bl	8008fd0 <USB_CoreInit>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0d5      	b.n	80029a0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f006 fd1e 	bl	800923c <USB_SetCurrentMode>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2202      	movs	r2, #2
 800280a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0c6      	b.n	80029a0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002812:	2300      	movs	r3, #0
 8002814:	73fb      	strb	r3, [r7, #15]
 8002816:	e04a      	b.n	80028ae <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	3315      	adds	r3, #21
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	3314      	adds	r3, #20
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	b298      	uxth	r0, r3
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	332e      	adds	r3, #46	@ 0x2e
 8002854:	4602      	mov	r2, r0
 8002856:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3318      	adds	r3, #24
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	331c      	adds	r3, #28
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002880:	7bfa      	ldrb	r2, [r7, #15]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	3320      	adds	r3, #32
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	3324      	adds	r3, #36	@ 0x24
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	3301      	adds	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	791b      	ldrb	r3, [r3, #4]
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d3af      	bcc.n	8002818 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e044      	b.n	8002948 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	3301      	adds	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	791b      	ldrb	r3, [r3, #4]
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	429a      	cmp	r2, r3
 8002950:	d3b5      	bcc.n	80028be <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7c1a      	ldrb	r2, [r3, #16]
 800295a:	f88d 2000 	strb.w	r2, [sp]
 800295e:	3304      	adds	r3, #4
 8002960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002962:	f006 fcb7 	bl	80092d4 <USB_DevInit>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e013      	b.n	80029a0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	7b1b      	ldrb	r3, [r3, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d102      	bne.n	8002994 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f001 f99c 	bl	8003ccc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f007 fcfa 	bl	800a392 <USB_DevDisconnect>

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_PCD_Start+0x1c>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e022      	b.n	8002a0a <HAL_PCD_Start+0x62>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d105      	bne.n	80029ec <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f006 fc01 	bl	80091f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f007 fca8 	bl	800a350 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a12:	b590      	push	{r4, r7, lr}
 8002a14:	b08d      	sub	sp, #52	@ 0x34
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f007 fd66 	bl	800a4fa <USB_GetMode>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f040 84b9 	bne.w	80033a8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f007 fcca 	bl	800a3d4 <USB_ReadInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 84af 	beq.w	80033a6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f007 fcb7 	bl	800a3d4 <USB_ReadInterrupts>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d107      	bne.n	8002a80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f002 0202 	and.w	r2, r2, #2
 8002a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f007 fca5 	bl	800a3d4 <USB_ReadInterrupts>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d161      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0210 	bic.w	r2, r2, #16
 8002aa2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f003 020f 	and.w	r2, r3, #15
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002aca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ace:	d124      	bne.n	8002b1a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d035      	beq.n	8002b48 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	6a38      	ldr	r0, [r7, #32]
 8002af0:	f007 fadc 	bl	800a0ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b00:	441a      	add	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b12:	441a      	add	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	615a      	str	r2, [r3, #20]
 8002b18:	e016      	b.n	8002b48 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002b20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b24:	d110      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6a38      	ldr	r0, [r7, #32]
 8002b32:	f007 fabb 	bl	800a0ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b42:	441a      	add	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0210 	orr.w	r2, r2, #16
 8002b56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f007 fc39 	bl	800a3d4 <USB_ReadInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b6c:	f040 80a7 	bne.w	8002cbe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f007 fc3e 	bl	800a3fa <USB_ReadDevAllOutEpInterrupt>
 8002b7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b80:	e099      	b.n	8002cb6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 808e 	beq.w	8002caa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f007 fc62 	bl	800a462 <USB_ReadDevOutEPInterrupt>
 8002b9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00c      	beq.n	8002bc4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2301      	movs	r3, #1
 8002bba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fefe 	bl	80039c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00c      	beq.n	8002be8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2308      	movs	r3, #8
 8002bde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002be0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 ffd4 	bl	8003b90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2310      	movs	r3, #16
 8002c02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d030      	beq.n	8002c70 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c16:	2b80      	cmp	r3, #128	@ 0x80
 8002c18:	d109      	bne.n	8002c2e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c2c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	3304      	adds	r3, #4
 8002c42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	78db      	ldrb	r3, [r3, #3]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d108      	bne.n	8002c5e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	4619      	mov	r1, r3
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f00b fadd 	bl	800e218 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c86:	461a      	mov	r2, r3
 8002c88:	2320      	movs	r3, #32
 8002c8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ca8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	3301      	adds	r3, #1
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f47f af62 	bne.w	8002b82 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f007 fb86 	bl	800a3d4 <USB_ReadInterrupts>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cd2:	f040 80db 	bne.w	8002e8c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f007 fba7 	bl	800a42e <USB_ReadDevAllInEpInterrupt>
 8002ce0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002ce6:	e0cd      	b.n	8002e84 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80c2 	beq.w	8002e78 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f007 fbcd 	bl	800a49e <USB_ReadDevInEPInterrupt>
 8002d04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d057      	beq.n	8002dc0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	2201      	movs	r2, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69f9      	ldr	r1, [r7, #28]
 8002d2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d30:	4013      	ands	r3, r2
 8002d32:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d40:	461a      	mov	r2, r3
 8002d42:	2301      	movs	r3, #1
 8002d44:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	799b      	ldrb	r3, [r3, #6]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d132      	bne.n	8002db4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3320      	adds	r3, #32
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4403      	add	r3, r0
 8002d6e:	331c      	adds	r3, #28
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4419      	add	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4403      	add	r3, r0
 8002d82:	3320      	adds	r3, #32
 8002d84:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d113      	bne.n	8002db4 <HAL_PCD_IRQHandler+0x3a2>
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3324      	adds	r3, #36	@ 0x24
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d108      	bne.n	8002db4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002dac:	461a      	mov	r2, r3
 8002dae:	2101      	movs	r1, #1
 8002db0:	f007 fbd6 	bl	800a560 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f00b f9a7 	bl	800e10e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	2308      	movs	r3, #8
 8002dda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002df2:	461a      	mov	r2, r3
 8002df4:	2310      	movs	r3, #16
 8002df6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2340      	movs	r3, #64	@ 0x40
 8002e12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d023      	beq.n	8002e66 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e20:	6a38      	ldr	r0, [r7, #32]
 8002e22:	f006 fbb5 	bl	8009590 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	3310      	adds	r3, #16
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	3304      	adds	r3, #4
 8002e38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	78db      	ldrb	r3, [r3, #3]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d108      	bne.n	8002e54 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2200      	movs	r2, #0
 8002e46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f00b f9f4 	bl	800e23c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e60:	461a      	mov	r2, r3
 8002e62:	2302      	movs	r3, #2
 8002e64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fd17 	bl	80038a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f47f af2e 	bne.w	8002ce8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f007 fa9f 	bl	800a3d4 <USB_ReadInterrupts>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ea0:	d122      	bne.n	8002ee8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d108      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ec8:	2100      	movs	r1, #0
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 ff22 	bl	8003d14 <HAL_PCDEx_LPM_Callback>
 8002ed0:	e002      	b.n	8002ed8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f00b f992 	bl	800e1fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f007 fa71 	bl	800a3d4 <USB_ReadInterrupts>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002efc:	d112      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f00b f94e 	bl	800e1b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f007 fa53 	bl	800a3d4 <USB_ReadInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f38:	d121      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002f48:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d111      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f62:	089b      	lsrs	r3, r3, #2
 8002f64:	f003 020f 	and.w	r2, r3, #15
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f6e:	2101      	movs	r1, #1
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fecf 	bl	8003d14 <HAL_PCDEx_LPM_Callback>
 8002f76:	e002      	b.n	8002f7e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f00b f919 	bl	800e1b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f007 fa26 	bl	800a3d4 <USB_ReadInterrupts>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f92:	f040 80b7 	bne.w	8003104 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2110      	movs	r1, #16
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f006 faed 	bl	8009590 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fba:	e046      	b.n	800304a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fe0:	0151      	lsls	r1, r2, #5
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	440a      	add	r2, r1
 8002fe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002fea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003002:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003014:	0151      	lsls	r1, r2, #5
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	440a      	add	r2, r1
 800301a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800301e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003022:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003034:	0151      	lsls	r1, r2, #5
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	440a      	add	r2, r1
 800303a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800303e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003042:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003046:	3301      	adds	r3, #1
 8003048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	791b      	ldrb	r3, [r3, #4]
 800304e:	461a      	mov	r2, r3
 8003050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003052:	4293      	cmp	r3, r2
 8003054:	d3b2      	bcc.n	8002fbc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003064:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003068:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7bdb      	ldrb	r3, [r3, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003082:	f043 030b 	orr.w	r3, r3, #11
 8003086:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003098:	f043 030b 	orr.w	r3, r3, #11
 800309c:	6453      	str	r3, [r2, #68]	@ 0x44
 800309e:	e015      	b.n	80030cc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ae:	4619      	mov	r1, r3
 80030b0:	f242 032b 	movw	r3, #8235	@ 0x202b
 80030b4:	4313      	orrs	r3, r2
 80030b6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030c6:	f043 030b 	orr.w	r3, r3, #11
 80030ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80030de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030ee:	461a      	mov	r2, r3
 80030f0:	f007 fa36 	bl	800a560 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003102:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f007 f963 	bl	800a3d4 <USB_ReadInterrupts>
 800310e:	4603      	mov	r3, r0
 8003110:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003114:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003118:	d123      	bne.n	8003162 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f007 f9fa 	bl	800a518 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f006 faaa 	bl	8009682 <USB_GetDevSpeed>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681c      	ldr	r4, [r3, #0]
 800313a:	f002 f8b9 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 800313e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003144:	461a      	mov	r2, r3
 8003146:	4620      	mov	r0, r4
 8003148:	f005 ffb4 	bl	80090b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f00b f806 	bl	800e15e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003160:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f007 f934 	bl	800a3d4 <USB_ReadInterrupts>
 800316c:	4603      	mov	r3, r0
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b08      	cmp	r3, #8
 8003174:	d10a      	bne.n	800318c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f00a ffe3 	bl	800e142 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f002 0208 	and.w	r2, r2, #8
 800318a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f007 f91f 	bl	800a3d4 <USB_ReadInterrupts>
 8003196:	4603      	mov	r3, r0
 8003198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319c:	2b80      	cmp	r3, #128	@ 0x80
 800319e:	d123      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031ac:	2301      	movs	r3, #1
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b0:	e014      	b.n	80031dc <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d105      	bne.n	80031d6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	4619      	mov	r1, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fb0a 	bl	80037ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	3301      	adds	r3, #1
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	791b      	ldrb	r3, [r3, #4]
 80031e0:	461a      	mov	r2, r3
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d3e4      	bcc.n	80031b2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f007 f8f1 	bl	800a3d4 <USB_ReadInterrupts>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031fc:	d13c      	bne.n	8003278 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031fe:	2301      	movs	r3, #1
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
 8003202:	e02b      	b.n	800325c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3318      	adds	r3, #24
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d115      	bne.n	8003256 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800322a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800322c:	2b00      	cmp	r3, #0
 800322e:	da12      	bge.n	8003256 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	3317      	adds	r3, #23
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800324c:	b2db      	uxtb	r3, r3
 800324e:	4619      	mov	r1, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 faca 	bl	80037ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	3301      	adds	r3, #1
 800325a:	627b      	str	r3, [r7, #36]	@ 0x24
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	791b      	ldrb	r3, [r3, #4]
 8003260:	461a      	mov	r2, r3
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	4293      	cmp	r3, r2
 8003266:	d3cd      	bcc.n	8003204 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003276:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f007 f8a9 	bl	800a3d4 <USB_ReadInterrupts>
 8003282:	4603      	mov	r3, r0
 8003284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003288:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800328c:	d156      	bne.n	800333c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800328e:	2301      	movs	r3, #1
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
 8003292:	e045      	b.n	8003320 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d12e      	bne.n	800331a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032be:	2b00      	cmp	r3, #0
 80032c0:	da2b      	bge.n	800331a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	0c1a      	lsrs	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80032cc:	4053      	eors	r3, r2
 80032ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d121      	bne.n	800331a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003316:	6053      	str	r3, [r2, #4]
            break;
 8003318:	e008      	b.n	800332c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	3301      	adds	r3, #1
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	791b      	ldrb	r3, [r3, #4]
 8003324:	461a      	mov	r2, r3
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	4293      	cmp	r3, r2
 800332a:	d3b3      	bcc.n	8003294 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800333a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f007 f847 	bl	800a3d4 <USB_ReadInterrupts>
 8003346:	4603      	mov	r3, r0
 8003348:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003350:	d10a      	bne.n	8003368 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f00a ff84 	bl	800e260 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f007 f831 	bl	800a3d4 <USB_ReadInterrupts>
 8003372:	4603      	mov	r3, r0
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d115      	bne.n	80033a8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f00a ff74 	bl	800e27c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6859      	ldr	r1, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	e000      	b.n	80033a8 <HAL_PCD_IRQHandler+0x996>
      return;
 80033a6:	bf00      	nop
    }
  }
}
 80033a8:	3734      	adds	r7, #52	@ 0x34
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd90      	pop	{r4, r7, pc}

080033ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	460b      	mov	r3, r1
 80033b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_PCD_SetAddress+0x1a>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e012      	b.n	80033ee <HAL_PCD_SetAddress+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f006 ff90 	bl	800a304 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	4608      	mov	r0, r1
 8003400:	4611      	mov	r1, r2
 8003402:	461a      	mov	r2, r3
 8003404:	4603      	mov	r3, r0
 8003406:	70fb      	strb	r3, [r7, #3]
 8003408:	460b      	mov	r3, r1
 800340a:	803b      	strh	r3, [r7, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003418:	2b00      	cmp	r3, #0
 800341a:	da0f      	bge.n	800343c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 020f 	and.w	r2, r3, #15
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	3310      	adds	r3, #16
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4413      	add	r3, r2
 8003430:	3304      	adds	r3, #4
 8003432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2201      	movs	r2, #1
 8003438:	705a      	strb	r2, [r3, #1]
 800343a:	e00f      	b.n	800345c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	f003 020f 	and.w	r2, r3, #15
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	3304      	adds	r3, #4
 8003454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003468:	883b      	ldrh	r3, [r7, #0]
 800346a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	78ba      	ldrb	r2, [r7, #2]
 8003476:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	785b      	ldrb	r3, [r3, #1]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800348a:	78bb      	ldrb	r3, [r7, #2]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d102      	bne.n	8003496 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_PCD_EP_Open+0xae>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e00e      	b.n	80034c2 <HAL_PCD_EP_Open+0xcc>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68f9      	ldr	r1, [r7, #12]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f006 f90a 	bl	80096cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80034c0:	7afb      	ldrb	r3, [r7, #11]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da0f      	bge.n	80034fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	f003 020f 	and.w	r2, r3, #15
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	3310      	adds	r3, #16
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	3304      	adds	r3, #4
 80034f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	705a      	strb	r2, [r3, #1]
 80034fc:	e00f      	b.n	800351e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 020f 	and.w	r2, r3, #15
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	b2da      	uxtb	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_PCD_EP_Close+0x6e>
 8003534:	2302      	movs	r3, #2
 8003536:	e00e      	b.n	8003556 <HAL_PCD_EP_Close+0x8c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68f9      	ldr	r1, [r7, #12]
 8003546:	4618      	mov	r0, r3
 8003548:	f006 f948 	bl	80097dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	460b      	mov	r3, r1
 800356c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800356e:	7afb      	ldrb	r3, [r7, #11]
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	3304      	adds	r3, #4
 8003586:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035a0:	7afb      	ldrb	r3, [r7, #11]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	799b      	ldrb	r3, [r3, #6]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d102      	bne.n	80035ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	799b      	ldrb	r3, [r3, #6]
 80035c2:	461a      	mov	r2, r3
 80035c4:	6979      	ldr	r1, [r7, #20]
 80035c6:	f006 f9e5 	bl	8009994 <USB_EPStartXfer>

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	f003 020f 	and.w	r2, r3, #15
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	460b      	mov	r3, r1
 8003612:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003614:	7afb      	ldrb	r3, [r7, #11]
 8003616:	f003 020f 	and.w	r2, r3, #15
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	3310      	adds	r3, #16
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	3304      	adds	r3, #4
 800362a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2201      	movs	r2, #1
 8003642:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003644:	7afb      	ldrb	r3, [r7, #11]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	b2da      	uxtb	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	799b      	ldrb	r3, [r3, #6]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d102      	bne.n	800365e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	799b      	ldrb	r3, [r3, #6]
 8003666:	461a      	mov	r2, r3
 8003668:	6979      	ldr	r1, [r7, #20]
 800366a:	f006 f993 	bl	8009994 <USB_EPStartXfer>

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	7912      	ldrb	r2, [r2, #4]
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e04f      	b.n	8003736 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800369a:	2b00      	cmp	r3, #0
 800369c:	da0f      	bge.n	80036be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	f003 020f 	and.w	r2, r3, #15
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	3310      	adds	r3, #16
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4413      	add	r3, r2
 80036b2:	3304      	adds	r3, #4
 80036b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	705a      	strb	r2, [r3, #1]
 80036bc:	e00d      	b.n	80036da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4413      	add	r3, r2
 80036d0:	3304      	adds	r3, #4
 80036d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_PCD_EP_SetStall+0x82>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e01d      	b.n	8003736 <HAL_PCD_EP_SetStall+0xbe>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68f9      	ldr	r1, [r7, #12]
 8003708:	4618      	mov	r0, r3
 800370a:	f006 fd27 	bl	800a15c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	2b00      	cmp	r3, #0
 8003716:	d109      	bne.n	800372c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7999      	ldrb	r1, [r3, #6]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003726:	461a      	mov	r2, r3
 8003728:	f006 ff1a 	bl	800a560 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	7912      	ldrb	r2, [r2, #4]
 8003754:	4293      	cmp	r3, r2
 8003756:	d901      	bls.n	800375c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e042      	b.n	80037e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800375c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003760:	2b00      	cmp	r3, #0
 8003762:	da0f      	bge.n	8003784 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	f003 020f 	and.w	r2, r3, #15
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	3310      	adds	r3, #16
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	3304      	adds	r3, #4
 800377a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	705a      	strb	r2, [r3, #1]
 8003782:	e00f      	b.n	80037a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	f003 020f 	and.w	r2, r3, #15
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	3304      	adds	r3, #4
 800379c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_PCD_EP_ClrStall+0x86>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e00e      	b.n	80037e2 <HAL_PCD_EP_ClrStall+0xa4>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68f9      	ldr	r1, [r7, #12]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f006 fd30 	bl	800a238 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da0c      	bge.n	8003818 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	f003 020f 	and.w	r2, r3, #15
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	3310      	adds	r3, #16
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e00c      	b.n	8003832 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	f003 020f 	and.w	r2, r3, #15
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	3304      	adds	r3, #4
 8003830:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68f9      	ldr	r1, [r7, #12]
 8003838:	4618      	mov	r0, r3
 800383a:	f006 fb4f 	bl	8009edc <USB_EPStopXfer>
 800383e:	4603      	mov	r3, r0
 8003840:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003842:	7afb      	ldrb	r3, [r7, #11]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_PCD_EP_Flush+0x1a>
 8003862:	2302      	movs	r3, #2
 8003864:	e01b      	b.n	800389e <HAL_PCD_EP_Flush+0x52>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 800386e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003872:	2b00      	cmp	r3, #0
 8003874:	da09      	bge.n	800388a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f005 fe84 	bl	8009590 <USB_FlushTxFifo>
 8003888:	e004      	b.n	8003894 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f005 feb0 	bl	80095f4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08a      	sub	sp, #40	@ 0x28
 80038aa:	af02      	add	r7, sp, #8
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	3310      	adds	r3, #16
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	3304      	adds	r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d901      	bls.n	80038de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e06b      	b.n	80039b6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d902      	bls.n	80038fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3303      	adds	r3, #3
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003902:	e02a      	b.n	800395a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	429a      	cmp	r2, r3
 8003918:	d902      	bls.n	8003920 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	3303      	adds	r3, #3
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	68d9      	ldr	r1, [r3, #12]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	4603      	mov	r3, r0
 800393c:	6978      	ldr	r0, [r7, #20]
 800393e:	f006 fb77 	bl	800a030 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	441a      	add	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	441a      	add	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	429a      	cmp	r2, r3
 800396e:	d809      	bhi.n	8003984 <PCD_WriteEmptyTxFifo+0xde>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003978:	429a      	cmp	r2, r3
 800397a:	d203      	bcs.n	8003984 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1bf      	bne.n	8003904 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	429a      	cmp	r2, r3
 800398e:	d811      	bhi.n	80039b4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	2201      	movs	r2, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	6939      	ldr	r1, [r7, #16]
 80039ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039b0:	4013      	ands	r3, r2
 80039b2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	333c      	adds	r3, #60	@ 0x3c
 80039d8:	3304      	adds	r3, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	799b      	ldrb	r3, [r3, #6]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d17b      	bne.n	8003aee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d015      	beq.n	8003a2c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	4a61      	ldr	r2, [pc, #388]	@ (8003b88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	f240 80b9 	bls.w	8003b7c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80b3 	beq.w	8003b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a22:	461a      	mov	r2, r3
 8003a24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a28:	6093      	str	r3, [r2, #8]
 8003a2a:	e0a7      	b.n	8003b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a42:	461a      	mov	r2, r3
 8003a44:	2320      	movs	r3, #32
 8003a46:	6093      	str	r3, [r2, #8]
 8003a48:	e098      	b.n	8003b7c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 8093 	bne.w	8003b7c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	4a4b      	ldr	r2, [pc, #300]	@ (8003b88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d90f      	bls.n	8003a7e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a74:	461a      	mov	r2, r3
 8003a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a7a:	6093      	str	r3, [r2, #8]
 8003a7c:	e07e      	b.n	8003b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	4413      	add	r3, r2
 8003a90:	3304      	adds	r3, #4
 8003a92:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a1a      	ldr	r2, [r3, #32]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	0159      	lsls	r1, r3, #5
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aaa:	1ad2      	subs	r2, r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d114      	bne.n	8003ae0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2101      	movs	r1, #1
 8003acc:	f006 fd48 	bl	800a560 <USB_EP0_OutStart>
 8003ad0:	e006      	b.n	8003ae0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	441a      	add	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f00a faf6 	bl	800e0d8 <HAL_PCD_DataOutStageCallback>
 8003aec:	e046      	b.n	8003b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	4a26      	ldr	r2, [pc, #152]	@ (8003b8c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d124      	bne.n	8003b40 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b12:	6093      	str	r3, [r2, #8]
 8003b14:	e032      	b.n	8003b7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2320      	movs	r3, #32
 8003b30:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	4619      	mov	r1, r3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f00a facd 	bl	800e0d8 <HAL_PCD_DataOutStageCallback>
 8003b3e:	e01d      	b.n	8003b7c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d114      	bne.n	8003b70 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d108      	bne.n	8003b70 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	f006 fcf8 	bl	800a560 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	4619      	mov	r1, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f00a faae 	bl	800e0d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	4f54300a 	.word	0x4f54300a
 8003b8c:	4f54310a 	.word	0x4f54310a

08003b90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	333c      	adds	r3, #60	@ 0x3c
 8003ba8:	3304      	adds	r3, #4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a15      	ldr	r2, [pc, #84]	@ (8003c18 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d90e      	bls.n	8003be4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003be2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f00a fa65 	bl	800e0b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a0a      	ldr	r2, [pc, #40]	@ (8003c18 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d90c      	bls.n	8003c0c <PCD_EP_OutSetupPacket_int+0x7c>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	799b      	ldrb	r3, [r3, #6]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d108      	bne.n	8003c0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c04:	461a      	mov	r2, r3
 8003c06:	2101      	movs	r1, #1
 8003c08:	f006 fcaa 	bl	800a560 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	4f54300a 	.word	0x4f54300a

08003c1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	70fb      	strb	r3, [r7, #3]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c3a:	883b      	ldrh	r3, [r7, #0]
 8003c3c:	0419      	lsls	r1, r3, #16
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c48:	e028      	b.n	8003c9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	4413      	add	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	e00d      	b.n	8003c7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	3340      	adds	r3, #64	@ 0x40
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	4413      	add	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	3301      	adds	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
 8003c7a:	7bfa      	ldrb	r2, [r7, #15]
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d3ec      	bcc.n	8003c5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c84:	883b      	ldrh	r3, [r7, #0]
 8003c86:	0418      	lsls	r0, r3, #16
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6819      	ldr	r1, [r3, #0]
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	4302      	orrs	r2, r0
 8003c94:	3340      	adds	r3, #64	@ 0x40
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	887a      	ldrh	r2, [r7, #2]
 8003cbc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cfa:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <HAL_PCDEx_ActivateLPM+0x44>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	10000003 	.word	0x10000003

08003d14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003d34:	4b19      	ldr	r3, [pc, #100]	@ (8003d9c <HAL_PWREx_ConfigSupply+0x70>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d00a      	beq.n	8003d56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d40:	4b16      	ldr	r3, [pc, #88]	@ (8003d9c <HAL_PWREx_ConfigSupply+0x70>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d001      	beq.n	8003d52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e01f      	b.n	8003d92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e01d      	b.n	8003d92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d56:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <HAL_PWREx_ConfigSupply+0x70>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f023 0207 	bic.w	r2, r3, #7
 8003d5e:	490f      	ldr	r1, [pc, #60]	@ (8003d9c <HAL_PWREx_ConfigSupply+0x70>)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d66:	f7fd fabf 	bl	80012e8 <HAL_GetTick>
 8003d6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d6c:	e009      	b.n	8003d82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d6e:	f7fd fabb 	bl	80012e8 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d7c:	d901      	bls.n	8003d82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e007      	b.n	8003d92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d82:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_PWREx_ConfigSupply+0x70>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d8e:	d1ee      	bne.n	8003d6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	58024800 	.word	0x58024800

08003da0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003da4:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4a04      	ldr	r2, [pc, #16]	@ (8003dbc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003daa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dae:	60d3      	str	r3, [r2, #12]
}
 8003db0:	bf00      	nop
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	58024800 	.word	0x58024800

08003dc0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003dc8:	f7fd fa8e 	bl	80012e8 <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e05f      	b.n	8003e98 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d107      	bne.n	8003df4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7fc ff21 	bl	8000c2c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003dea:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa5c 	bl	80042ac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	021a      	lsls	r2, r3, #8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	2120      	movs	r1, #32
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fa87 	bl	800432e <QSPI_WaitFlagStateUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003e24:	7afb      	ldrb	r3, [r7, #11]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d135      	bne.n	8003e96 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <HAL_QSPI_Init+0xe0>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6852      	ldr	r2, [r2, #4]
 8003e38:	0611      	lsls	r1, r2, #24
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68d2      	ldr	r2, [r2, #12]
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	69d2      	ldr	r2, [r2, #28]
 8003e44:	4311      	orrs	r1, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6a12      	ldr	r2, [r2, #32]
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ea4 <HAL_QSPI_Init+0xe4>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6912      	ldr	r2, [r2, #16]
 8003e62:	0411      	lsls	r1, r2, #16
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6952      	ldr	r2, [r2, #20]
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6992      	ldr	r2, [r2, #24]
 8003e6e:	4311      	orrs	r1, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003e96:	7afb      	ldrb	r3, [r7, #11]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	00ffff2f 	.word	0x00ffff2f
 8003ea4:	ffe0f8fe 	.word	0xffe0f8fe

08003ea8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e012      	b.n	8003ee0 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fc ff80 	bl	8000dd0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d064      	beq.n	8003fd4 <HAL_QSPI_IRQHandler+0xec>
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d05f      	beq.n	8003fd4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3320      	adds	r3, #32
 8003f1a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b12      	cmp	r3, #18
 8003f26:	d125      	bne.n	8003f74 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8003f28:	e01c      	b.n	8003f64 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00f      	beq.n	8003f52 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	625a      	str	r2, [r3, #36]	@ 0x24
          hqspi->TxXferCount--;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f50:	e008      	b.n	8003f64 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f60:	601a      	str	r2, [r3, #0]
          break;
 8003f62:	e033      	b.n	8003fcc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1db      	bne.n	8003f2a <HAL_QSPI_IRQHandler+0x42>
 8003f72:	e02b      	b.n	8003fcc <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b22      	cmp	r3, #34	@ 0x22
 8003f7e:	d125      	bne.n	8003fcc <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8003f80:	e01d      	b.n	8003fbe <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d010      	beq.n	8003fac <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hqspi->RxXferCount--;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa4:	1e5a      	subs	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003faa:	e008      	b.n	8003fbe <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fba:	601a      	str	r2, [r3, #0]
          break;
 8003fbc:	e006      	b.n	8003fcc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1da      	bne.n	8003f82 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f959 	bl	8004284 <HAL_QSPI_FifoThresholdCallback>
 8003fd2:	e13c      	b.n	800424e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 80b0 	beq.w	8004140 <HAL_QSPI_IRQHandler+0x258>
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80aa 	beq.w	8004140 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8004002:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b12      	cmp	r3, #18
 800400e:	d120      	bne.n	8004052 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d011      	beq.n	8004042 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0204 	bic.w	r2, r2, #4
 800402c:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fc fd36 	bl	8000abc <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004050:	e0fa      	b.n	8004248 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b22      	cmp	r3, #34	@ 0x22
 800405c:	d143      	bne.n	80040e6 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d012      	beq.n	8004092 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0204 	bic.w	r2, r2, #4
 800407a:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	60da      	str	r2, [r3, #12]
 8004090:	e021      	b.n	80040d6 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3320      	adds	r3, #32
 8004098:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800409a:	e013      	b.n	80040c4 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d017      	beq.n	80040d4 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	7812      	ldrb	r2, [r2, #0]
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	631a      	str	r2, [r3, #48]	@ 0x30
            hqspi->RxXferCount--;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040be:	1e5a      	subs	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	639a      	str	r2, [r3, #56]	@ 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e4      	bne.n	800409c <HAL_QSPI_IRQHandler+0x1b4>
 80040d2:	e000      	b.n	80040d6 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80040d4:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fc fcd8 	bl	8000a94 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80040e4:	e0b0      	b.n	8004248 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d107      	bne.n	8004102 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fc fcb6 	bl	8000a6c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004100:	e0a2      	b.n	8004248 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b08      	cmp	r3, #8
 800410c:	f040 809c 	bne.w	8004248 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800411e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412c:	2b00      	cmp	r3, #0
 800412e:	d103      	bne.n	8004138 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f89d 	bl	8004270 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004136:	e087      	b.n	8004248 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f88f 	bl	800425c <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800413e:	e083      	b.n	8004248 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01f      	beq.n	800418a <HAL_QSPI_IRQHandler+0x2a2>
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01a      	beq.n	800418a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2208      	movs	r2, #8
 800415a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8004178:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fc fcae 	bl	8000ae4 <HAL_QSPI_StatusMatchCallback>
 8004188:	e061      	b.n	800424e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d047      	beq.n	8004224 <HAL_QSPI_IRQHandler+0x33c>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d042      	beq.n	8004224 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2201      	movs	r2, #1
 80041a4:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80041b4:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ba:	f043 0202 	orr.w	r2, r3, #2
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	645a      	str	r2, [r3, #68]	@ 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d021      	beq.n	8004214 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004258 <HAL_QSPI_IRQHandler+0x370>)
 80041e6:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fe faa8 	bl	8002742 <HAL_MDMA_Abort_IT>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d029      	beq.n	800424c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fc:	f043 0204 	orr.w	r2, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f825 	bl	800425c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004212:	e01b      	b.n	800424c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f81d 	bl	800425c <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8004222:	e013      	b.n	800424c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00f      	beq.n	800424e <HAL_QSPI_IRQHandler+0x366>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2210      	movs	r2, #16
 800423e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f829 	bl	8004298 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8004246:	e002      	b.n	800424e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8004248:	bf00      	nop
 800424a:	e000      	b.n	800424e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800424c:	bf00      	nop
}
 800424e:	bf00      	nop
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	080042c9 	.word	0x080042c9

0800425c <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	639a      	str	r2, [r3, #56]	@ 0x38
  hqspi->TxXferCount = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d114      	bne.n	8004318 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2202      	movs	r2, #2
 80042f4:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004304:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0202 	orr.w	r2, r2, #2
 8004314:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8004316:	e006      	b.n	8004326 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f7ff ff9b 	bl	800425c <HAL_QSPI_ErrorCallback>
}
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800433e:	e01a      	b.n	8004376 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d016      	beq.n	8004376 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004348:	f7fc ffce 	bl	80012e8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2204      	movs	r2, #4
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436a:	f043 0201 	orr.w	r2, r3, #1
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e00e      	b.n	8004394 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	429a      	cmp	r2, r3
 8004390:	d1d6      	bne.n	8004340 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08c      	sub	sp, #48	@ 0x30
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f000 bc48 	b.w	8004c40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8088 	beq.w	80044ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043be:	4b99      	ldr	r3, [pc, #612]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043c8:	4b96      	ldr	r3, [pc, #600]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 80043ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80043ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d007      	beq.n	80043e4 <HAL_RCC_OscConfig+0x48>
 80043d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d6:	2b18      	cmp	r3, #24
 80043d8:	d111      	bne.n	80043fe <HAL_RCC_OscConfig+0x62>
 80043da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d10c      	bne.n	80043fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d06d      	beq.n	80044cc <HAL_RCC_OscConfig+0x130>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d169      	bne.n	80044cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f000 bc21 	b.w	8004c40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004406:	d106      	bne.n	8004416 <HAL_RCC_OscConfig+0x7a>
 8004408:	4b86      	ldr	r3, [pc, #536]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a85      	ldr	r2, [pc, #532]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	e02e      	b.n	8004474 <HAL_RCC_OscConfig+0xd8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0x9c>
 800441e:	4b81      	ldr	r3, [pc, #516]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a80      	ldr	r2, [pc, #512]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b7e      	ldr	r3, [pc, #504]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a7d      	ldr	r2, [pc, #500]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004430:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e01d      	b.n	8004474 <HAL_RCC_OscConfig+0xd8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004440:	d10c      	bne.n	800445c <HAL_RCC_OscConfig+0xc0>
 8004442:	4b78      	ldr	r3, [pc, #480]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a77      	ldr	r2, [pc, #476]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	4b75      	ldr	r3, [pc, #468]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a74      	ldr	r2, [pc, #464]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e00b      	b.n	8004474 <HAL_RCC_OscConfig+0xd8>
 800445c:	4b71      	ldr	r3, [pc, #452]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a70      	ldr	r2, [pc, #448]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b6e      	ldr	r3, [pc, #440]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a6d      	ldr	r2, [pc, #436]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 800446e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fc ff34 	bl	80012e8 <HAL_GetTick>
 8004480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004484:	f7fc ff30 	bl	80012e8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	@ 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e3d4      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004496:	4b63      	ldr	r3, [pc, #396]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0xe8>
 80044a2:	e014      	b.n	80044ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fc ff20 	bl	80012e8 <HAL_GetTick>
 80044a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fc ff1c 	bl	80012e8 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	@ 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e3c0      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044be:	4b59      	ldr	r3, [pc, #356]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x110>
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80ca 	beq.w	8004670 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044dc:	4b51      	ldr	r3, [pc, #324]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 80044e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <HAL_RCC_OscConfig+0x166>
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	2b18      	cmp	r3, #24
 80044f6:	d156      	bne.n	80045a6 <HAL_RCC_OscConfig+0x20a>
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d151      	bne.n	80045a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004502:	4b48      	ldr	r3, [pc, #288]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_RCC_OscConfig+0x17e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e392      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800451a:	4b42      	ldr	r3, [pc, #264]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 0219 	bic.w	r2, r3, #25
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	493f      	ldr	r1, [pc, #252]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fc fedc 	bl	80012e8 <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004534:	f7fc fed8 	bl	80012e8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e37c      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004546:	4b37      	ldr	r3, [pc, #220]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004552:	f7fc fef9 	bl	8001348 <HAL_GetREVID>
 8004556:	4603      	mov	r3, r0
 8004558:	f241 0203 	movw	r2, #4099	@ 0x1003
 800455c:	4293      	cmp	r3, r2
 800455e:	d817      	bhi.n	8004590 <HAL_RCC_OscConfig+0x1f4>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b40      	cmp	r3, #64	@ 0x40
 8004566:	d108      	bne.n	800457a <HAL_RCC_OscConfig+0x1de>
 8004568:	4b2e      	ldr	r3, [pc, #184]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004570:	4a2c      	ldr	r2, [pc, #176]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004576:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004578:	e07a      	b.n	8004670 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457a:	4b2a      	ldr	r3, [pc, #168]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	031b      	lsls	r3, r3, #12
 8004588:	4926      	ldr	r1, [pc, #152]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 800458a:	4313      	orrs	r3, r2
 800458c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800458e:	e06f      	b.n	8004670 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	4b24      	ldr	r3, [pc, #144]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	4921      	ldr	r1, [pc, #132]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a4:	e064      	b.n	8004670 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d047      	beq.n	800463e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0219 	bic.w	r2, r3, #25
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	491a      	ldr	r1, [pc, #104]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fc fe92 	bl	80012e8 <HAL_GetTick>
 80045c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c8:	f7fc fe8e 	bl	80012e8 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e332      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045da:	4b12      	ldr	r3, [pc, #72]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e6:	f7fc feaf 	bl	8001348 <HAL_GetREVID>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d819      	bhi.n	8004628 <HAL_RCC_OscConfig+0x28c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b40      	cmp	r3, #64	@ 0x40
 80045fa:	d108      	bne.n	800460e <HAL_RCC_OscConfig+0x272>
 80045fc:	4b09      	ldr	r3, [pc, #36]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004604:	4a07      	ldr	r2, [pc, #28]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800460a:	6053      	str	r3, [r2, #4]
 800460c:	e030      	b.n	8004670 <HAL_RCC_OscConfig+0x2d4>
 800460e:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	031b      	lsls	r3, r3, #12
 800461c:	4901      	ldr	r1, [pc, #4]	@ (8004624 <HAL_RCC_OscConfig+0x288>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
 8004622:	e025      	b.n	8004670 <HAL_RCC_OscConfig+0x2d4>
 8004624:	58024400 	.word	0x58024400
 8004628:	4b9a      	ldr	r3, [pc, #616]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	061b      	lsls	r3, r3, #24
 8004636:	4997      	ldr	r1, [pc, #604]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004638:	4313      	orrs	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
 800463c:	e018      	b.n	8004670 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463e:	4b95      	ldr	r3, [pc, #596]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a94      	ldr	r2, [pc, #592]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fc fe4d 	bl	80012e8 <HAL_GetTick>
 800464e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004652:	f7fc fe49 	bl	80012e8 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e2ed      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004664:	4b8b      	ldr	r3, [pc, #556]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f0      	bne.n	8004652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80a9 	beq.w	80047d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800467e:	4b85      	ldr	r3, [pc, #532]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004686:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004688:	4b82      	ldr	r3, [pc, #520]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 800468a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d007      	beq.n	80046a4 <HAL_RCC_OscConfig+0x308>
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b18      	cmp	r3, #24
 8004698:	d13a      	bne.n	8004710 <HAL_RCC_OscConfig+0x374>
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d135      	bne.n	8004710 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046a4:	4b7b      	ldr	r3, [pc, #492]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_RCC_OscConfig+0x320>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	2b80      	cmp	r3, #128	@ 0x80
 80046b6:	d001      	beq.n	80046bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e2c1      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046bc:	f7fc fe44 	bl	8001348 <HAL_GetREVID>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d817      	bhi.n	80046fa <HAL_RCC_OscConfig+0x35e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d108      	bne.n	80046e4 <HAL_RCC_OscConfig+0x348>
 80046d2:	4b70      	ldr	r3, [pc, #448]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80046da:	4a6e      	ldr	r2, [pc, #440]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 80046dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046e2:	e075      	b.n	80047d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	069b      	lsls	r3, r3, #26
 80046f2:	4968      	ldr	r1, [pc, #416]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046f8:	e06a      	b.n	80047d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046fa:	4b66      	ldr	r3, [pc, #408]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	061b      	lsls	r3, r3, #24
 8004708:	4962      	ldr	r1, [pc, #392]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 800470a:	4313      	orrs	r3, r2
 800470c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800470e:	e05f      	b.n	80047d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d042      	beq.n	800479e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004718:	4b5e      	ldr	r3, [pc, #376]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5d      	ldr	r2, [pc, #372]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 800471e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fc fde0 	bl	80012e8 <HAL_GetTick>
 8004728:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800472c:	f7fc fddc 	bl	80012e8 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e280      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800473e:	4b55      	ldr	r3, [pc, #340]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800474a:	f7fc fdfd 	bl	8001348 <HAL_GetREVID>
 800474e:	4603      	mov	r3, r0
 8004750:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004754:	4293      	cmp	r3, r2
 8004756:	d817      	bhi.n	8004788 <HAL_RCC_OscConfig+0x3ec>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	2b20      	cmp	r3, #32
 800475e:	d108      	bne.n	8004772 <HAL_RCC_OscConfig+0x3d6>
 8004760:	4b4c      	ldr	r3, [pc, #304]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004768:	4a4a      	ldr	r2, [pc, #296]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 800476a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800476e:	6053      	str	r3, [r2, #4]
 8004770:	e02e      	b.n	80047d0 <HAL_RCC_OscConfig+0x434>
 8004772:	4b48      	ldr	r3, [pc, #288]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	069b      	lsls	r3, r3, #26
 8004780:	4944      	ldr	r1, [pc, #272]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004782:	4313      	orrs	r3, r2
 8004784:	604b      	str	r3, [r1, #4]
 8004786:	e023      	b.n	80047d0 <HAL_RCC_OscConfig+0x434>
 8004788:	4b42      	ldr	r3, [pc, #264]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	493f      	ldr	r1, [pc, #252]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004798:	4313      	orrs	r3, r2
 800479a:	60cb      	str	r3, [r1, #12]
 800479c:	e018      	b.n	80047d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800479e:	4b3d      	ldr	r3, [pc, #244]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a3c      	ldr	r2, [pc, #240]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 80047a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fc fd9d 	bl	80012e8 <HAL_GetTick>
 80047ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047b2:	f7fc fd99 	bl	80012e8 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e23d      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047c4:	4b33      	ldr	r3, [pc, #204]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f0      	bne.n	80047b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d036      	beq.n	800484a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d019      	beq.n	8004818 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 80047e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fc fd7a 	bl	80012e8 <HAL_GetTick>
 80047f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047f8:	f7fc fd76 	bl	80012e8 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e21a      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800480a:	4b22      	ldr	r3, [pc, #136]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 800480c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x45c>
 8004816:	e018      	b.n	800484a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004818:	4b1e      	ldr	r3, [pc, #120]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 800481a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800481c:	4a1d      	ldr	r2, [pc, #116]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fc fd60 	bl	80012e8 <HAL_GetTick>
 8004828:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800482c:	f7fc fd5c 	bl	80012e8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e200      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800483e:	4b15      	ldr	r3, [pc, #84]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d039      	beq.n	80048ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01c      	beq.n	8004898 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800485e:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a0c      	ldr	r2, [pc, #48]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004864:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004868:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800486a:	f7fc fd3d 	bl	80012e8 <HAL_GetTick>
 800486e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004872:	f7fc fd39 	bl	80012e8 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e1dd      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004884:	4b03      	ldr	r3, [pc, #12]	@ (8004894 <HAL_RCC_OscConfig+0x4f8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x4d6>
 8004890:	e01b      	b.n	80048ca <HAL_RCC_OscConfig+0x52e>
 8004892:	bf00      	nop
 8004894:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004898:	4b9b      	ldr	r3, [pc, #620]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a9a      	ldr	r2, [pc, #616]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 800489e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048a4:	f7fc fd20 	bl	80012e8 <HAL_GetTick>
 80048a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ac:	f7fc fd1c 	bl	80012e8 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e1c0      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048be:	4b92      	ldr	r3, [pc, #584]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8081 	beq.w	80049da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048d8:	4b8c      	ldr	r3, [pc, #560]	@ (8004b0c <HAL_RCC_OscConfig+0x770>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a8b      	ldr	r2, [pc, #556]	@ (8004b0c <HAL_RCC_OscConfig+0x770>)
 80048de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048e4:	f7fc fd00 	bl	80012e8 <HAL_GetTick>
 80048e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ec:	f7fc fcfc 	bl	80012e8 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	@ 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e1a0      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048fe:	4b83      	ldr	r3, [pc, #524]	@ (8004b0c <HAL_RCC_OscConfig+0x770>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d106      	bne.n	8004920 <HAL_RCC_OscConfig+0x584>
 8004912:	4b7d      	ldr	r3, [pc, #500]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004916:	4a7c      	ldr	r2, [pc, #496]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	6713      	str	r3, [r2, #112]	@ 0x70
 800491e:	e02d      	b.n	800497c <HAL_RCC_OscConfig+0x5e0>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10c      	bne.n	8004942 <HAL_RCC_OscConfig+0x5a6>
 8004928:	4b77      	ldr	r3, [pc, #476]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492c:	4a76      	ldr	r2, [pc, #472]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	6713      	str	r3, [r2, #112]	@ 0x70
 8004934:	4b74      	ldr	r3, [pc, #464]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004938:	4a73      	ldr	r2, [pc, #460]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 800493a:	f023 0304 	bic.w	r3, r3, #4
 800493e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004940:	e01c      	b.n	800497c <HAL_RCC_OscConfig+0x5e0>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2b05      	cmp	r3, #5
 8004948:	d10c      	bne.n	8004964 <HAL_RCC_OscConfig+0x5c8>
 800494a:	4b6f      	ldr	r3, [pc, #444]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494e:	4a6e      	ldr	r2, [pc, #440]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004950:	f043 0304 	orr.w	r3, r3, #4
 8004954:	6713      	str	r3, [r2, #112]	@ 0x70
 8004956:	4b6c      	ldr	r3, [pc, #432]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495a:	4a6b      	ldr	r2, [pc, #428]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	6713      	str	r3, [r2, #112]	@ 0x70
 8004962:	e00b      	b.n	800497c <HAL_RCC_OscConfig+0x5e0>
 8004964:	4b68      	ldr	r3, [pc, #416]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004968:	4a67      	ldr	r2, [pc, #412]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004970:	4b65      	ldr	r3, [pc, #404]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004974:	4a64      	ldr	r2, [pc, #400]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004976:	f023 0304 	bic.w	r3, r3, #4
 800497a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d015      	beq.n	80049b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fc fcb0 	bl	80012e8 <HAL_GetTick>
 8004988:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498c:	f7fc fcac 	bl	80012e8 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e14e      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049a2:	4b59      	ldr	r3, [pc, #356]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ee      	beq.n	800498c <HAL_RCC_OscConfig+0x5f0>
 80049ae:	e014      	b.n	80049da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b0:	f7fc fc9a 	bl	80012e8 <HAL_GetTick>
 80049b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049b6:	e00a      	b.n	80049ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b8:	f7fc fc96 	bl	80012e8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e138      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1ee      	bne.n	80049b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 812d 	beq.w	8004c3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80049e4:	4b48      	ldr	r3, [pc, #288]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ec:	2b18      	cmp	r3, #24
 80049ee:	f000 80bd 	beq.w	8004b6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	f040 809e 	bne.w	8004b38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fc:	4b42      	ldr	r3, [pc, #264]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a41      	ldr	r2, [pc, #260]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a08:	f7fc fc6e 	bl	80012e8 <HAL_GetTick>
 8004a0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fc fc6a 	bl	80012e8 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e10e      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a22:	4b39      	ldr	r3, [pc, #228]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a2e:	4b36      	ldr	r3, [pc, #216]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004a30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a32:	4b37      	ldr	r3, [pc, #220]	@ (8004b10 <HAL_RCC_OscConfig+0x774>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a3e:	0112      	lsls	r2, r2, #4
 8004a40:	430a      	orrs	r2, r1
 8004a42:	4931      	ldr	r1, [pc, #196]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a56:	3b01      	subs	r3, #1
 8004a58:	025b      	lsls	r3, r3, #9
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	3b01      	subs	r3, #1
 8004a64:	041b      	lsls	r3, r3, #16
 8004a66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a70:	3b01      	subs	r3, #1
 8004a72:	061b      	lsls	r3, r3, #24
 8004a74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a78:	4923      	ldr	r1, [pc, #140]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004a7e:	4b22      	ldr	r3, [pc, #136]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a82:	4a21      	ldr	r2, [pc, #132]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004a8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a8e:	4b21      	ldr	r3, [pc, #132]	@ (8004b14 <HAL_RCC_OscConfig+0x778>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a96:	00d2      	lsls	r2, r2, #3
 8004a98:	491b      	ldr	r1, [pc, #108]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa2:	f023 020c 	bic.w	r2, r3, #12
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	4917      	ldr	r1, [pc, #92]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ab0:	4b15      	ldr	r3, [pc, #84]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab4:	f023 0202 	bic.w	r2, r3, #2
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abc:	4912      	ldr	r1, [pc, #72]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ac2:	4b11      	ldr	r3, [pc, #68]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac6:	4a10      	ldr	r2, [pc, #64]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ace:	4b0e      	ldr	r3, [pc, #56]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ada:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ade:	4a0a      	ldr	r2, [pc, #40]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ae6:	4b08      	ldr	r3, [pc, #32]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aea:	4a07      	ldr	r2, [pc, #28]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004af2:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a04      	ldr	r2, [pc, #16]	@ (8004b08 <HAL_RCC_OscConfig+0x76c>)
 8004af8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fc fbf3 	bl	80012e8 <HAL_GetTick>
 8004b02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b04:	e011      	b.n	8004b2a <HAL_RCC_OscConfig+0x78e>
 8004b06:	bf00      	nop
 8004b08:	58024400 	.word	0x58024400
 8004b0c:	58024800 	.word	0x58024800
 8004b10:	fffffc0c 	.word	0xfffffc0c
 8004b14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b18:	f7fc fbe6 	bl	80012e8 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e08a      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b2a:	4b47      	ldr	r3, [pc, #284]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0x77c>
 8004b36:	e082      	b.n	8004c3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b38:	4b43      	ldr	r3, [pc, #268]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a42      	ldr	r2, [pc, #264]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fc fbd0 	bl	80012e8 <HAL_GetTick>
 8004b48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7fc fbcc 	bl	80012e8 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e070      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x7b0>
 8004b6a:	e068      	b.n	8004c3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b6c:	4b36      	ldr	r3, [pc, #216]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b72:	4b35      	ldr	r3, [pc, #212]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d031      	beq.n	8004be4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f003 0203 	and.w	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d12a      	bne.n	8004be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d122      	bne.n	8004be4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d11a      	bne.n	8004be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	0a5b      	lsrs	r3, r3, #9
 8004bb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d111      	bne.n	8004be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d108      	bne.n	8004be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	0e1b      	lsrs	r3, r3, #24
 8004bd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e02b      	b.n	8004c40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004be8:	4b17      	ldr	r3, [pc, #92]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bec:	08db      	lsrs	r3, r3, #3
 8004bee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bf2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d01f      	beq.n	8004c3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004bfe:	4b12      	ldr	r3, [pc, #72]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	4a11      	ldr	r2, [pc, #68]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004c04:	f023 0301 	bic.w	r3, r3, #1
 8004c08:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c0a:	f7fc fb6d 	bl	80012e8 <HAL_GetTick>
 8004c0e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c10:	bf00      	nop
 8004c12:	f7fc fb69 	bl	80012e8 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d0f9      	beq.n	8004c12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c22:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <HAL_RCC_OscConfig+0x8b0>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c2a:	00d2      	lsls	r2, r2, #3
 8004c2c:	4906      	ldr	r1, [pc, #24]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004c32:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c36:	4a04      	ldr	r2, [pc, #16]	@ (8004c48 <HAL_RCC_OscConfig+0x8ac>)
 8004c38:	f043 0301 	orr.w	r3, r3, #1
 8004c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3730      	adds	r7, #48	@ 0x30
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	ffff0007 	.word	0xffff0007

08004c50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e19c      	b.n	8004f9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c64:	4b8a      	ldr	r3, [pc, #552]	@ (8004e90 <HAL_RCC_ClockConfig+0x240>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d910      	bls.n	8004c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b87      	ldr	r3, [pc, #540]	@ (8004e90 <HAL_RCC_ClockConfig+0x240>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 020f 	bic.w	r2, r3, #15
 8004c7a:	4985      	ldr	r1, [pc, #532]	@ (8004e90 <HAL_RCC_ClockConfig+0x240>)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c82:	4b83      	ldr	r3, [pc, #524]	@ (8004e90 <HAL_RCC_ClockConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e184      	b.n	8004f9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d010      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	4b7b      	ldr	r3, [pc, #492]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d908      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cb0:	4b78      	ldr	r3, [pc, #480]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	4975      	ldr	r1, [pc, #468]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d010      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695a      	ldr	r2, [r3, #20]
 8004cd2:	4b70      	ldr	r3, [pc, #448]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d908      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cde:	4b6d      	ldr	r3, [pc, #436]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	496a      	ldr	r1, [pc, #424]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d010      	beq.n	8004d1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699a      	ldr	r2, [r3, #24]
 8004d00:	4b64      	ldr	r3, [pc, #400]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d908      	bls.n	8004d1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d0c:	4b61      	ldr	r3, [pc, #388]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	495e      	ldr	r1, [pc, #376]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d010      	beq.n	8004d4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69da      	ldr	r2, [r3, #28]
 8004d2e:	4b59      	ldr	r3, [pc, #356]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d908      	bls.n	8004d4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d3a:	4b56      	ldr	r3, [pc, #344]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	4953      	ldr	r1, [pc, #332]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d908      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d68:	4b4a      	ldr	r3, [pc, #296]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f023 020f 	bic.w	r2, r3, #15
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4947      	ldr	r1, [pc, #284]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d055      	beq.n	8004e32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d86:	4b43      	ldr	r3, [pc, #268]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4940      	ldr	r1, [pc, #256]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d107      	bne.n	8004db0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004da0:	4b3c      	ldr	r3, [pc, #240]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d121      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0f6      	b.n	8004f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004db8:	4b36      	ldr	r3, [pc, #216]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d115      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0ea      	b.n	8004f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d107      	bne.n	8004de0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dd0:	4b30      	ldr	r3, [pc, #192]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d109      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0de      	b.n	8004f9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004de0:	4b2c      	ldr	r3, [pc, #176]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0d6      	b.n	8004f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004df0:	4b28      	ldr	r3, [pc, #160]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f023 0207 	bic.w	r2, r3, #7
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4925      	ldr	r1, [pc, #148]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e02:	f7fc fa71 	bl	80012e8 <HAL_GetTick>
 8004e06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e08:	e00a      	b.n	8004e20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e0a:	f7fc fa6d 	bl	80012e8 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e0be      	b.n	8004f9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e20:	4b1c      	ldr	r3, [pc, #112]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d1eb      	bne.n	8004e0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d010      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	4b14      	ldr	r3, [pc, #80]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d208      	bcs.n	8004e60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e4e:	4b11      	ldr	r3, [pc, #68]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f023 020f 	bic.w	r2, r3, #15
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	490e      	ldr	r1, [pc, #56]	@ (8004e94 <HAL_RCC_ClockConfig+0x244>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e60:	4b0b      	ldr	r3, [pc, #44]	@ (8004e90 <HAL_RCC_ClockConfig+0x240>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d214      	bcs.n	8004e98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6e:	4b08      	ldr	r3, [pc, #32]	@ (8004e90 <HAL_RCC_ClockConfig+0x240>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 020f 	bic.w	r2, r3, #15
 8004e76:	4906      	ldr	r1, [pc, #24]	@ (8004e90 <HAL_RCC_ClockConfig+0x240>)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7e:	4b04      	ldr	r3, [pc, #16]	@ (8004e90 <HAL_RCC_ClockConfig+0x240>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d005      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e086      	b.n	8004f9e <HAL_RCC_ClockConfig+0x34e>
 8004e90:	52002000 	.word	0x52002000
 8004e94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d010      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d208      	bcs.n	8004ec6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	4939      	ldr	r1, [pc, #228]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d010      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695a      	ldr	r2, [r3, #20]
 8004ed6:	4b34      	ldr	r3, [pc, #208]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d208      	bcs.n	8004ef4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ee2:	4b31      	ldr	r3, [pc, #196]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	492e      	ldr	r1, [pc, #184]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d010      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699a      	ldr	r2, [r3, #24]
 8004f04:	4b28      	ldr	r3, [pc, #160]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d208      	bcs.n	8004f22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f10:	4b25      	ldr	r3, [pc, #148]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	4922      	ldr	r1, [pc, #136]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d010      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69da      	ldr	r2, [r3, #28]
 8004f32:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d208      	bcs.n	8004f50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	4917      	ldr	r1, [pc, #92]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f50:	f000 f834 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b14      	ldr	r3, [pc, #80]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	0a1b      	lsrs	r3, r3, #8
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	4912      	ldr	r1, [pc, #72]	@ (8004fac <HAL_RCC_ClockConfig+0x35c>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa8 <HAL_RCC_ClockConfig+0x358>)
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	4a0d      	ldr	r2, [pc, #52]	@ (8004fac <HAL_RCC_ClockConfig+0x35c>)
 8004f78:	5cd3      	ldrb	r3, [r2, r3]
 8004f7a:	f003 031f 	and.w	r3, r3, #31
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
 8004f84:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb0 <HAL_RCC_ClockConfig+0x360>)
 8004f86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f88:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb4 <HAL_RCC_ClockConfig+0x364>)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb8 <HAL_RCC_ClockConfig+0x368>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fc f95e 	bl	8001254 <HAL_InitTick>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	58024400 	.word	0x58024400
 8004fac:	0800e730 	.word	0x0800e730
 8004fb0:	24000004 	.word	0x24000004
 8004fb4:	24000000 	.word	0x24000000
 8004fb8:	24000008 	.word	0x24000008

08004fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b089      	sub	sp, #36	@ 0x24
 8004fc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fc2:	4bb3      	ldr	r3, [pc, #716]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fca:	2b18      	cmp	r3, #24
 8004fcc:	f200 8155 	bhi.w	800527a <HAL_RCC_GetSysClockFreq+0x2be>
 8004fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	0800503d 	.word	0x0800503d
 8004fdc:	0800527b 	.word	0x0800527b
 8004fe0:	0800527b 	.word	0x0800527b
 8004fe4:	0800527b 	.word	0x0800527b
 8004fe8:	0800527b 	.word	0x0800527b
 8004fec:	0800527b 	.word	0x0800527b
 8004ff0:	0800527b 	.word	0x0800527b
 8004ff4:	0800527b 	.word	0x0800527b
 8004ff8:	08005063 	.word	0x08005063
 8004ffc:	0800527b 	.word	0x0800527b
 8005000:	0800527b 	.word	0x0800527b
 8005004:	0800527b 	.word	0x0800527b
 8005008:	0800527b 	.word	0x0800527b
 800500c:	0800527b 	.word	0x0800527b
 8005010:	0800527b 	.word	0x0800527b
 8005014:	0800527b 	.word	0x0800527b
 8005018:	08005069 	.word	0x08005069
 800501c:	0800527b 	.word	0x0800527b
 8005020:	0800527b 	.word	0x0800527b
 8005024:	0800527b 	.word	0x0800527b
 8005028:	0800527b 	.word	0x0800527b
 800502c:	0800527b 	.word	0x0800527b
 8005030:	0800527b 	.word	0x0800527b
 8005034:	0800527b 	.word	0x0800527b
 8005038:	0800506f 	.word	0x0800506f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800503c:	4b94      	ldr	r3, [pc, #592]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d009      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005048:	4b91      	ldr	r3, [pc, #580]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	08db      	lsrs	r3, r3, #3
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	4a90      	ldr	r2, [pc, #576]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
 8005058:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800505a:	e111      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800505c:	4b8d      	ldr	r3, [pc, #564]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800505e:	61bb      	str	r3, [r7, #24]
      break;
 8005060:	e10e      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005062:	4b8d      	ldr	r3, [pc, #564]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005064:	61bb      	str	r3, [r7, #24]
      break;
 8005066:	e10b      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005068:	4b8c      	ldr	r3, [pc, #560]	@ (800529c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800506a:	61bb      	str	r3, [r7, #24]
      break;
 800506c:	e108      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800506e:	4b88      	ldr	r3, [pc, #544]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005078:	4b85      	ldr	r3, [pc, #532]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800507a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005082:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005084:	4b82      	ldr	r3, [pc, #520]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800508e:	4b80      	ldr	r3, [pc, #512]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005092:	08db      	lsrs	r3, r3, #3
 8005094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 80e1 	beq.w	8005274 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	f000 8083 	beq.w	80051c0 <HAL_RCC_GetSysClockFreq+0x204>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	f200 80a1 	bhi.w	8005204 <HAL_RCC_GetSysClockFreq+0x248>
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0x114>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d056      	beq.n	800517c <HAL_RCC_GetSysClockFreq+0x1c0>
 80050ce:	e099      	b.n	8005204 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d02d      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050dc:	4b6c      	ldr	r3, [pc, #432]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	08db      	lsrs	r3, r3, #3
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	4a6b      	ldr	r2, [pc, #428]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050e8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	ee07 3a90 	vmov	s15, r3
 80050f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005106:	4b62      	ldr	r3, [pc, #392]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005116:	ed97 6a02 	vldr	s12, [r7, #8]
 800511a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80052a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800511e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800512a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005132:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005136:	e087      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80052a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514a:	4b51      	ldr	r3, [pc, #324]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515a:	ed97 6a02 	vldr	s12, [r7, #8]
 800515e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80052a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800516e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005176:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800517a:	e065      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80052a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800518a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518e:	4b40      	ldr	r3, [pc, #256]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519e:	ed97 6a02 	vldr	s12, [r7, #8]
 80051a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80052a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051be:	e043      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80052ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80051ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80052a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005202:	e021      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80052a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005216:	4b1e      	ldr	r3, [pc, #120]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521e:	ee07 3a90 	vmov	s15, r3
 8005222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005226:	ed97 6a02 	vldr	s12, [r7, #8]
 800522a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80052a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800522e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800523a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800523e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005242:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005246:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005248:	4b11      	ldr	r3, [pc, #68]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800524a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524c:	0a5b      	lsrs	r3, r3, #9
 800524e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005252:	3301      	adds	r3, #1
 8005254:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	ee07 3a90 	vmov	s15, r3
 800525c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005260:	edd7 6a07 	vldr	s13, [r7, #28]
 8005264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800526c:	ee17 3a90 	vmov	r3, s15
 8005270:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005272:	e005      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	61bb      	str	r3, [r7, #24]
      break;
 8005278:	e002      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800527a:	4b07      	ldr	r3, [pc, #28]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800527c:	61bb      	str	r3, [r7, #24]
      break;
 800527e:	bf00      	nop
  }

  return sysclockfreq;
 8005280:	69bb      	ldr	r3, [r7, #24]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3724      	adds	r7, #36	@ 0x24
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	58024400 	.word	0x58024400
 8005294:	03d09000 	.word	0x03d09000
 8005298:	003d0900 	.word	0x003d0900
 800529c:	017d7840 	.word	0x017d7840
 80052a0:	46000000 	.word	0x46000000
 80052a4:	4c742400 	.word	0x4c742400
 80052a8:	4a742400 	.word	0x4a742400
 80052ac:	4bbebc20 	.word	0x4bbebc20

080052b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80052b6:	f7ff fe81 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 80052ba:	4602      	mov	r2, r0
 80052bc:	4b10      	ldr	r3, [pc, #64]	@ (8005300 <HAL_RCC_GetHCLKFreq+0x50>)
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	0a1b      	lsrs	r3, r3, #8
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	490f      	ldr	r1, [pc, #60]	@ (8005304 <HAL_RCC_GetHCLKFreq+0x54>)
 80052c8:	5ccb      	ldrb	r3, [r1, r3]
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	fa22 f303 	lsr.w	r3, r2, r3
 80052d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005300 <HAL_RCC_GetHCLKFreq+0x50>)
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	4a09      	ldr	r2, [pc, #36]	@ (8005304 <HAL_RCC_GetHCLKFreq+0x54>)
 80052de:	5cd3      	ldrb	r3, [r2, r3]
 80052e0:	f003 031f 	and.w	r3, r3, #31
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ea:	4a07      	ldr	r2, [pc, #28]	@ (8005308 <HAL_RCC_GetHCLKFreq+0x58>)
 80052ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052ee:	4a07      	ldr	r2, [pc, #28]	@ (800530c <HAL_RCC_GetHCLKFreq+0x5c>)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80052f4:	4b04      	ldr	r3, [pc, #16]	@ (8005308 <HAL_RCC_GetHCLKFreq+0x58>)
 80052f6:	681b      	ldr	r3, [r3, #0]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	58024400 	.word	0x58024400
 8005304:	0800e730 	.word	0x0800e730
 8005308:	24000004 	.word	0x24000004
 800530c:	24000000 	.word	0x24000000

08005310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005314:	f7ff ffcc 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 8005318:	4602      	mov	r2, r0
 800531a:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	091b      	lsrs	r3, r3, #4
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	4904      	ldr	r1, [pc, #16]	@ (8005338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005326:	5ccb      	ldrb	r3, [r1, r3]
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	58024400 	.word	0x58024400
 8005338:	0800e730 	.word	0x0800e730

0800533c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005340:	f7ff ffb6 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 8005344:	4602      	mov	r2, r0
 8005346:	4b06      	ldr	r3, [pc, #24]	@ (8005360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4904      	ldr	r1, [pc, #16]	@ (8005364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800535c:	4618      	mov	r0, r3
 800535e:	bd80      	pop	{r7, pc}
 8005360:	58024400 	.word	0x58024400
 8005364:	0800e730 	.word	0x0800e730

08005368 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800536c:	b0ca      	sub	sp, #296	@ 0x128
 800536e:	af00      	add	r7, sp, #0
 8005370:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005374:	2300      	movs	r3, #0
 8005376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800537a:	2300      	movs	r3, #0
 800537c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005388:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800538c:	2500      	movs	r5, #0
 800538e:	ea54 0305 	orrs.w	r3, r4, r5
 8005392:	d049      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005398:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800539a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800539e:	d02f      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80053a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053a4:	d828      	bhi.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053aa:	d01a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053b0:	d822      	bhi.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80053b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ba:	d007      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053bc:	e01c      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053be:	4bb8      	ldr	r3, [pc, #736]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c2:	4ab7      	ldr	r2, [pc, #732]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053ca:	e01a      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d0:	3308      	adds	r3, #8
 80053d2:	2102      	movs	r1, #2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f001 fc8f 	bl	8006cf8 <RCCEx_PLL2_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053e0:	e00f      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e6:	3328      	adds	r3, #40	@ 0x28
 80053e8:	2102      	movs	r1, #2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 fd36 	bl	8006e5c <RCCEx_PLL3_Config>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053f6:	e004      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053fe:	e000      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800540a:	4ba5      	ldr	r3, [pc, #660]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800540c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005416:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005418:	4aa1      	ldr	r2, [pc, #644]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800541a:	430b      	orrs	r3, r1
 800541c:	6513      	str	r3, [r2, #80]	@ 0x50
 800541e:	e003      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005424:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005434:	f04f 0900 	mov.w	r9, #0
 8005438:	ea58 0309 	orrs.w	r3, r8, r9
 800543c:	d047      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005444:	2b04      	cmp	r3, #4
 8005446:	d82a      	bhi.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005448:	a201      	add	r2, pc, #4	@ (adr r2, 8005450 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	08005465 	.word	0x08005465
 8005454:	08005473 	.word	0x08005473
 8005458:	08005489 	.word	0x08005489
 800545c:	080054a7 	.word	0x080054a7
 8005460:	080054a7 	.word	0x080054a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005464:	4b8e      	ldr	r3, [pc, #568]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	4a8d      	ldr	r2, [pc, #564]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800546a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800546e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005470:	e01a      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005476:	3308      	adds	r3, #8
 8005478:	2100      	movs	r1, #0
 800547a:	4618      	mov	r0, r3
 800547c:	f001 fc3c 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005486:	e00f      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548c:	3328      	adds	r3, #40	@ 0x28
 800548e:	2100      	movs	r1, #0
 8005490:	4618      	mov	r0, r3
 8005492:	f001 fce3 	bl	8006e5c <RCCEx_PLL3_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800549c:	e004      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054a4:	e000      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80054a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054b0:	4b7b      	ldr	r3, [pc, #492]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b4:	f023 0107 	bic.w	r1, r3, #7
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054be:	4a78      	ldr	r2, [pc, #480]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054c0:	430b      	orrs	r3, r1
 80054c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80054c4:	e003      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80054da:	f04f 0b00 	mov.w	fp, #0
 80054de:	ea5a 030b 	orrs.w	r3, sl, fp
 80054e2:	d04c      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80054e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ee:	d030      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80054f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054f4:	d829      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80054f8:	d02d      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80054fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80054fc:	d825      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054fe:	2b80      	cmp	r3, #128	@ 0x80
 8005500:	d018      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005502:	2b80      	cmp	r3, #128	@ 0x80
 8005504:	d821      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800550a:	2b40      	cmp	r3, #64	@ 0x40
 800550c:	d007      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800550e:	e01c      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005510:	4b63      	ldr	r3, [pc, #396]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	4a62      	ldr	r2, [pc, #392]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800551a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800551c:	e01c      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005522:	3308      	adds	r3, #8
 8005524:	2100      	movs	r1, #0
 8005526:	4618      	mov	r0, r3
 8005528:	f001 fbe6 	bl	8006cf8 <RCCEx_PLL2_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005532:	e011      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005538:	3328      	adds	r3, #40	@ 0x28
 800553a:	2100      	movs	r1, #0
 800553c:	4618      	mov	r0, r3
 800553e:	f001 fc8d 	bl	8006e5c <RCCEx_PLL3_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005548:	e006      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005550:	e002      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005552:	bf00      	nop
 8005554:	e000      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005560:	4b4f      	ldr	r3, [pc, #316]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005564:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556e:	4a4c      	ldr	r2, [pc, #304]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005570:	430b      	orrs	r3, r1
 8005572:	6513      	str	r3, [r2, #80]	@ 0x50
 8005574:	e003      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800557a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800557e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800558a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800558e:	2300      	movs	r3, #0
 8005590:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005594:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005598:	460b      	mov	r3, r1
 800559a:	4313      	orrs	r3, r2
 800559c:	d053      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800559e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055aa:	d035      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80055ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055b0:	d82e      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80055b6:	d031      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80055b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80055bc:	d828      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055c2:	d01a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80055c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055c8:	d822      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80055ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055d2:	d007      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80055d4:	e01c      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d6:	4b32      	ldr	r3, [pc, #200]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055da:	4a31      	ldr	r2, [pc, #196]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055e2:	e01c      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e8:	3308      	adds	r3, #8
 80055ea:	2100      	movs	r1, #0
 80055ec:	4618      	mov	r0, r3
 80055ee:	f001 fb83 	bl	8006cf8 <RCCEx_PLL2_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80055f8:	e011      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fe:	3328      	adds	r3, #40	@ 0x28
 8005600:	2100      	movs	r1, #0
 8005602:	4618      	mov	r0, r3
 8005604:	f001 fc2a 	bl	8006e5c <RCCEx_PLL3_Config>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800560e:	e006      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005616:	e002      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005618:	bf00      	nop
 800561a:	e000      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800561c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800561e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10b      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005626:	4b1e      	ldr	r3, [pc, #120]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800562e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005632:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005636:	4a1a      	ldr	r2, [pc, #104]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005638:	430b      	orrs	r3, r1
 800563a:	6593      	str	r3, [r2, #88]	@ 0x58
 800563c:	e003      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005642:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005652:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005656:	2300      	movs	r3, #0
 8005658:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800565c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005660:	460b      	mov	r3, r1
 8005662:	4313      	orrs	r3, r2
 8005664:	d056      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800566e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005672:	d038      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005674:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005678:	d831      	bhi.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800567a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800567e:	d034      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005680:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005684:	d82b      	bhi.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005686:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800568a:	d01d      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800568c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005690:	d825      	bhi.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d006      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005696:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800569c:	e01f      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800569e:	bf00      	nop
 80056a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a4:	4ba2      	ldr	r3, [pc, #648]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a8:	4aa1      	ldr	r2, [pc, #644]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056b0:	e01c      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b6:	3308      	adds	r3, #8
 80056b8:	2100      	movs	r1, #0
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 fb1c 	bl	8006cf8 <RCCEx_PLL2_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80056c6:	e011      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056cc:	3328      	adds	r3, #40	@ 0x28
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 fbc3 	bl	8006e5c <RCCEx_PLL3_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056dc:	e006      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056e4:	e002      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80056ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10b      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80056f4:	4b8e      	ldr	r3, [pc, #568]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80056fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005700:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005704:	4a8a      	ldr	r2, [pc, #552]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005706:	430b      	orrs	r3, r1
 8005708:	6593      	str	r3, [r2, #88]	@ 0x58
 800570a:	e003      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005720:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005724:	2300      	movs	r3, #0
 8005726:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800572a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d03a      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800573a:	2b30      	cmp	r3, #48	@ 0x30
 800573c:	d01f      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800573e:	2b30      	cmp	r3, #48	@ 0x30
 8005740:	d819      	bhi.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005742:	2b20      	cmp	r3, #32
 8005744:	d00c      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005746:	2b20      	cmp	r3, #32
 8005748:	d815      	bhi.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d019      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800574e:	2b10      	cmp	r3, #16
 8005750:	d111      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005752:	4b77      	ldr	r3, [pc, #476]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005756:	4a76      	ldr	r2, [pc, #472]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800575c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800575e:	e011      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005764:	3308      	adds	r3, #8
 8005766:	2102      	movs	r1, #2
 8005768:	4618      	mov	r0, r3
 800576a:	f001 fac5 	bl	8006cf8 <RCCEx_PLL2_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005774:	e006      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800577c:	e002      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800577e:	bf00      	nop
 8005780:	e000      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800578c:	4b68      	ldr	r3, [pc, #416]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800578e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005790:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800579a:	4a65      	ldr	r2, [pc, #404]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800579c:	430b      	orrs	r3, r1
 800579e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057a0:	e003      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80057b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057ba:	2300      	movs	r3, #0
 80057bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80057c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4313      	orrs	r3, r2
 80057c8:	d051      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80057ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057d4:	d035      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80057d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057da:	d82e      	bhi.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057e0:	d031      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80057e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80057e6:	d828      	bhi.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ec:	d01a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80057ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057f2:	d822      	bhi.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80057f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fc:	d007      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80057fe:	e01c      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005800:	4b4b      	ldr	r3, [pc, #300]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005804:	4a4a      	ldr	r2, [pc, #296]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800580a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800580c:	e01c      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005812:	3308      	adds	r3, #8
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f001 fa6e 	bl	8006cf8 <RCCEx_PLL2_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005822:	e011      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005828:	3328      	adds	r3, #40	@ 0x28
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f001 fb15 	bl	8006e5c <RCCEx_PLL3_Config>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005838:	e006      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005840:	e002      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005850:	4b37      	ldr	r3, [pc, #220]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005854:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800585e:	4a34      	ldr	r2, [pc, #208]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005860:	430b      	orrs	r3, r1
 8005862:	6513      	str	r3, [r2, #80]	@ 0x50
 8005864:	e003      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800586a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800586e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800587a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800587e:	2300      	movs	r3, #0
 8005880:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005884:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005888:	460b      	mov	r3, r1
 800588a:	4313      	orrs	r3, r2
 800588c:	d056      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800588e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005898:	d033      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800589a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800589e:	d82c      	bhi.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058a4:	d02f      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80058a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058aa:	d826      	bhi.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058b0:	d02b      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80058b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058b6:	d820      	bhi.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058bc:	d012      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80058be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058c2:	d81a      	bhi.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d022      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80058c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058cc:	d115      	bne.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d2:	3308      	adds	r3, #8
 80058d4:	2101      	movs	r1, #1
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 fa0e 	bl	8006cf8 <RCCEx_PLL2_Config>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058e2:	e015      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e8:	3328      	adds	r3, #40	@ 0x28
 80058ea:	2101      	movs	r1, #1
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 fab5 	bl	8006e5c <RCCEx_PLL3_Config>
 80058f2:	4603      	mov	r3, r0
 80058f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058f8:	e00a      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005900:	e006      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005902:	bf00      	nop
 8005904:	e004      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005906:	bf00      	nop
 8005908:	e002      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800590a:	bf00      	nop
 800590c:	e000      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800590e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10d      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005918:	4b05      	ldr	r3, [pc, #20]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800591a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005926:	4a02      	ldr	r2, [pc, #8]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005928:	430b      	orrs	r3, r1
 800592a:	6513      	str	r3, [r2, #80]	@ 0x50
 800592c:	e006      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800592e:	bf00      	nop
 8005930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800593c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800594c:	2300      	movs	r3, #0
 800594e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005952:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005956:	460b      	mov	r3, r1
 8005958:	4313      	orrs	r3, r2
 800595a:	d055      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005968:	d033      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800596a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800596e:	d82c      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005974:	d02f      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800597a:	d826      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800597c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005980:	d02b      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005982:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005986:	d820      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005988:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800598c:	d012      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800598e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005992:	d81a      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d022      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800599c:	d115      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a2:	3308      	adds	r3, #8
 80059a4:	2101      	movs	r1, #1
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 f9a6 	bl	8006cf8 <RCCEx_PLL2_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059b2:	e015      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b8:	3328      	adds	r3, #40	@ 0x28
 80059ba:	2101      	movs	r1, #1
 80059bc:	4618      	mov	r0, r3
 80059be:	f001 fa4d 	bl	8006e5c <RCCEx_PLL3_Config>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80059c8:	e00a      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059d0:	e006      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059d2:	bf00      	nop
 80059d4:	e004      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059d6:	bf00      	nop
 80059d8:	e002      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80059de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10b      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80059e8:	4ba3      	ldr	r3, [pc, #652]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80059f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80059f8:	4a9f      	ldr	r2, [pc, #636]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059fa:	430b      	orrs	r3, r1
 80059fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80059fe:	e003      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a22:	460b      	mov	r3, r1
 8005a24:	4313      	orrs	r3, r2
 8005a26:	d037      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a32:	d00e      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a38:	d816      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d018      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005a3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a42:	d111      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a44:	4b8c      	ldr	r3, [pc, #560]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a48:	4a8b      	ldr	r2, [pc, #556]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a50:	e00f      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a56:	3308      	adds	r3, #8
 8005a58:	2101      	movs	r1, #1
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 f94c 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a66:	e004      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a6e:	e000      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10a      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a7e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a88:	4a7b      	ldr	r2, [pc, #492]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a8e:	e003      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005aae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	d039      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d81c      	bhi.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005b05 	.word	0x08005b05
 8005acc:	08005ad9 	.word	0x08005ad9
 8005ad0:	08005ae7 	.word	0x08005ae7
 8005ad4:	08005b05 	.word	0x08005b05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad8:	4b67      	ldr	r3, [pc, #412]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005adc:	4a66      	ldr	r2, [pc, #408]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ae4:	e00f      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aea:	3308      	adds	r3, #8
 8005aec:	2102      	movs	r1, #2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 f902 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005afa:	e004      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b02:	e000      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b0e:	4b5a      	ldr	r3, [pc, #360]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b12:	f023 0103 	bic.w	r1, r3, #3
 8005b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b1c:	4a56      	ldr	r2, [pc, #344]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b22:	e003      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005b38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005b46:	460b      	mov	r3, r1
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f000 809f 	beq.w	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b4e:	4b4b      	ldr	r3, [pc, #300]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a4a      	ldr	r2, [pc, #296]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b5a:	f7fb fbc5 	bl	80012e8 <HAL_GetTick>
 8005b5e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b62:	e00b      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b64:	f7fb fbc0 	bl	80012e8 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b64      	cmp	r3, #100	@ 0x64
 8005b72:	d903      	bls.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b7a:	e005      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ed      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d179      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b90:	4b39      	ldr	r3, [pc, #228]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b9c:	4053      	eors	r3, r2
 8005b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d015      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ba6:	4b34      	ldr	r3, [pc, #208]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bb2:	4b31      	ldr	r3, [pc, #196]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb6:	4a30      	ldr	r2, [pc, #192]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bbc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bc8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005bca:	4a2b      	ldr	r2, [pc, #172]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bd0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bde:	d118      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be0:	f7fb fb82 	bl	80012e8 <HAL_GetTick>
 8005be4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005be8:	e00d      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bea:	f7fb fb7d 	bl	80012e8 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005bf4:	1ad2      	subs	r2, r2, r3
 8005bf6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d903      	bls.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005c04:	e005      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c06:	4b1c      	ldr	r3, [pc, #112]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0eb      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d129      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c2a:	d10e      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005c2c:	4b12      	ldr	r3, [pc, #72]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c3c:	091a      	lsrs	r2, r3, #4
 8005c3e:	4b10      	ldr	r3, [pc, #64]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	4a0d      	ldr	r2, [pc, #52]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6113      	str	r3, [r2, #16]
 8005c48:	e005      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c54:	6113      	str	r3, [r2, #16]
 8005c56:	4b08      	ldr	r3, [pc, #32]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c58:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c66:	4a04      	ldr	r2, [pc, #16]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c6c:	e00e      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005c76:	e009      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005c78:	58024400 	.word	0x58024400
 8005c7c:	58024800 	.word	0x58024800
 8005c80:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	f002 0301 	and.w	r3, r2, #1
 8005c98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ca2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f000 8089 	beq.w	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cb4:	2b28      	cmp	r3, #40	@ 0x28
 8005cb6:	d86b      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005d99 	.word	0x08005d99
 8005cc4:	08005d91 	.word	0x08005d91
 8005cc8:	08005d91 	.word	0x08005d91
 8005ccc:	08005d91 	.word	0x08005d91
 8005cd0:	08005d91 	.word	0x08005d91
 8005cd4:	08005d91 	.word	0x08005d91
 8005cd8:	08005d91 	.word	0x08005d91
 8005cdc:	08005d91 	.word	0x08005d91
 8005ce0:	08005d65 	.word	0x08005d65
 8005ce4:	08005d91 	.word	0x08005d91
 8005ce8:	08005d91 	.word	0x08005d91
 8005cec:	08005d91 	.word	0x08005d91
 8005cf0:	08005d91 	.word	0x08005d91
 8005cf4:	08005d91 	.word	0x08005d91
 8005cf8:	08005d91 	.word	0x08005d91
 8005cfc:	08005d91 	.word	0x08005d91
 8005d00:	08005d7b 	.word	0x08005d7b
 8005d04:	08005d91 	.word	0x08005d91
 8005d08:	08005d91 	.word	0x08005d91
 8005d0c:	08005d91 	.word	0x08005d91
 8005d10:	08005d91 	.word	0x08005d91
 8005d14:	08005d91 	.word	0x08005d91
 8005d18:	08005d91 	.word	0x08005d91
 8005d1c:	08005d91 	.word	0x08005d91
 8005d20:	08005d99 	.word	0x08005d99
 8005d24:	08005d91 	.word	0x08005d91
 8005d28:	08005d91 	.word	0x08005d91
 8005d2c:	08005d91 	.word	0x08005d91
 8005d30:	08005d91 	.word	0x08005d91
 8005d34:	08005d91 	.word	0x08005d91
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005d99 	.word	0x08005d99
 8005d44:	08005d91 	.word	0x08005d91
 8005d48:	08005d91 	.word	0x08005d91
 8005d4c:	08005d91 	.word	0x08005d91
 8005d50:	08005d91 	.word	0x08005d91
 8005d54:	08005d91 	.word	0x08005d91
 8005d58:	08005d91 	.word	0x08005d91
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005d99 	.word	0x08005d99
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d68:	3308      	adds	r3, #8
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 ffc3 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d78:	e00f      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7e:	3328      	adds	r3, #40	@ 0x28
 8005d80:	2101      	movs	r1, #1
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 f86a 	bl	8006e5c <RCCEx_PLL3_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d8e:	e004      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d96:	e000      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10a      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005da2:	4bbf      	ldr	r3, [pc, #764]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005db0:	4abb      	ldr	r2, [pc, #748]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005db2:	430b      	orrs	r3, r1
 8005db4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005db6:	e003      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	f002 0302 	and.w	r3, r2, #2
 8005dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005dd6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	d041      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	d824      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005dea:	a201      	add	r2, pc, #4	@ (adr r2, 8005df0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e3d 	.word	0x08005e3d
 8005df4:	08005e09 	.word	0x08005e09
 8005df8:	08005e1f 	.word	0x08005e1f
 8005dfc:	08005e3d 	.word	0x08005e3d
 8005e00:	08005e3d 	.word	0x08005e3d
 8005e04:	08005e3d 	.word	0x08005e3d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	2101      	movs	r1, #1
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 ff71 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e1c:	e00f      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e22:	3328      	adds	r3, #40	@ 0x28
 8005e24:	2101      	movs	r1, #1
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 f818 	bl	8006e5c <RCCEx_PLL3_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e32:	e004      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e3a:	e000      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e46:	4b96      	ldr	r3, [pc, #600]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4a:	f023 0107 	bic.w	r1, r3, #7
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e54:	4a92      	ldr	r2, [pc, #584]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e56:	430b      	orrs	r3, r1
 8005e58:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e5a:	e003      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f002 0304 	and.w	r3, r2, #4
 8005e70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e74:	2300      	movs	r3, #0
 8005e76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e7a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4313      	orrs	r3, r2
 8005e82:	d044      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e8c:	2b05      	cmp	r3, #5
 8005e8e:	d825      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005e90:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ee5 	.word	0x08005ee5
 8005e9c:	08005eb1 	.word	0x08005eb1
 8005ea0:	08005ec7 	.word	0x08005ec7
 8005ea4:	08005ee5 	.word	0x08005ee5
 8005ea8:	08005ee5 	.word	0x08005ee5
 8005eac:	08005ee5 	.word	0x08005ee5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 ff1d 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ec4:	e00f      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eca:	3328      	adds	r3, #40	@ 0x28
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 ffc4 	bl	8006e5c <RCCEx_PLL3_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005eda:	e004      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eee:	4b6c      	ldr	r3, [pc, #432]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef2:	f023 0107 	bic.w	r1, r3, #7
 8005ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005efe:	4a68      	ldr	r2, [pc, #416]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f04:	e003      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f002 0320 	and.w	r3, r2, #32
 8005f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	d055      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f3a:	d033      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f40:	d82c      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f46:	d02f      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4c:	d826      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f52:	d02b      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005f54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f58:	d820      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f5e:	d012      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f64:	d81a      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d022      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005f6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f6e:	d115      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	3308      	adds	r3, #8
 8005f76:	2100      	movs	r1, #0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 febd 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f84:	e015      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8a:	3328      	adds	r3, #40	@ 0x28
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 ff64 	bl	8006e5c <RCCEx_PLL3_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f9a:	e00a      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fa2:	e006      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005fa4:	bf00      	nop
 8005fa6:	e004      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005fa8:	bf00      	nop
 8005faa:	e002      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005fac:	bf00      	nop
 8005fae:	e000      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fba:	4b39      	ldr	r3, [pc, #228]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fca:	4a35      	ldr	r2, [pc, #212]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fd0:	e003      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005fea:	2300      	movs	r3, #0
 8005fec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005ff0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	d058      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006002:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006006:	d033      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006008:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800600c:	d82c      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800600e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006012:	d02f      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006018:	d826      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800601a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800601e:	d02b      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006020:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006024:	d820      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006026:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800602a:	d012      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800602c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006030:	d81a      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d022      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800603a:	d115      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800603c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006040:	3308      	adds	r3, #8
 8006042:	2100      	movs	r1, #0
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fe57 	bl	8006cf8 <RCCEx_PLL2_Config>
 800604a:	4603      	mov	r3, r0
 800604c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006050:	e015      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006056:	3328      	adds	r3, #40	@ 0x28
 8006058:	2102      	movs	r1, #2
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fefe 	bl	8006e5c <RCCEx_PLL3_Config>
 8006060:	4603      	mov	r3, r0
 8006062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006066:	e00a      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800606e:	e006      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006070:	bf00      	nop
 8006072:	e004      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006074:	bf00      	nop
 8006076:	e002      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006078:	bf00      	nop
 800607a:	e000      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800607c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10e      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006086:	4b06      	ldr	r3, [pc, #24]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800608e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006092:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006096:	4a02      	ldr	r2, [pc, #8]	@ (80060a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006098:	430b      	orrs	r3, r1
 800609a:	6593      	str	r3, [r2, #88]	@ 0x58
 800609c:	e006      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800609e:	bf00      	nop
 80060a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80060ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80060b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060bc:	2300      	movs	r3, #0
 80060be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80060c6:	460b      	mov	r3, r1
 80060c8:	4313      	orrs	r3, r2
 80060ca:	d055      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80060d8:	d033      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80060da:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80060de:	d82c      	bhi.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060e4:	d02f      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80060e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ea:	d826      	bhi.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80060f0:	d02b      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80060f2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80060f6:	d820      	bhi.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80060f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060fc:	d012      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80060fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006102:	d81a      	bhi.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d022      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800610c:	d115      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800610e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006112:	3308      	adds	r3, #8
 8006114:	2100      	movs	r1, #0
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fdee 	bl	8006cf8 <RCCEx_PLL2_Config>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006122:	e015      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006128:	3328      	adds	r3, #40	@ 0x28
 800612a:	2102      	movs	r1, #2
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fe95 	bl	8006e5c <RCCEx_PLL3_Config>
 8006132:	4603      	mov	r3, r0
 8006134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006138:	e00a      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006140:	e006      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006142:	bf00      	nop
 8006144:	e004      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006146:	bf00      	nop
 8006148:	e002      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800614a:	bf00      	nop
 800614c:	e000      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800614e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10b      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006158:	4ba1      	ldr	r3, [pc, #644]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800615a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800615c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006164:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006168:	4a9d      	ldr	r2, [pc, #628]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800616a:	430b      	orrs	r3, r1
 800616c:	6593      	str	r3, [r2, #88]	@ 0x58
 800616e:	e003      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006174:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006180:	f002 0308 	and.w	r3, r2, #8
 8006184:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006188:	2300      	movs	r3, #0
 800618a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800618e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006192:	460b      	mov	r3, r1
 8006194:	4313      	orrs	r3, r2
 8006196:	d01e      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061a4:	d10c      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061aa:	3328      	adds	r3, #40	@ 0x28
 80061ac:	2102      	movs	r1, #2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fe54 	bl	8006e5c <RCCEx_PLL3_Config>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80061c0:	4b87      	ldr	r3, [pc, #540]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061c4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d0:	4a83      	ldr	r2, [pc, #524]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	f002 0310 	and.w	r3, r2, #16
 80061e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80061f0:	460b      	mov	r3, r1
 80061f2:	4313      	orrs	r3, r2
 80061f4:	d01e      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006202:	d10c      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006208:	3328      	adds	r3, #40	@ 0x28
 800620a:	2102      	movs	r1, #2
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fe25 	bl	8006e5c <RCCEx_PLL3_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800621e:	4b70      	ldr	r3, [pc, #448]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006222:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800622e:	4a6c      	ldr	r2, [pc, #432]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006230:	430b      	orrs	r3, r1
 8006232:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006240:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006244:	2300      	movs	r3, #0
 8006246:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800624a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800624e:	460b      	mov	r3, r1
 8006250:	4313      	orrs	r3, r2
 8006252:	d03e      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006258:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800625c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006260:	d022      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006262:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006266:	d81b      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800626c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006270:	d00b      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006272:	e015      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006278:	3308      	adds	r3, #8
 800627a:	2100      	movs	r1, #0
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fd3b 	bl	8006cf8 <RCCEx_PLL2_Config>
 8006282:	4603      	mov	r3, r0
 8006284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006288:	e00f      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800628a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628e:	3328      	adds	r3, #40	@ 0x28
 8006290:	2102      	movs	r1, #2
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fde2 	bl	8006e5c <RCCEx_PLL3_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800629e:	e004      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062a6:	e000      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80062a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10b      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062b2:	4b4b      	ldr	r3, [pc, #300]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80062ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062c2:	4a47      	ldr	r2, [pc, #284]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062c4:	430b      	orrs	r3, r1
 80062c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80062c8:	e003      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80062de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062e0:	2300      	movs	r3, #0
 80062e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80062e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80062e8:	460b      	mov	r3, r1
 80062ea:	4313      	orrs	r3, r2
 80062ec:	d03b      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80062ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062fa:	d01f      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80062fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006300:	d818      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006306:	d003      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006308:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800630c:	d007      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800630e:	e011      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006310:	4b33      	ldr	r3, [pc, #204]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006314:	4a32      	ldr	r2, [pc, #200]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800631a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800631c:	e00f      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006322:	3328      	adds	r3, #40	@ 0x28
 8006324:	2101      	movs	r1, #1
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fd98 	bl	8006e5c <RCCEx_PLL3_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006332:	e004      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800633a:	e000      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800633c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10b      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006346:	4b26      	ldr	r3, [pc, #152]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800634e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006356:	4a22      	ldr	r2, [pc, #136]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006358:	430b      	orrs	r3, r1
 800635a:	6553      	str	r3, [r2, #84]	@ 0x54
 800635c:	e003      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006372:	673b      	str	r3, [r7, #112]	@ 0x70
 8006374:	2300      	movs	r3, #0
 8006376:	677b      	str	r3, [r7, #116]	@ 0x74
 8006378:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800637c:	460b      	mov	r3, r1
 800637e:	4313      	orrs	r3, r2
 8006380:	d034      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800638c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006390:	d007      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006392:	e011      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006394:	4b12      	ldr	r3, [pc, #72]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006398:	4a11      	ldr	r2, [pc, #68]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800639a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800639e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063a0:	e00e      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a6:	3308      	adds	r3, #8
 80063a8:	2102      	movs	r1, #2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fca4 	bl	8006cf8 <RCCEx_PLL2_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063b6:	e003      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10d      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80063c8:	4b05      	ldr	r3, [pc, #20]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d6:	4a02      	ldr	r2, [pc, #8]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063d8:	430b      	orrs	r3, r1
 80063da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063dc:	e006      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80063de:	bf00      	nop
 80063e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80063f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063fa:	2300      	movs	r3, #0
 80063fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006402:	460b      	mov	r3, r1
 8006404:	4313      	orrs	r3, r2
 8006406:	d00c      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640c:	3328      	adds	r3, #40	@ 0x28
 800640e:	2102      	movs	r1, #2
 8006410:	4618      	mov	r0, r3
 8006412:	f000 fd23 	bl	8006e5c <RCCEx_PLL3_Config>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800642e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006430:	2300      	movs	r3, #0
 8006432:	667b      	str	r3, [r7, #100]	@ 0x64
 8006434:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006438:	460b      	mov	r3, r1
 800643a:	4313      	orrs	r3, r2
 800643c:	d038      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800643e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006446:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800644a:	d018      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800644c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006450:	d811      	bhi.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006456:	d014      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800645c:	d80b      	bhi.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d011      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006466:	d106      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006468:	4bc3      	ldr	r3, [pc, #780]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800646a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646c:	4ac2      	ldr	r2, [pc, #776]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800646e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006474:	e008      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800647c:	e004      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800647e:	bf00      	nop
 8006480:	e002      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006482:	bf00      	nop
 8006484:	e000      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10b      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006490:	4bb9      	ldr	r3, [pc, #740]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006494:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800649c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064a0:	4ab5      	ldr	r2, [pc, #724]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064a2:	430b      	orrs	r3, r1
 80064a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80064a6:	e003      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80064bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064be:	2300      	movs	r3, #0
 80064c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80064c6:	460b      	mov	r3, r1
 80064c8:	4313      	orrs	r3, r2
 80064ca:	d009      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064cc:	4baa      	ldr	r3, [pc, #680]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80064d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064da:	4aa7      	ldr	r2, [pc, #668]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064dc:	430b      	orrs	r3, r1
 80064de:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80064e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80064ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80064ee:	2300      	movs	r3, #0
 80064f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80064f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80064f6:	460b      	mov	r3, r1
 80064f8:	4313      	orrs	r3, r2
 80064fa:	d00a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80064fc:	4b9e      	ldr	r3, [pc, #632]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006508:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800650c:	4a9a      	ldr	r2, [pc, #616]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800650e:	430b      	orrs	r3, r1
 8006510:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800651e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006520:	2300      	movs	r3, #0
 8006522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006524:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006528:	460b      	mov	r3, r1
 800652a:	4313      	orrs	r3, r2
 800652c:	d009      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800652e:	4b92      	ldr	r3, [pc, #584]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006532:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800653c:	4a8e      	ldr	r2, [pc, #568]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800653e:	430b      	orrs	r3, r1
 8006540:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800654e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006550:	2300      	movs	r3, #0
 8006552:	647b      	str	r3, [r7, #68]	@ 0x44
 8006554:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006558:	460b      	mov	r3, r1
 800655a:	4313      	orrs	r3, r2
 800655c:	d00e      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800655e:	4b86      	ldr	r3, [pc, #536]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	4a85      	ldr	r2, [pc, #532]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006564:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006568:	6113      	str	r3, [r2, #16]
 800656a:	4b83      	ldr	r3, [pc, #524]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800656c:	6919      	ldr	r1, [r3, #16]
 800656e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006572:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006576:	4a80      	ldr	r2, [pc, #512]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006578:	430b      	orrs	r3, r1
 800657a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800657c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006588:	63bb      	str	r3, [r7, #56]	@ 0x38
 800658a:	2300      	movs	r3, #0
 800658c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800658e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006592:	460b      	mov	r3, r1
 8006594:	4313      	orrs	r3, r2
 8006596:	d009      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006598:	4b77      	ldr	r3, [pc, #476]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800659a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800659c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a6:	4a74      	ldr	r2, [pc, #464]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065a8:	430b      	orrs	r3, r1
 80065aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80065b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80065ba:	2300      	movs	r3, #0
 80065bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	d00a      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065c8:	4b6b      	ldr	r3, [pc, #428]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065cc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065d8:	4a67      	ldr	r2, [pc, #412]	@ (8006778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80065de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	2100      	movs	r1, #0
 80065e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80065f4:	460b      	mov	r3, r1
 80065f6:	4313      	orrs	r3, r2
 80065f8:	d011      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fe:	3308      	adds	r3, #8
 8006600:	2100      	movs	r1, #0
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fb78 	bl	8006cf8 <RCCEx_PLL2_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800660e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800661e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	2100      	movs	r1, #0
 8006628:	6239      	str	r1, [r7, #32]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006630:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006634:	460b      	mov	r3, r1
 8006636:	4313      	orrs	r3, r2
 8006638:	d011      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663e:	3308      	adds	r3, #8
 8006640:	2101      	movs	r1, #1
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fb58 	bl	8006cf8 <RCCEx_PLL2_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800664e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800665a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	2100      	movs	r1, #0
 8006668:	61b9      	str	r1, [r7, #24]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006674:	460b      	mov	r3, r1
 8006676:	4313      	orrs	r3, r2
 8006678:	d011      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	3308      	adds	r3, #8
 8006680:	2102      	movs	r1, #2
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fb38 	bl	8006cf8 <RCCEx_PLL2_Config>
 8006688:	4603      	mov	r3, r0
 800668a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800668e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800669a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	2100      	movs	r1, #0
 80066a8:	6139      	str	r1, [r7, #16]
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80066b4:	460b      	mov	r3, r1
 80066b6:	4313      	orrs	r3, r2
 80066b8:	d011      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066be:	3328      	adds	r3, #40	@ 0x28
 80066c0:	2100      	movs	r1, #0
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fbca 	bl	8006e5c <RCCEx_PLL3_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80066ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80066de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	2100      	movs	r1, #0
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	f003 0310 	and.w	r3, r3, #16
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d011      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fe:	3328      	adds	r3, #40	@ 0x28
 8006700:	2101      	movs	r1, #1
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fbaa 	bl	8006e5c <RCCEx_PLL3_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800670e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800671a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	2100      	movs	r1, #0
 8006728:	6039      	str	r1, [r7, #0]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	607b      	str	r3, [r7, #4]
 8006730:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006734:	460b      	mov	r3, r1
 8006736:	4313      	orrs	r3, r2
 8006738:	d011      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800673a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673e:	3328      	adds	r3, #40	@ 0x28
 8006740:	2102      	movs	r1, #2
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fb8a 	bl	8006e5c <RCCEx_PLL3_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800674e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800675e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e000      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
}
 800676c:	4618      	mov	r0, r3
 800676e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006772:	46bd      	mov	sp, r7
 8006774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006778:	58024400 	.word	0x58024400

0800677c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006780:	f7fe fd96 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 8006784:	4602      	mov	r2, r0
 8006786:	4b06      	ldr	r3, [pc, #24]	@ (80067a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	091b      	lsrs	r3, r3, #4
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	4904      	ldr	r1, [pc, #16]	@ (80067a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006792:	5ccb      	ldrb	r3, [r1, r3]
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800679c:	4618      	mov	r0, r3
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	58024400 	.word	0x58024400
 80067a4:	0800e730 	.word	0x0800e730

080067a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b089      	sub	sp, #36	@ 0x24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067b0:	4ba1      	ldr	r3, [pc, #644]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80067ba:	4b9f      	ldr	r3, [pc, #636]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067be:	0b1b      	lsrs	r3, r3, #12
 80067c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80067c6:	4b9c      	ldr	r3, [pc, #624]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ca:	091b      	lsrs	r3, r3, #4
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80067d2:	4b99      	ldr	r3, [pc, #612]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d6:	08db      	lsrs	r3, r3, #3
 80067d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 8111 	beq.w	8006a18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	f000 8083 	beq.w	8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	2b02      	cmp	r3, #2
 8006802:	f200 80a1 	bhi.w	8006948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d056      	beq.n	80068c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006812:	e099      	b.n	8006948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006814:	4b88      	ldr	r3, [pc, #544]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b00      	cmp	r3, #0
 800681e:	d02d      	beq.n	800687c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006820:	4b85      	ldr	r3, [pc, #532]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	08db      	lsrs	r3, r3, #3
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	4a84      	ldr	r2, [pc, #528]	@ (8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800682c:	fa22 f303 	lsr.w	r3, r2, r3
 8006830:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	ee07 3a90 	vmov	s15, r3
 8006838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	ee07 3a90 	vmov	s15, r3
 8006842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684a:	4b7b      	ldr	r3, [pc, #492]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800684c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685a:	ed97 6a03 	vldr	s12, [r7, #12]
 800685e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800686a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800686e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006876:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800687a:	e087      	b.n	800698c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006886:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800688a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800688e:	4b6a      	ldr	r3, [pc, #424]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800689e:	ed97 6a03 	vldr	s12, [r7, #12]
 80068a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068be:	e065      	b.n	800698c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d2:	4b59      	ldr	r3, [pc, #356]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006902:	e043      	b.n	800698c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006916:	4b48      	ldr	r3, [pc, #288]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691e:	ee07 3a90 	vmov	s15, r3
 8006922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006926:	ed97 6a03 	vldr	s12, [r7, #12]
 800692a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800692e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800693a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006946:	e021      	b.n	800698c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006952:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800695a:	4b37      	ldr	r3, [pc, #220]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800696a:	ed97 6a03 	vldr	s12, [r7, #12]
 800696e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800697a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800697e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800698a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800698c:	4b2a      	ldr	r3, [pc, #168]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800698e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006990:	0a5b      	lsrs	r3, r3, #9
 8006992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80069aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069b2:	ee17 2a90 	vmov	r2, s15
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80069ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069be:	0c1b      	lsrs	r3, r3, #16
 80069c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069c4:	ee07 3a90 	vmov	s15, r3
 80069c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80069d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069e0:	ee17 2a90 	vmov	r2, s15
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80069e8:	4b13      	ldr	r3, [pc, #76]	@ (8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ec:	0e1b      	lsrs	r3, r3, #24
 80069ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a0e:	ee17 2a90 	vmov	r2, s15
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a16:	e008      	b.n	8006a2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	609a      	str	r2, [r3, #8]
}
 8006a2a:	bf00      	nop
 8006a2c:	3724      	adds	r7, #36	@ 0x24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	58024400 	.word	0x58024400
 8006a3c:	03d09000 	.word	0x03d09000
 8006a40:	46000000 	.word	0x46000000
 8006a44:	4c742400 	.word	0x4c742400
 8006a48:	4a742400 	.word	0x4a742400
 8006a4c:	4bbebc20 	.word	0x4bbebc20

08006a50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b089      	sub	sp, #36	@ 0x24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a58:	4ba1      	ldr	r3, [pc, #644]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5c:	f003 0303 	and.w	r3, r3, #3
 8006a60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006a62:	4b9f      	ldr	r3, [pc, #636]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a66:	0d1b      	lsrs	r3, r3, #20
 8006a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	0a1b      	lsrs	r3, r3, #8
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a7a:	4b99      	ldr	r3, [pc, #612]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a7e:	08db      	lsrs	r3, r3, #3
 8006a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	fb02 f303 	mul.w	r3, r2, r3
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 8111 	beq.w	8006cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	f000 8083 	beq.w	8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	f200 80a1 	bhi.w	8006bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d056      	beq.n	8006b68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006aba:	e099      	b.n	8006bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006abc:	4b88      	ldr	r3, [pc, #544]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d02d      	beq.n	8006b24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ac8:	4b85      	ldr	r3, [pc, #532]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	08db      	lsrs	r3, r3, #3
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	4a84      	ldr	r2, [pc, #528]	@ (8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	ee07 3a90 	vmov	s15, r3
 8006ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b22:	e087      	b.n	8006c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b36:	4b6a      	ldr	r3, [pc, #424]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b66:	e065      	b.n	8006c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7a:	4b59      	ldr	r3, [pc, #356]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006baa:	e043      	b.n	8006c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bbe:	4b48      	ldr	r3, [pc, #288]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bee:	e021      	b.n	8006c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c02:	4b37      	ldr	r3, [pc, #220]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006c34:	4b2a      	ldr	r3, [pc, #168]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c38:	0a5b      	lsrs	r3, r3, #9
 8006c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c5a:	ee17 2a90 	vmov	r2, s15
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006c62:	4b1f      	ldr	r3, [pc, #124]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	0c1b      	lsrs	r3, r3, #16
 8006c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c6c:	ee07 3a90 	vmov	s15, r3
 8006c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c88:	ee17 2a90 	vmov	r2, s15
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c90:	4b13      	ldr	r3, [pc, #76]	@ (8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c94:	0e1b      	lsrs	r3, r3, #24
 8006c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cb6:	ee17 2a90 	vmov	r2, s15
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	609a      	str	r2, [r3, #8]
}
 8006cd2:	bf00      	nop
 8006cd4:	3724      	adds	r7, #36	@ 0x24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	58024400 	.word	0x58024400
 8006ce4:	03d09000 	.word	0x03d09000
 8006ce8:	46000000 	.word	0x46000000
 8006cec:	4c742400 	.word	0x4c742400
 8006cf0:	4a742400 	.word	0x4a742400
 8006cf4:	4bbebc20 	.word	0x4bbebc20

08006cf8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d06:	4b53      	ldr	r3, [pc, #332]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d101      	bne.n	8006d16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e099      	b.n	8006e4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d16:	4b4f      	ldr	r3, [pc, #316]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a4e      	ldr	r2, [pc, #312]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d1c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d22:	f7fa fae1 	bl	80012e8 <HAL_GetTick>
 8006d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d28:	e008      	b.n	8006d3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d2a:	f7fa fadd 	bl	80012e8 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e086      	b.n	8006e4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d3c:	4b45      	ldr	r3, [pc, #276]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1f0      	bne.n	8006d2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d48:	4b42      	ldr	r3, [pc, #264]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	031b      	lsls	r3, r3, #12
 8006d56:	493f      	ldr	r1, [pc, #252]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	3b01      	subs	r3, #1
 8006d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	025b      	lsls	r3, r3, #9
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	041b      	lsls	r3, r3, #16
 8006d7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	061b      	lsls	r3, r3, #24
 8006d88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d8c:	4931      	ldr	r1, [pc, #196]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d92:	4b30      	ldr	r3, [pc, #192]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	492d      	ldr	r1, [pc, #180]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006da4:	4b2b      	ldr	r3, [pc, #172]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da8:	f023 0220 	bic.w	r2, r3, #32
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	4928      	ldr	r1, [pc, #160]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006db6:	4b27      	ldr	r3, [pc, #156]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dba:	4a26      	ldr	r2, [pc, #152]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	f023 0310 	bic.w	r3, r3, #16
 8006dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006dc2:	4b24      	ldr	r3, [pc, #144]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dc6:	4b24      	ldr	r3, [pc, #144]	@ (8006e58 <RCCEx_PLL2_Config+0x160>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	69d2      	ldr	r2, [r2, #28]
 8006dce:	00d2      	lsls	r2, r2, #3
 8006dd0:	4920      	ldr	r1, [pc, #128]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	4a1e      	ldr	r2, [pc, #120]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006ddc:	f043 0310 	orr.w	r3, r3, #16
 8006de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d106      	bne.n	8006df6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006de8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	4a19      	ldr	r2, [pc, #100]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006df2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006df4:	e00f      	b.n	8006e16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d106      	bne.n	8006e0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006dfc:	4b15      	ldr	r3, [pc, #84]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e00:	4a14      	ldr	r2, [pc, #80]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e08:	e005      	b.n	8006e16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e0a:	4b12      	ldr	r3, [pc, #72]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	4a11      	ldr	r2, [pc, #68]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006e10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e16:	4b0f      	ldr	r3, [pc, #60]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006e1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e22:	f7fa fa61 	bl	80012e8 <HAL_GetTick>
 8006e26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e28:	e008      	b.n	8006e3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e2a:	f7fa fa5d 	bl	80012e8 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d901      	bls.n	8006e3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e006      	b.n	8006e4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e3c:	4b05      	ldr	r3, [pc, #20]	@ (8006e54 <RCCEx_PLL2_Config+0x15c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0f0      	beq.n	8006e2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	58024400 	.word	0x58024400
 8006e58:	ffff0007 	.word	0xffff0007

08006e5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e6a:	4b53      	ldr	r3, [pc, #332]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d101      	bne.n	8006e7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e099      	b.n	8006fae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a4e      	ldr	r2, [pc, #312]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e86:	f7fa fa2f 	bl	80012e8 <HAL_GetTick>
 8006e8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e8c:	e008      	b.n	8006ea0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e8e:	f7fa fa2b 	bl	80012e8 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d901      	bls.n	8006ea0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e086      	b.n	8006fae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ea0:	4b45      	ldr	r3, [pc, #276]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f0      	bne.n	8006e8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006eac:	4b42      	ldr	r3, [pc, #264]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	051b      	lsls	r3, r3, #20
 8006eba:	493f      	ldr	r1, [pc, #252]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	025b      	lsls	r3, r3, #9
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	041b      	lsls	r3, r3, #16
 8006ede:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	061b      	lsls	r3, r3, #24
 8006eec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ef0:	4931      	ldr	r1, [pc, #196]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ef6:	4b30      	ldr	r3, [pc, #192]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	492d      	ldr	r1, [pc, #180]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f08:	4b2b      	ldr	r3, [pc, #172]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	4928      	ldr	r1, [pc, #160]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f1a:	4b27      	ldr	r3, [pc, #156]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1e:	4a26      	ldr	r2, [pc, #152]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f26:	4b24      	ldr	r3, [pc, #144]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f2a:	4b24      	ldr	r3, [pc, #144]	@ (8006fbc <RCCEx_PLL3_Config+0x160>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	69d2      	ldr	r2, [r2, #28]
 8006f32:	00d2      	lsls	r2, r2, #3
 8006f34:	4920      	ldr	r1, [pc, #128]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d106      	bne.n	8006f5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f50:	4a19      	ldr	r2, [pc, #100]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006f56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f58:	e00f      	b.n	8006f7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d106      	bne.n	8006f6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f60:	4b15      	ldr	r3, [pc, #84]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f64:	4a14      	ldr	r2, [pc, #80]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f6c:	e005      	b.n	8006f7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f6e:	4b12      	ldr	r3, [pc, #72]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f72:	4a11      	ldr	r2, [pc, #68]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f86:	f7fa f9af 	bl	80012e8 <HAL_GetTick>
 8006f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f8c:	e008      	b.n	8006fa0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f8e:	f7fa f9ab 	bl	80012e8 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e006      	b.n	8006fae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fa0:	4b05      	ldr	r3, [pc, #20]	@ (8006fb8 <RCCEx_PLL3_Config+0x15c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0f0      	beq.n	8006f8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	58024400 	.word	0x58024400
 8006fbc:	ffff0007 	.word	0xffff0007

08006fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e049      	b.n	8007066 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7f9 ff22 	bl	8000e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f000 f96e 	bl	80072e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d020      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d01b      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f06f 0202 	mvn.w	r2, #2
 80070a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	f003 0303 	and.w	r3, r3, #3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f8f3 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 80070be:	e005      	b.n	80070cc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f8e5 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f8f6 	bl	80072b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d020      	beq.n	800711e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d01b      	beq.n	800711e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f06f 0204 	mvn.w	r2, #4
 80070ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f8cd 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 800710a:	e005      	b.n	8007118 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f8bf 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8d0 	bl	80072b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d020      	beq.n	800716a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01b      	beq.n	800716a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f06f 0208 	mvn.w	r2, #8
 800713a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2204      	movs	r2, #4
 8007140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f8a7 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 8007156:	e005      	b.n	8007164 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f899 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f8aa 	bl	80072b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b00      	cmp	r3, #0
 8007172:	d020      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f003 0310 	and.w	r3, r3, #16
 800717a:	2b00      	cmp	r3, #0
 800717c:	d01b      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f06f 0210 	mvn.w	r2, #16
 8007186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2208      	movs	r2, #8
 800718c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f881 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 80071a2:	e005      	b.n	80071b0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f873 	bl	8007290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f884 	bl	80072b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00c      	beq.n	80071da <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f06f 0201 	mvn.w	r2, #1
 80071d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f851 	bl	800727c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d104      	bne.n	80071ee <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00c      	beq.n	8007208 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f9a4 	bl	8007550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00c      	beq.n	800722c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007218:	2b00      	cmp	r3, #0
 800721a:	d007      	beq.n	800722c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f99c 	bl	8007564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00c      	beq.n	8007250 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f83e 	bl	80072cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f003 0320 	and.w	r3, r3, #32
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f06f 0220 	mvn.w	r2, #32
 800726c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f964 	bl	800753c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a43      	ldr	r2, [pc, #268]	@ (8007400 <TIM_Base_SetConfig+0x120>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d013      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072fe:	d00f      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a40      	ldr	r2, [pc, #256]	@ (8007404 <TIM_Base_SetConfig+0x124>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00b      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a3f      	ldr	r2, [pc, #252]	@ (8007408 <TIM_Base_SetConfig+0x128>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d007      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a3e      	ldr	r2, [pc, #248]	@ (800740c <TIM_Base_SetConfig+0x12c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_Base_SetConfig+0x40>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a3d      	ldr	r2, [pc, #244]	@ (8007410 <TIM_Base_SetConfig+0x130>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d108      	bne.n	8007332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a32      	ldr	r2, [pc, #200]	@ (8007400 <TIM_Base_SetConfig+0x120>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01f      	beq.n	800737a <TIM_Base_SetConfig+0x9a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007340:	d01b      	beq.n	800737a <TIM_Base_SetConfig+0x9a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a2f      	ldr	r2, [pc, #188]	@ (8007404 <TIM_Base_SetConfig+0x124>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d017      	beq.n	800737a <TIM_Base_SetConfig+0x9a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a2e      	ldr	r2, [pc, #184]	@ (8007408 <TIM_Base_SetConfig+0x128>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <TIM_Base_SetConfig+0x9a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a2d      	ldr	r2, [pc, #180]	@ (800740c <TIM_Base_SetConfig+0x12c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d00f      	beq.n	800737a <TIM_Base_SetConfig+0x9a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a2c      	ldr	r2, [pc, #176]	@ (8007410 <TIM_Base_SetConfig+0x130>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00b      	beq.n	800737a <TIM_Base_SetConfig+0x9a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a2b      	ldr	r2, [pc, #172]	@ (8007414 <TIM_Base_SetConfig+0x134>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d007      	beq.n	800737a <TIM_Base_SetConfig+0x9a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a2a      	ldr	r2, [pc, #168]	@ (8007418 <TIM_Base_SetConfig+0x138>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d003      	beq.n	800737a <TIM_Base_SetConfig+0x9a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a29      	ldr	r2, [pc, #164]	@ (800741c <TIM_Base_SetConfig+0x13c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d108      	bne.n	800738c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	4313      	orrs	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a14      	ldr	r2, [pc, #80]	@ (8007400 <TIM_Base_SetConfig+0x120>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00f      	beq.n	80073d2 <TIM_Base_SetConfig+0xf2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a16      	ldr	r2, [pc, #88]	@ (8007410 <TIM_Base_SetConfig+0x130>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00b      	beq.n	80073d2 <TIM_Base_SetConfig+0xf2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a15      	ldr	r2, [pc, #84]	@ (8007414 <TIM_Base_SetConfig+0x134>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d007      	beq.n	80073d2 <TIM_Base_SetConfig+0xf2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a14      	ldr	r2, [pc, #80]	@ (8007418 <TIM_Base_SetConfig+0x138>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d003      	beq.n	80073d2 <TIM_Base_SetConfig+0xf2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a13      	ldr	r2, [pc, #76]	@ (800741c <TIM_Base_SetConfig+0x13c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d103      	bne.n	80073da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	691a      	ldr	r2, [r3, #16]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f043 0204 	orr.w	r2, r3, #4
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	601a      	str	r2, [r3, #0]
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40010000 	.word	0x40010000
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800
 800740c:	40000c00 	.word	0x40000c00
 8007410:	40010400 	.word	0x40010400
 8007414:	40014000 	.word	0x40014000
 8007418:	40014400 	.word	0x40014400
 800741c:	40014800 	.word	0x40014800

08007420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007434:	2302      	movs	r3, #2
 8007436:	e06d      	b.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a30      	ldr	r2, [pc, #192]	@ (8007520 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d004      	beq.n	800746c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2f      	ldr	r2, [pc, #188]	@ (8007524 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d108      	bne.n	800747e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007472:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007484:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a20      	ldr	r2, [pc, #128]	@ (8007520 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d022      	beq.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074aa:	d01d      	beq.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007528 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d018      	beq.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1c      	ldr	r2, [pc, #112]	@ (800752c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1a      	ldr	r2, [pc, #104]	@ (8007530 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00e      	beq.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a15      	ldr	r2, [pc, #84]	@ (8007524 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d009      	beq.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a16      	ldr	r2, [pc, #88]	@ (8007534 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a15      	ldr	r2, [pc, #84]	@ (8007538 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d10c      	bne.n	8007502 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	40010000 	.word	0x40010000
 8007524:	40010400 	.word	0x40010400
 8007528:	40000400 	.word	0x40000400
 800752c:	40000800 	.word	0x40000800
 8007530:	40000c00 	.word	0x40000c00
 8007534:	40001800 	.word	0x40001800
 8007538:	40014000 	.word	0x40014000

0800753c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e042      	b.n	8007610 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007590:	2b00      	cmp	r3, #0
 8007592:	d106      	bne.n	80075a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7f9 fc6f 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2224      	movs	r2, #36	@ 0x24
 80075a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0201 	bic.w	r2, r2, #1
 80075b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 f986 	bl	80088d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fc1b 	bl	8007e04 <UART_SetConfig>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e01b      	b.n	8007610 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0201 	orr.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 fa05 	bl	8008a18 <UART_CheckIdleState>
 800760e:	4603      	mov	r3, r0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b0ba      	sub	sp, #232	@ 0xe8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800763e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007642:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007646:	4013      	ands	r3, r2
 8007648:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800764c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007650:	2b00      	cmp	r3, #0
 8007652:	d11b      	bne.n	800768c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007658:	f003 0320 	and.w	r3, r3, #32
 800765c:	2b00      	cmp	r3, #0
 800765e:	d015      	beq.n	800768c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b00      	cmp	r3, #0
 800766a:	d105      	bne.n	8007678 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800766c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d009      	beq.n	800768c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 8393 	beq.w	8007da8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
      }
      return;
 800768a:	e38d      	b.n	8007da8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800768c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 8123 	beq.w	80078dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007696:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800769a:	4b8d      	ldr	r3, [pc, #564]	@ (80078d0 <HAL_UART_IRQHandler+0x2b8>)
 800769c:	4013      	ands	r3, r2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d106      	bne.n	80076b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80076a6:	4b8b      	ldr	r3, [pc, #556]	@ (80078d4 <HAL_UART_IRQHandler+0x2bc>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 8116 	beq.w	80078dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d011      	beq.n	80076e0 <HAL_UART_IRQHandler+0xc8>
 80076bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00b      	beq.n	80076e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2201      	movs	r2, #1
 80076ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076d6:	f043 0201 	orr.w	r2, r3, #1
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d011      	beq.n	8007710 <HAL_UART_IRQHandler+0xf8>
 80076ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2202      	movs	r2, #2
 80076fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007706:	f043 0204 	orr.w	r2, r3, #4
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007714:	f003 0304 	and.w	r3, r3, #4
 8007718:	2b00      	cmp	r3, #0
 800771a:	d011      	beq.n	8007740 <HAL_UART_IRQHandler+0x128>
 800771c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00b      	beq.n	8007740 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2204      	movs	r2, #4
 800772e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007736:	f043 0202 	orr.w	r2, r3, #2
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007744:	f003 0308 	and.w	r3, r3, #8
 8007748:	2b00      	cmp	r3, #0
 800774a:	d017      	beq.n	800777c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800774c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d105      	bne.n	8007764 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007758:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800775c:	4b5c      	ldr	r3, [pc, #368]	@ (80078d0 <HAL_UART_IRQHandler+0x2b8>)
 800775e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2208      	movs	r2, #8
 800776a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007772:	f043 0208 	orr.w	r2, r3, #8
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800777c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007784:	2b00      	cmp	r3, #0
 8007786:	d012      	beq.n	80077ae <HAL_UART_IRQHandler+0x196>
 8007788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800778c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00c      	beq.n	80077ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800779c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a4:	f043 0220 	orr.w	r2, r3, #32
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 82f9 	beq.w	8007dac <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d013      	beq.n	80077ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d105      	bne.n	80077de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d007      	beq.n	80077ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007802:	2b40      	cmp	r3, #64	@ 0x40
 8007804:	d005      	beq.n	8007812 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800780a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800780e:	2b00      	cmp	r3, #0
 8007810:	d054      	beq.n	80078bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f001 fa18 	bl	8008c48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007822:	2b40      	cmp	r3, #64	@ 0x40
 8007824:	d146      	bne.n	80078b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800783c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3308      	adds	r3, #8
 800784e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007852:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007856:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800785e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800786a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1d9      	bne.n	8007826 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007878:	2b00      	cmp	r3, #0
 800787a:	d017      	beq.n	80078ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007882:	4a15      	ldr	r2, [pc, #84]	@ (80078d8 <HAL_UART_IRQHandler+0x2c0>)
 8007884:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800788c:	4618      	mov	r0, r3
 800788e:	f7fa fa3f 	bl	8001d10 <HAL_DMA_Abort_IT>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d019      	beq.n	80078cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800789e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80078a6:	4610      	mov	r0, r2
 80078a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078aa:	e00f      	b.n	80078cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fa93 	bl	8007dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b2:	e00b      	b.n	80078cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fa8f 	bl	8007dd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ba:	e007      	b.n	80078cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fa8b 	bl	8007dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80078ca:	e26f      	b.n	8007dac <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078cc:	bf00      	nop
    return;
 80078ce:	e26d      	b.n	8007dac <HAL_UART_IRQHandler+0x794>
 80078d0:	10000001 	.word	0x10000001
 80078d4:	04000120 	.word	0x04000120
 80078d8:	08008d15 	.word	0x08008d15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	f040 8203 	bne.w	8007cec <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ea:	f003 0310 	and.w	r3, r3, #16
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 81fc 	beq.w	8007cec <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 81f5 	beq.w	8007cec <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2210      	movs	r2, #16
 8007908:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007914:	2b40      	cmp	r3, #64	@ 0x40
 8007916:	f040 816d 	bne.w	8007bf4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4aa4      	ldr	r2, [pc, #656]	@ (8007bb4 <HAL_UART_IRQHandler+0x59c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d068      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4aa1      	ldr	r2, [pc, #644]	@ (8007bb8 <HAL_UART_IRQHandler+0x5a0>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d061      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a9f      	ldr	r2, [pc, #636]	@ (8007bbc <HAL_UART_IRQHandler+0x5a4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d05a      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a9c      	ldr	r2, [pc, #624]	@ (8007bc0 <HAL_UART_IRQHandler+0x5a8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d053      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a9a      	ldr	r2, [pc, #616]	@ (8007bc4 <HAL_UART_IRQHandler+0x5ac>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d04c      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a97      	ldr	r2, [pc, #604]	@ (8007bc8 <HAL_UART_IRQHandler+0x5b0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d045      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a95      	ldr	r2, [pc, #596]	@ (8007bcc <HAL_UART_IRQHandler+0x5b4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d03e      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a92      	ldr	r2, [pc, #584]	@ (8007bd0 <HAL_UART_IRQHandler+0x5b8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d037      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a90      	ldr	r2, [pc, #576]	@ (8007bd4 <HAL_UART_IRQHandler+0x5bc>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d030      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a8d      	ldr	r2, [pc, #564]	@ (8007bd8 <HAL_UART_IRQHandler+0x5c0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d029      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a8b      	ldr	r2, [pc, #556]	@ (8007bdc <HAL_UART_IRQHandler+0x5c4>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d022      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a88      	ldr	r2, [pc, #544]	@ (8007be0 <HAL_UART_IRQHandler+0x5c8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d01b      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a86      	ldr	r2, [pc, #536]	@ (8007be4 <HAL_UART_IRQHandler+0x5cc>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d014      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a83      	ldr	r2, [pc, #524]	@ (8007be8 <HAL_UART_IRQHandler+0x5d0>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d00d      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a81      	ldr	r2, [pc, #516]	@ (8007bec <HAL_UART_IRQHandler+0x5d4>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d006      	beq.n	80079fa <HAL_UART_IRQHandler+0x3e2>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a7e      	ldr	r2, [pc, #504]	@ (8007bf0 <HAL_UART_IRQHandler+0x5d8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d106      	bne.n	8007a08 <HAL_UART_IRQHandler+0x3f0>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	e005      	b.n	8007a14 <HAL_UART_IRQHandler+0x3fc>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 80ad 	beq.w	8007b7c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	f080 80a5 	bcs.w	8007b7c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a48:	f000 8087 	beq.w	8007b5a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1da      	bne.n	8007a4c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007aa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007aa8:	f023 0301 	bic.w	r3, r3, #1
 8007aac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007aba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ac2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007acc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e1      	bne.n	8007a96 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3308      	adds	r3, #8
 8007af2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007af6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007af8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007afc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e3      	bne.n	8007ad2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b28:	f023 0310 	bic.w	r3, r3, #16
 8007b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e4      	bne.n	8007b18 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7f9 fdbd 	bl	80016d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f939 	bl	8007dec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007b7a:	e119      	b.n	8007db0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b86:	429a      	cmp	r2, r3
 8007b88:	f040 8112 	bne.w	8007db0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b98:	f040 810a 	bne.w	8007db0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f91e 	bl	8007dec <HAL_UARTEx_RxEventCallback>
      return;
 8007bb0:	e0fe      	b.n	8007db0 <HAL_UART_IRQHandler+0x798>
 8007bb2:	bf00      	nop
 8007bb4:	40020010 	.word	0x40020010
 8007bb8:	40020028 	.word	0x40020028
 8007bbc:	40020040 	.word	0x40020040
 8007bc0:	40020058 	.word	0x40020058
 8007bc4:	40020070 	.word	0x40020070
 8007bc8:	40020088 	.word	0x40020088
 8007bcc:	400200a0 	.word	0x400200a0
 8007bd0:	400200b8 	.word	0x400200b8
 8007bd4:	40020410 	.word	0x40020410
 8007bd8:	40020428 	.word	0x40020428
 8007bdc:	40020440 	.word	0x40020440
 8007be0:	40020458 	.word	0x40020458
 8007be4:	40020470 	.word	0x40020470
 8007be8:	40020488 	.word	0x40020488
 8007bec:	400204a0 	.word	0x400204a0
 8007bf0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80cf 	beq.w	8007db4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007c16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 80ca 	beq.w	8007db4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c44:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e4      	bne.n	8007c20 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	623b      	str	r3, [r7, #32]
   return(result);
 8007c66:	6a3a      	ldr	r2, [r7, #32]
 8007c68:	4b55      	ldr	r3, [pc, #340]	@ (8007dc0 <HAL_UART_IRQHandler+0x7a8>)
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e3      	bne.n	8007c56 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2220      	movs	r2, #32
 8007c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f023 0310 	bic.w	r3, r3, #16
 8007cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cc4:	61fb      	str	r3, [r7, #28]
 8007cc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	69b9      	ldr	r1, [r7, #24]
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e4      	bne.n	8007ca2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f881 	bl	8007dec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cea:	e063      	b.n	8007db4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00e      	beq.n	8007d16 <HAL_UART_IRQHandler+0x6fe>
 8007cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d008      	beq.n	8007d16 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f001 f83d 	bl	8008d8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d14:	e051      	b.n	8007dba <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d014      	beq.n	8007d4c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d105      	bne.n	8007d3a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d008      	beq.n	8007d4c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d03a      	beq.n	8007db8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	4798      	blx	r3
    }
    return;
 8007d4a:	e035      	b.n	8007db8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d009      	beq.n	8007d6c <HAL_UART_IRQHandler+0x754>
 8007d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d003      	beq.n	8007d6c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 ffe7 	bl	8008d38 <UART_EndTransmit_IT>
    return;
 8007d6a:	e026      	b.n	8007dba <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d009      	beq.n	8007d8c <HAL_UART_IRQHandler+0x774>
 8007d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 f816 	bl	8008db6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d8a:	e016      	b.n	8007dba <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d010      	beq.n	8007dba <HAL_UART_IRQHandler+0x7a2>
 8007d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	da0c      	bge.n	8007dba <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fffe 	bl	8008da2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007da6:	e008      	b.n	8007dba <HAL_UART_IRQHandler+0x7a2>
      return;
 8007da8:	bf00      	nop
 8007daa:	e006      	b.n	8007dba <HAL_UART_IRQHandler+0x7a2>
    return;
 8007dac:	bf00      	nop
 8007dae:	e004      	b.n	8007dba <HAL_UART_IRQHandler+0x7a2>
      return;
 8007db0:	bf00      	nop
 8007db2:	e002      	b.n	8007dba <HAL_UART_IRQHandler+0x7a2>
      return;
 8007db4:	bf00      	nop
 8007db6:	e000      	b.n	8007dba <HAL_UART_IRQHandler+0x7a2>
    return;
 8007db8:	bf00      	nop
  }
}
 8007dba:	37e8      	adds	r7, #232	@ 0xe8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	effffffe 	.word	0xeffffffe

08007dc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e08:	b092      	sub	sp, #72	@ 0x48
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	431a      	orrs	r2, r3
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	4bbe      	ldr	r3, [pc, #760]	@ (800812c <UART_SetConfig+0x328>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	6812      	ldr	r2, [r2, #0]
 8007e3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e3c:	430b      	orrs	r3, r1
 8007e3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	68da      	ldr	r2, [r3, #12]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4ab3      	ldr	r2, [pc, #716]	@ (8008130 <UART_SetConfig+0x32c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d004      	beq.n	8007e70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689a      	ldr	r2, [r3, #8]
 8007e76:	4baf      	ldr	r3, [pc, #700]	@ (8008134 <UART_SetConfig+0x330>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	6812      	ldr	r2, [r2, #0]
 8007e7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e80:	430b      	orrs	r3, r1
 8007e82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8a:	f023 010f 	bic.w	r1, r3, #15
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4aa6      	ldr	r2, [pc, #664]	@ (8008138 <UART_SetConfig+0x334>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d177      	bne.n	8007f94 <UART_SetConfig+0x190>
 8007ea4:	4ba5      	ldr	r3, [pc, #660]	@ (800813c <UART_SetConfig+0x338>)
 8007ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ea8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007eac:	2b28      	cmp	r3, #40	@ 0x28
 8007eae:	d86d      	bhi.n	8007f8c <UART_SetConfig+0x188>
 8007eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb8 <UART_SetConfig+0xb4>)
 8007eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb6:	bf00      	nop
 8007eb8:	08007f5d 	.word	0x08007f5d
 8007ebc:	08007f8d 	.word	0x08007f8d
 8007ec0:	08007f8d 	.word	0x08007f8d
 8007ec4:	08007f8d 	.word	0x08007f8d
 8007ec8:	08007f8d 	.word	0x08007f8d
 8007ecc:	08007f8d 	.word	0x08007f8d
 8007ed0:	08007f8d 	.word	0x08007f8d
 8007ed4:	08007f8d 	.word	0x08007f8d
 8007ed8:	08007f65 	.word	0x08007f65
 8007edc:	08007f8d 	.word	0x08007f8d
 8007ee0:	08007f8d 	.word	0x08007f8d
 8007ee4:	08007f8d 	.word	0x08007f8d
 8007ee8:	08007f8d 	.word	0x08007f8d
 8007eec:	08007f8d 	.word	0x08007f8d
 8007ef0:	08007f8d 	.word	0x08007f8d
 8007ef4:	08007f8d 	.word	0x08007f8d
 8007ef8:	08007f6d 	.word	0x08007f6d
 8007efc:	08007f8d 	.word	0x08007f8d
 8007f00:	08007f8d 	.word	0x08007f8d
 8007f04:	08007f8d 	.word	0x08007f8d
 8007f08:	08007f8d 	.word	0x08007f8d
 8007f0c:	08007f8d 	.word	0x08007f8d
 8007f10:	08007f8d 	.word	0x08007f8d
 8007f14:	08007f8d 	.word	0x08007f8d
 8007f18:	08007f75 	.word	0x08007f75
 8007f1c:	08007f8d 	.word	0x08007f8d
 8007f20:	08007f8d 	.word	0x08007f8d
 8007f24:	08007f8d 	.word	0x08007f8d
 8007f28:	08007f8d 	.word	0x08007f8d
 8007f2c:	08007f8d 	.word	0x08007f8d
 8007f30:	08007f8d 	.word	0x08007f8d
 8007f34:	08007f8d 	.word	0x08007f8d
 8007f38:	08007f7d 	.word	0x08007f7d
 8007f3c:	08007f8d 	.word	0x08007f8d
 8007f40:	08007f8d 	.word	0x08007f8d
 8007f44:	08007f8d 	.word	0x08007f8d
 8007f48:	08007f8d 	.word	0x08007f8d
 8007f4c:	08007f8d 	.word	0x08007f8d
 8007f50:	08007f8d 	.word	0x08007f8d
 8007f54:	08007f8d 	.word	0x08007f8d
 8007f58:	08007f85 	.word	0x08007f85
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f62:	e222      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007f64:	2304      	movs	r3, #4
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f6a:	e21e      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007f6c:	2308      	movs	r3, #8
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f72:	e21a      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007f74:	2310      	movs	r3, #16
 8007f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7a:	e216      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007f7c:	2320      	movs	r3, #32
 8007f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f82:	e212      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007f84:	2340      	movs	r3, #64	@ 0x40
 8007f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8a:	e20e      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007f8c:	2380      	movs	r3, #128	@ 0x80
 8007f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f92:	e20a      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a69      	ldr	r2, [pc, #420]	@ (8008140 <UART_SetConfig+0x33c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d130      	bne.n	8008000 <UART_SetConfig+0x1fc>
 8007f9e:	4b67      	ldr	r3, [pc, #412]	@ (800813c <UART_SetConfig+0x338>)
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	2b05      	cmp	r3, #5
 8007fa8:	d826      	bhi.n	8007ff8 <UART_SetConfig+0x1f4>
 8007faa:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb0 <UART_SetConfig+0x1ac>)
 8007fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb0:	08007fc9 	.word	0x08007fc9
 8007fb4:	08007fd1 	.word	0x08007fd1
 8007fb8:	08007fd9 	.word	0x08007fd9
 8007fbc:	08007fe1 	.word	0x08007fe1
 8007fc0:	08007fe9 	.word	0x08007fe9
 8007fc4:	08007ff1 	.word	0x08007ff1
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fce:	e1ec      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007fd0:	2304      	movs	r3, #4
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd6:	e1e8      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007fd8:	2308      	movs	r3, #8
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fde:	e1e4      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe6:	e1e0      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007fe8:	2320      	movs	r3, #32
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fee:	e1dc      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007ff0:	2340      	movs	r3, #64	@ 0x40
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff6:	e1d8      	b.n	80083aa <UART_SetConfig+0x5a6>
 8007ff8:	2380      	movs	r3, #128	@ 0x80
 8007ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffe:	e1d4      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a4f      	ldr	r2, [pc, #316]	@ (8008144 <UART_SetConfig+0x340>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d130      	bne.n	800806c <UART_SetConfig+0x268>
 800800a:	4b4c      	ldr	r3, [pc, #304]	@ (800813c <UART_SetConfig+0x338>)
 800800c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	2b05      	cmp	r3, #5
 8008014:	d826      	bhi.n	8008064 <UART_SetConfig+0x260>
 8008016:	a201      	add	r2, pc, #4	@ (adr r2, 800801c <UART_SetConfig+0x218>)
 8008018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801c:	08008035 	.word	0x08008035
 8008020:	0800803d 	.word	0x0800803d
 8008024:	08008045 	.word	0x08008045
 8008028:	0800804d 	.word	0x0800804d
 800802c:	08008055 	.word	0x08008055
 8008030:	0800805d 	.word	0x0800805d
 8008034:	2300      	movs	r3, #0
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800803a:	e1b6      	b.n	80083aa <UART_SetConfig+0x5a6>
 800803c:	2304      	movs	r3, #4
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008042:	e1b2      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008044:	2308      	movs	r3, #8
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804a:	e1ae      	b.n	80083aa <UART_SetConfig+0x5a6>
 800804c:	2310      	movs	r3, #16
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008052:	e1aa      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008054:	2320      	movs	r3, #32
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805a:	e1a6      	b.n	80083aa <UART_SetConfig+0x5a6>
 800805c:	2340      	movs	r3, #64	@ 0x40
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008062:	e1a2      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008064:	2380      	movs	r3, #128	@ 0x80
 8008066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806a:	e19e      	b.n	80083aa <UART_SetConfig+0x5a6>
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a35      	ldr	r2, [pc, #212]	@ (8008148 <UART_SetConfig+0x344>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d130      	bne.n	80080d8 <UART_SetConfig+0x2d4>
 8008076:	4b31      	ldr	r3, [pc, #196]	@ (800813c <UART_SetConfig+0x338>)
 8008078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807a:	f003 0307 	and.w	r3, r3, #7
 800807e:	2b05      	cmp	r3, #5
 8008080:	d826      	bhi.n	80080d0 <UART_SetConfig+0x2cc>
 8008082:	a201      	add	r2, pc, #4	@ (adr r2, 8008088 <UART_SetConfig+0x284>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080a1 	.word	0x080080a1
 800808c:	080080a9 	.word	0x080080a9
 8008090:	080080b1 	.word	0x080080b1
 8008094:	080080b9 	.word	0x080080b9
 8008098:	080080c1 	.word	0x080080c1
 800809c:	080080c9 	.word	0x080080c9
 80080a0:	2300      	movs	r3, #0
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a6:	e180      	b.n	80083aa <UART_SetConfig+0x5a6>
 80080a8:	2304      	movs	r3, #4
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ae:	e17c      	b.n	80083aa <UART_SetConfig+0x5a6>
 80080b0:	2308      	movs	r3, #8
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b6:	e178      	b.n	80083aa <UART_SetConfig+0x5a6>
 80080b8:	2310      	movs	r3, #16
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080be:	e174      	b.n	80083aa <UART_SetConfig+0x5a6>
 80080c0:	2320      	movs	r3, #32
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c6:	e170      	b.n	80083aa <UART_SetConfig+0x5a6>
 80080c8:	2340      	movs	r3, #64	@ 0x40
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ce:	e16c      	b.n	80083aa <UART_SetConfig+0x5a6>
 80080d0:	2380      	movs	r3, #128	@ 0x80
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080d6:	e168      	b.n	80083aa <UART_SetConfig+0x5a6>
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a1b      	ldr	r2, [pc, #108]	@ (800814c <UART_SetConfig+0x348>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d142      	bne.n	8008168 <UART_SetConfig+0x364>
 80080e2:	4b16      	ldr	r3, [pc, #88]	@ (800813c <UART_SetConfig+0x338>)
 80080e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	2b05      	cmp	r3, #5
 80080ec:	d838      	bhi.n	8008160 <UART_SetConfig+0x35c>
 80080ee:	a201      	add	r2, pc, #4	@ (adr r2, 80080f4 <UART_SetConfig+0x2f0>)
 80080f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f4:	0800810d 	.word	0x0800810d
 80080f8:	08008115 	.word	0x08008115
 80080fc:	0800811d 	.word	0x0800811d
 8008100:	08008125 	.word	0x08008125
 8008104:	08008151 	.word	0x08008151
 8008108:	08008159 	.word	0x08008159
 800810c:	2300      	movs	r3, #0
 800810e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008112:	e14a      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008114:	2304      	movs	r3, #4
 8008116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800811a:	e146      	b.n	80083aa <UART_SetConfig+0x5a6>
 800811c:	2308      	movs	r3, #8
 800811e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008122:	e142      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008124:	2310      	movs	r3, #16
 8008126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812a:	e13e      	b.n	80083aa <UART_SetConfig+0x5a6>
 800812c:	cfff69f3 	.word	0xcfff69f3
 8008130:	58000c00 	.word	0x58000c00
 8008134:	11fff4ff 	.word	0x11fff4ff
 8008138:	40011000 	.word	0x40011000
 800813c:	58024400 	.word	0x58024400
 8008140:	40004400 	.word	0x40004400
 8008144:	40004800 	.word	0x40004800
 8008148:	40004c00 	.word	0x40004c00
 800814c:	40005000 	.word	0x40005000
 8008150:	2320      	movs	r3, #32
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008156:	e128      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008158:	2340      	movs	r3, #64	@ 0x40
 800815a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800815e:	e124      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008160:	2380      	movs	r3, #128	@ 0x80
 8008162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008166:	e120      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4acb      	ldr	r2, [pc, #812]	@ (800849c <UART_SetConfig+0x698>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d176      	bne.n	8008260 <UART_SetConfig+0x45c>
 8008172:	4bcb      	ldr	r3, [pc, #812]	@ (80084a0 <UART_SetConfig+0x69c>)
 8008174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008176:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800817a:	2b28      	cmp	r3, #40	@ 0x28
 800817c:	d86c      	bhi.n	8008258 <UART_SetConfig+0x454>
 800817e:	a201      	add	r2, pc, #4	@ (adr r2, 8008184 <UART_SetConfig+0x380>)
 8008180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008184:	08008229 	.word	0x08008229
 8008188:	08008259 	.word	0x08008259
 800818c:	08008259 	.word	0x08008259
 8008190:	08008259 	.word	0x08008259
 8008194:	08008259 	.word	0x08008259
 8008198:	08008259 	.word	0x08008259
 800819c:	08008259 	.word	0x08008259
 80081a0:	08008259 	.word	0x08008259
 80081a4:	08008231 	.word	0x08008231
 80081a8:	08008259 	.word	0x08008259
 80081ac:	08008259 	.word	0x08008259
 80081b0:	08008259 	.word	0x08008259
 80081b4:	08008259 	.word	0x08008259
 80081b8:	08008259 	.word	0x08008259
 80081bc:	08008259 	.word	0x08008259
 80081c0:	08008259 	.word	0x08008259
 80081c4:	08008239 	.word	0x08008239
 80081c8:	08008259 	.word	0x08008259
 80081cc:	08008259 	.word	0x08008259
 80081d0:	08008259 	.word	0x08008259
 80081d4:	08008259 	.word	0x08008259
 80081d8:	08008259 	.word	0x08008259
 80081dc:	08008259 	.word	0x08008259
 80081e0:	08008259 	.word	0x08008259
 80081e4:	08008241 	.word	0x08008241
 80081e8:	08008259 	.word	0x08008259
 80081ec:	08008259 	.word	0x08008259
 80081f0:	08008259 	.word	0x08008259
 80081f4:	08008259 	.word	0x08008259
 80081f8:	08008259 	.word	0x08008259
 80081fc:	08008259 	.word	0x08008259
 8008200:	08008259 	.word	0x08008259
 8008204:	08008249 	.word	0x08008249
 8008208:	08008259 	.word	0x08008259
 800820c:	08008259 	.word	0x08008259
 8008210:	08008259 	.word	0x08008259
 8008214:	08008259 	.word	0x08008259
 8008218:	08008259 	.word	0x08008259
 800821c:	08008259 	.word	0x08008259
 8008220:	08008259 	.word	0x08008259
 8008224:	08008251 	.word	0x08008251
 8008228:	2301      	movs	r3, #1
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800822e:	e0bc      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008230:	2304      	movs	r3, #4
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008236:	e0b8      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008238:	2308      	movs	r3, #8
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823e:	e0b4      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008240:	2310      	movs	r3, #16
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008246:	e0b0      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008248:	2320      	movs	r3, #32
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824e:	e0ac      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008250:	2340      	movs	r3, #64	@ 0x40
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008256:	e0a8      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008258:	2380      	movs	r3, #128	@ 0x80
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825e:	e0a4      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a8f      	ldr	r2, [pc, #572]	@ (80084a4 <UART_SetConfig+0x6a0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d130      	bne.n	80082cc <UART_SetConfig+0x4c8>
 800826a:	4b8d      	ldr	r3, [pc, #564]	@ (80084a0 <UART_SetConfig+0x69c>)
 800826c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	2b05      	cmp	r3, #5
 8008274:	d826      	bhi.n	80082c4 <UART_SetConfig+0x4c0>
 8008276:	a201      	add	r2, pc, #4	@ (adr r2, 800827c <UART_SetConfig+0x478>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	08008295 	.word	0x08008295
 8008280:	0800829d 	.word	0x0800829d
 8008284:	080082a5 	.word	0x080082a5
 8008288:	080082ad 	.word	0x080082ad
 800828c:	080082b5 	.word	0x080082b5
 8008290:	080082bd 	.word	0x080082bd
 8008294:	2300      	movs	r3, #0
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829a:	e086      	b.n	80083aa <UART_SetConfig+0x5a6>
 800829c:	2304      	movs	r3, #4
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a2:	e082      	b.n	80083aa <UART_SetConfig+0x5a6>
 80082a4:	2308      	movs	r3, #8
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082aa:	e07e      	b.n	80083aa <UART_SetConfig+0x5a6>
 80082ac:	2310      	movs	r3, #16
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b2:	e07a      	b.n	80083aa <UART_SetConfig+0x5a6>
 80082b4:	2320      	movs	r3, #32
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ba:	e076      	b.n	80083aa <UART_SetConfig+0x5a6>
 80082bc:	2340      	movs	r3, #64	@ 0x40
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c2:	e072      	b.n	80083aa <UART_SetConfig+0x5a6>
 80082c4:	2380      	movs	r3, #128	@ 0x80
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ca:	e06e      	b.n	80083aa <UART_SetConfig+0x5a6>
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a75      	ldr	r2, [pc, #468]	@ (80084a8 <UART_SetConfig+0x6a4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d130      	bne.n	8008338 <UART_SetConfig+0x534>
 80082d6:	4b72      	ldr	r3, [pc, #456]	@ (80084a0 <UART_SetConfig+0x69c>)
 80082d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082da:	f003 0307 	and.w	r3, r3, #7
 80082de:	2b05      	cmp	r3, #5
 80082e0:	d826      	bhi.n	8008330 <UART_SetConfig+0x52c>
 80082e2:	a201      	add	r2, pc, #4	@ (adr r2, 80082e8 <UART_SetConfig+0x4e4>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	08008301 	.word	0x08008301
 80082ec:	08008309 	.word	0x08008309
 80082f0:	08008311 	.word	0x08008311
 80082f4:	08008319 	.word	0x08008319
 80082f8:	08008321 	.word	0x08008321
 80082fc:	08008329 	.word	0x08008329
 8008300:	2300      	movs	r3, #0
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008306:	e050      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008308:	2304      	movs	r3, #4
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800830e:	e04c      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008310:	2308      	movs	r3, #8
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008316:	e048      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008318:	2310      	movs	r3, #16
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831e:	e044      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008320:	2320      	movs	r3, #32
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008326:	e040      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008328:	2340      	movs	r3, #64	@ 0x40
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832e:	e03c      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008330:	2380      	movs	r3, #128	@ 0x80
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008336:	e038      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a5b      	ldr	r2, [pc, #364]	@ (80084ac <UART_SetConfig+0x6a8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d130      	bne.n	80083a4 <UART_SetConfig+0x5a0>
 8008342:	4b57      	ldr	r3, [pc, #348]	@ (80084a0 <UART_SetConfig+0x69c>)
 8008344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	2b05      	cmp	r3, #5
 800834c:	d826      	bhi.n	800839c <UART_SetConfig+0x598>
 800834e:	a201      	add	r2, pc, #4	@ (adr r2, 8008354 <UART_SetConfig+0x550>)
 8008350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008354:	0800836d 	.word	0x0800836d
 8008358:	08008375 	.word	0x08008375
 800835c:	0800837d 	.word	0x0800837d
 8008360:	08008385 	.word	0x08008385
 8008364:	0800838d 	.word	0x0800838d
 8008368:	08008395 	.word	0x08008395
 800836c:	2302      	movs	r3, #2
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008372:	e01a      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008374:	2304      	movs	r3, #4
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837a:	e016      	b.n	80083aa <UART_SetConfig+0x5a6>
 800837c:	2308      	movs	r3, #8
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008382:	e012      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008384:	2310      	movs	r3, #16
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838a:	e00e      	b.n	80083aa <UART_SetConfig+0x5a6>
 800838c:	2320      	movs	r3, #32
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008392:	e00a      	b.n	80083aa <UART_SetConfig+0x5a6>
 8008394:	2340      	movs	r3, #64	@ 0x40
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839a:	e006      	b.n	80083aa <UART_SetConfig+0x5a6>
 800839c:	2380      	movs	r3, #128	@ 0x80
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a2:	e002      	b.n	80083aa <UART_SetConfig+0x5a6>
 80083a4:	2380      	movs	r3, #128	@ 0x80
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a3f      	ldr	r2, [pc, #252]	@ (80084ac <UART_SetConfig+0x6a8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	f040 80f8 	bne.w	80085a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80083ba:	2b20      	cmp	r3, #32
 80083bc:	dc46      	bgt.n	800844c <UART_SetConfig+0x648>
 80083be:	2b02      	cmp	r3, #2
 80083c0:	f2c0 8082 	blt.w	80084c8 <UART_SetConfig+0x6c4>
 80083c4:	3b02      	subs	r3, #2
 80083c6:	2b1e      	cmp	r3, #30
 80083c8:	d87e      	bhi.n	80084c8 <UART_SetConfig+0x6c4>
 80083ca:	a201      	add	r2, pc, #4	@ (adr r2, 80083d0 <UART_SetConfig+0x5cc>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	08008453 	.word	0x08008453
 80083d4:	080084c9 	.word	0x080084c9
 80083d8:	0800845b 	.word	0x0800845b
 80083dc:	080084c9 	.word	0x080084c9
 80083e0:	080084c9 	.word	0x080084c9
 80083e4:	080084c9 	.word	0x080084c9
 80083e8:	0800846b 	.word	0x0800846b
 80083ec:	080084c9 	.word	0x080084c9
 80083f0:	080084c9 	.word	0x080084c9
 80083f4:	080084c9 	.word	0x080084c9
 80083f8:	080084c9 	.word	0x080084c9
 80083fc:	080084c9 	.word	0x080084c9
 8008400:	080084c9 	.word	0x080084c9
 8008404:	080084c9 	.word	0x080084c9
 8008408:	0800847b 	.word	0x0800847b
 800840c:	080084c9 	.word	0x080084c9
 8008410:	080084c9 	.word	0x080084c9
 8008414:	080084c9 	.word	0x080084c9
 8008418:	080084c9 	.word	0x080084c9
 800841c:	080084c9 	.word	0x080084c9
 8008420:	080084c9 	.word	0x080084c9
 8008424:	080084c9 	.word	0x080084c9
 8008428:	080084c9 	.word	0x080084c9
 800842c:	080084c9 	.word	0x080084c9
 8008430:	080084c9 	.word	0x080084c9
 8008434:	080084c9 	.word	0x080084c9
 8008438:	080084c9 	.word	0x080084c9
 800843c:	080084c9 	.word	0x080084c9
 8008440:	080084c9 	.word	0x080084c9
 8008444:	080084c9 	.word	0x080084c9
 8008448:	080084bb 	.word	0x080084bb
 800844c:	2b40      	cmp	r3, #64	@ 0x40
 800844e:	d037      	beq.n	80084c0 <UART_SetConfig+0x6bc>
 8008450:	e03a      	b.n	80084c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008452:	f7fe f993 	bl	800677c <HAL_RCCEx_GetD3PCLK1Freq>
 8008456:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008458:	e03c      	b.n	80084d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800845a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe f9a2 	bl	80067a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008468:	e034      	b.n	80084d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800846a:	f107 0318 	add.w	r3, r7, #24
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe faee 	bl	8006a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008478:	e02c      	b.n	80084d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800847a:	4b09      	ldr	r3, [pc, #36]	@ (80084a0 <UART_SetConfig+0x69c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0320 	and.w	r3, r3, #32
 8008482:	2b00      	cmp	r3, #0
 8008484:	d016      	beq.n	80084b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008486:	4b06      	ldr	r3, [pc, #24]	@ (80084a0 <UART_SetConfig+0x69c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	08db      	lsrs	r3, r3, #3
 800848c:	f003 0303 	and.w	r3, r3, #3
 8008490:	4a07      	ldr	r2, [pc, #28]	@ (80084b0 <UART_SetConfig+0x6ac>)
 8008492:	fa22 f303 	lsr.w	r3, r2, r3
 8008496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008498:	e01c      	b.n	80084d4 <UART_SetConfig+0x6d0>
 800849a:	bf00      	nop
 800849c:	40011400 	.word	0x40011400
 80084a0:	58024400 	.word	0x58024400
 80084a4:	40007800 	.word	0x40007800
 80084a8:	40007c00 	.word	0x40007c00
 80084ac:	58000c00 	.word	0x58000c00
 80084b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80084b4:	4b9d      	ldr	r3, [pc, #628]	@ (800872c <UART_SetConfig+0x928>)
 80084b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084b8:	e00c      	b.n	80084d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084ba:	4b9d      	ldr	r3, [pc, #628]	@ (8008730 <UART_SetConfig+0x92c>)
 80084bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084be:	e009      	b.n	80084d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c6:	e005      	b.n	80084d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80084d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 81de 	beq.w	8008898 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e0:	4a94      	ldr	r2, [pc, #592]	@ (8008734 <UART_SetConfig+0x930>)
 80084e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084e6:	461a      	mov	r2, r3
 80084e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	4613      	mov	r3, r2
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	4413      	add	r3, r2
 80084fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d305      	bcc.n	800850c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008508:	429a      	cmp	r2, r3
 800850a:	d903      	bls.n	8008514 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008512:	e1c1      	b.n	8008898 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008516:	2200      	movs	r2, #0
 8008518:	60bb      	str	r3, [r7, #8]
 800851a:	60fa      	str	r2, [r7, #12]
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008520:	4a84      	ldr	r2, [pc, #528]	@ (8008734 <UART_SetConfig+0x930>)
 8008522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008526:	b29b      	uxth	r3, r3
 8008528:	2200      	movs	r2, #0
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	607a      	str	r2, [r7, #4]
 800852e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008536:	f7f7 fecf 	bl	80002d8 <__aeabi_uldivmod>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4610      	mov	r0, r2
 8008540:	4619      	mov	r1, r3
 8008542:	f04f 0200 	mov.w	r2, #0
 8008546:	f04f 0300 	mov.w	r3, #0
 800854a:	020b      	lsls	r3, r1, #8
 800854c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008550:	0202      	lsls	r2, r0, #8
 8008552:	6979      	ldr	r1, [r7, #20]
 8008554:	6849      	ldr	r1, [r1, #4]
 8008556:	0849      	lsrs	r1, r1, #1
 8008558:	2000      	movs	r0, #0
 800855a:	460c      	mov	r4, r1
 800855c:	4605      	mov	r5, r0
 800855e:	eb12 0804 	adds.w	r8, r2, r4
 8008562:	eb43 0905 	adc.w	r9, r3, r5
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	469a      	mov	sl, r3
 800856e:	4693      	mov	fp, r2
 8008570:	4652      	mov	r2, sl
 8008572:	465b      	mov	r3, fp
 8008574:	4640      	mov	r0, r8
 8008576:	4649      	mov	r1, r9
 8008578:	f7f7 feae 	bl	80002d8 <__aeabi_uldivmod>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4613      	mov	r3, r2
 8008582:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008586:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800858a:	d308      	bcc.n	800859e <UART_SetConfig+0x79a>
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008592:	d204      	bcs.n	800859e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800859a:	60da      	str	r2, [r3, #12]
 800859c:	e17c      	b.n	8008898 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80085a4:	e178      	b.n	8008898 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085ae:	f040 80c5 	bne.w	800873c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80085b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80085b6:	2b20      	cmp	r3, #32
 80085b8:	dc48      	bgt.n	800864c <UART_SetConfig+0x848>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	db7b      	blt.n	80086b6 <UART_SetConfig+0x8b2>
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d879      	bhi.n	80086b6 <UART_SetConfig+0x8b2>
 80085c2:	a201      	add	r2, pc, #4	@ (adr r2, 80085c8 <UART_SetConfig+0x7c4>)
 80085c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c8:	08008653 	.word	0x08008653
 80085cc:	0800865b 	.word	0x0800865b
 80085d0:	080086b7 	.word	0x080086b7
 80085d4:	080086b7 	.word	0x080086b7
 80085d8:	08008663 	.word	0x08008663
 80085dc:	080086b7 	.word	0x080086b7
 80085e0:	080086b7 	.word	0x080086b7
 80085e4:	080086b7 	.word	0x080086b7
 80085e8:	08008673 	.word	0x08008673
 80085ec:	080086b7 	.word	0x080086b7
 80085f0:	080086b7 	.word	0x080086b7
 80085f4:	080086b7 	.word	0x080086b7
 80085f8:	080086b7 	.word	0x080086b7
 80085fc:	080086b7 	.word	0x080086b7
 8008600:	080086b7 	.word	0x080086b7
 8008604:	080086b7 	.word	0x080086b7
 8008608:	08008683 	.word	0x08008683
 800860c:	080086b7 	.word	0x080086b7
 8008610:	080086b7 	.word	0x080086b7
 8008614:	080086b7 	.word	0x080086b7
 8008618:	080086b7 	.word	0x080086b7
 800861c:	080086b7 	.word	0x080086b7
 8008620:	080086b7 	.word	0x080086b7
 8008624:	080086b7 	.word	0x080086b7
 8008628:	080086b7 	.word	0x080086b7
 800862c:	080086b7 	.word	0x080086b7
 8008630:	080086b7 	.word	0x080086b7
 8008634:	080086b7 	.word	0x080086b7
 8008638:	080086b7 	.word	0x080086b7
 800863c:	080086b7 	.word	0x080086b7
 8008640:	080086b7 	.word	0x080086b7
 8008644:	080086b7 	.word	0x080086b7
 8008648:	080086a9 	.word	0x080086a9
 800864c:	2b40      	cmp	r3, #64	@ 0x40
 800864e:	d02e      	beq.n	80086ae <UART_SetConfig+0x8aa>
 8008650:	e031      	b.n	80086b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008652:	f7fc fe5d 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 8008656:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008658:	e033      	b.n	80086c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800865a:	f7fc fe6f 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 800865e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008660:	e02f      	b.n	80086c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe f89e 	bl	80067a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800866c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008670:	e027      	b.n	80086c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008672:	f107 0318 	add.w	r3, r7, #24
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe f9ea 	bl	8006a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008680:	e01f      	b.n	80086c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008682:	4b2d      	ldr	r3, [pc, #180]	@ (8008738 <UART_SetConfig+0x934>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0320 	and.w	r3, r3, #32
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800868e:	4b2a      	ldr	r3, [pc, #168]	@ (8008738 <UART_SetConfig+0x934>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	08db      	lsrs	r3, r3, #3
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	4a24      	ldr	r2, [pc, #144]	@ (800872c <UART_SetConfig+0x928>)
 800869a:	fa22 f303 	lsr.w	r3, r2, r3
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086a0:	e00f      	b.n	80086c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80086a2:	4b22      	ldr	r3, [pc, #136]	@ (800872c <UART_SetConfig+0x928>)
 80086a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086a6:	e00c      	b.n	80086c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086a8:	4b21      	ldr	r3, [pc, #132]	@ (8008730 <UART_SetConfig+0x92c>)
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ac:	e009      	b.n	80086c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b4:	e005      	b.n	80086c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80086c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 80e7 	beq.w	8008898 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ce:	4a19      	ldr	r2, [pc, #100]	@ (8008734 <UART_SetConfig+0x930>)
 80086d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086d4:	461a      	mov	r2, r3
 80086d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80086dc:	005a      	lsls	r2, r3, #1
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	085b      	lsrs	r3, r3, #1
 80086e4:	441a      	add	r2, r3
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f2:	2b0f      	cmp	r3, #15
 80086f4:	d916      	bls.n	8008724 <UART_SetConfig+0x920>
 80086f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086fc:	d212      	bcs.n	8008724 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008700:	b29b      	uxth	r3, r3
 8008702:	f023 030f 	bic.w	r3, r3, #15
 8008706:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870a:	085b      	lsrs	r3, r3, #1
 800870c:	b29b      	uxth	r3, r3
 800870e:	f003 0307 	and.w	r3, r3, #7
 8008712:	b29a      	uxth	r2, r3
 8008714:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008716:	4313      	orrs	r3, r2
 8008718:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008720:	60da      	str	r2, [r3, #12]
 8008722:	e0b9      	b.n	8008898 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800872a:	e0b5      	b.n	8008898 <UART_SetConfig+0xa94>
 800872c:	03d09000 	.word	0x03d09000
 8008730:	003d0900 	.word	0x003d0900
 8008734:	0800e740 	.word	0x0800e740
 8008738:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800873c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008740:	2b20      	cmp	r3, #32
 8008742:	dc49      	bgt.n	80087d8 <UART_SetConfig+0x9d4>
 8008744:	2b00      	cmp	r3, #0
 8008746:	db7c      	blt.n	8008842 <UART_SetConfig+0xa3e>
 8008748:	2b20      	cmp	r3, #32
 800874a:	d87a      	bhi.n	8008842 <UART_SetConfig+0xa3e>
 800874c:	a201      	add	r2, pc, #4	@ (adr r2, 8008754 <UART_SetConfig+0x950>)
 800874e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008752:	bf00      	nop
 8008754:	080087df 	.word	0x080087df
 8008758:	080087e7 	.word	0x080087e7
 800875c:	08008843 	.word	0x08008843
 8008760:	08008843 	.word	0x08008843
 8008764:	080087ef 	.word	0x080087ef
 8008768:	08008843 	.word	0x08008843
 800876c:	08008843 	.word	0x08008843
 8008770:	08008843 	.word	0x08008843
 8008774:	080087ff 	.word	0x080087ff
 8008778:	08008843 	.word	0x08008843
 800877c:	08008843 	.word	0x08008843
 8008780:	08008843 	.word	0x08008843
 8008784:	08008843 	.word	0x08008843
 8008788:	08008843 	.word	0x08008843
 800878c:	08008843 	.word	0x08008843
 8008790:	08008843 	.word	0x08008843
 8008794:	0800880f 	.word	0x0800880f
 8008798:	08008843 	.word	0x08008843
 800879c:	08008843 	.word	0x08008843
 80087a0:	08008843 	.word	0x08008843
 80087a4:	08008843 	.word	0x08008843
 80087a8:	08008843 	.word	0x08008843
 80087ac:	08008843 	.word	0x08008843
 80087b0:	08008843 	.word	0x08008843
 80087b4:	08008843 	.word	0x08008843
 80087b8:	08008843 	.word	0x08008843
 80087bc:	08008843 	.word	0x08008843
 80087c0:	08008843 	.word	0x08008843
 80087c4:	08008843 	.word	0x08008843
 80087c8:	08008843 	.word	0x08008843
 80087cc:	08008843 	.word	0x08008843
 80087d0:	08008843 	.word	0x08008843
 80087d4:	08008835 	.word	0x08008835
 80087d8:	2b40      	cmp	r3, #64	@ 0x40
 80087da:	d02e      	beq.n	800883a <UART_SetConfig+0xa36>
 80087dc:	e031      	b.n	8008842 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087de:	f7fc fd97 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 80087e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087e4:	e033      	b.n	800884e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087e6:	f7fc fda9 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 80087ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087ec:	e02f      	b.n	800884e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fd ffd8 	bl	80067a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087fc:	e027      	b.n	800884e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087fe:	f107 0318 	add.w	r3, r7, #24
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe f924 	bl	8006a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880c:	e01f      	b.n	800884e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800880e:	4b2d      	ldr	r3, [pc, #180]	@ (80088c4 <UART_SetConfig+0xac0>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0320 	and.w	r3, r3, #32
 8008816:	2b00      	cmp	r3, #0
 8008818:	d009      	beq.n	800882e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800881a:	4b2a      	ldr	r3, [pc, #168]	@ (80088c4 <UART_SetConfig+0xac0>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	08db      	lsrs	r3, r3, #3
 8008820:	f003 0303 	and.w	r3, r3, #3
 8008824:	4a28      	ldr	r2, [pc, #160]	@ (80088c8 <UART_SetConfig+0xac4>)
 8008826:	fa22 f303 	lsr.w	r3, r2, r3
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800882c:	e00f      	b.n	800884e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800882e:	4b26      	ldr	r3, [pc, #152]	@ (80088c8 <UART_SetConfig+0xac4>)
 8008830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008832:	e00c      	b.n	800884e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008834:	4b25      	ldr	r3, [pc, #148]	@ (80088cc <UART_SetConfig+0xac8>)
 8008836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008838:	e009      	b.n	800884e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800883a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800883e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008840:	e005      	b.n	800884e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800884c:	bf00      	nop
    }

    if (pclk != 0U)
 800884e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d021      	beq.n	8008898 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008858:	4a1d      	ldr	r2, [pc, #116]	@ (80088d0 <UART_SetConfig+0xacc>)
 800885a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800885e:	461a      	mov	r2, r3
 8008860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008862:	fbb3 f2f2 	udiv	r2, r3, r2
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	085b      	lsrs	r3, r3, #1
 800886c:	441a      	add	r2, r3
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	fbb2 f3f3 	udiv	r3, r2, r3
 8008876:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887a:	2b0f      	cmp	r3, #15
 800887c:	d909      	bls.n	8008892 <UART_SetConfig+0xa8e>
 800887e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008884:	d205      	bcs.n	8008892 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008888:	b29a      	uxth	r2, r3
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60da      	str	r2, [r3, #12]
 8008890:	e002      	b.n	8008898 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2201      	movs	r2, #1
 800889c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2200      	movs	r2, #0
 80088ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2200      	movs	r2, #0
 80088b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80088b4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3748      	adds	r7, #72	@ 0x48
 80088bc:	46bd      	mov	sp, r7
 80088be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088c2:	bf00      	nop
 80088c4:	58024400 	.word	0x58024400
 80088c8:	03d09000 	.word	0x03d09000
 80088cc:	003d0900 	.word	0x003d0900
 80088d0:	0800e740 	.word	0x0800e740

080088d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e0:	f003 0308 	and.w	r3, r3, #8
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00a      	beq.n	80088fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00a      	beq.n	8008920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	430a      	orrs	r2, r1
 800891e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00a      	beq.n	8008942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	430a      	orrs	r2, r1
 8008940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008946:	f003 0304 	and.w	r3, r3, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00a      	beq.n	8008964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	430a      	orrs	r2, r1
 8008962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008968:	f003 0310 	and.w	r3, r3, #16
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00a      	beq.n	8008986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898a:	f003 0320 	and.w	r3, r3, #32
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d01a      	beq.n	80089ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089d2:	d10a      	bne.n	80089ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00a      	beq.n	8008a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	605a      	str	r2, [r3, #4]
  }
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b098      	sub	sp, #96	@ 0x60
 8008a1c:	af02      	add	r7, sp, #8
 8008a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a28:	f7f8 fc5e 	bl	80012e8 <HAL_GetTick>
 8008a2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0308 	and.w	r3, r3, #8
 8008a38:	2b08      	cmp	r3, #8
 8008a3a:	d12f      	bne.n	8008a9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a44:	2200      	movs	r2, #0
 8008a46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f88e 	bl	8008b6c <UART_WaitOnFlagUntilTimeout>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d022      	beq.n	8008a9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	461a      	mov	r2, r3
 8008a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a7c:	e841 2300 	strex	r3, r2, [r1]
 8008a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e6      	bne.n	8008a56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e063      	b.n	8008b64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d149      	bne.n	8008b3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aaa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f857 	bl	8008b6c <UART_WaitOnFlagUntilTimeout>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d03c      	beq.n	8008b3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008acc:	e853 3f00 	ldrex	r3, [r3]
 8008ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ae2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aea:	e841 2300 	strex	r3, r2, [r1]
 8008aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1e6      	bne.n	8008ac4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3308      	adds	r3, #8
 8008afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f023 0301 	bic.w	r3, r3, #1
 8008b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3308      	adds	r3, #8
 8008b14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b16:	61fa      	str	r2, [r7, #28]
 8008b18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1a:	69b9      	ldr	r1, [r7, #24]
 8008b1c:	69fa      	ldr	r2, [r7, #28]
 8008b1e:	e841 2300 	strex	r3, r2, [r1]
 8008b22:	617b      	str	r3, [r7, #20]
   return(result);
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1e5      	bne.n	8008af6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e012      	b.n	8008b64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3758      	adds	r7, #88	@ 0x58
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b7c:	e04f      	b.n	8008c1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b84:	d04b      	beq.n	8008c1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b86:	f7f8 fbaf 	bl	80012e8 <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d302      	bcc.n	8008b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e04e      	b.n	8008c3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0304 	and.w	r3, r3, #4
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d037      	beq.n	8008c1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	2b80      	cmp	r3, #128	@ 0x80
 8008bb2:	d034      	beq.n	8008c1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b40      	cmp	r3, #64	@ 0x40
 8008bb8:	d031      	beq.n	8008c1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	f003 0308 	and.w	r3, r3, #8
 8008bc4:	2b08      	cmp	r3, #8
 8008bc6:	d110      	bne.n	8008bea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2208      	movs	r2, #8
 8008bce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 f839 	bl	8008c48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2208      	movs	r2, #8
 8008bda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e029      	b.n	8008c3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	69db      	ldr	r3, [r3, #28]
 8008bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bf8:	d111      	bne.n	8008c1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f000 f81f 	bl	8008c48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e00f      	b.n	8008c3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	69da      	ldr	r2, [r3, #28]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	4013      	ands	r3, r2
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	bf0c      	ite	eq
 8008c2e:	2301      	moveq	r3, #1
 8008c30:	2300      	movne	r3, #0
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	461a      	mov	r2, r3
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d0a0      	beq.n	8008b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
	...

08008c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b095      	sub	sp, #84	@ 0x54
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c58:	e853 3f00 	ldrex	r3, [r3]
 8008c5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c76:	e841 2300 	strex	r3, r2, [r1]
 8008c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1e6      	bne.n	8008c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3308      	adds	r3, #8
 8008c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	4b1e      	ldr	r3, [pc, #120]	@ (8008d10 <UART_EndRxTransfer+0xc8>)
 8008c96:	4013      	ands	r3, r2
 8008c98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e5      	bne.n	8008c82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d118      	bne.n	8008cf0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	e853 3f00 	ldrex	r3, [r3]
 8008cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f023 0310 	bic.w	r3, r3, #16
 8008cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cdc:	61bb      	str	r3, [r7, #24]
 8008cde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce0:	6979      	ldr	r1, [r7, #20]
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	e841 2300 	strex	r3, r2, [r1]
 8008ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1e6      	bne.n	8008cbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008d04:	bf00      	nop
 8008d06:	3754      	adds	r7, #84	@ 0x54
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	effffffe 	.word	0xeffffffe

08008d14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f7ff f854 	bl	8007dd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d30:	bf00      	nop
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	e853 3f00 	ldrex	r3, [r3]
 8008d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d54:	61fb      	str	r3, [r7, #28]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	61bb      	str	r3, [r7, #24]
 8008d60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d62:	6979      	ldr	r1, [r7, #20]
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	e841 2300 	strex	r3, r2, [r1]
 8008d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1e6      	bne.n	8008d40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2220      	movs	r2, #32
 8008d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff f81f 	bl	8007dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d86:	bf00      	nop
 8008d88:	3720      	adds	r7, #32
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b083      	sub	sp, #12
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008daa:	bf00      	nop
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008dbe:	bf00      	nop
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b085      	sub	sp, #20
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d101      	bne.n	8008de0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ddc:	2302      	movs	r3, #2
 8008dde:	e027      	b.n	8008e30 <HAL_UARTEx_DisableFifoMode+0x66>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2224      	movs	r2, #36	@ 0x24
 8008dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 0201 	bic.w	r2, r2, #1
 8008e06:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d101      	bne.n	8008e54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e50:	2302      	movs	r3, #2
 8008e52:	e02d      	b.n	8008eb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2224      	movs	r2, #36	@ 0x24
 8008e60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0201 	bic.w	r2, r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	430a      	orrs	r2, r1
 8008e8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f84f 	bl	8008f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d101      	bne.n	8008ed0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ecc:	2302      	movs	r3, #2
 8008ece:	e02d      	b.n	8008f2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2224      	movs	r2, #36	@ 0x24
 8008edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 0201 	bic.w	r2, r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f811 	bl	8008f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d108      	bne.n	8008f56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f54:	e031      	b.n	8008fba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f56:	2310      	movs	r3, #16
 8008f58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f5a:	2310      	movs	r3, #16
 8008f5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	0e5b      	lsrs	r3, r3, #25
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	f003 0307 	and.w	r3, r3, #7
 8008f6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	0f5b      	lsrs	r3, r3, #29
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	f003 0307 	and.w	r3, r3, #7
 8008f7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	7b3a      	ldrb	r2, [r7, #12]
 8008f82:	4911      	ldr	r1, [pc, #68]	@ (8008fc8 <UARTEx_SetNbDataToProcess+0x94>)
 8008f84:	5c8a      	ldrb	r2, [r1, r2]
 8008f86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f8a:	7b3a      	ldrb	r2, [r7, #12]
 8008f8c:	490f      	ldr	r1, [pc, #60]	@ (8008fcc <UARTEx_SetNbDataToProcess+0x98>)
 8008f8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f90:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
 8008f9e:	7b7a      	ldrb	r2, [r7, #13]
 8008fa0:	4909      	ldr	r1, [pc, #36]	@ (8008fc8 <UARTEx_SetNbDataToProcess+0x94>)
 8008fa2:	5c8a      	ldrb	r2, [r1, r2]
 8008fa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008fa8:	7b7a      	ldrb	r2, [r7, #13]
 8008faa:	4908      	ldr	r1, [pc, #32]	@ (8008fcc <UARTEx_SetNbDataToProcess+0x98>)
 8008fac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fae:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008fba:	bf00      	nop
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	0800e758 	.word	0x0800e758
 8008fcc:	0800e760 	.word	0x0800e760

08008fd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	f107 001c 	add.w	r0, r7, #28
 8008fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fe2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d121      	bne.n	800902e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80090ac <USB_CoreInit+0xdc>)
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800900e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009012:	2b01      	cmp	r3, #1
 8009014:	d105      	bne.n	8009022 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f001 fafa 	bl	800a61c <USB_CoreReset>
 8009028:	4603      	mov	r3, r0
 800902a:	73fb      	strb	r3, [r7, #15]
 800902c:	e01b      	b.n	8009066 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f001 faee 	bl	800a61c <USB_CoreReset>
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009044:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009048:	2b00      	cmp	r3, #0
 800904a:	d106      	bne.n	800905a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009050:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	639a      	str	r2, [r3, #56]	@ 0x38
 8009058:	e005      	b.n	8009066 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800905e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009066:	7fbb      	ldrb	r3, [r7, #30]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d116      	bne.n	800909a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009070:	b29a      	uxth	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800907a:	4b0d      	ldr	r3, [pc, #52]	@ (80090b0 <USB_CoreInit+0xe0>)
 800907c:	4313      	orrs	r3, r2
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f043 0206 	orr.w	r2, r3, #6
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f043 0220 	orr.w	r2, r3, #32
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800909a:	7bfb      	ldrb	r3, [r7, #15]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090a6:	b004      	add	sp, #16
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	ffbdffbf 	.word	0xffbdffbf
 80090b0:	03ee0000 	.word	0x03ee0000

080090b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	4613      	mov	r3, r2
 80090c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d165      	bne.n	8009194 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	4a41      	ldr	r2, [pc, #260]	@ (80091d0 <USB_SetTurnaroundTime+0x11c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d906      	bls.n	80090de <USB_SetTurnaroundTime+0x2a>
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	4a40      	ldr	r2, [pc, #256]	@ (80091d4 <USB_SetTurnaroundTime+0x120>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d202      	bcs.n	80090de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80090d8:	230f      	movs	r3, #15
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	e062      	b.n	80091a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	4a3c      	ldr	r2, [pc, #240]	@ (80091d4 <USB_SetTurnaroundTime+0x120>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d306      	bcc.n	80090f4 <USB_SetTurnaroundTime+0x40>
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	4a3b      	ldr	r2, [pc, #236]	@ (80091d8 <USB_SetTurnaroundTime+0x124>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d202      	bcs.n	80090f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80090ee:	230e      	movs	r3, #14
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	e057      	b.n	80091a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	4a38      	ldr	r2, [pc, #224]	@ (80091d8 <USB_SetTurnaroundTime+0x124>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d306      	bcc.n	800910a <USB_SetTurnaroundTime+0x56>
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	4a37      	ldr	r2, [pc, #220]	@ (80091dc <USB_SetTurnaroundTime+0x128>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d202      	bcs.n	800910a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009104:	230d      	movs	r3, #13
 8009106:	617b      	str	r3, [r7, #20]
 8009108:	e04c      	b.n	80091a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	4a33      	ldr	r2, [pc, #204]	@ (80091dc <USB_SetTurnaroundTime+0x128>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d306      	bcc.n	8009120 <USB_SetTurnaroundTime+0x6c>
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	4a32      	ldr	r2, [pc, #200]	@ (80091e0 <USB_SetTurnaroundTime+0x12c>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d802      	bhi.n	8009120 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800911a:	230c      	movs	r3, #12
 800911c:	617b      	str	r3, [r7, #20]
 800911e:	e041      	b.n	80091a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	4a2f      	ldr	r2, [pc, #188]	@ (80091e0 <USB_SetTurnaroundTime+0x12c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d906      	bls.n	8009136 <USB_SetTurnaroundTime+0x82>
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4a2e      	ldr	r2, [pc, #184]	@ (80091e4 <USB_SetTurnaroundTime+0x130>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d802      	bhi.n	8009136 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009130:	230b      	movs	r3, #11
 8009132:	617b      	str	r3, [r7, #20]
 8009134:	e036      	b.n	80091a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	4a2a      	ldr	r2, [pc, #168]	@ (80091e4 <USB_SetTurnaroundTime+0x130>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d906      	bls.n	800914c <USB_SetTurnaroundTime+0x98>
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	4a29      	ldr	r2, [pc, #164]	@ (80091e8 <USB_SetTurnaroundTime+0x134>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d802      	bhi.n	800914c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009146:	230a      	movs	r3, #10
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	e02b      	b.n	80091a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	4a26      	ldr	r2, [pc, #152]	@ (80091e8 <USB_SetTurnaroundTime+0x134>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d906      	bls.n	8009162 <USB_SetTurnaroundTime+0xae>
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4a25      	ldr	r2, [pc, #148]	@ (80091ec <USB_SetTurnaroundTime+0x138>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d202      	bcs.n	8009162 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800915c:	2309      	movs	r3, #9
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	e020      	b.n	80091a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	4a21      	ldr	r2, [pc, #132]	@ (80091ec <USB_SetTurnaroundTime+0x138>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d306      	bcc.n	8009178 <USB_SetTurnaroundTime+0xc4>
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	4a20      	ldr	r2, [pc, #128]	@ (80091f0 <USB_SetTurnaroundTime+0x13c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d802      	bhi.n	8009178 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009172:	2308      	movs	r3, #8
 8009174:	617b      	str	r3, [r7, #20]
 8009176:	e015      	b.n	80091a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	4a1d      	ldr	r2, [pc, #116]	@ (80091f0 <USB_SetTurnaroundTime+0x13c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d906      	bls.n	800918e <USB_SetTurnaroundTime+0xda>
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	4a1c      	ldr	r2, [pc, #112]	@ (80091f4 <USB_SetTurnaroundTime+0x140>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d202      	bcs.n	800918e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009188:	2307      	movs	r3, #7
 800918a:	617b      	str	r3, [r7, #20]
 800918c:	e00a      	b.n	80091a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800918e:	2306      	movs	r3, #6
 8009190:	617b      	str	r3, [r7, #20]
 8009192:	e007      	b.n	80091a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009194:	79fb      	ldrb	r3, [r7, #7]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d102      	bne.n	80091a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800919a:	2309      	movs	r3, #9
 800919c:	617b      	str	r3, [r7, #20]
 800919e:	e001      	b.n	80091a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80091a0:	2309      	movs	r3, #9
 80091a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	029b      	lsls	r3, r3, #10
 80091b8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80091bc:	431a      	orrs	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	371c      	adds	r7, #28
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	00d8acbf 	.word	0x00d8acbf
 80091d4:	00e4e1c0 	.word	0x00e4e1c0
 80091d8:	00f42400 	.word	0x00f42400
 80091dc:	01067380 	.word	0x01067380
 80091e0:	011a499f 	.word	0x011a499f
 80091e4:	01312cff 	.word	0x01312cff
 80091e8:	014ca43f 	.word	0x014ca43f
 80091ec:	016e3600 	.word	0x016e3600
 80091f0:	01a6ab1f 	.word	0x01a6ab1f
 80091f4:	01e84800 	.word	0x01e84800

080091f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f043 0201 	orr.w	r2, r3, #1
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800921a:	b480      	push	{r7}
 800921c:	b083      	sub	sp, #12
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f023 0201 	bic.w	r2, r3, #1
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009248:	2300      	movs	r3, #0
 800924a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d115      	bne.n	800928a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800926a:	200a      	movs	r0, #10
 800926c:	f7f8 f848 	bl	8001300 <HAL_Delay>
      ms += 10U;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	330a      	adds	r3, #10
 8009274:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 f93f 	bl	800a4fa <USB_GetMode>
 800927c:	4603      	mov	r3, r0
 800927e:	2b01      	cmp	r3, #1
 8009280:	d01e      	beq.n	80092c0 <USB_SetCurrentMode+0x84>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2bc7      	cmp	r3, #199	@ 0xc7
 8009286:	d9f0      	bls.n	800926a <USB_SetCurrentMode+0x2e>
 8009288:	e01a      	b.n	80092c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d115      	bne.n	80092bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800929c:	200a      	movs	r0, #10
 800929e:	f7f8 f82f 	bl	8001300 <HAL_Delay>
      ms += 10U;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	330a      	adds	r3, #10
 80092a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 f926 	bl	800a4fa <USB_GetMode>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d005      	beq.n	80092c0 <USB_SetCurrentMode+0x84>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80092b8:	d9f0      	bls.n	800929c <USB_SetCurrentMode+0x60>
 80092ba:	e001      	b.n	80092c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e005      	b.n	80092cc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2bc8      	cmp	r3, #200	@ 0xc8
 80092c4:	d101      	bne.n	80092ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e000      	b.n	80092cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092d4:	b084      	sub	sp, #16
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b086      	sub	sp, #24
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80092e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80092ee:	2300      	movs	r3, #0
 80092f0:	613b      	str	r3, [r7, #16]
 80092f2:	e009      	b.n	8009308 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	3340      	adds	r3, #64	@ 0x40
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	2200      	movs	r2, #0
 8009300:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	3301      	adds	r3, #1
 8009306:	613b      	str	r3, [r7, #16]
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	2b0e      	cmp	r3, #14
 800930c:	d9f2      	bls.n	80092f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800930e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009312:	2b00      	cmp	r3, #0
 8009314:	d11c      	bne.n	8009350 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009324:	f043 0302 	orr.w	r3, r3, #2
 8009328:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	e005      	b.n	800935c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009354:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009362:	461a      	mov	r2, r3
 8009364:	2300      	movs	r3, #0
 8009366:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009368:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800936c:	2b01      	cmp	r3, #1
 800936e:	d10d      	bne.n	800938c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009374:	2b00      	cmp	r3, #0
 8009376:	d104      	bne.n	8009382 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009378:	2100      	movs	r1, #0
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f968 	bl	8009650 <USB_SetDevSpeed>
 8009380:	e008      	b.n	8009394 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009382:	2101      	movs	r1, #1
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f963 	bl	8009650 <USB_SetDevSpeed>
 800938a:	e003      	b.n	8009394 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800938c:	2103      	movs	r1, #3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f95e 	bl	8009650 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009394:	2110      	movs	r1, #16
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f8fa 	bl	8009590 <USB_FlushTxFifo>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f924 	bl	80095f4 <USB_FlushRxFifo>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093bc:	461a      	mov	r2, r3
 80093be:	2300      	movs	r3, #0
 80093c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093c8:	461a      	mov	r2, r3
 80093ca:	2300      	movs	r3, #0
 80093cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093d4:	461a      	mov	r2, r3
 80093d6:	2300      	movs	r3, #0
 80093d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093da:	2300      	movs	r3, #0
 80093dc:	613b      	str	r3, [r7, #16]
 80093de:	e043      	b.n	8009468 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093f6:	d118      	bne.n	800942a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10a      	bne.n	8009414 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4413      	add	r3, r2
 8009406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800940a:	461a      	mov	r2, r3
 800940c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	e013      	b.n	800943c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	015a      	lsls	r2, r3, #5
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4413      	add	r3, r2
 800941c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009420:	461a      	mov	r2, r3
 8009422:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	e008      	b.n	800943c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009436:	461a      	mov	r2, r3
 8009438:	2300      	movs	r3, #0
 800943a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009448:	461a      	mov	r2, r3
 800944a:	2300      	movs	r3, #0
 800944c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800945a:	461a      	mov	r2, r3
 800945c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009460:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	3301      	adds	r3, #1
 8009466:	613b      	str	r3, [r7, #16]
 8009468:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800946c:	461a      	mov	r2, r3
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	4293      	cmp	r3, r2
 8009472:	d3b5      	bcc.n	80093e0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009474:	2300      	movs	r3, #0
 8009476:	613b      	str	r3, [r7, #16]
 8009478:	e043      	b.n	8009502 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800948c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009490:	d118      	bne.n	80094c4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10a      	bne.n	80094ae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	015a      	lsls	r2, r3, #5
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	4413      	add	r3, r2
 80094a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094a4:	461a      	mov	r2, r3
 80094a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	e013      	b.n	80094d6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ba:	461a      	mov	r2, r3
 80094bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80094c0:	6013      	str	r3, [r2, #0]
 80094c2:	e008      	b.n	80094d6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d0:	461a      	mov	r2, r3
 80094d2:	2300      	movs	r3, #0
 80094d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094e2:	461a      	mov	r2, r3
 80094e4:	2300      	movs	r3, #0
 80094e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f4:	461a      	mov	r2, r3
 80094f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80094fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	3301      	adds	r3, #1
 8009500:	613b      	str	r3, [r7, #16]
 8009502:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009506:	461a      	mov	r2, r3
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	4293      	cmp	r3, r2
 800950c:	d3b5      	bcc.n	800947a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800951c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009520:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800952e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009530:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009534:	2b00      	cmp	r3, #0
 8009536:	d105      	bne.n	8009544 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	f043 0210 	orr.w	r2, r3, #16
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	699a      	ldr	r2, [r3, #24]
 8009548:	4b0f      	ldr	r3, [pc, #60]	@ (8009588 <USB_DevInit+0x2b4>)
 800954a:	4313      	orrs	r3, r2
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009550:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009554:	2b00      	cmp	r3, #0
 8009556:	d005      	beq.n	8009564 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	f043 0208 	orr.w	r2, r3, #8
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009564:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009568:	2b01      	cmp	r3, #1
 800956a:	d105      	bne.n	8009578 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	699a      	ldr	r2, [r3, #24]
 8009570:	4b06      	ldr	r3, [pc, #24]	@ (800958c <USB_DevInit+0x2b8>)
 8009572:	4313      	orrs	r3, r2
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009578:	7dfb      	ldrb	r3, [r7, #23]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009584:	b004      	add	sp, #16
 8009586:	4770      	bx	lr
 8009588:	803c3800 	.word	0x803c3800
 800958c:	40000004 	.word	0x40000004

08009590 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3301      	adds	r3, #1
 80095a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095aa:	d901      	bls.n	80095b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e01b      	b.n	80095e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	daf2      	bge.n	800959e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80095b8:	2300      	movs	r3, #0
 80095ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	019b      	lsls	r3, r3, #6
 80095c0:	f043 0220 	orr.w	r2, r3, #32
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3301      	adds	r3, #1
 80095cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095d4:	d901      	bls.n	80095da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e006      	b.n	80095e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f003 0320 	and.w	r3, r3, #32
 80095e2:	2b20      	cmp	r3, #32
 80095e4:	d0f0      	beq.n	80095c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095fc:	2300      	movs	r3, #0
 80095fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3301      	adds	r3, #1
 8009604:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800960c:	d901      	bls.n	8009612 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e018      	b.n	8009644 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	daf2      	bge.n	8009600 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2210      	movs	r2, #16
 8009622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	3301      	adds	r3, #1
 8009628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009630:	d901      	bls.n	8009636 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009632:	2303      	movs	r3, #3
 8009634:	e006      	b.n	8009644 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	f003 0310 	and.w	r3, r3, #16
 800963e:	2b10      	cmp	r3, #16
 8009640:	d0f0      	beq.n	8009624 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	68f9      	ldr	r1, [r7, #12]
 800966c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009670:	4313      	orrs	r3, r2
 8009672:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009682:	b480      	push	{r7}
 8009684:	b087      	sub	sp, #28
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f003 0306 	and.w	r3, r3, #6
 800969a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d102      	bne.n	80096a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80096a2:	2300      	movs	r3, #0
 80096a4:	75fb      	strb	r3, [r7, #23]
 80096a6:	e00a      	b.n	80096be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d002      	beq.n	80096b4 <USB_GetDevSpeed+0x32>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b06      	cmp	r3, #6
 80096b2:	d102      	bne.n	80096ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80096b4:	2302      	movs	r3, #2
 80096b6:	75fb      	strb	r3, [r7, #23]
 80096b8:	e001      	b.n	80096be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80096ba:	230f      	movs	r3, #15
 80096bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80096be:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	785b      	ldrb	r3, [r3, #1]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d139      	bne.n	800975c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ee:	69da      	ldr	r2, [r3, #28]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f003 030f 	and.w	r3, r3, #15
 80096f8:	2101      	movs	r1, #1
 80096fa:	fa01 f303 	lsl.w	r3, r1, r3
 80096fe:	b29b      	uxth	r3, r3
 8009700:	68f9      	ldr	r1, [r7, #12]
 8009702:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009706:	4313      	orrs	r3, r2
 8009708:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4413      	add	r3, r2
 8009712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d153      	bne.n	80097c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	791b      	ldrb	r3, [r3, #4]
 800973a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800973c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	059b      	lsls	r3, r3, #22
 8009742:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009744:	431a      	orrs	r2, r3
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	0159      	lsls	r1, r3, #5
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	440b      	add	r3, r1
 800974e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009752:	4619      	mov	r1, r3
 8009754:	4b20      	ldr	r3, [pc, #128]	@ (80097d8 <USB_ActivateEndpoint+0x10c>)
 8009756:	4313      	orrs	r3, r2
 8009758:	600b      	str	r3, [r1, #0]
 800975a:	e035      	b.n	80097c8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009762:	69da      	ldr	r2, [r3, #28]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	f003 030f 	and.w	r3, r3, #15
 800976c:	2101      	movs	r1, #1
 800976e:	fa01 f303 	lsl.w	r3, r1, r3
 8009772:	041b      	lsls	r3, r3, #16
 8009774:	68f9      	ldr	r1, [r7, #12]
 8009776:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800977a:	4313      	orrs	r3, r2
 800977c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	4413      	add	r3, r2
 8009786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d119      	bne.n	80097c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	791b      	ldrb	r3, [r3, #4]
 80097ae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80097b0:	430b      	orrs	r3, r1
 80097b2:	431a      	orrs	r2, r3
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	0159      	lsls	r1, r3, #5
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	440b      	add	r3, r1
 80097bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097c0:	4619      	mov	r1, r3
 80097c2:	4b05      	ldr	r3, [pc, #20]	@ (80097d8 <USB_ActivateEndpoint+0x10c>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	10008000 	.word	0x10008000

080097dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	785b      	ldrb	r3, [r3, #1]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d161      	bne.n	80098bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800980a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800980e:	d11f      	bne.n	8009850 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	0151      	lsls	r1, r2, #5
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	440a      	add	r2, r1
 8009826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800982a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800982e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	015a      	lsls	r2, r3, #5
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	4413      	add	r3, r2
 8009838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	0151      	lsls	r1, r2, #5
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	440a      	add	r2, r1
 8009846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800984a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800984e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009856:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	f003 030f 	and.w	r3, r3, #15
 8009860:	2101      	movs	r1, #1
 8009862:	fa01 f303 	lsl.w	r3, r1, r3
 8009866:	b29b      	uxth	r3, r3
 8009868:	43db      	mvns	r3, r3
 800986a:	68f9      	ldr	r1, [r7, #12]
 800986c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009870:	4013      	ands	r3, r2
 8009872:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800987a:	69da      	ldr	r2, [r3, #28]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	f003 030f 	and.w	r3, r3, #15
 8009884:	2101      	movs	r1, #1
 8009886:	fa01 f303 	lsl.w	r3, r1, r3
 800988a:	b29b      	uxth	r3, r3
 800988c:	43db      	mvns	r3, r3
 800988e:	68f9      	ldr	r1, [r7, #12]
 8009890:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009894:	4013      	ands	r3, r2
 8009896:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	015a      	lsls	r2, r3, #5
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4413      	add	r3, r2
 80098a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	0159      	lsls	r1, r3, #5
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	440b      	add	r3, r1
 80098ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098b2:	4619      	mov	r1, r3
 80098b4:	4b35      	ldr	r3, [pc, #212]	@ (800998c <USB_DeactivateEndpoint+0x1b0>)
 80098b6:	4013      	ands	r3, r2
 80098b8:	600b      	str	r3, [r1, #0]
 80098ba:	e060      	b.n	800997e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	015a      	lsls	r2, r3, #5
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	4413      	add	r3, r2
 80098c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098d2:	d11f      	bne.n	8009914 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80098f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	0151      	lsls	r1, r2, #5
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	440a      	add	r2, r1
 800990a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800990e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009912:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800991a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	f003 030f 	and.w	r3, r3, #15
 8009924:	2101      	movs	r1, #1
 8009926:	fa01 f303 	lsl.w	r3, r1, r3
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	43db      	mvns	r3, r3
 800992e:	68f9      	ldr	r1, [r7, #12]
 8009930:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009934:	4013      	ands	r3, r2
 8009936:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800993e:	69da      	ldr	r2, [r3, #28]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	f003 030f 	and.w	r3, r3, #15
 8009948:	2101      	movs	r1, #1
 800994a:	fa01 f303 	lsl.w	r3, r1, r3
 800994e:	041b      	lsls	r3, r3, #16
 8009950:	43db      	mvns	r3, r3
 8009952:	68f9      	ldr	r1, [r7, #12]
 8009954:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009958:	4013      	ands	r3, r2
 800995a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	0159      	lsls	r1, r3, #5
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	440b      	add	r3, r1
 8009972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009976:	4619      	mov	r1, r3
 8009978:	4b05      	ldr	r3, [pc, #20]	@ (8009990 <USB_DeactivateEndpoint+0x1b4>)
 800997a:	4013      	ands	r3, r2
 800997c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	ec337800 	.word	0xec337800
 8009990:	eff37800 	.word	0xeff37800

08009994 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08a      	sub	sp, #40	@ 0x28
 8009998:	af02      	add	r7, sp, #8
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	4613      	mov	r3, r2
 80099a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	f040 8185 	bne.w	8009cc0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d132      	bne.n	8009a24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ca:	691a      	ldr	r2, [r3, #16]
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	0159      	lsls	r1, r3, #5
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	440b      	add	r3, r1
 80099d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d8:	4619      	mov	r1, r3
 80099da:	4ba7      	ldr	r3, [pc, #668]	@ (8009c78 <USB_EPStartXfer+0x2e4>)
 80099dc:	4013      	ands	r3, r2
 80099de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	0151      	lsls	r1, r2, #5
 80099f2:	69fa      	ldr	r2, [r7, #28]
 80099f4:	440a      	add	r2, r1
 80099f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a0c:	691a      	ldr	r2, [r3, #16]
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	0159      	lsls	r1, r3, #5
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	440b      	add	r3, r1
 8009a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4b97      	ldr	r3, [pc, #604]	@ (8009c7c <USB_EPStartXfer+0x2e8>)
 8009a1e:	4013      	ands	r3, r2
 8009a20:	610b      	str	r3, [r1, #16]
 8009a22:	e097      	b.n	8009b54 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a30:	691a      	ldr	r2, [r3, #16]
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	0159      	lsls	r1, r3, #5
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	440b      	add	r3, r1
 8009a3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4b8e      	ldr	r3, [pc, #568]	@ (8009c7c <USB_EPStartXfer+0x2e8>)
 8009a42:	4013      	ands	r3, r2
 8009a44:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a52:	691a      	ldr	r2, [r3, #16]
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	0159      	lsls	r1, r3, #5
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	440b      	add	r3, r1
 8009a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a60:	4619      	mov	r1, r3
 8009a62:	4b85      	ldr	r3, [pc, #532]	@ (8009c78 <USB_EPStartXfer+0x2e4>)
 8009a64:	4013      	ands	r3, r2
 8009a66:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d11a      	bne.n	8009aa4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	691a      	ldr	r2, [r3, #16]
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d903      	bls.n	8009a82 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	689a      	ldr	r2, [r3, #8]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	69ba      	ldr	r2, [r7, #24]
 8009a92:	0151      	lsls	r1, r2, #5
 8009a94:	69fa      	ldr	r2, [r7, #28]
 8009a96:	440a      	add	r2, r1
 8009a98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009aa0:	6113      	str	r3, [r2, #16]
 8009aa2:	e044      	b.n	8009b2e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	691a      	ldr	r2, [r3, #16]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	4413      	add	r3, r2
 8009aae:	1e5a      	subs	r2, r3, #1
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	015a      	lsls	r2, r3, #5
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ac6:	691a      	ldr	r2, [r3, #16]
 8009ac8:	8afb      	ldrh	r3, [r7, #22]
 8009aca:	04d9      	lsls	r1, r3, #19
 8009acc:	4b6c      	ldr	r3, [pc, #432]	@ (8009c80 <USB_EPStartXfer+0x2ec>)
 8009ace:	400b      	ands	r3, r1
 8009ad0:	69b9      	ldr	r1, [r7, #24]
 8009ad2:	0148      	lsls	r0, r1, #5
 8009ad4:	69f9      	ldr	r1, [r7, #28]
 8009ad6:	4401      	add	r1, r0
 8009ad8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009adc:	4313      	orrs	r3, r2
 8009ade:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	791b      	ldrb	r3, [r3, #4]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d122      	bne.n	8009b2e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	69ba      	ldr	r2, [r7, #24]
 8009af8:	0151      	lsls	r1, r2, #5
 8009afa:	69fa      	ldr	r2, [r7, #28]
 8009afc:	440a      	add	r2, r1
 8009afe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b02:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009b06:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	015a      	lsls	r2, r3, #5
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b14:	691a      	ldr	r2, [r3, #16]
 8009b16:	8afb      	ldrh	r3, [r7, #22]
 8009b18:	075b      	lsls	r3, r3, #29
 8009b1a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009b1e:	69b9      	ldr	r1, [r7, #24]
 8009b20:	0148      	lsls	r0, r1, #5
 8009b22:	69f9      	ldr	r1, [r7, #28]
 8009b24:	4401      	add	r1, r0
 8009b26:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b3a:	691a      	ldr	r2, [r3, #16]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b44:	69b9      	ldr	r1, [r7, #24]
 8009b46:	0148      	lsls	r0, r1, #5
 8009b48:	69f9      	ldr	r1, [r7, #28]
 8009b4a:	4401      	add	r1, r0
 8009b4c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009b50:	4313      	orrs	r3, r2
 8009b52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d14b      	bne.n	8009bf2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	69db      	ldr	r3, [r3, #28]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d009      	beq.n	8009b76 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b6e:	461a      	mov	r2, r3
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	69db      	ldr	r3, [r3, #28]
 8009b74:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	791b      	ldrb	r3, [r3, #4]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d128      	bne.n	8009bd0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d110      	bne.n	8009bb0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	0151      	lsls	r1, r2, #5
 8009ba0:	69fa      	ldr	r2, [r7, #28]
 8009ba2:	440a      	add	r2, r1
 8009ba4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ba8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009bac:	6013      	str	r3, [r2, #0]
 8009bae:	e00f      	b.n	8009bd0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	015a      	lsls	r2, r3, #5
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	69ba      	ldr	r2, [r7, #24]
 8009bc0:	0151      	lsls	r1, r2, #5
 8009bc2:	69fa      	ldr	r2, [r7, #28]
 8009bc4:	440a      	add	r2, r1
 8009bc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	69ba      	ldr	r2, [r7, #24]
 8009be0:	0151      	lsls	r1, r2, #5
 8009be2:	69fa      	ldr	r2, [r7, #28]
 8009be4:	440a      	add	r2, r1
 8009be6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	e169      	b.n	8009ec6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	69ba      	ldr	r2, [r7, #24]
 8009c02:	0151      	lsls	r1, r2, #5
 8009c04:	69fa      	ldr	r2, [r7, #28]
 8009c06:	440a      	add	r2, r1
 8009c08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c0c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009c10:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	791b      	ldrb	r3, [r3, #4]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d015      	beq.n	8009c46 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f000 8151 	beq.w	8009ec6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	f003 030f 	and.w	r3, r3, #15
 8009c34:	2101      	movs	r1, #1
 8009c36:	fa01 f303 	lsl.w	r3, r1, r3
 8009c3a:	69f9      	ldr	r1, [r7, #28]
 8009c3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c40:	4313      	orrs	r3, r2
 8009c42:	634b      	str	r3, [r1, #52]	@ 0x34
 8009c44:	e13f      	b.n	8009ec6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d116      	bne.n	8009c84 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	69ba      	ldr	r2, [r7, #24]
 8009c66:	0151      	lsls	r1, r2, #5
 8009c68:	69fa      	ldr	r2, [r7, #28]
 8009c6a:	440a      	add	r2, r1
 8009c6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c74:	6013      	str	r3, [r2, #0]
 8009c76:	e015      	b.n	8009ca4 <USB_EPStartXfer+0x310>
 8009c78:	e007ffff 	.word	0xe007ffff
 8009c7c:	fff80000 	.word	0xfff80000
 8009c80:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	015a      	lsls	r2, r3, #5
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	0151      	lsls	r1, r2, #5
 8009c96:	69fa      	ldr	r2, [r7, #28]
 8009c98:	440a      	add	r2, r1
 8009c9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ca2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	68d9      	ldr	r1, [r3, #12]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	781a      	ldrb	r2, [r3, #0]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	b298      	uxth	r0, r3
 8009cb2:	79fb      	ldrb	r3, [r7, #7]
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 f9b9 	bl	800a030 <USB_WritePacket>
 8009cbe:	e102      	b.n	8009ec6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ccc:	691a      	ldr	r2, [r3, #16]
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	0159      	lsls	r1, r3, #5
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	440b      	add	r3, r1
 8009cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4b7c      	ldr	r3, [pc, #496]	@ (8009ed0 <USB_EPStartXfer+0x53c>)
 8009cde:	4013      	ands	r3, r2
 8009ce0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	015a      	lsls	r2, r3, #5
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	4413      	add	r3, r2
 8009cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cee:	691a      	ldr	r2, [r3, #16]
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	0159      	lsls	r1, r3, #5
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	440b      	add	r3, r1
 8009cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	4b75      	ldr	r3, [pc, #468]	@ (8009ed4 <USB_EPStartXfer+0x540>)
 8009d00:	4013      	ands	r3, r2
 8009d02:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d12f      	bne.n	8009d6a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	689a      	ldr	r2, [r3, #8]
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	689a      	ldr	r2, [r3, #8]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d2e:	691a      	ldr	r2, [r3, #16]
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d38:	69b9      	ldr	r1, [r7, #24]
 8009d3a:	0148      	lsls	r0, r1, #5
 8009d3c:	69f9      	ldr	r1, [r7, #28]
 8009d3e:	4401      	add	r1, r0
 8009d40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d44:	4313      	orrs	r3, r2
 8009d46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	0151      	lsls	r1, r2, #5
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	440a      	add	r2, r1
 8009d5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d66:	6113      	str	r3, [r2, #16]
 8009d68:	e05f      	b.n	8009e2a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d123      	bne.n	8009dba <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	015a      	lsls	r2, r3, #5
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d7e:	691a      	ldr	r2, [r3, #16]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d88:	69b9      	ldr	r1, [r7, #24]
 8009d8a:	0148      	lsls	r0, r1, #5
 8009d8c:	69f9      	ldr	r1, [r7, #28]
 8009d8e:	4401      	add	r1, r0
 8009d90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d94:	4313      	orrs	r3, r2
 8009d96:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	69ba      	ldr	r2, [r7, #24]
 8009da8:	0151      	lsls	r1, r2, #5
 8009daa:	69fa      	ldr	r2, [r7, #28]
 8009dac:	440a      	add	r2, r1
 8009dae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009db2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009db6:	6113      	str	r3, [r2, #16]
 8009db8:	e037      	b.n	8009e2a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	691a      	ldr	r2, [r3, #16]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	1e5a      	subs	r2, r3, #1
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dce:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	8afa      	ldrh	r2, [r7, #22]
 8009dd6:	fb03 f202 	mul.w	r2, r3, r2
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dea:	691a      	ldr	r2, [r3, #16]
 8009dec:	8afb      	ldrh	r3, [r7, #22]
 8009dee:	04d9      	lsls	r1, r3, #19
 8009df0:	4b39      	ldr	r3, [pc, #228]	@ (8009ed8 <USB_EPStartXfer+0x544>)
 8009df2:	400b      	ands	r3, r1
 8009df4:	69b9      	ldr	r1, [r7, #24]
 8009df6:	0148      	lsls	r0, r1, #5
 8009df8:	69f9      	ldr	r1, [r7, #28]
 8009dfa:	4401      	add	r1, r0
 8009dfc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009e00:	4313      	orrs	r3, r2
 8009e02:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	015a      	lsls	r2, r3, #5
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e10:	691a      	ldr	r2, [r3, #16]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e1a:	69b9      	ldr	r1, [r7, #24]
 8009e1c:	0148      	lsls	r0, r1, #5
 8009e1e:	69f9      	ldr	r1, [r7, #28]
 8009e20:	4401      	add	r1, r0
 8009e22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009e26:	4313      	orrs	r3, r2
 8009e28:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009e2a:	79fb      	ldrb	r3, [r7, #7]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d10d      	bne.n	8009e4c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d009      	beq.n	8009e4c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	68d9      	ldr	r1, [r3, #12]
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e48:	460a      	mov	r2, r1
 8009e4a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	791b      	ldrb	r3, [r3, #4]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d128      	bne.n	8009ea6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d110      	bne.n	8009e86 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	69ba      	ldr	r2, [r7, #24]
 8009e74:	0151      	lsls	r1, r2, #5
 8009e76:	69fa      	ldr	r2, [r7, #28]
 8009e78:	440a      	add	r2, r1
 8009e7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e82:	6013      	str	r3, [r2, #0]
 8009e84:	e00f      	b.n	8009ea6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	015a      	lsls	r2, r3, #5
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	69ba      	ldr	r2, [r7, #24]
 8009e96:	0151      	lsls	r1, r2, #5
 8009e98:	69fa      	ldr	r2, [r7, #28]
 8009e9a:	440a      	add	r2, r1
 8009e9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ea4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	69ba      	ldr	r2, [r7, #24]
 8009eb6:	0151      	lsls	r1, r2, #5
 8009eb8:	69fa      	ldr	r2, [r7, #28]
 8009eba:	440a      	add	r2, r1
 8009ebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ec0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ec4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3720      	adds	r7, #32
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	fff80000 	.word	0xfff80000
 8009ed4:	e007ffff 	.word	0xe007ffff
 8009ed8:	1ff80000 	.word	0x1ff80000

08009edc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b087      	sub	sp, #28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d14a      	bne.n	8009f90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	015a      	lsls	r2, r3, #5
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f12:	f040 8086 	bne.w	800a022 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	683a      	ldr	r2, [r7, #0]
 8009f28:	7812      	ldrb	r2, [r2, #0]
 8009f2a:	0151      	lsls	r1, r2, #5
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	440a      	add	r2, r1
 8009f30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	7812      	ldrb	r2, [r2, #0]
 8009f4e:	0151      	lsls	r1, r2, #5
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	440a      	add	r2, r1
 8009f54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3301      	adds	r3, #1
 8009f62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d902      	bls.n	8009f74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	75fb      	strb	r3, [r7, #23]
          break;
 8009f72:	e056      	b.n	800a022 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	015a      	lsls	r2, r3, #5
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f8c:	d0e7      	beq.n	8009f5e <USB_EPStopXfer+0x82>
 8009f8e:	e048      	b.n	800a022 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fa8:	d13b      	bne.n	800a022 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	7812      	ldrb	r2, [r2, #0]
 8009fbe:	0151      	lsls	r1, r2, #5
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	440a      	add	r2, r1
 8009fc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fc8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fcc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	7812      	ldrb	r2, [r2, #0]
 8009fe2:	0151      	lsls	r1, r2, #5
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	440a      	add	r2, r1
 8009fe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ff0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d902      	bls.n	800a008 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	75fb      	strb	r3, [r7, #23]
          break;
 800a006:	e00c      	b.n	800a022 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	015a      	lsls	r2, r3, #5
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	4413      	add	r3, r2
 800a012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a01c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a020:	d0e7      	beq.n	8009ff2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
}
 800a024:	4618      	mov	r0, r3
 800a026:	371c      	adds	r7, #28
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a030:	b480      	push	{r7}
 800a032:	b089      	sub	sp, #36	@ 0x24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4611      	mov	r1, r2
 800a03c:	461a      	mov	r2, r3
 800a03e:	460b      	mov	r3, r1
 800a040:	71fb      	strb	r3, [r7, #7]
 800a042:	4613      	mov	r3, r2
 800a044:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a04e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a052:	2b00      	cmp	r3, #0
 800a054:	d123      	bne.n	800a09e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a056:	88bb      	ldrh	r3, [r7, #4]
 800a058:	3303      	adds	r3, #3
 800a05a:	089b      	lsrs	r3, r3, #2
 800a05c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a05e:	2300      	movs	r3, #0
 800a060:	61bb      	str	r3, [r7, #24]
 800a062:	e018      	b.n	800a096 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	031a      	lsls	r2, r3, #12
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a070:	461a      	mov	r2, r3
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	3301      	adds	r3, #1
 800a07c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	3301      	adds	r3, #1
 800a082:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	3301      	adds	r3, #1
 800a088:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	3301      	adds	r3, #1
 800a08e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	3301      	adds	r3, #1
 800a094:	61bb      	str	r3, [r7, #24]
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d3e2      	bcc.n	800a064 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3724      	adds	r7, #36	@ 0x24
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b08b      	sub	sp, #44	@ 0x2c
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a0c2:	88fb      	ldrh	r3, [r7, #6]
 800a0c4:	089b      	lsrs	r3, r3, #2
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a0ca:	88fb      	ldrh	r3, [r7, #6]
 800a0cc:	f003 0303 	and.w	r3, r3, #3
 800a0d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	623b      	str	r3, [r7, #32]
 800a0d6:	e014      	b.n	800a102 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	3301      	adds	r3, #1
 800a100:	623b      	str	r3, [r7, #32]
 800a102:	6a3a      	ldr	r2, [r7, #32]
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	429a      	cmp	r2, r3
 800a108:	d3e6      	bcc.n	800a0d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a10a:	8bfb      	ldrh	r3, [r7, #30]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d01e      	beq.n	800a14e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a11a:	461a      	mov	r2, r3
 800a11c:	f107 0310 	add.w	r3, r7, #16
 800a120:	6812      	ldr	r2, [r2, #0]
 800a122:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	fa22 f303 	lsr.w	r3, r2, r3
 800a130:	b2da      	uxtb	r2, r3
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	701a      	strb	r2, [r3, #0]
      i++;
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	3301      	adds	r3, #1
 800a13a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13e:	3301      	adds	r3, #1
 800a140:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a142:	8bfb      	ldrh	r3, [r7, #30]
 800a144:	3b01      	subs	r3, #1
 800a146:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a148:	8bfb      	ldrh	r3, [r7, #30]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1ea      	bne.n	800a124 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a150:	4618      	mov	r0, r3
 800a152:	372c      	adds	r7, #44	@ 0x2c
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	785b      	ldrb	r3, [r3, #1]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d12c      	bne.n	800a1d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	db12      	blt.n	800a1b0 <USB_EPSetStall+0x54>
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00f      	beq.n	800a1b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	0151      	lsls	r1, r2, #5
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	440a      	add	r2, r1
 800a1a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a1ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	0151      	lsls	r1, r2, #5
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	e02b      	b.n	800a22a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	015a      	lsls	r2, r3, #5
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	4413      	add	r3, r2
 800a1da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	db12      	blt.n	800a20a <USB_EPSetStall+0xae>
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00f      	beq.n	800a20a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	015a      	lsls	r2, r3, #5
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	0151      	lsls	r1, r2, #5
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	440a      	add	r2, r1
 800a200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a204:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a208:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4413      	add	r3, r2
 800a212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	0151      	lsls	r1, r2, #5
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	440a      	add	r2, r1
 800a220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a228:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	785b      	ldrb	r3, [r3, #1]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d128      	bne.n	800a2a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	0151      	lsls	r1, r2, #5
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	440a      	add	r2, r1
 800a26a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a26e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a272:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	791b      	ldrb	r3, [r3, #4]
 800a278:	2b03      	cmp	r3, #3
 800a27a:	d003      	beq.n	800a284 <USB_EPClearStall+0x4c>
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	791b      	ldrb	r3, [r3, #4]
 800a280:	2b02      	cmp	r3, #2
 800a282:	d138      	bne.n	800a2f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	0151      	lsls	r1, r2, #5
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	440a      	add	r2, r1
 800a29a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a29e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	e027      	b.n	800a2f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	0151      	lsls	r1, r2, #5
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	440a      	add	r2, r1
 800a2bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a2c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	791b      	ldrb	r3, [r3, #4]
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d003      	beq.n	800a2d6 <USB_EPClearStall+0x9e>
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	791b      	ldrb	r3, [r3, #4]
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d10f      	bne.n	800a2f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	0151      	lsls	r1, r2, #5
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	440a      	add	r2, r1
 800a2ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a322:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a326:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	011b      	lsls	r3, r3, #4
 800a334:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a338:	68f9      	ldr	r1, [r7, #12]
 800a33a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a33e:	4313      	orrs	r3, r2
 800a340:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a36a:	f023 0303 	bic.w	r3, r3, #3
 800a36e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a37e:	f023 0302 	bic.w	r3, r3, #2
 800a382:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a392:	b480      	push	{r7}
 800a394:	b085      	sub	sp, #20
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a3ac:	f023 0303 	bic.w	r3, r3, #3
 800a3b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3c0:	f043 0302 	orr.w	r3, r3, #2
 800a3c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	4013      	ands	r3, r2
 800a41c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	0c1b      	lsrs	r3, r3, #16
}
 800a422:	4618      	mov	r0, r3
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a42e:	b480      	push	{r7}
 800a430:	b085      	sub	sp, #20
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	4013      	ands	r3, r2
 800a450:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	b29b      	uxth	r3, r3
}
 800a456:	4618      	mov	r0, r3
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a462:	b480      	push	{r7}
 800a464:	b085      	sub	sp, #20
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	460b      	mov	r3, r1
 800a46c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a472:	78fb      	ldrb	r3, [r7, #3]
 800a474:	015a      	lsls	r2, r3, #5
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4413      	add	r3, r2
 800a47a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	4013      	ands	r3, r2
 800a48e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a490:	68bb      	ldr	r3, [r7, #8]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b087      	sub	sp, #28
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a4c2:	78fb      	ldrb	r3, [r7, #3]
 800a4c4:	f003 030f 	and.w	r3, r3, #15
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ce:	01db      	lsls	r3, r3, #7
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a4d8:	78fb      	ldrb	r3, [r7, #3]
 800a4da:	015a      	lsls	r2, r3, #5
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	4413      	add	r3, r2
 800a4e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4ec:	68bb      	ldr	r3, [r7, #8]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	371c      	adds	r7, #28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	f003 0301 	and.w	r3, r3, #1
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
	...

0800a518 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a532:	4619      	mov	r1, r3
 800a534:	4b09      	ldr	r3, [pc, #36]	@ (800a55c <USB_ActivateSetup+0x44>)
 800a536:	4013      	ands	r3, r2
 800a538:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a54c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	fffff800 	.word	0xfffff800

0800a560 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	460b      	mov	r3, r1
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	333c      	adds	r3, #60	@ 0x3c
 800a576:	3304      	adds	r3, #4
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	4a26      	ldr	r2, [pc, #152]	@ (800a618 <USB_EP0_OutStart+0xb8>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d90a      	bls.n	800a59a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a594:	d101      	bne.n	800a59a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	e037      	b.n	800a60a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	697a      	ldr	r2, [r7, #20]
 800a5c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5c8:	f043 0318 	orr.w	r3, r3, #24
 800a5cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	697a      	ldr	r2, [r7, #20]
 800a5d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5dc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a5e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a5e2:	7afb      	ldrb	r3, [r7, #11]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d10f      	bne.n	800a608 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a602:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a606:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	371c      	adds	r7, #28
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	4f54300a 	.word	0x4f54300a

0800a61c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a624:	2300      	movs	r3, #0
 800a626:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	3301      	adds	r3, #1
 800a62c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a634:	d901      	bls.n	800a63a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a636:	2303      	movs	r3, #3
 800a638:	e01b      	b.n	800a672 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	daf2      	bge.n	800a628 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a642:	2300      	movs	r3, #0
 800a644:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	f043 0201 	orr.w	r2, r3, #1
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	3301      	adds	r3, #1
 800a656:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a65e:	d901      	bls.n	800a664 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a660:	2303      	movs	r3, #3
 800a662:	e006      	b.n	800a672 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	f003 0301 	and.w	r3, r3, #1
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d0f0      	beq.n	800a652 <USB_CoreReset+0x36>

  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3714      	adds	r7, #20
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
	...

0800a680 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800a68c:	f44f 701d 	mov.w	r0, #628	@ 0x274
 800a690:	f003 ffb0 	bl	800e5f4 <USBD_static_malloc>
 800a694:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d109      	bne.n	800a6b0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	32b0      	adds	r2, #176	@ 0xb0
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	e06e      	b.n	800a78e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	32b0      	adds	r2, #176	@ 0xb0
 800a6ba:	68f9      	ldr	r1, [r7, #12]
 800a6bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	32b0      	adds	r2, #176	@ 0xb0
 800a6ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7c1b      	ldrb	r3, [r3, #16]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d12b      	bne.n	800a734 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a6dc:	4b2e      	ldr	r3, [pc, #184]	@ (800a798 <USBD_MSC_Init+0x118>)
 800a6de:	7819      	ldrb	r1, [r3, #0]
 800a6e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6e4:	2202      	movs	r2, #2
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f003 fe41 	bl	800e36e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800a6ec:	4b2a      	ldr	r3, [pc, #168]	@ (800a798 <USBD_MSC_Init+0x118>)
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	f003 020f 	and.w	r2, r3, #15
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	440b      	add	r3, r1
 800a700:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a704:	2201      	movs	r2, #1
 800a706:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a708:	4b24      	ldr	r3, [pc, #144]	@ (800a79c <USBD_MSC_Init+0x11c>)
 800a70a:	7819      	ldrb	r1, [r3, #0]
 800a70c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a710:	2202      	movs	r2, #2
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f003 fe2b 	bl	800e36e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800a718:	4b20      	ldr	r3, [pc, #128]	@ (800a79c <USBD_MSC_Init+0x11c>)
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	f003 020f 	and.w	r2, r3, #15
 800a720:	6879      	ldr	r1, [r7, #4]
 800a722:	4613      	mov	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	440b      	add	r3, r1
 800a72c:	3324      	adds	r3, #36	@ 0x24
 800a72e:	2201      	movs	r2, #1
 800a730:	801a      	strh	r2, [r3, #0]
 800a732:	e028      	b.n	800a786 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a734:	4b18      	ldr	r3, [pc, #96]	@ (800a798 <USBD_MSC_Init+0x118>)
 800a736:	7819      	ldrb	r1, [r3, #0]
 800a738:	2340      	movs	r3, #64	@ 0x40
 800a73a:	2202      	movs	r2, #2
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f003 fe16 	bl	800e36e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800a742:	4b15      	ldr	r3, [pc, #84]	@ (800a798 <USBD_MSC_Init+0x118>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	f003 020f 	and.w	r2, r3, #15
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	4613      	mov	r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	4413      	add	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	440b      	add	r3, r1
 800a756:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a75a:	2201      	movs	r2, #1
 800a75c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a75e:	4b0f      	ldr	r3, [pc, #60]	@ (800a79c <USBD_MSC_Init+0x11c>)
 800a760:	7819      	ldrb	r1, [r3, #0]
 800a762:	2340      	movs	r3, #64	@ 0x40
 800a764:	2202      	movs	r2, #2
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f003 fe01 	bl	800e36e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800a76c:	4b0b      	ldr	r3, [pc, #44]	@ (800a79c <USBD_MSC_Init+0x11c>)
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	f003 020f 	and.w	r2, r3, #15
 800a774:	6879      	ldr	r1, [r7, #4]
 800a776:	4613      	mov	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	440b      	add	r3, r1
 800a780:	3324      	adds	r3, #36	@ 0x24
 800a782:	2201      	movs	r2, #1
 800a784:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fa2c 	bl	800abe4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	24000073 	.word	0x24000073
 800a79c:	24000072 	.word	0x24000072

0800a7a0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800a7ac:	4b26      	ldr	r3, [pc, #152]	@ (800a848 <USBD_MSC_DeInit+0xa8>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f003 fe01 	bl	800e3ba <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800a7b8:	4b23      	ldr	r3, [pc, #140]	@ (800a848 <USBD_MSC_DeInit+0xa8>)
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	f003 020f 	and.w	r2, r3, #15
 800a7c0:	6879      	ldr	r1, [r7, #4]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4413      	add	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	440b      	add	r3, r1
 800a7cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800a7d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a84c <USBD_MSC_DeInit+0xac>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f003 fded 	bl	800e3ba <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800a7e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a84c <USBD_MSC_DeInit+0xac>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	f003 020f 	and.w	r2, r3, #15
 800a7e8:	6879      	ldr	r1, [r7, #4]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	440b      	add	r3, r1
 800a7f4:	3324      	adds	r3, #36	@ 0x24
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	32b0      	adds	r2, #176	@ 0xb0
 800a804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d018      	beq.n	800a83e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fa67 	bl	800ace0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	32b0      	adds	r2, #176	@ 0xb0
 800a81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a820:	4618      	mov	r0, r3
 800a822:	f003 fef5 	bl	800e610 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	32b0      	adds	r2, #176	@ 0xb0
 800a830:	2100      	movs	r1, #0
 800a832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	24000073 	.word	0x24000073
 800a84c:	24000072 	.word	0x24000072

0800a850 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	32b0      	adds	r2, #176	@ 0xb0
 800a864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a868:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a878:	2303      	movs	r3, #3
 800a87a:	e0e1      	b.n	800aa40 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a884:	2b00      	cmp	r3, #0
 800a886:	d053      	beq.n	800a930 <USBD_MSC_Setup+0xe0>
 800a888:	2b20      	cmp	r3, #32
 800a88a:	f040 80d1 	bne.w	800aa30 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	785b      	ldrb	r3, [r3, #1]
 800a892:	2bfe      	cmp	r3, #254	@ 0xfe
 800a894:	d002      	beq.n	800a89c <USBD_MSC_Setup+0x4c>
 800a896:	2bff      	cmp	r3, #255	@ 0xff
 800a898:	d02a      	beq.n	800a8f0 <USBD_MSC_Setup+0xa0>
 800a89a:	e041      	b.n	800a920 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	885b      	ldrh	r3, [r3, #2]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d11e      	bne.n	800a8e2 <USBD_MSC_Setup+0x92>
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	88db      	ldrh	r3, [r3, #6]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d11a      	bne.n	800a8e2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	da15      	bge.n	800a8e2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	33b0      	adds	r3, #176	@ 0xb0
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	4413      	add	r3, r2
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	4798      	blx	r3
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f003 f95f 	bl	800db9c <USBD_CtlSendData>
 800a8de:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a8e0:	e025      	b.n	800a92e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f003 f8dc 	bl	800daa2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a8ee:	e01e      	b.n	800a92e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	885b      	ldrh	r3, [r3, #2]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10c      	bne.n	800a912 <USBD_MSC_Setup+0xc2>
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	88db      	ldrh	r3, [r3, #6]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d108      	bne.n	800a912 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a906:	2b00      	cmp	r3, #0
 800a908:	db03      	blt.n	800a912 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f9b4 	bl	800ac78 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a910:	e00d      	b.n	800a92e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800a912:	6839      	ldr	r1, [r7, #0]
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f003 f8c4 	bl	800daa2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a91a:	2303      	movs	r3, #3
 800a91c:	75fb      	strb	r3, [r7, #23]
          break;
 800a91e:	e006      	b.n	800a92e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800a920:	6839      	ldr	r1, [r7, #0]
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f003 f8bd 	bl	800daa2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a928:	2303      	movs	r3, #3
 800a92a:	75fb      	strb	r3, [r7, #23]
          break;
 800a92c:	bf00      	nop
      }
      break;
 800a92e:	e086      	b.n	800aa3e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	785b      	ldrb	r3, [r3, #1]
 800a934:	2b0b      	cmp	r3, #11
 800a936:	d872      	bhi.n	800aa1e <USBD_MSC_Setup+0x1ce>
 800a938:	a201      	add	r2, pc, #4	@ (adr r2, 800a940 <USBD_MSC_Setup+0xf0>)
 800a93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93e:	bf00      	nop
 800a940:	0800a971 	.word	0x0800a971
 800a944:	0800a9ed 	.word	0x0800a9ed
 800a948:	0800aa1f 	.word	0x0800aa1f
 800a94c:	0800aa1f 	.word	0x0800aa1f
 800a950:	0800aa1f 	.word	0x0800aa1f
 800a954:	0800aa1f 	.word	0x0800aa1f
 800a958:	0800aa1f 	.word	0x0800aa1f
 800a95c:	0800aa1f 	.word	0x0800aa1f
 800a960:	0800aa1f 	.word	0x0800aa1f
 800a964:	0800aa1f 	.word	0x0800aa1f
 800a968:	0800a99b 	.word	0x0800a99b
 800a96c:	0800a9c5 	.word	0x0800a9c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b03      	cmp	r3, #3
 800a97a:	d107      	bne.n	800a98c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a97c:	f107 030e 	add.w	r3, r7, #14
 800a980:	2202      	movs	r2, #2
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f003 f909 	bl	800db9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a98a:	e050      	b.n	800aa2e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f003 f887 	bl	800daa2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a994:	2303      	movs	r3, #3
 800a996:	75fb      	strb	r3, [r7, #23]
          break;
 800a998:	e049      	b.n	800aa2e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d107      	bne.n	800a9b6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f003 f8f4 	bl	800db9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9b4:	e03b      	b.n	800aa2e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f003 f872 	bl	800daa2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	75fb      	strb	r3, [r7, #23]
          break;
 800a9c2:	e034      	b.n	800aa2e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	2b03      	cmp	r3, #3
 800a9ce:	d106      	bne.n	800a9de <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	885b      	ldrh	r3, [r3, #2]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9dc:	e027      	b.n	800aa2e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f003 f85e 	bl	800daa2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	75fb      	strb	r3, [r7, #23]
          break;
 800a9ea:	e020      	b.n	800aa2e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d119      	bne.n	800aa2c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	885b      	ldrh	r3, [r3, #2]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d115      	bne.n	800aa2c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	889b      	ldrh	r3, [r3, #4]
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f003 fcf5 	bl	800e3f8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	889b      	ldrh	r3, [r3, #4]
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fb2e 	bl	800b078 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800aa1c:	e006      	b.n	800aa2c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f003 f83e 	bl	800daa2 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa26:	2303      	movs	r3, #3
 800aa28:	75fb      	strb	r3, [r7, #23]
          break;
 800aa2a:	e000      	b.n	800aa2e <USBD_MSC_Setup+0x1de>
          break;
 800aa2c:	bf00      	nop
      }
      break;
 800aa2e:	e006      	b.n	800aa3e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f003 f835 	bl	800daa2 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa3c:	bf00      	nop
  }

  return (uint8_t)ret;
 800aa3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3718      	adds	r7, #24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800aa54:	78fb      	ldrb	r3, [r7, #3]
 800aa56:	4619      	mov	r1, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f959 	bl	800ad10 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800aa74:	78fb      	ldrb	r3, [r7, #3]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f983 	bl	800ad84 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800aa90:	2181      	movs	r1, #129	@ 0x81
 800aa92:	4812      	ldr	r0, [pc, #72]	@ (800aadc <USBD_MSC_GetHSCfgDesc+0x54>)
 800aa94:	f002 f9a4 	bl	800cde0 <USBD_GetEpDesc>
 800aa98:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800aa9a:	2101      	movs	r1, #1
 800aa9c:	480f      	ldr	r0, [pc, #60]	@ (800aadc <USBD_MSC_GetHSCfgDesc+0x54>)
 800aa9e:	f002 f99f 	bl	800cde0 <USBD_GetEpDesc>
 800aaa2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d006      	beq.n	800aab8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	711a      	strb	r2, [r3, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f042 0202 	orr.w	r2, r2, #2
 800aab6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d006      	beq.n	800aacc <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	2200      	movs	r2, #0
 800aac2:	711a      	strb	r2, [r3, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f042 0202 	orr.w	r2, r2, #2
 800aaca:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2220      	movs	r2, #32
 800aad0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800aad2:	4b02      	ldr	r3, [pc, #8]	@ (800aadc <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	24000048 	.word	0x24000048

0800aae0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800aae8:	2181      	movs	r1, #129	@ 0x81
 800aaea:	4812      	ldr	r0, [pc, #72]	@ (800ab34 <USBD_MSC_GetFSCfgDesc+0x54>)
 800aaec:	f002 f978 	bl	800cde0 <USBD_GetEpDesc>
 800aaf0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800aaf2:	2101      	movs	r1, #1
 800aaf4:	480f      	ldr	r0, [pc, #60]	@ (800ab34 <USBD_MSC_GetFSCfgDesc+0x54>)
 800aaf6:	f002 f973 	bl	800cde0 <USBD_GetEpDesc>
 800aafa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d006      	beq.n	800ab10 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab0a:	711a      	strb	r2, [r3, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d006      	beq.n	800ab24 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab1e:	711a      	strb	r2, [r3, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2220      	movs	r2, #32
 800ab28:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800ab2a:	4b02      	ldr	r3, [pc, #8]	@ (800ab34 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	24000048 	.word	0x24000048

0800ab38 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800ab40:	2181      	movs	r1, #129	@ 0x81
 800ab42:	4812      	ldr	r0, [pc, #72]	@ (800ab8c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800ab44:	f002 f94c 	bl	800cde0 <USBD_GetEpDesc>
 800ab48:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800ab4a:	2101      	movs	r1, #1
 800ab4c:	480f      	ldr	r0, [pc, #60]	@ (800ab8c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800ab4e:	f002 f947 	bl	800cde0 <USBD_GetEpDesc>
 800ab52:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d006      	beq.n	800ab68 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab62:	711a      	strb	r2, [r3, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d006      	beq.n	800ab7c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab76:	711a      	strb	r2, [r3, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2220      	movs	r2, #32
 800ab80:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800ab82:	4b02      	ldr	r3, [pc, #8]	@ (800ab8c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	24000048 	.word	0x24000048

0800ab90 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	220a      	movs	r2, #10
 800ab9c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800ab9e:	4b03      	ldr	r3, [pc, #12]	@ (800abac <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	24000068 	.word	0x24000068

0800abb0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800abc0:	2303      	movs	r3, #3
 800abc2:	e009      	b.n	800abd8 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	33b0      	adds	r3, #176	@ 0xb0
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	4413      	add	r3, r2
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	32b0      	adds	r2, #176	@ 0xb0
 800abf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abfa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d032      	beq.n	800ac68 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	33b0      	adds	r3, #176	@ 0xb0
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2000      	movs	r0, #0
 800ac3a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800ac3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac70 <MSC_BOT_Init+0x8c>)
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f003 fbd8 	bl	800e3f8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800ac48:	4b0a      	ldr	r3, [pc, #40]	@ (800ac74 <MSC_BOT_Init+0x90>)
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f003 fbd2 	bl	800e3f8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800ac54:	4b06      	ldr	r3, [pc, #24]	@ (800ac70 <MSC_BOT_Init+0x8c>)
 800ac56:	7819      	ldrb	r1, [r3, #0]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800ac5e:	231f      	movs	r3, #31
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f003 fc92 	bl	800e58a <USBD_LL_PrepareReceive>
 800ac66:	e000      	b.n	800ac6a <MSC_BOT_Init+0x86>
    return;
 800ac68:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	24000073 	.word	0x24000073
 800ac74:	24000072 	.word	0x24000072

0800ac78 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	32b0      	adds	r2, #176	@ 0xb0
 800ac8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac8e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d01b      	beq.n	800acce <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800aca2:	4b0d      	ldr	r3, [pc, #52]	@ (800acd8 <MSC_BOT_Reset+0x60>)
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f003 fbe3 	bl	800e474 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800acae:	4b0b      	ldr	r3, [pc, #44]	@ (800acdc <MSC_BOT_Reset+0x64>)
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	4619      	mov	r1, r3
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f003 fbdd 	bl	800e474 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800acba:	4b08      	ldr	r3, [pc, #32]	@ (800acdc <MSC_BOT_Reset+0x64>)
 800acbc:	7819      	ldrb	r1, [r3, #0]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800acc4:	231f      	movs	r3, #31
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f003 fc5f 	bl	800e58a <USBD_LL_PrepareReceive>
 800accc:	e000      	b.n	800acd0 <MSC_BOT_Reset+0x58>
    return;
 800acce:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	24000072 	.word	0x24000072
 800acdc:	24000073 	.word	0x24000073

0800ace0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	32b0      	adds	r2, #176	@ 0xb0
 800acf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf6:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d002      	beq.n	800ad04 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	721a      	strb	r2, [r3, #8]
  }
}
 800ad04:	bf00      	nop
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	32b0      	adds	r2, #176	@ 0xb0
 800ad26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad2a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d020      	beq.n	800ad74 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	7a1b      	ldrb	r3, [r3, #8]
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d005      	beq.n	800ad46 <MSC_BOT_DataIn+0x36>
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	db1c      	blt.n	800ad78 <MSC_BOT_DataIn+0x68>
 800ad3e:	3b03      	subs	r3, #3
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d819      	bhi.n	800ad78 <MSC_BOT_DataIn+0x68>
 800ad44:	e011      	b.n	800ad6a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800ad52:	461a      	mov	r2, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f9c9 	bl	800b0ec <SCSI_ProcessCmd>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	da0d      	bge.n	800ad7c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ad60:	2101      	movs	r1, #1
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 f90c 	bl	800af80 <MSC_BOT_SendCSW>
      }
      break;
 800ad68:	e008      	b.n	800ad7c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f907 	bl	800af80 <MSC_BOT_SendCSW>
      break;
 800ad72:	e004      	b.n	800ad7e <MSC_BOT_DataIn+0x6e>
    return;
 800ad74:	bf00      	nop
 800ad76:	e002      	b.n	800ad7e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800ad78:	bf00      	nop
 800ad7a:	e000      	b.n	800ad7e <MSC_BOT_DataIn+0x6e>
      break;
 800ad7c:	bf00      	nop
  }
}
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	32b0      	adds	r2, #176	@ 0xb0
 800ad9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d01c      	beq.n	800ade0 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	7a1b      	ldrb	r3, [r3, #8]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d002      	beq.n	800adb4 <MSC_BOT_DataOut+0x30>
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d004      	beq.n	800adbc <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800adb2:	e018      	b.n	800ade6 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f819 	bl	800adec <MSC_BOT_CBW_Decode>
      break;
 800adba:	e014      	b.n	800ade6 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800adc8:	461a      	mov	r2, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f98e 	bl	800b0ec <SCSI_ProcessCmd>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	da06      	bge.n	800ade4 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800add6:	2101      	movs	r1, #1
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f8d1 	bl	800af80 <MSC_BOT_SendCSW>
      break;
 800adde:	e001      	b.n	800ade4 <MSC_BOT_DataOut+0x60>
    return;
 800ade0:	bf00      	nop
 800ade2:	e000      	b.n	800ade6 <MSC_BOT_DataOut+0x62>
      break;
 800ade4:	bf00      	nop
  }
}
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	32b0      	adds	r2, #176	@ 0xb0
 800adfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae02:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d079      	beq.n	800aefe <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800ae22:	4b3a      	ldr	r3, [pc, #232]	@ (800af0c <MSC_BOT_CBW_Decode+0x120>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f003 fbcf 	bl	800e5cc <USBD_LL_GetRxDataSize>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b1f      	cmp	r3, #31
 800ae32:	d114      	bne.n	800ae5e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800ae3a:	4a35      	ldr	r2, [pc, #212]	@ (800af10 <MSC_BOT_CBW_Decode+0x124>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d10e      	bne.n	800ae5e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d809      	bhi.n	800ae5e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d004      	beq.n	800ae5e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ae5a:	2b10      	cmp	r3, #16
 800ae5c:	d90e      	bls.n	800ae7c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ae64:	2320      	movs	r3, #32
 800ae66:	2205      	movs	r2, #5
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fe54 	bl	800bb16 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2202      	movs	r2, #2
 800ae72:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f8bd 	bl	800aff4 <MSC_BOT_Abort>
 800ae7a:	e043      	b.n	800af04 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800ae88:	461a      	mov	r2, r3
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f92e 	bl	800b0ec <SCSI_ProcessCmd>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	da0c      	bge.n	800aeb0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	7a1b      	ldrb	r3, [r3, #8]
 800ae9a:	2b05      	cmp	r3, #5
 800ae9c:	d104      	bne.n	800aea8 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ae9e:	2101      	movs	r1, #1
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f86d 	bl	800af80 <MSC_BOT_SendCSW>
 800aea6:	e02d      	b.n	800af04 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f8a3 	bl	800aff4 <MSC_BOT_Abort>
 800aeae:	e029      	b.n	800af04 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	7a1b      	ldrb	r3, [r3, #8]
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d024      	beq.n	800af02 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d020      	beq.n	800af02 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800aec4:	2b03      	cmp	r3, #3
 800aec6:	d01c      	beq.n	800af02 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d009      	beq.n	800aee4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f103 0110 	add.w	r1, r3, #16
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	461a      	mov	r2, r3
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f819 	bl	800af14 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800aee2:	e00f      	b.n	800af04 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d104      	bne.n	800aef6 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800aeec:	2100      	movs	r1, #0
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f846 	bl	800af80 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800aef4:	e006      	b.n	800af04 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f87c 	bl	800aff4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800aefc:	e002      	b.n	800af04 <MSC_BOT_CBW_Decode+0x118>
    return;
 800aefe:	bf00      	nop
 800af00:	e000      	b.n	800af04 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800af02:	bf00      	nop
    }
  }
}
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	24000073 	.word	0x24000073
 800af10:	43425355 	.word	0x43425355

0800af14 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	32b0      	adds	r2, #176	@ 0xb0
 800af2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d01e      	beq.n	800af74 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	4293      	cmp	r3, r2
 800af40:	bf28      	it	cs
 800af42:	4613      	movcs	r3, r2
 800af44:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	1ad2      	subs	r2, r2, r3
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	2204      	movs	r2, #4
 800af62:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800af64:	4b05      	ldr	r3, [pc, #20]	@ (800af7c <MSC_BOT_SendData+0x68>)
 800af66:	7819      	ldrb	r1, [r3, #0]
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f003 faeb 	bl	800e548 <USBD_LL_Transmit>
 800af72:	e000      	b.n	800af76 <MSC_BOT_SendData+0x62>
    return;
 800af74:	bf00      	nop
}
 800af76:	3718      	adds	r7, #24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	24000072 	.word	0x24000072

0800af80 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	32b0      	adds	r2, #176	@ 0xb0
 800af96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af9a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d01d      	beq.n	800afde <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	4a10      	ldr	r2, [pc, #64]	@ (800afe8 <MSC_BOT_SendCSW+0x68>)
 800afa6:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	78fa      	ldrb	r2, [r7, #3]
 800afae:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800afb8:	4b0c      	ldr	r3, [pc, #48]	@ (800afec <MSC_BOT_SendCSW+0x6c>)
 800afba:	7819      	ldrb	r1, [r3, #0]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 800afc2:	230d      	movs	r3, #13
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f003 fabf 	bl	800e548 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800afca:	4b09      	ldr	r3, [pc, #36]	@ (800aff0 <MSC_BOT_SendCSW+0x70>)
 800afcc:	7819      	ldrb	r1, [r3, #0]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800afd4:	231f      	movs	r3, #31
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f003 fad7 	bl	800e58a <USBD_LL_PrepareReceive>
 800afdc:	e000      	b.n	800afe0 <MSC_BOT_SendCSW+0x60>
    return;
 800afde:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	53425355 	.word	0x53425355
 800afec:	24000072 	.word	0x24000072
 800aff0:	24000073 	.word	0x24000073

0800aff4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	32b0      	adds	r2, #176	@ 0xb0
 800b006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d02a      	beq.n	800b068 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10e      	bne.n	800b03a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800b022:	2b00      	cmp	r3, #0
 800b024:	d009      	beq.n	800b03a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d105      	bne.n	800b03a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b02e:	4b10      	ldr	r3, [pc, #64]	@ (800b070 <MSC_BOT_Abort+0x7c>)
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	4619      	mov	r1, r3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f003 f9fe 	bl	800e436 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b03a:	4b0e      	ldr	r3, [pc, #56]	@ (800b074 <MSC_BOT_Abort+0x80>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	4619      	mov	r1, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f003 f9f8 	bl	800e436 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	7a5b      	ldrb	r3, [r3, #9]
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d10d      	bne.n	800b06a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b04e:	4b09      	ldr	r3, [pc, #36]	@ (800b074 <MSC_BOT_Abort+0x80>)
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f003 f9ee 	bl	800e436 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b05a:	4b05      	ldr	r3, [pc, #20]	@ (800b070 <MSC_BOT_Abort+0x7c>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f003 f9e8 	bl	800e436 <USBD_LL_StallEP>
 800b066:	e000      	b.n	800b06a <MSC_BOT_Abort+0x76>
    return;
 800b068:	bf00      	nop
  }
}
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	24000073 	.word	0x24000073
 800b074:	24000072 	.word	0x24000072

0800b078 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	32b0      	adds	r2, #176	@ 0xb0
 800b08e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b092:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d01d      	beq.n	800b0d6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	7a5b      	ldrb	r3, [r3, #9]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d10c      	bne.n	800b0bc <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b0a2:	4b10      	ldr	r3, [pc, #64]	@ (800b0e4 <MSC_BOT_CplClrFeature+0x6c>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f003 f9c4 	bl	800e436 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b0ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b0e8 <MSC_BOT_CplClrFeature+0x70>)
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f003 f9be 	bl	800e436 <USBD_LL_StallEP>
 800b0ba:	e00f      	b.n	800b0dc <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800b0bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	da0a      	bge.n	800b0da <MSC_BOT_CplClrFeature+0x62>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	7a5b      	ldrb	r3, [r3, #9]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d006      	beq.n	800b0da <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b0cc:	2101      	movs	r1, #1
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7ff ff56 	bl	800af80 <MSC_BOT_SendCSW>
 800b0d4:	e002      	b.n	800b0dc <MSC_BOT_CplClrFeature+0x64>
    return;
 800b0d6:	bf00      	nop
 800b0d8:	e000      	b.n	800b0dc <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800b0da:	bf00      	nop
  }
}
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	24000072 	.word	0x24000072
 800b0e8:	24000073 	.word	0x24000073

0800b0ec <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	32b0      	adds	r2, #176	@ 0xb0
 800b104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b108:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d102      	bne.n	800b116 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800b110:	f04f 33ff 	mov.w	r3, #4294967295
 800b114:	e168      	b.n	800b3e8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	2baa      	cmp	r3, #170	@ 0xaa
 800b11c:	f000 8144 	beq.w	800b3a8 <SCSI_ProcessCmd+0x2bc>
 800b120:	2baa      	cmp	r3, #170	@ 0xaa
 800b122:	f300 8153 	bgt.w	800b3cc <SCSI_ProcessCmd+0x2e0>
 800b126:	2ba8      	cmp	r3, #168	@ 0xa8
 800b128:	f000 812c 	beq.w	800b384 <SCSI_ProcessCmd+0x298>
 800b12c:	2ba8      	cmp	r3, #168	@ 0xa8
 800b12e:	f300 814d 	bgt.w	800b3cc <SCSI_ProcessCmd+0x2e0>
 800b132:	2b5a      	cmp	r3, #90	@ 0x5a
 800b134:	f300 80c0 	bgt.w	800b2b8 <SCSI_ProcessCmd+0x1cc>
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f2c0 8147 	blt.w	800b3cc <SCSI_ProcessCmd+0x2e0>
 800b13e:	2b5a      	cmp	r3, #90	@ 0x5a
 800b140:	f200 8144 	bhi.w	800b3cc <SCSI_ProcessCmd+0x2e0>
 800b144:	a201      	add	r2, pc, #4	@ (adr r2, 800b14c <SCSI_ProcessCmd+0x60>)
 800b146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14a:	bf00      	nop
 800b14c:	0800b2bf 	.word	0x0800b2bf
 800b150:	0800b3cd 	.word	0x0800b3cd
 800b154:	0800b3cd 	.word	0x0800b3cd
 800b158:	0800b2d1 	.word	0x0800b2d1
 800b15c:	0800b3cd 	.word	0x0800b3cd
 800b160:	0800b3cd 	.word	0x0800b3cd
 800b164:	0800b3cd 	.word	0x0800b3cd
 800b168:	0800b3cd 	.word	0x0800b3cd
 800b16c:	0800b3cd 	.word	0x0800b3cd
 800b170:	0800b3cd 	.word	0x0800b3cd
 800b174:	0800b3cd 	.word	0x0800b3cd
 800b178:	0800b3cd 	.word	0x0800b3cd
 800b17c:	0800b3cd 	.word	0x0800b3cd
 800b180:	0800b3cd 	.word	0x0800b3cd
 800b184:	0800b3cd 	.word	0x0800b3cd
 800b188:	0800b3cd 	.word	0x0800b3cd
 800b18c:	0800b3cd 	.word	0x0800b3cd
 800b190:	0800b3cd 	.word	0x0800b3cd
 800b194:	0800b2e3 	.word	0x0800b2e3
 800b198:	0800b3cd 	.word	0x0800b3cd
 800b19c:	0800b3cd 	.word	0x0800b3cd
 800b1a0:	0800b3cd 	.word	0x0800b3cd
 800b1a4:	0800b3cd 	.word	0x0800b3cd
 800b1a8:	0800b3cd 	.word	0x0800b3cd
 800b1ac:	0800b3cd 	.word	0x0800b3cd
 800b1b0:	0800b3cd 	.word	0x0800b3cd
 800b1b4:	0800b319 	.word	0x0800b319
 800b1b8:	0800b2f5 	.word	0x0800b2f5
 800b1bc:	0800b3cd 	.word	0x0800b3cd
 800b1c0:	0800b3cd 	.word	0x0800b3cd
 800b1c4:	0800b307 	.word	0x0800b307
 800b1c8:	0800b3cd 	.word	0x0800b3cd
 800b1cc:	0800b3cd 	.word	0x0800b3cd
 800b1d0:	0800b3cd 	.word	0x0800b3cd
 800b1d4:	0800b3cd 	.word	0x0800b3cd
 800b1d8:	0800b33d 	.word	0x0800b33d
 800b1dc:	0800b3cd 	.word	0x0800b3cd
 800b1e0:	0800b34f 	.word	0x0800b34f
 800b1e4:	0800b3cd 	.word	0x0800b3cd
 800b1e8:	0800b3cd 	.word	0x0800b3cd
 800b1ec:	0800b373 	.word	0x0800b373
 800b1f0:	0800b3cd 	.word	0x0800b3cd
 800b1f4:	0800b397 	.word	0x0800b397
 800b1f8:	0800b3cd 	.word	0x0800b3cd
 800b1fc:	0800b3cd 	.word	0x0800b3cd
 800b200:	0800b3cd 	.word	0x0800b3cd
 800b204:	0800b3cd 	.word	0x0800b3cd
 800b208:	0800b3bb 	.word	0x0800b3bb
 800b20c:	0800b3cd 	.word	0x0800b3cd
 800b210:	0800b3cd 	.word	0x0800b3cd
 800b214:	0800b3cd 	.word	0x0800b3cd
 800b218:	0800b3cd 	.word	0x0800b3cd
 800b21c:	0800b3cd 	.word	0x0800b3cd
 800b220:	0800b3cd 	.word	0x0800b3cd
 800b224:	0800b3cd 	.word	0x0800b3cd
 800b228:	0800b3cd 	.word	0x0800b3cd
 800b22c:	0800b3cd 	.word	0x0800b3cd
 800b230:	0800b3cd 	.word	0x0800b3cd
 800b234:	0800b3cd 	.word	0x0800b3cd
 800b238:	0800b3cd 	.word	0x0800b3cd
 800b23c:	0800b3cd 	.word	0x0800b3cd
 800b240:	0800b3cd 	.word	0x0800b3cd
 800b244:	0800b3cd 	.word	0x0800b3cd
 800b248:	0800b3cd 	.word	0x0800b3cd
 800b24c:	0800b3cd 	.word	0x0800b3cd
 800b250:	0800b3cd 	.word	0x0800b3cd
 800b254:	0800b3cd 	.word	0x0800b3cd
 800b258:	0800b3cd 	.word	0x0800b3cd
 800b25c:	0800b3cd 	.word	0x0800b3cd
 800b260:	0800b3cd 	.word	0x0800b3cd
 800b264:	0800b3cd 	.word	0x0800b3cd
 800b268:	0800b3cd 	.word	0x0800b3cd
 800b26c:	0800b3cd 	.word	0x0800b3cd
 800b270:	0800b3cd 	.word	0x0800b3cd
 800b274:	0800b3cd 	.word	0x0800b3cd
 800b278:	0800b3cd 	.word	0x0800b3cd
 800b27c:	0800b3cd 	.word	0x0800b3cd
 800b280:	0800b3cd 	.word	0x0800b3cd
 800b284:	0800b3cd 	.word	0x0800b3cd
 800b288:	0800b3cd 	.word	0x0800b3cd
 800b28c:	0800b3cd 	.word	0x0800b3cd
 800b290:	0800b3cd 	.word	0x0800b3cd
 800b294:	0800b3cd 	.word	0x0800b3cd
 800b298:	0800b3cd 	.word	0x0800b3cd
 800b29c:	0800b3cd 	.word	0x0800b3cd
 800b2a0:	0800b3cd 	.word	0x0800b3cd
 800b2a4:	0800b3cd 	.word	0x0800b3cd
 800b2a8:	0800b3cd 	.word	0x0800b3cd
 800b2ac:	0800b3cd 	.word	0x0800b3cd
 800b2b0:	0800b3cd 	.word	0x0800b3cd
 800b2b4:	0800b32b 	.word	0x0800b32b
 800b2b8:	2b9e      	cmp	r3, #158	@ 0x9e
 800b2ba:	d051      	beq.n	800b360 <SCSI_ProcessCmd+0x274>
 800b2bc:	e086      	b.n	800b3cc <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800b2be:	7afb      	ldrb	r3, [r7, #11]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f000 f893 	bl	800b3f0 <SCSI_TestUnitReady>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	75fb      	strb	r3, [r7, #23]
      break;
 800b2ce:	e089      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800b2d0:	7afb      	ldrb	r3, [r7, #11]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f000 fb9a 	bl	800ba10 <SCSI_RequestSense>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	75fb      	strb	r3, [r7, #23]
      break;
 800b2e0:	e080      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800b2e2:	7afb      	ldrb	r3, [r7, #11]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f000 f8db 	bl	800b4a4 <SCSI_Inquiry>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b2f2:	e077      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800b2f4:	7afb      	ldrb	r3, [r7, #11]
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f000 fc56 	bl	800bbac <SCSI_StartStopUnit>
 800b300:	4603      	mov	r3, r0
 800b302:	75fb      	strb	r3, [r7, #23]
      break;
 800b304:	e06e      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800b306:	7afb      	ldrb	r3, [r7, #11]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	4619      	mov	r1, r3
 800b30c:	68f8      	ldr	r0, [r7, #12]
 800b30e:	f000 fca2 	bl	800bc56 <SCSI_AllowPreventRemovable>
 800b312:	4603      	mov	r3, r0
 800b314:	75fb      	strb	r3, [r7, #23]
      break;
 800b316:	e065      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800b318:	7afb      	ldrb	r3, [r7, #11]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	4619      	mov	r1, r3
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f000 faea 	bl	800b8f8 <SCSI_ModeSense6>
 800b324:	4603      	mov	r3, r0
 800b326:	75fb      	strb	r3, [r7, #23]
      break;
 800b328:	e05c      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800b32a:	7afb      	ldrb	r3, [r7, #11]
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	4619      	mov	r1, r3
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 fb27 	bl	800b984 <SCSI_ModeSense10>
 800b336:	4603      	mov	r3, r0
 800b338:	75fb      	strb	r3, [r7, #23]
      break;
 800b33a:	e053      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800b33c:	7afb      	ldrb	r3, [r7, #11]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	4619      	mov	r1, r3
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f000 fa5c 	bl	800b800 <SCSI_ReadFormatCapacity>
 800b348:	4603      	mov	r3, r0
 800b34a:	75fb      	strb	r3, [r7, #23]
      break;
 800b34c:	e04a      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800b34e:	7afb      	ldrb	r3, [r7, #11]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	4619      	mov	r1, r3
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f000 f921 	bl	800b59c <SCSI_ReadCapacity10>
 800b35a:	4603      	mov	r3, r0
 800b35c:	75fb      	strb	r3, [r7, #23]
      break;
 800b35e:	e041      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800b360:	7afb      	ldrb	r3, [r7, #11]
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	4619      	mov	r1, r3
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f000 f996 	bl	800b698 <SCSI_ReadCapacity16>
 800b36c:	4603      	mov	r3, r0
 800b36e:	75fb      	strb	r3, [r7, #23]
      break;
 800b370:	e038      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800b372:	7afb      	ldrb	r3, [r7, #11]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	4619      	mov	r1, r3
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f000 fc99 	bl	800bcb0 <SCSI_Read10>
 800b37e:	4603      	mov	r3, r0
 800b380:	75fb      	strb	r3, [r7, #23]
      break;
 800b382:	e02f      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800b384:	7afb      	ldrb	r3, [r7, #11]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	4619      	mov	r1, r3
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 fd3a 	bl	800be04 <SCSI_Read12>
 800b390:	4603      	mov	r3, r0
 800b392:	75fb      	strb	r3, [r7, #23]
      break;
 800b394:	e026      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800b396:	7afb      	ldrb	r3, [r7, #11]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	4619      	mov	r1, r3
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f000 fde5 	bl	800bf6c <SCSI_Write10>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	75fb      	strb	r3, [r7, #23]
      break;
 800b3a6:	e01d      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800b3a8:	7afb      	ldrb	r3, [r7, #11]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f000 feb2 	bl	800c118 <SCSI_Write12>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b8:	e014      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800b3ba:	7afb      	ldrb	r3, [r7, #11]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f000 ff8f 	bl	800c2e4 <SCSI_Verify10>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	75fb      	strb	r3, [r7, #23]
      break;
 800b3ca:	e00b      	b.n	800b3e4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800b3cc:	7af9      	ldrb	r1, [r7, #11]
 800b3ce:	2320      	movs	r3, #32
 800b3d0:	2205      	movs	r2, #5
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f000 fb9f 	bl	800bb16 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	2202      	movs	r2, #2
 800b3dc:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800b3de:	23ff      	movs	r3, #255	@ 0xff
 800b3e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b3e2:	bf00      	nop
  }

  return ret;
 800b3e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	607a      	str	r2, [r7, #4]
 800b3fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	32b0      	adds	r2, #176	@ 0xb0
 800b408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d102      	bne.n	800b41a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800b414:	f04f 33ff 	mov.w	r3, #4294967295
 800b418:	e03f      	b.n	800b49a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00a      	beq.n	800b43a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b42a:	2320      	movs	r3, #32
 800b42c:	2205      	movs	r2, #5
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f000 fb71 	bl	800bb16 <SCSI_SenseCode>

    return -1;
 800b434:	f04f 33ff 	mov.w	r3, #4294967295
 800b438:	e02f      	b.n	800b49a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800b440:	2b02      	cmp	r3, #2
 800b442:	d10b      	bne.n	800b45c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b444:	7af9      	ldrb	r1, [r7, #11]
 800b446:	233a      	movs	r3, #58	@ 0x3a
 800b448:	2202      	movs	r2, #2
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f000 fb63 	bl	800bb16 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	2205      	movs	r2, #5
 800b454:	721a      	strb	r2, [r3, #8]
    return -1;
 800b456:	f04f 33ff 	mov.w	r3, #4294967295
 800b45a:	e01e      	b.n	800b49a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	33b0      	adds	r3, #176	@ 0xb0
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4413      	add	r3, r2
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	7afa      	ldrb	r2, [r7, #11]
 800b470:	4610      	mov	r0, r2
 800b472:	4798      	blx	r3
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00b      	beq.n	800b492 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b47a:	7af9      	ldrb	r1, [r7, #11]
 800b47c:	233a      	movs	r3, #58	@ 0x3a
 800b47e:	2202      	movs	r2, #2
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f000 fb48 	bl	800bb16 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	2205      	movs	r2, #5
 800b48a:	721a      	strb	r2, [r3, #8]

    return -1;
 800b48c:	f04f 33ff 	mov.w	r3, #4294967295
 800b490:	e003      	b.n	800b49a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2200      	movs	r2, #0
 800b496:	60da      	str	r2, [r3, #12]

  return 0;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3718      	adds	r7, #24
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
	...

0800b4a4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b088      	sub	sp, #32
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	607a      	str	r2, [r7, #4]
 800b4b0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	32b0      	adds	r2, #176	@ 0xb0
 800b4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d102      	bne.n	800b4ce <SCSI_Inquiry+0x2a>
  {
    return -1;
 800b4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4cc:	e05e      	b.n	800b58c <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b4de:	2320      	movs	r3, #32
 800b4e0:	2205      	movs	r2, #5
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f000 fb17 	bl	800bb16 <SCSI_SenseCode>
    return -1;
 800b4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ec:	e04e      	b.n	800b58c <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d020      	beq.n	800b53e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	3302      	adds	r3, #2
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d105      	bne.n	800b512 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800b506:	2206      	movs	r2, #6
 800b508:	4922      	ldr	r1, [pc, #136]	@ (800b594 <SCSI_Inquiry+0xf0>)
 800b50a:	69b8      	ldr	r0, [r7, #24]
 800b50c:	f001 f870 	bl	800c5f0 <SCSI_UpdateBotData>
 800b510:	e03b      	b.n	800b58a <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	3302      	adds	r3, #2
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	2b80      	cmp	r3, #128	@ 0x80
 800b51a:	d105      	bne.n	800b528 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800b51c:	2208      	movs	r2, #8
 800b51e:	491e      	ldr	r1, [pc, #120]	@ (800b598 <SCSI_Inquiry+0xf4>)
 800b520:	69b8      	ldr	r0, [r7, #24]
 800b522:	f001 f865 	bl	800c5f0 <SCSI_UpdateBotData>
 800b526:	e030      	b.n	800b58a <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b52e:	2324      	movs	r3, #36	@ 0x24
 800b530:	2205      	movs	r2, #5
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f000 faef 	bl	800bb16 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800b538:	f04f 33ff 	mov.w	r3, #4294967295
 800b53c:	e026      	b.n	800b58c <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	33b0      	adds	r3, #176	@ 0xb0
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800b54e:	69d9      	ldr	r1, [r3, #28]
 800b550:	7afa      	ldrb	r2, [r7, #11]
 800b552:	4613      	mov	r3, r2
 800b554:	00db      	lsls	r3, r3, #3
 800b556:	4413      	add	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800b55a:	440b      	add	r3, r1
 800b55c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	3304      	adds	r3, #4
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	3305      	adds	r3, #5
 800b566:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	3304      	adds	r3, #4
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	461a      	mov	r2, r3
 800b570:	8bfb      	ldrh	r3, [r7, #30]
 800b572:	4293      	cmp	r3, r2
 800b574:	d303      	bcc.n	800b57e <SCSI_Inquiry+0xda>
    {
      len = params[4];
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3304      	adds	r3, #4
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800b57e:	8bfb      	ldrh	r3, [r7, #30]
 800b580:	461a      	mov	r2, r3
 800b582:	6979      	ldr	r1, [r7, #20]
 800b584:	69b8      	ldr	r0, [r7, #24]
 800b586:	f001 f833 	bl	800c5f0 <SCSI_UpdateBotData>
  }

  return 0;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3720      	adds	r7, #32
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	24000074 	.word	0x24000074
 800b598:	2400007c 	.word	0x2400007c

0800b59c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	32b0      	adds	r2, #176	@ 0xb0
 800b5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d102      	bne.n	800b5c6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800b5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c4:	e064      	b.n	800b690 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	33b0      	adds	r3, #176	@ 0xb0
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800b5e4:	7af8      	ldrb	r0, [r7, #11]
 800b5e6:	4798      	blx	r3
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b5ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d104      	bne.n	800b5fe <SCSI_ReadCapacity10+0x62>
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d108      	bne.n	800b610 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b5fe:	7af9      	ldrb	r1, [r7, #11]
 800b600:	233a      	movs	r3, #58	@ 0x3a
 800b602:	2202      	movs	r2, #2
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f000 fa86 	bl	800bb16 <SCSI_SenseCode>
    return -1;
 800b60a:	f04f 33ff 	mov.w	r3, #4294967295
 800b60e:	e03f      	b.n	800b690 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800b616:	3b01      	subs	r3, #1
 800b618:	0e1b      	lsrs	r3, r3, #24
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800b626:	3b01      	subs	r3, #1
 800b628:	0c1b      	lsrs	r3, r3, #16
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800b636:	3b01      	subs	r3, #1
 800b638:	0a1b      	lsrs	r3, r3, #8
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800b646:	b2db      	uxtb	r3, r3
 800b648:	3b01      	subs	r3, #1
 800b64a:	b2da      	uxtb	r2, r3
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b656:	161b      	asrs	r3, r3, #24
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b664:	141b      	asrs	r3, r3, #16
 800b666:	b2da      	uxtb	r2, r3
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b672:	0a1b      	lsrs	r3, r3, #8
 800b674:	b29b      	uxth	r3, r3
 800b676:	b2da      	uxtb	r2, r3
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b682:	b2da      	uxtb	r2, r3
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	2208      	movs	r2, #8
 800b68c:	60da      	str	r2, [r3, #12]

  return 0;
 800b68e:	2300      	movs	r3, #0

}
 800b690:	4618      	mov	r0, r3
 800b692:	3718      	adds	r7, #24
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b088      	sub	sp, #32
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	32b0      	adds	r2, #176	@ 0xb0
 800b6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d102      	bne.n	800b6c2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800b6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c0:	e09a      	b.n	800b7f8 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	33b0      	adds	r3, #176	@ 0xb0
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4413      	add	r3, r2
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	69ba      	ldr	r2, [r7, #24]
 800b6d6:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800b6da:	69ba      	ldr	r2, [r7, #24]
 800b6dc:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800b6e0:	7af8      	ldrb	r0, [r7, #11]
 800b6e2:	4798      	blx	r3
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b6e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d104      	bne.n	800b6fa <SCSI_ReadCapacity16+0x62>
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d108      	bne.n	800b70c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b6fa:	7af9      	ldrb	r1, [r7, #11]
 800b6fc:	233a      	movs	r3, #58	@ 0x3a
 800b6fe:	2202      	movs	r2, #2
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 fa08 	bl	800bb16 <SCSI_SenseCode>
    return -1;
 800b706:	f04f 33ff 	mov.w	r3, #4294967295
 800b70a:	e075      	b.n	800b7f8 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	330a      	adds	r3, #10
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	330b      	adds	r3, #11
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b71c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	330c      	adds	r3, #12
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b726:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	320d      	adds	r2, #13
 800b72c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b72e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b734:	2300      	movs	r3, #0
 800b736:	61fb      	str	r3, [r7, #28]
 800b738:	e008      	b.n	800b74c <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800b73a:	69ba      	ldr	r2, [r7, #24]
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	4413      	add	r3, r2
 800b740:	3310      	adds	r3, #16
 800b742:	2200      	movs	r2, #0
 800b744:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	3301      	adds	r3, #1
 800b74a:	61fb      	str	r3, [r7, #28]
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	69fa      	ldr	r2, [r7, #28]
 800b752:	429a      	cmp	r2, r3
 800b754:	d3f1      	bcc.n	800b73a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800b75c:	3b01      	subs	r3, #1
 800b75e:	0e1b      	lsrs	r3, r3, #24
 800b760:	b2da      	uxtb	r2, r3
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800b76c:	3b01      	subs	r3, #1
 800b76e:	0c1b      	lsrs	r3, r3, #16
 800b770:	b2da      	uxtb	r2, r3
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800b77c:	3b01      	subs	r3, #1
 800b77e:	0a1b      	lsrs	r3, r3, #8
 800b780:	b2da      	uxtb	r2, r3
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	3b01      	subs	r3, #1
 800b790:	b2da      	uxtb	r2, r3
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b79c:	161b      	asrs	r3, r3, #24
 800b79e:	b2da      	uxtb	r2, r3
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b7aa:	141b      	asrs	r3, r3, #16
 800b7ac:	b2da      	uxtb	r2, r3
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b7b8:	0a1b      	lsrs	r3, r3, #8
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	330a      	adds	r3, #10
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	330b      	adds	r3, #11
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b7de:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	330c      	adds	r3, #12
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b7e8:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	320d      	adds	r2, #13
 800b7ee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b7f0:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	60da      	str	r2, [r3, #12]

  return 0;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3720      	adds	r7, #32
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	460b      	mov	r3, r1
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	32b0      	adds	r2, #176	@ 0xb0
 800b818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b81c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d102      	bne.n	800b82a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800b824:	f04f 33ff 	mov.w	r3, #4294967295
 800b828:	e061      	b.n	800b8ee <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	33b0      	adds	r3, #176	@ 0xb0
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	f107 0214 	add.w	r2, r7, #20
 800b840:	f107 0110 	add.w	r1, r7, #16
 800b844:	7af8      	ldrb	r0, [r7, #11]
 800b846:	4798      	blx	r3
 800b848:	4603      	mov	r3, r0
 800b84a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b84c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d104      	bne.n	800b85e <SCSI_ReadFormatCapacity+0x5e>
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d108      	bne.n	800b870 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b85e:	7af9      	ldrb	r1, [r7, #11]
 800b860:	233a      	movs	r3, #58	@ 0x3a
 800b862:	2202      	movs	r2, #2
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f000 f956 	bl	800bb16 <SCSI_SenseCode>
    return -1;
 800b86a:	f04f 33ff 	mov.w	r3, #4294967295
 800b86e:	e03e      	b.n	800b8ee <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800b870:	2300      	movs	r3, #0
 800b872:	83fb      	strh	r3, [r7, #30]
 800b874:	e007      	b.n	800b886 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800b876:	8bfb      	ldrh	r3, [r7, #30]
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	4413      	add	r3, r2
 800b87c:	2200      	movs	r2, #0
 800b87e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800b880:	8bfb      	ldrh	r3, [r7, #30]
 800b882:	3301      	adds	r3, #1
 800b884:	83fb      	strh	r3, [r7, #30]
 800b886:	8bfb      	ldrh	r3, [r7, #30]
 800b888:	2b0b      	cmp	r3, #11
 800b88a:	d9f4      	bls.n	800b876 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	2208      	movs	r2, #8
 800b890:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	3b01      	subs	r3, #1
 800b896:	0e1b      	lsrs	r3, r3, #24
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	0c1b      	lsrs	r3, r3, #16
 800b8a4:	b2da      	uxtb	r2, r3
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	0a1b      	lsrs	r3, r3, #8
 800b8b0:	b2da      	uxtb	r2, r3
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	b2da      	uxtb	r2, r3
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800b8c8:	8abb      	ldrh	r3, [r7, #20]
 800b8ca:	141b      	asrs	r3, r3, #16
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800b8d2:	8abb      	ldrh	r3, [r7, #20]
 800b8d4:	0a1b      	lsrs	r3, r3, #8
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	b2da      	uxtb	r2, r3
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800b8de:	8abb      	ldrh	r3, [r7, #20]
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	220c      	movs	r2, #12
 800b8ea:	60da      	str	r2, [r3, #12]

  return 0;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3720      	adds	r7, #32
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	460b      	mov	r3, r1
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	32b0      	adds	r2, #176	@ 0xb0
 800b910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b914:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800b916:	2304      	movs	r3, #4
 800b918:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d102      	bne.n	800b926 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800b920:	f04f 33ff 	mov.w	r3, #4294967295
 800b924:	e027      	b.n	800b976 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	33b0      	adds	r3, #176	@ 0xb0
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	7afa      	ldrb	r2, [r7, #11]
 800b93a:	4610      	mov	r0, r2
 800b93c:	4798      	blx	r3
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d006      	beq.n	800b952 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800b944:	4b0e      	ldr	r3, [pc, #56]	@ (800b980 <SCSI_ModeSense6+0x88>)
 800b946:	789b      	ldrb	r3, [r3, #2]
 800b948:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	4b0c      	ldr	r3, [pc, #48]	@ (800b980 <SCSI_ModeSense6+0x88>)
 800b950:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	3304      	adds	r3, #4
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	461a      	mov	r2, r3
 800b95a:	8afb      	ldrh	r3, [r7, #22]
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d303      	bcc.n	800b968 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3304      	adds	r3, #4
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800b968:	8afb      	ldrh	r3, [r7, #22]
 800b96a:	461a      	mov	r2, r3
 800b96c:	4904      	ldr	r1, [pc, #16]	@ (800b980 <SCSI_ModeSense6+0x88>)
 800b96e:	6938      	ldr	r0, [r7, #16]
 800b970:	f000 fe3e 	bl	800c5f0 <SCSI_UpdateBotData>

  return 0;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3718      	adds	r7, #24
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	24000084 	.word	0x24000084

0800b984 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	460b      	mov	r3, r1
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	32b0      	adds	r2, #176	@ 0xb0
 800b99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800b9a2:	2308      	movs	r3, #8
 800b9a4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d102      	bne.n	800b9b2 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800b9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b0:	e027      	b.n	800ba02 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	33b0      	adds	r3, #176	@ 0xb0
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	7afa      	ldrb	r2, [r7, #11]
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	4798      	blx	r3
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d006      	beq.n	800b9de <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800b9d0:	4b0e      	ldr	r3, [pc, #56]	@ (800ba0c <SCSI_ModeSense10+0x88>)
 800b9d2:	78db      	ldrb	r3, [r3, #3]
 800b9d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b9d8:	b2da      	uxtb	r2, r3
 800b9da:	4b0c      	ldr	r3, [pc, #48]	@ (800ba0c <SCSI_ModeSense10+0x88>)
 800b9dc:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	8afb      	ldrh	r3, [r7, #22]
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d303      	bcc.n	800b9f4 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800b9f4:	8afb      	ldrh	r3, [r7, #22]
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	4904      	ldr	r1, [pc, #16]	@ (800ba0c <SCSI_ModeSense10+0x88>)
 800b9fa:	6938      	ldr	r0, [r7, #16]
 800b9fc:	f000 fdf8 	bl	800c5f0 <SCSI_UpdateBotData>

  return 0;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	24000088 	.word	0x24000088

0800ba10 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	607a      	str	r2, [r7, #4]
 800ba1c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	32b0      	adds	r2, #176	@ 0xb0
 800ba28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d102      	bne.n	800ba3a <SCSI_RequestSense+0x2a>
  {
    return -1;
 800ba34:	f04f 33ff 	mov.w	r3, #4294967295
 800ba38:	e069      	b.n	800bb0e <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10a      	bne.n	800ba5a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800ba4a:	2320      	movs	r3, #32
 800ba4c:	2205      	movs	r2, #5
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f000 f861 	bl	800bb16 <SCSI_SenseCode>
    return -1;
 800ba54:	f04f 33ff 	mov.w	r3, #4294967295
 800ba58:	e059      	b.n	800bb0e <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	75fb      	strb	r3, [r7, #23]
 800ba5e:	e007      	b.n	800ba70 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800ba60:	7dfb      	ldrb	r3, [r7, #23]
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	4413      	add	r3, r2
 800ba66:	2200      	movs	r2, #0
 800ba68:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800ba6a:	7dfb      	ldrb	r3, [r7, #23]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	75fb      	strb	r3, [r7, #23]
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
 800ba72:	2b11      	cmp	r3, #17
 800ba74:	d9f4      	bls.n	800ba60 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	2270      	movs	r2, #112	@ 0x70
 800ba7a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	220c      	movs	r2, #12
 800ba80:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d02e      	beq.n	800baf0 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800ba98:	461a      	mov	r2, r3
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	3248      	adds	r2, #72	@ 0x48
 800ba9e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	3348      	adds	r3, #72	@ 0x48
 800bab0:	00db      	lsls	r3, r3, #3
 800bab2:	4413      	add	r3, r2
 800bab4:	791a      	ldrb	r2, [r3, #4]
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800bac0:	693a      	ldr	r2, [r7, #16]
 800bac2:	3348      	adds	r3, #72	@ 0x48
 800bac4:	00db      	lsls	r3, r3, #3
 800bac6:	4413      	add	r3, r2
 800bac8:	795a      	ldrb	r2, [r3, #5]
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800bad4:	3301      	adds	r3, #1
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	d103      	bne.n	800baf0 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	2212      	movs	r2, #18
 800baf4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	3304      	adds	r3, #4
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2b12      	cmp	r3, #18
 800bafe:	d805      	bhi.n	800bb0c <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3304      	adds	r3, #4
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	461a      	mov	r2, r3
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b085      	sub	sp, #20
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	4608      	mov	r0, r1
 800bb20:	4611      	mov	r1, r2
 800bb22:	461a      	mov	r2, r3
 800bb24:	4603      	mov	r3, r0
 800bb26:	70fb      	strb	r3, [r7, #3]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70bb      	strb	r3, [r7, #2]
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	32b0      	adds	r2, #176	@ 0xb0
 800bb3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb3e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d02c      	beq.n	800bba0 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3248      	adds	r2, #72	@ 0x48
 800bb52:	78b9      	ldrb	r1, [r7, #2]
 800bb54:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	3348      	adds	r3, #72	@ 0x48
 800bb62:	00db      	lsls	r3, r3, #3
 800bb64:	4413      	add	r3, r2
 800bb66:	787a      	ldrb	r2, [r7, #1]
 800bb68:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	3348      	adds	r3, #72	@ 0x48
 800bb74:	00db      	lsls	r3, r3, #3
 800bb76:	4413      	add	r3, r2
 800bb78:	2200      	movs	r2, #0
 800bb7a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800bb82:	3301      	adds	r3, #1
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800bb92:	2b04      	cmp	r3, #4
 800bb94:	d105      	bne.n	800bba2 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800bb9e:	e000      	b.n	800bba2 <SCSI_SenseCode+0x8c>
    return;
 800bba0:	bf00      	nop
  }
}
 800bba2:	3714      	adds	r7, #20
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b086      	sub	sp, #24
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	32b0      	adds	r2, #176	@ 0xb0
 800bbc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d102      	bne.n	800bbd6 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800bbd0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd4:	e03b      	b.n	800bc4e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d10f      	bne.n	800bc00 <SCSI_StartStopUnit+0x54>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	f003 0303 	and.w	r3, r3, #3
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d108      	bne.n	800bc00 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800bbee:	7af9      	ldrb	r1, [r7, #11]
 800bbf0:	2324      	movs	r3, #36	@ 0x24
 800bbf2:	2205      	movs	r2, #5
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f7ff ff8e 	bl	800bb16 <SCSI_SenseCode>

    return -1;
 800bbfa:	f04f 33ff 	mov.w	r3, #4294967295
 800bbfe:	e026      	b.n	800bc4e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	3304      	adds	r3, #4
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	f003 0303 	and.w	r3, r3, #3
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d104      	bne.n	800bc18 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800bc16:	e016      	b.n	800bc46 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	f003 0303 	and.w	r3, r3, #3
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d104      	bne.n	800bc30 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	2202      	movs	r2, #2
 800bc2a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800bc2e:	e00a      	b.n	800bc46 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3304      	adds	r3, #4
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	f003 0303 	and.w	r3, r3, #3
 800bc3a:	2b03      	cmp	r3, #3
 800bc3c:	d103      	bne.n	800bc46 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	60da      	str	r2, [r3, #12]

  return 0;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b087      	sub	sp, #28
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	60f8      	str	r0, [r7, #12]
 800bc5e:	460b      	mov	r3, r1
 800bc60:	607a      	str	r2, [r7, #4]
 800bc62:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	32b0      	adds	r2, #176	@ 0xb0
 800bc6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc72:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d102      	bne.n	800bc80 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800bc7a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc7e:	e011      	b.n	800bca4 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	3304      	adds	r3, #4
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d104      	bne.n	800bc94 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800bc92:	e003      	b.n	800bc9c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	60da      	str	r2, [r3, #12]

  return 0;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	371c      	adds	r7, #28
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	460b      	mov	r3, r1
 800bcba:	607a      	str	r2, [r7, #4]
 800bcbc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	32b0      	adds	r2, #176	@ 0xb0
 800bcc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bccc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d102      	bne.n	800bcda <SCSI_Read10+0x2a>
  {
    return -1;
 800bcd4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd8:	e090      	b.n	800bdfc <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	7a1b      	ldrb	r3, [r3, #8]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f040 8082 	bne.w	800bde8 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800bcea:	b25b      	sxtb	r3, r3
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	db0a      	blt.n	800bd06 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800bcf6:	2320      	movs	r3, #32
 800bcf8:	2205      	movs	r2, #5
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f7ff ff0b 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800bd00:	f04f 33ff 	mov.w	r3, #4294967295
 800bd04:	e07a      	b.n	800bdfc <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d108      	bne.n	800bd22 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bd10:	7af9      	ldrb	r1, [r7, #11]
 800bd12:	233a      	movs	r3, #58	@ 0x3a
 800bd14:	2202      	movs	r2, #2
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7ff fefd 	bl	800bb16 <SCSI_SenseCode>

      return -1;
 800bd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd20:	e06c      	b.n	800bdfc <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	33b0      	adds	r3, #176	@ 0xb0
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	7afa      	ldrb	r2, [r7, #11]
 800bd36:	4610      	mov	r0, r2
 800bd38:	4798      	blx	r3
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d008      	beq.n	800bd52 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bd40:	7af9      	ldrb	r1, [r7, #11]
 800bd42:	233a      	movs	r3, #58	@ 0x3a
 800bd44:	2202      	movs	r2, #2
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f7ff fee5 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800bd4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd50:	e054      	b.n	800bdfc <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3302      	adds	r3, #2
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	3303      	adds	r3, #3
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bd62:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	3304      	adds	r3, #4
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800bd6c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	3205      	adds	r2, #5
 800bd72:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800bd74:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	3307      	adds	r3, #7
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	021b      	lsls	r3, r3, #8
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	3208      	adds	r2, #8
 800bd88:	7812      	ldrb	r2, [r2, #0]
 800bd8a:	431a      	orrs	r2, r3
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800bd9e:	7af9      	ldrb	r1, [r7, #11]
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f000 fadc 	bl	800c35e <SCSI_CheckAddressRange>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	da02      	bge.n	800bdb2 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800bdac:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb0:	e024      	b.n	800bdfc <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800bdbe:	6979      	ldr	r1, [r7, #20]
 800bdc0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800bdc4:	fb01 f303 	mul.w	r3, r1, r3
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d00a      	beq.n	800bde2 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800bdd2:	2320      	movs	r3, #32
 800bdd4:	2205      	movs	r2, #5
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f7ff fe9d 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800bddc:	f04f 33ff 	mov.w	r3, #4294967295
 800bde0:	e00c      	b.n	800bdfc <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2202      	movs	r2, #2
 800bde6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bdee:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800bdf0:	7afb      	ldrb	r3, [r7, #11]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f000 fadf 	bl	800c3b8 <SCSI_ProcessRead>
 800bdfa:	4603      	mov	r3, r0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3718      	adds	r7, #24
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	460b      	mov	r3, r1
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	32b0      	adds	r2, #176	@ 0xb0
 800be1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be20:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d102      	bne.n	800be2e <SCSI_Read12+0x2a>
  {
    return -1;
 800be28:	f04f 33ff 	mov.w	r3, #4294967295
 800be2c:	e09a      	b.n	800bf64 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	7a1b      	ldrb	r3, [r3, #8]
 800be32:	2b00      	cmp	r3, #0
 800be34:	f040 808c 	bne.w	800bf50 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800be3e:	b25b      	sxtb	r3, r3
 800be40:	2b00      	cmp	r3, #0
 800be42:	db0a      	blt.n	800be5a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800be4a:	2320      	movs	r3, #32
 800be4c:	2205      	movs	r2, #5
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	f7ff fe61 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800be54:	f04f 33ff 	mov.w	r3, #4294967295
 800be58:	e084      	b.n	800bf64 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800be60:	2b02      	cmp	r3, #2
 800be62:	d108      	bne.n	800be76 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800be64:	7af9      	ldrb	r1, [r7, #11]
 800be66:	233a      	movs	r3, #58	@ 0x3a
 800be68:	2202      	movs	r2, #2
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f7ff fe53 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800be70:	f04f 33ff 	mov.w	r3, #4294967295
 800be74:	e076      	b.n	800bf64 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	33b0      	adds	r3, #176	@ 0xb0
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	7afa      	ldrb	r2, [r7, #11]
 800be8a:	4610      	mov	r0, r2
 800be8c:	4798      	blx	r3
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d008      	beq.n	800bea6 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800be94:	7af9      	ldrb	r1, [r7, #11]
 800be96:	233a      	movs	r3, #58	@ 0x3a
 800be98:	2202      	movs	r2, #2
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f7ff fe3b 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800bea0:	f04f 33ff 	mov.w	r3, #4294967295
 800bea4:	e05e      	b.n	800bf64 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	3302      	adds	r3, #2
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	3303      	adds	r3, #3
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800beb6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	3304      	adds	r3, #4
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800bec0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	3205      	adds	r2, #5
 800bec6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800bec8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	3306      	adds	r3, #6
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	3307      	adds	r3, #7
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bee0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	3308      	adds	r3, #8
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800beea:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	3209      	adds	r2, #9
 800bef0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800bef2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800bf06:	7af9      	ldrb	r1, [r7, #11]
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f000 fa28 	bl	800c35e <SCSI_CheckAddressRange>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	da02      	bge.n	800bf1a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800bf14:	f04f 33ff 	mov.w	r3, #4294967295
 800bf18:	e024      	b.n	800bf64 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800bf26:	6979      	ldr	r1, [r7, #20]
 800bf28:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800bf2c:	fb01 f303 	mul.w	r3, r1, r3
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d00a      	beq.n	800bf4a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800bf3a:	2320      	movs	r3, #32
 800bf3c:	2205      	movs	r2, #5
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f7ff fde9 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800bf44:	f04f 33ff 	mov.w	r3, #4294967295
 800bf48:	e00c      	b.n	800bf64 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	2202      	movs	r2, #2
 800bf4e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf56:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800bf58:	7afb      	ldrb	r3, [r7, #11]
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 fa2b 	bl	800c3b8 <SCSI_ProcessRead>
 800bf62:	4603      	mov	r3, r0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3718      	adds	r7, #24
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	460b      	mov	r3, r1
 800bf76:	607a      	str	r2, [r7, #4]
 800bf78:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	32b0      	adds	r2, #176	@ 0xb0
 800bf84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf88:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d102      	bne.n	800bf96 <SCSI_Write10+0x2a>
  {
    return -1;
 800bf90:	f04f 33ff 	mov.w	r3, #4294967295
 800bf94:	e0ba      	b.n	800c10c <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	7a1b      	ldrb	r3, [r3, #8]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f040 80b0 	bne.w	800c100 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10a      	bne.n	800bfc0 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800bfb0:	2320      	movs	r3, #32
 800bfb2:	2205      	movs	r2, #5
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f7ff fdae 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800bfba:	f04f 33ff 	mov.w	r3, #4294967295
 800bfbe:	e0a5      	b.n	800c10c <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800bfc6:	b25b      	sxtb	r3, r3
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	da0a      	bge.n	800bfe2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800bfd2:	2320      	movs	r3, #32
 800bfd4:	2205      	movs	r2, #5
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f7ff fd9d 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800bfdc:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe0:	e094      	b.n	800c10c <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	33b0      	adds	r3, #176	@ 0xb0
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4413      	add	r3, r2
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	7afa      	ldrb	r2, [r7, #11]
 800bff6:	4610      	mov	r0, r2
 800bff8:	4798      	blx	r3
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d008      	beq.n	800c012 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c000:	7af9      	ldrb	r1, [r7, #11]
 800c002:	233a      	movs	r3, #58	@ 0x3a
 800c004:	2202      	movs	r2, #2
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f7ff fd85 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800c00c:	f04f 33ff 	mov.w	r3, #4294967295
 800c010:	e07c      	b.n	800c10c <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	33b0      	adds	r3, #176	@ 0xb0
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	4413      	add	r3, r2
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	7afa      	ldrb	r2, [r7, #11]
 800c026:	4610      	mov	r0, r2
 800c028:	4798      	blx	r3
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d008      	beq.n	800c042 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c030:	7af9      	ldrb	r1, [r7, #11]
 800c032:	2327      	movs	r3, #39	@ 0x27
 800c034:	2202      	movs	r2, #2
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7ff fd6d 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800c03c:	f04f 33ff 	mov.w	r3, #4294967295
 800c040:	e064      	b.n	800c10c <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	3302      	adds	r3, #2
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	3303      	adds	r3, #3
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c052:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3304      	adds	r3, #4
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c05c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	3205      	adds	r2, #5
 800c062:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800c064:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	3307      	adds	r3, #7
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	3208      	adds	r2, #8
 800c078:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c07a:	431a      	orrs	r2, r3
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800c08e:	7af9      	ldrb	r1, [r7, #11]
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f000 f964 	bl	800c35e <SCSI_CheckAddressRange>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	da02      	bge.n	800c0a2 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c09c:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a0:	e034      	b.n	800c10c <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800c0a8:	697a      	ldr	r2, [r7, #20]
 800c0aa:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800c0ae:	fb02 f303 	mul.w	r3, r2, r3
 800c0b2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800c0ba:	693a      	ldr	r2, [r7, #16]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d00a      	beq.n	800c0d6 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800c0c6:	2320      	movs	r3, #32
 800c0c8:	2205      	movs	r2, #5
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f7ff fd23 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800c0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d4:	e01a      	b.n	800c10c <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0dc:	bf28      	it	cs
 800c0de:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800c0e2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800c0ea:	4b0a      	ldr	r3, [pc, #40]	@ (800c114 <SCSI_Write10+0x1a8>)
 800c0ec:	7819      	ldrb	r1, [r3, #0]
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	f103 0210 	add.w	r2, r3, #16
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f002 fa47 	bl	800e58a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	e005      	b.n	800c10c <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800c100:	7afb      	ldrb	r3, [r7, #11]
 800c102:	4619      	mov	r1, r3
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f000 f9dd 	bl	800c4c4 <SCSI_ProcessWrite>
 800c10a:	4603      	mov	r3, r0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	24000073 	.word	0x24000073

0800c118 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	460b      	mov	r3, r1
 800c122:	607a      	str	r2, [r7, #4]
 800c124:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	32b0      	adds	r2, #176	@ 0xb0
 800c130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c134:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d102      	bne.n	800c142 <SCSI_Write12+0x2a>
  {
    return -1;
 800c13c:	f04f 33ff 	mov.w	r3, #4294967295
 800c140:	e0ca      	b.n	800c2d8 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	7a1b      	ldrb	r3, [r3, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	f040 80c0 	bne.w	800c2cc <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10a      	bne.n	800c16c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800c15c:	2320      	movs	r3, #32
 800c15e:	2205      	movs	r2, #5
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7ff fcd8 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800c166:	f04f 33ff 	mov.w	r3, #4294967295
 800c16a:	e0b5      	b.n	800c2d8 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800c172:	b25b      	sxtb	r3, r3
 800c174:	2b00      	cmp	r3, #0
 800c176:	da0a      	bge.n	800c18e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800c17e:	2320      	movs	r3, #32
 800c180:	2205      	movs	r2, #5
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f7ff fcc7 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800c188:	f04f 33ff 	mov.w	r3, #4294967295
 800c18c:	e0a4      	b.n	800c2d8 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	33b0      	adds	r3, #176	@ 0xb0
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4413      	add	r3, r2
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	7afa      	ldrb	r2, [r7, #11]
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	4798      	blx	r3
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00b      	beq.n	800c1c4 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c1ac:	7af9      	ldrb	r1, [r7, #11]
 800c1ae:	233a      	movs	r3, #58	@ 0x3a
 800c1b0:	2202      	movs	r2, #2
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f7ff fcaf 	bl	800bb16 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	2205      	movs	r2, #5
 800c1bc:	721a      	strb	r2, [r3, #8]
      return -1;
 800c1be:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c2:	e089      	b.n	800c2d8 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	33b0      	adds	r3, #176	@ 0xb0
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	7afa      	ldrb	r2, [r7, #11]
 800c1d8:	4610      	mov	r0, r2
 800c1da:	4798      	blx	r3
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00b      	beq.n	800c1fa <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c1e2:	7af9      	ldrb	r1, [r7, #11]
 800c1e4:	2327      	movs	r3, #39	@ 0x27
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f7ff fc94 	bl	800bb16 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	2205      	movs	r2, #5
 800c1f2:	721a      	strb	r2, [r3, #8]
      return -1;
 800c1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f8:	e06e      	b.n	800c2d8 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	3302      	adds	r3, #2
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	3303      	adds	r3, #3
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c20a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	3304      	adds	r3, #4
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c214:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	3205      	adds	r2, #5
 800c21a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800c21c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3306      	adds	r3, #6
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	3307      	adds	r3, #7
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c234:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	3308      	adds	r3, #8
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800c23e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	3209      	adds	r2, #9
 800c244:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800c246:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800c25a:	7af9      	ldrb	r1, [r7, #11]
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f000 f87e 	bl	800c35e <SCSI_CheckAddressRange>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	da02      	bge.n	800c26e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c268:	f04f 33ff 	mov.w	r3, #4294967295
 800c26c:	e034      	b.n	800c2d8 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800c274:	697a      	ldr	r2, [r7, #20]
 800c276:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800c27a:	fb02 f303 	mul.w	r3, r2, r3
 800c27e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800c286:	693a      	ldr	r2, [r7, #16]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d00a      	beq.n	800c2a2 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800c292:	2320      	movs	r3, #32
 800c294:	2205      	movs	r2, #5
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f7ff fc3d 	bl	800bb16 <SCSI_SenseCode>
      return -1;
 800c29c:	f04f 33ff 	mov.w	r3, #4294967295
 800c2a0:	e01a      	b.n	800c2d8 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2a8:	bf28      	it	cs
 800c2aa:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800c2ae:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800c2b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c2e0 <SCSI_Write12+0x1c8>)
 800c2b8:	7819      	ldrb	r1, [r3, #0]
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	f103 0210 	add.w	r2, r3, #16
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f002 f961 	bl	800e58a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	e005      	b.n	800c2d8 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800c2cc:	7afb      	ldrb	r3, [r7, #11]
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f000 f8f7 	bl	800c4c4 <SCSI_ProcessWrite>
 800c2d6:	4603      	mov	r3, r0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3718      	adds	r7, #24
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	24000073 	.word	0x24000073

0800c2e4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b086      	sub	sp, #24
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	607a      	str	r2, [r7, #4]
 800c2f0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	32b0      	adds	r2, #176	@ 0xb0
 800c2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c300:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d102      	bne.n	800c30e <SCSI_Verify10+0x2a>
  {
    return -1;
 800c308:	f04f 33ff 	mov.w	r3, #4294967295
 800c30c:	e023      	b.n	800c356 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	3301      	adds	r3, #1
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	f003 0302 	and.w	r3, r3, #2
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d008      	beq.n	800c32e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800c31c:	7af9      	ldrb	r1, [r7, #11]
 800c31e:	2324      	movs	r3, #36	@ 0x24
 800c320:	2205      	movs	r2, #5
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f7ff fbf7 	bl	800bb16 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800c328:	f04f 33ff 	mov.w	r3, #4294967295
 800c32c:	e013      	b.n	800c356 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800c33a:	7af9      	ldrb	r1, [r7, #11]
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f000 f80e 	bl	800c35e <SCSI_CheckAddressRange>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	da02      	bge.n	800c34e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800c348:	f04f 33ff 	mov.w	r3, #4294967295
 800c34c:	e003      	b.n	800c356 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	2200      	movs	r2, #0
 800c352:	60da      	str	r2, [r3, #12]

  return 0;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3718      	adds	r7, #24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b086      	sub	sp, #24
 800c362:	af00      	add	r7, sp, #0
 800c364:	60f8      	str	r0, [r7, #12]
 800c366:	607a      	str	r2, [r7, #4]
 800c368:	603b      	str	r3, [r7, #0]
 800c36a:	460b      	mov	r3, r1
 800c36c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	32b0      	adds	r2, #176	@ 0xb0
 800c378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c37c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d102      	bne.n	800c38a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800c384:	f04f 33ff 	mov.w	r3, #4294967295
 800c388:	e011      	b.n	800c3ae <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	441a      	add	r2, r3
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800c396:	429a      	cmp	r2, r3
 800c398:	d908      	bls.n	800c3ac <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800c39a:	7af9      	ldrb	r1, [r7, #11]
 800c39c:	2321      	movs	r3, #33	@ 0x21
 800c39e:	2205      	movs	r2, #5
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f7ff fbb8 	bl	800bb16 <SCSI_SenseCode>
    return -1;
 800c3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c3aa:	e000      	b.n	800c3ae <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3718      	adds	r7, #24
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
	...

0800c3b8 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800c3b8:	b590      	push	{r4, r7, lr}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	32b0      	adds	r2, #176	@ 0xb0
 800c3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d102      	bne.n	800c3e0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800c3da:	f04f 33ff 	mov.w	r3, #4294967295
 800c3de:	e06a      	b.n	800c4b6 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800c3e6:	68fa      	ldr	r2, [r7, #12]
 800c3e8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800c3ec:	fb02 f303 	mul.w	r3, r2, r3
 800c3f0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3f8:	bf28      	it	cs
 800c3fa:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800c3fe:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	33b0      	adds	r3, #176	@ 0xb0
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	4413      	add	r3, r2
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	691c      	ldr	r4, [r3, #16]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f103 0110 	add.w	r1, r3, #16
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800c424:	4618      	mov	r0, r3
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	78f8      	ldrb	r0, [r7, #3]
 800c430:	47a0      	blx	r4
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	da08      	bge.n	800c44a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800c438:	78f9      	ldrb	r1, [r7, #3]
 800c43a:	2311      	movs	r3, #17
 800c43c:	2204      	movs	r2, #4
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff fb69 	bl	800bb16 <SCSI_SenseCode>
    return -1;
 800c444:	f04f 33ff 	mov.w	r3, #4294967295
 800c448:	e035      	b.n	800c4b6 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800c44a:	4b1d      	ldr	r3, [pc, #116]	@ (800c4c0 <SCSI_ProcessRead+0x108>)
 800c44c:	7819      	ldrb	r1, [r3, #0]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f103 0210 	add.w	r2, r3, #16
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f002 f876 	bl	800e548 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800c468:	4619      	mov	r1, r3
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c470:	441a      	add	r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800c484:	4619      	mov	r1, r3
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	fbb3 f3f1 	udiv	r3, r3, r1
 800c48c:	1ad2      	subs	r2, r2, r3
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	1ad2      	subs	r2, r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d102      	bne.n	800c4b4 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2203      	movs	r2, #3
 800c4b2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd90      	pop	{r4, r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	24000072 	.word	0x24000072

0800c4c4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800c4c4:	b590      	push	{r4, r7, lr}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	32b0      	adds	r2, #176	@ 0xb0
 800c4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4de:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d102      	bne.n	800c4ec <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800c4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ea:	e07a      	b.n	800c5e2 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800c4f8:	fb02 f303 	mul.w	r3, r2, r3
 800c4fc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c504:	bf28      	it	cs
 800c506:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800c50a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	33b0      	adds	r3, #176	@ 0xb0
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	4413      	add	r3, r2
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	695c      	ldr	r4, [r3, #20]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f103 0110 	add.w	r1, r3, #16
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800c530:	4618      	mov	r0, r3
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800c538:	b29b      	uxth	r3, r3
 800c53a:	78f8      	ldrb	r0, [r7, #3]
 800c53c:	47a0      	blx	r4
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	da08      	bge.n	800c556 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800c544:	78f9      	ldrb	r1, [r7, #3]
 800c546:	2303      	movs	r3, #3
 800c548:	2204      	movs	r2, #4
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7ff fae3 	bl	800bb16 <SCSI_SenseCode>
    return -1;
 800c550:	f04f 33ff 	mov.w	r3, #4294967295
 800c554:	e045      	b.n	800c5e2 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800c562:	4619      	mov	r1, r3
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	fbb3 f3f1 	udiv	r3, r3, r1
 800c56a:	441a      	add	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800c57e:	4619      	mov	r1, r3
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	fbb3 f3f1 	udiv	r3, r3, r1
 800c586:	1ad2      	subs	r2, r2, r3
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	1ad2      	subs	r2, r2, r3
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d104      	bne.n	800c5b2 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f7fe fce8 	bl	800af80 <MSC_BOT_SendCSW>
 800c5b0:	e016      	b.n	800c5e0 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800c5be:	fb02 f303 	mul.w	r3, r2, r3
 800c5c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5c6:	bf28      	it	cs
 800c5c8:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800c5cc:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800c5ce:	4b07      	ldr	r3, [pc, #28]	@ (800c5ec <SCSI_ProcessWrite+0x128>)
 800c5d0:	7819      	ldrb	r1, [r3, #0]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f103 0210 	add.w	r2, r3, #16
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f001 ffd5 	bl	800e58a <USBD_LL_PrepareReceive>
  }

  return 0;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd90      	pop	{r4, r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	24000073 	.word	0x24000073

0800c5f0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b087      	sub	sp, #28
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800c5fe:	88fb      	ldrh	r3, [r7, #6]
 800c600:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d102      	bne.n	800c60e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800c608:	f04f 33ff 	mov.w	r3, #4294967295
 800c60c:	e013      	b.n	800c636 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800c60e:	8afa      	ldrh	r2, [r7, #22]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800c614:	e00b      	b.n	800c62e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800c616:	8afb      	ldrh	r3, [r7, #22]
 800c618:	3b01      	subs	r3, #1
 800c61a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800c61c:	8afb      	ldrh	r3, [r7, #22]
 800c61e:	68ba      	ldr	r2, [r7, #8]
 800c620:	441a      	add	r2, r3
 800c622:	8afb      	ldrh	r3, [r7, #22]
 800c624:	7811      	ldrb	r1, [r2, #0]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	4413      	add	r3, r2
 800c62a:	460a      	mov	r2, r1
 800c62c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800c62e:	8afb      	ldrh	r3, [r7, #22]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1f0      	bne.n	800c616 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	371c      	adds	r7, #28
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b086      	sub	sp, #24
 800c646:	af00      	add	r7, sp, #0
 800c648:	60f8      	str	r0, [r7, #12]
 800c64a:	60b9      	str	r1, [r7, #8]
 800c64c:	4613      	mov	r3, r2
 800c64e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d101      	bne.n	800c65a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c656:	2303      	movs	r3, #3
 800c658:	e01f      	b.n	800c69a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2200      	movs	r2, #0
 800c65e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d003      	beq.n	800c680 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	68ba      	ldr	r2, [r7, #8]
 800c67c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	79fa      	ldrb	r2, [r7, #7]
 800c68c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f001 fe02 	bl	800e298 <USBD_LL_Init>
 800c694:	4603      	mov	r3, r0
 800c696:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c698:	7dfb      	ldrb	r3, [r7, #23]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3718      	adds	r7, #24
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b084      	sub	sp, #16
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
 800c6aa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	e025      	b.n	800c706 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	32ae      	adds	r2, #174	@ 0xae
 800c6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00f      	beq.n	800c6f6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	32ae      	adds	r2, #174	@ 0xae
 800c6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e6:	f107 020e 	add.w	r2, r7, #14
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	4798      	blx	r3
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c6fc:	1c5a      	adds	r2, r3, #1
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b082      	sub	sp, #8
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f001 fe0e 	bl	800e338 <USBD_LL_Start>
 800c71c:	4603      	mov	r3, r0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c726:	b480      	push	{r7}
 800c728:	b083      	sub	sp, #12
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c72e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c730:	4618      	mov	r0, r3
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	460b      	mov	r3, r1
 800c746:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c748:	2300      	movs	r3, #0
 800c74a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c752:	2b00      	cmp	r3, #0
 800c754:	d009      	beq.n	800c76a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	78fa      	ldrb	r2, [r7, #3]
 800c760:	4611      	mov	r1, r2
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	4798      	blx	r3
 800c766:	4603      	mov	r3, r0
 800c768:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	460b      	mov	r3, r1
 800c77e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c780:	2300      	movs	r3, #0
 800c782:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	78fa      	ldrb	r2, [r7, #3]
 800c78e:	4611      	mov	r1, r2
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	4798      	blx	r3
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d001      	beq.n	800c79e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c79a:	2303      	movs	r3, #3
 800c79c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7b8:	6839      	ldr	r1, [r7, #0]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f001 f937 	bl	800da2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c7dc:	f003 031f 	and.w	r3, r3, #31
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d01a      	beq.n	800c81a <USBD_LL_SetupStage+0x72>
 800c7e4:	2b02      	cmp	r3, #2
 800c7e6:	d822      	bhi.n	800c82e <USBD_LL_SetupStage+0x86>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <USBD_LL_SetupStage+0x4a>
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d00a      	beq.n	800c806 <USBD_LL_SetupStage+0x5e>
 800c7f0:	e01d      	b.n	800c82e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fb64 	bl	800cec8 <USBD_StdDevReq>
 800c800:	4603      	mov	r3, r0
 800c802:	73fb      	strb	r3, [r7, #15]
      break;
 800c804:	e020      	b.n	800c848 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fbcc 	bl	800cfac <USBD_StdItfReq>
 800c814:	4603      	mov	r3, r0
 800c816:	73fb      	strb	r3, [r7, #15]
      break;
 800c818:	e016      	b.n	800c848 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c820:	4619      	mov	r1, r3
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 fc2e 	bl	800d084 <USBD_StdEPReq>
 800c828:	4603      	mov	r3, r0
 800c82a:	73fb      	strb	r3, [r7, #15]
      break;
 800c82c:	e00c      	b.n	800c848 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c834:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	4619      	mov	r1, r3
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f001 fdfa 	bl	800e436 <USBD_LL_StallEP>
 800c842:	4603      	mov	r3, r0
 800c844:	73fb      	strb	r3, [r7, #15]
      break;
 800c846:	bf00      	nop
  }

  return ret;
 800c848:	7bfb      	ldrb	r3, [r7, #15]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3710      	adds	r7, #16
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b086      	sub	sp, #24
 800c856:	af00      	add	r7, sp, #0
 800c858:	60f8      	str	r0, [r7, #12]
 800c85a:	460b      	mov	r3, r1
 800c85c:	607a      	str	r2, [r7, #4]
 800c85e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c860:	2300      	movs	r3, #0
 800c862:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c864:	7afb      	ldrb	r3, [r7, #11]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d16e      	bne.n	800c948 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c870:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c878:	2b03      	cmp	r3, #3
 800c87a:	f040 8098 	bne.w	800c9ae <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	689a      	ldr	r2, [r3, #8]
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	429a      	cmp	r2, r3
 800c888:	d913      	bls.n	800c8b2 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	689a      	ldr	r2, [r3, #8]
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	1ad2      	subs	r2, r2, r3
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	68da      	ldr	r2, [r3, #12]
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	bf28      	it	cs
 800c8a4:	4613      	movcs	r3, r2
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	6879      	ldr	r1, [r7, #4]
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f001 f9a2 	bl	800dbf4 <USBD_CtlContinueRx>
 800c8b0:	e07d      	b.n	800c9ae <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c8b8:	f003 031f 	and.w	r3, r3, #31
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d014      	beq.n	800c8ea <USBD_LL_DataOutStage+0x98>
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	d81d      	bhi.n	800c900 <USBD_LL_DataOutStage+0xae>
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <USBD_LL_DataOutStage+0x7c>
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d003      	beq.n	800c8d4 <USBD_LL_DataOutStage+0x82>
 800c8cc:	e018      	b.n	800c900 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	75bb      	strb	r3, [r7, #22]
            break;
 800c8d2:	e018      	b.n	800c906 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	4619      	mov	r1, r3
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f000 fa64 	bl	800cdac <USBD_CoreFindIF>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	75bb      	strb	r3, [r7, #22]
            break;
 800c8e8:	e00d      	b.n	800c906 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f000 fa66 	bl	800cdc6 <USBD_CoreFindEP>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	75bb      	strb	r3, [r7, #22]
            break;
 800c8fe:	e002      	b.n	800c906 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c900:	2300      	movs	r3, #0
 800c902:	75bb      	strb	r3, [r7, #22]
            break;
 800c904:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c906:	7dbb      	ldrb	r3, [r7, #22]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d119      	bne.n	800c940 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b03      	cmp	r3, #3
 800c916:	d113      	bne.n	800c940 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c918:	7dba      	ldrb	r2, [r7, #22]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	32ae      	adds	r2, #174	@ 0xae
 800c91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00b      	beq.n	800c940 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c928:	7dba      	ldrb	r2, [r7, #22]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c930:	7dba      	ldrb	r2, [r7, #22]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	32ae      	adds	r2, #174	@ 0xae
 800c936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f001 f968 	bl	800dc16 <USBD_CtlSendStatus>
 800c946:	e032      	b.n	800c9ae <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c948:	7afb      	ldrb	r3, [r7, #11]
 800c94a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	4619      	mov	r1, r3
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	f000 fa37 	bl	800cdc6 <USBD_CoreFindEP>
 800c958:	4603      	mov	r3, r0
 800c95a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c95c:	7dbb      	ldrb	r3, [r7, #22]
 800c95e:	2bff      	cmp	r3, #255	@ 0xff
 800c960:	d025      	beq.n	800c9ae <USBD_LL_DataOutStage+0x15c>
 800c962:	7dbb      	ldrb	r3, [r7, #22]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d122      	bne.n	800c9ae <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	2b03      	cmp	r3, #3
 800c972:	d117      	bne.n	800c9a4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c974:	7dba      	ldrb	r2, [r7, #22]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	32ae      	adds	r2, #174	@ 0xae
 800c97a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c97e:	699b      	ldr	r3, [r3, #24]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00f      	beq.n	800c9a4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c984:	7dba      	ldrb	r2, [r7, #22]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c98c:	7dba      	ldrb	r2, [r7, #22]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	32ae      	adds	r2, #174	@ 0xae
 800c992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c996:	699b      	ldr	r3, [r3, #24]
 800c998:	7afa      	ldrb	r2, [r7, #11]
 800c99a:	4611      	mov	r1, r2
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	4798      	blx	r3
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c9a4:	7dfb      	ldrb	r3, [r7, #23]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d001      	beq.n	800c9ae <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c9aa:	7dfb      	ldrb	r3, [r7, #23]
 800c9ac:	e000      	b.n	800c9b0 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3718      	adds	r7, #24
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	607a      	str	r2, [r7, #4]
 800c9c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c9c6:	7afb      	ldrb	r3, [r7, #11]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d16f      	bne.n	800caac <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	3314      	adds	r3, #20
 800c9d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d15a      	bne.n	800ca92 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	689a      	ldr	r2, [r3, #8]
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d914      	bls.n	800ca12 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	689a      	ldr	r2, [r3, #8]
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	1ad2      	subs	r2, r2, r3
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	6879      	ldr	r1, [r7, #4]
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f001 f8e7 	bl	800dbd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca04:	2300      	movs	r3, #0
 800ca06:	2200      	movs	r2, #0
 800ca08:	2100      	movs	r1, #0
 800ca0a:	68f8      	ldr	r0, [r7, #12]
 800ca0c:	f001 fdbd 	bl	800e58a <USBD_LL_PrepareReceive>
 800ca10:	e03f      	b.n	800ca92 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	68da      	ldr	r2, [r3, #12]
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d11c      	bne.n	800ca58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	685a      	ldr	r2, [r3, #4]
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d316      	bcc.n	800ca58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	685a      	ldr	r2, [r3, #4]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d20f      	bcs.n	800ca58 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ca38:	2200      	movs	r2, #0
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f001 f8c8 	bl	800dbd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	2100      	movs	r1, #0
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f001 fd9a 	bl	800e58a <USBD_LL_PrepareReceive>
 800ca56:	e01c      	b.n	800ca92 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	2b03      	cmp	r3, #3
 800ca62:	d10f      	bne.n	800ca84 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d009      	beq.n	800ca84 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca84:	2180      	movs	r1, #128	@ 0x80
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f001 fcd5 	bl	800e436 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f001 f8d5 	bl	800dc3c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d03a      	beq.n	800cb12 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f7ff fe42 	bl	800c726 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800caaa:	e032      	b.n	800cb12 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800caac:	7afb      	ldrb	r3, [r7, #11]
 800caae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	4619      	mov	r1, r3
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f000 f985 	bl	800cdc6 <USBD_CoreFindEP>
 800cabc:	4603      	mov	r3, r0
 800cabe:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cac0:	7dfb      	ldrb	r3, [r7, #23]
 800cac2:	2bff      	cmp	r3, #255	@ 0xff
 800cac4:	d025      	beq.n	800cb12 <USBD_LL_DataInStage+0x15a>
 800cac6:	7dfb      	ldrb	r3, [r7, #23]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d122      	bne.n	800cb12 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	2b03      	cmp	r3, #3
 800cad6:	d11c      	bne.n	800cb12 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cad8:	7dfa      	ldrb	r2, [r7, #23]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	32ae      	adds	r2, #174	@ 0xae
 800cade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae2:	695b      	ldr	r3, [r3, #20]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d014      	beq.n	800cb12 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cae8:	7dfa      	ldrb	r2, [r7, #23]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800caf0:	7dfa      	ldrb	r2, [r7, #23]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	32ae      	adds	r2, #174	@ 0xae
 800caf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cafa:	695b      	ldr	r3, [r3, #20]
 800cafc:	7afa      	ldrb	r2, [r7, #11]
 800cafe:	4611      	mov	r1, r2
 800cb00:	68f8      	ldr	r0, [r7, #12]
 800cb02:	4798      	blx	r3
 800cb04:	4603      	mov	r3, r0
 800cb06:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cb08:	7dbb      	ldrb	r3, [r7, #22]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cb0e:	7dbb      	ldrb	r3, [r7, #22]
 800cb10:	e000      	b.n	800cb14 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cb12:	2300      	movs	r3, #0
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3718      	adds	r7, #24
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb24:	2300      	movs	r3, #0
 800cb26:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d014      	beq.n	800cb82 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00e      	beq.n	800cb82 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	6852      	ldr	r2, [r2, #4]
 800cb70:	b2d2      	uxtb	r2, r2
 800cb72:	4611      	mov	r1, r2
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	4798      	blx	r3
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cb7e:	2303      	movs	r3, #3
 800cb80:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb82:	2340      	movs	r3, #64	@ 0x40
 800cb84:	2200      	movs	r2, #0
 800cb86:	2100      	movs	r1, #0
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f001 fbf0 	bl	800e36e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2240      	movs	r2, #64	@ 0x40
 800cb9a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb9e:	2340      	movs	r3, #64	@ 0x40
 800cba0:	2200      	movs	r2, #0
 800cba2:	2180      	movs	r1, #128	@ 0x80
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f001 fbe2 	bl	800e36e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2201      	movs	r2, #1
 800cbae:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2240      	movs	r2, #64	@ 0x40
 800cbb4:	621a      	str	r2, [r3, #32]

  return ret;
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	460b      	mov	r3, r1
 800cbca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	78fa      	ldrb	r2, [r7, #3]
 800cbd0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	2b04      	cmp	r3, #4
 800cbf2:	d006      	beq.n	800cc02 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbfa:	b2da      	uxtb	r2, r3
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2204      	movs	r2, #4
 800cc06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cc0a:	2300      	movs	r3, #0
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	2b04      	cmp	r3, #4
 800cc2a:	d106      	bne.n	800cc3a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cc32:	b2da      	uxtb	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	2b03      	cmp	r3, #3
 800cc5a:	d110      	bne.n	800cc7e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00b      	beq.n	800cc7e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc6c:	69db      	ldr	r3, [r3, #28]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d005      	beq.n	800cc7e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc78:	69db      	ldr	r3, [r3, #28]
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	32ae      	adds	r2, #174	@ 0xae
 800cc9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d101      	bne.n	800ccaa <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cca6:	2303      	movs	r3, #3
 800cca8:	e01c      	b.n	800cce4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	2b03      	cmp	r3, #3
 800ccb4:	d115      	bne.n	800cce2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	32ae      	adds	r2, #174	@ 0xae
 800ccc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc4:	6a1b      	ldr	r3, [r3, #32]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00b      	beq.n	800cce2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	32ae      	adds	r2, #174	@ 0xae
 800ccd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	78fa      	ldrb	r2, [r7, #3]
 800ccdc:	4611      	mov	r1, r2
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3708      	adds	r7, #8
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	32ae      	adds	r2, #174	@ 0xae
 800cd02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d101      	bne.n	800cd0e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	e01c      	b.n	800cd48 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b03      	cmp	r3, #3
 800cd18:	d115      	bne.n	800cd46 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	32ae      	adds	r2, #174	@ 0xae
 800cd24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00b      	beq.n	800cd46 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	32ae      	adds	r2, #174	@ 0xae
 800cd38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd3e:	78fa      	ldrb	r2, [r7, #3]
 800cd40:	4611      	mov	r1, r2
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b083      	sub	sp, #12
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b084      	sub	sp, #16
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2201      	movs	r2, #1
 800cd76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00e      	beq.n	800cda2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	6852      	ldr	r2, [r2, #4]
 800cd90:	b2d2      	uxtb	r2, r2
 800cd92:	4611      	mov	r1, r2
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	4798      	blx	r3
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d001      	beq.n	800cda2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cd9e:	2303      	movs	r3, #3
 800cda0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cdb8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	370c      	adds	r7, #12
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cdc6:	b480      	push	{r7}
 800cdc8:	b083      	sub	sp, #12
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	460b      	mov	r3, r1
 800cdd0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cdd2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr

0800cde0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b086      	sub	sp, #24
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	885b      	ldrh	r3, [r3, #2]
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	7812      	ldrb	r2, [r2, #0]
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d91f      	bls.n	800ce46 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ce0c:	e013      	b.n	800ce36 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ce0e:	f107 030a 	add.w	r3, r7, #10
 800ce12:	4619      	mov	r1, r3
 800ce14:	6978      	ldr	r0, [r7, #20]
 800ce16:	f000 f81b 	bl	800ce50 <USBD_GetNextDesc>
 800ce1a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	785b      	ldrb	r3, [r3, #1]
 800ce20:	2b05      	cmp	r3, #5
 800ce22:	d108      	bne.n	800ce36 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	789b      	ldrb	r3, [r3, #2]
 800ce2c:	78fa      	ldrb	r2, [r7, #3]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d008      	beq.n	800ce44 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ce32:	2300      	movs	r3, #0
 800ce34:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	885b      	ldrh	r3, [r3, #2]
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	897b      	ldrh	r3, [r7, #10]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d8e5      	bhi.n	800ce0e <USBD_GetEpDesc+0x2e>
 800ce42:	e000      	b.n	800ce46 <USBD_GetEpDesc+0x66>
          break;
 800ce44:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ce46:	693b      	ldr	r3, [r7, #16]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3718      	adds	r7, #24
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	881b      	ldrh	r3, [r3, #0]
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	7812      	ldrb	r2, [r2, #0]
 800ce66:	4413      	add	r3, r2
 800ce68:	b29a      	uxth	r2, r3
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	461a      	mov	r2, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	4413      	add	r3, r2
 800ce78:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3714      	adds	r7, #20
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b087      	sub	sp, #28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cea6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ceaa:	021b      	lsls	r3, r3, #8
 800ceac:	b21a      	sxth	r2, r3
 800ceae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	b21b      	sxth	r3, r3
 800ceb6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ceb8:	89fb      	ldrh	r3, [r7, #14]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	371c      	adds	r7, #28
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr
	...

0800cec8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ced2:	2300      	movs	r3, #0
 800ced4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cede:	2b40      	cmp	r3, #64	@ 0x40
 800cee0:	d005      	beq.n	800ceee <USBD_StdDevReq+0x26>
 800cee2:	2b40      	cmp	r3, #64	@ 0x40
 800cee4:	d857      	bhi.n	800cf96 <USBD_StdDevReq+0xce>
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00f      	beq.n	800cf0a <USBD_StdDevReq+0x42>
 800ceea:	2b20      	cmp	r3, #32
 800ceec:	d153      	bne.n	800cf96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	32ae      	adds	r2, #174	@ 0xae
 800cef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	4798      	blx	r3
 800cf04:	4603      	mov	r3, r0
 800cf06:	73fb      	strb	r3, [r7, #15]
      break;
 800cf08:	e04a      	b.n	800cfa0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	785b      	ldrb	r3, [r3, #1]
 800cf0e:	2b09      	cmp	r3, #9
 800cf10:	d83b      	bhi.n	800cf8a <USBD_StdDevReq+0xc2>
 800cf12:	a201      	add	r2, pc, #4	@ (adr r2, 800cf18 <USBD_StdDevReq+0x50>)
 800cf14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf18:	0800cf6d 	.word	0x0800cf6d
 800cf1c:	0800cf81 	.word	0x0800cf81
 800cf20:	0800cf8b 	.word	0x0800cf8b
 800cf24:	0800cf77 	.word	0x0800cf77
 800cf28:	0800cf8b 	.word	0x0800cf8b
 800cf2c:	0800cf4b 	.word	0x0800cf4b
 800cf30:	0800cf41 	.word	0x0800cf41
 800cf34:	0800cf8b 	.word	0x0800cf8b
 800cf38:	0800cf63 	.word	0x0800cf63
 800cf3c:	0800cf55 	.word	0x0800cf55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fa3c 	bl	800d3c0 <USBD_GetDescriptor>
          break;
 800cf48:	e024      	b.n	800cf94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf4a:	6839      	ldr	r1, [r7, #0]
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 fbcb 	bl	800d6e8 <USBD_SetAddress>
          break;
 800cf52:	e01f      	b.n	800cf94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cf54:	6839      	ldr	r1, [r7, #0]
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 fc0a 	bl	800d770 <USBD_SetConfig>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	73fb      	strb	r3, [r7, #15]
          break;
 800cf60:	e018      	b.n	800cf94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf62:	6839      	ldr	r1, [r7, #0]
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fcad 	bl	800d8c4 <USBD_GetConfig>
          break;
 800cf6a:	e013      	b.n	800cf94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cf6c:	6839      	ldr	r1, [r7, #0]
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 fcde 	bl	800d930 <USBD_GetStatus>
          break;
 800cf74:	e00e      	b.n	800cf94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cf76:	6839      	ldr	r1, [r7, #0]
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 fd0d 	bl	800d998 <USBD_SetFeature>
          break;
 800cf7e:	e009      	b.n	800cf94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cf80:	6839      	ldr	r1, [r7, #0]
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 fd31 	bl	800d9ea <USBD_ClrFeature>
          break;
 800cf88:	e004      	b.n	800cf94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 fd88 	bl	800daa2 <USBD_CtlError>
          break;
 800cf92:	bf00      	nop
      }
      break;
 800cf94:	e004      	b.n	800cfa0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cf96:	6839      	ldr	r1, [r7, #0]
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 fd82 	bl	800daa2 <USBD_CtlError>
      break;
 800cf9e:	bf00      	nop
  }

  return ret;
 800cfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop

0800cfac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cfc2:	2b40      	cmp	r3, #64	@ 0x40
 800cfc4:	d005      	beq.n	800cfd2 <USBD_StdItfReq+0x26>
 800cfc6:	2b40      	cmp	r3, #64	@ 0x40
 800cfc8:	d852      	bhi.n	800d070 <USBD_StdItfReq+0xc4>
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d001      	beq.n	800cfd2 <USBD_StdItfReq+0x26>
 800cfce:	2b20      	cmp	r3, #32
 800cfd0:	d14e      	bne.n	800d070 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	2b02      	cmp	r3, #2
 800cfde:	d840      	bhi.n	800d062 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	889b      	ldrh	r3, [r3, #4]
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d836      	bhi.n	800d058 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	889b      	ldrh	r3, [r3, #4]
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	4619      	mov	r1, r3
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7ff feda 	bl	800cdac <USBD_CoreFindIF>
 800cff8:	4603      	mov	r3, r0
 800cffa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cffc:	7bbb      	ldrb	r3, [r7, #14]
 800cffe:	2bff      	cmp	r3, #255	@ 0xff
 800d000:	d01d      	beq.n	800d03e <USBD_StdItfReq+0x92>
 800d002:	7bbb      	ldrb	r3, [r7, #14]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d11a      	bne.n	800d03e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d008:	7bba      	ldrb	r2, [r7, #14]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	32ae      	adds	r2, #174	@ 0xae
 800d00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00f      	beq.n	800d038 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d018:	7bba      	ldrb	r2, [r7, #14]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d020:	7bba      	ldrb	r2, [r7, #14]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	32ae      	adds	r2, #174	@ 0xae
 800d026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	6839      	ldr	r1, [r7, #0]
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	4798      	blx	r3
 800d032:	4603      	mov	r3, r0
 800d034:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d036:	e004      	b.n	800d042 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d038:	2303      	movs	r3, #3
 800d03a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d03c:	e001      	b.n	800d042 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d03e:	2303      	movs	r3, #3
 800d040:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	88db      	ldrh	r3, [r3, #6]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d110      	bne.n	800d06c <USBD_StdItfReq+0xc0>
 800d04a:	7bfb      	ldrb	r3, [r7, #15]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d10d      	bne.n	800d06c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fde0 	bl	800dc16 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d056:	e009      	b.n	800d06c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 fd21 	bl	800daa2 <USBD_CtlError>
          break;
 800d060:	e004      	b.n	800d06c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d062:	6839      	ldr	r1, [r7, #0]
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 fd1c 	bl	800daa2 <USBD_CtlError>
          break;
 800d06a:	e000      	b.n	800d06e <USBD_StdItfReq+0xc2>
          break;
 800d06c:	bf00      	nop
      }
      break;
 800d06e:	e004      	b.n	800d07a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d070:	6839      	ldr	r1, [r7, #0]
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 fd15 	bl	800daa2 <USBD_CtlError>
      break;
 800d078:	bf00      	nop
  }

  return ret;
 800d07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d08e:	2300      	movs	r3, #0
 800d090:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	889b      	ldrh	r3, [r3, #4]
 800d096:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d0a0:	2b40      	cmp	r3, #64	@ 0x40
 800d0a2:	d007      	beq.n	800d0b4 <USBD_StdEPReq+0x30>
 800d0a4:	2b40      	cmp	r3, #64	@ 0x40
 800d0a6:	f200 817f 	bhi.w	800d3a8 <USBD_StdEPReq+0x324>
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d02a      	beq.n	800d104 <USBD_StdEPReq+0x80>
 800d0ae:	2b20      	cmp	r3, #32
 800d0b0:	f040 817a 	bne.w	800d3a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d0b4:	7bbb      	ldrb	r3, [r7, #14]
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7ff fe84 	bl	800cdc6 <USBD_CoreFindEP>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0c2:	7b7b      	ldrb	r3, [r7, #13]
 800d0c4:	2bff      	cmp	r3, #255	@ 0xff
 800d0c6:	f000 8174 	beq.w	800d3b2 <USBD_StdEPReq+0x32e>
 800d0ca:	7b7b      	ldrb	r3, [r7, #13]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f040 8170 	bne.w	800d3b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d0d2:	7b7a      	ldrb	r2, [r7, #13]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d0da:	7b7a      	ldrb	r2, [r7, #13]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	32ae      	adds	r2, #174	@ 0xae
 800d0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e4:	689b      	ldr	r3, [r3, #8]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f000 8163 	beq.w	800d3b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d0ec:	7b7a      	ldrb	r2, [r7, #13]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	32ae      	adds	r2, #174	@ 0xae
 800d0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	4798      	blx	r3
 800d0fe:	4603      	mov	r3, r0
 800d100:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d102:	e156      	b.n	800d3b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	785b      	ldrb	r3, [r3, #1]
 800d108:	2b03      	cmp	r3, #3
 800d10a:	d008      	beq.n	800d11e <USBD_StdEPReq+0x9a>
 800d10c:	2b03      	cmp	r3, #3
 800d10e:	f300 8145 	bgt.w	800d39c <USBD_StdEPReq+0x318>
 800d112:	2b00      	cmp	r3, #0
 800d114:	f000 809b 	beq.w	800d24e <USBD_StdEPReq+0x1ca>
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d03c      	beq.n	800d196 <USBD_StdEPReq+0x112>
 800d11c:	e13e      	b.n	800d39c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d124:	b2db      	uxtb	r3, r3
 800d126:	2b02      	cmp	r3, #2
 800d128:	d002      	beq.n	800d130 <USBD_StdEPReq+0xac>
 800d12a:	2b03      	cmp	r3, #3
 800d12c:	d016      	beq.n	800d15c <USBD_StdEPReq+0xd8>
 800d12e:	e02c      	b.n	800d18a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d130:	7bbb      	ldrb	r3, [r7, #14]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00d      	beq.n	800d152 <USBD_StdEPReq+0xce>
 800d136:	7bbb      	ldrb	r3, [r7, #14]
 800d138:	2b80      	cmp	r3, #128	@ 0x80
 800d13a:	d00a      	beq.n	800d152 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d13c:	7bbb      	ldrb	r3, [r7, #14]
 800d13e:	4619      	mov	r1, r3
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f001 f978 	bl	800e436 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d146:	2180      	movs	r1, #128	@ 0x80
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f001 f974 	bl	800e436 <USBD_LL_StallEP>
 800d14e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d150:	e020      	b.n	800d194 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 fca4 	bl	800daa2 <USBD_CtlError>
              break;
 800d15a:	e01b      	b.n	800d194 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	885b      	ldrh	r3, [r3, #2]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10e      	bne.n	800d182 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d164:	7bbb      	ldrb	r3, [r7, #14]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d00b      	beq.n	800d182 <USBD_StdEPReq+0xfe>
 800d16a:	7bbb      	ldrb	r3, [r7, #14]
 800d16c:	2b80      	cmp	r3, #128	@ 0x80
 800d16e:	d008      	beq.n	800d182 <USBD_StdEPReq+0xfe>
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	88db      	ldrh	r3, [r3, #6]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d104      	bne.n	800d182 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d178:	7bbb      	ldrb	r3, [r7, #14]
 800d17a:	4619      	mov	r1, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f001 f95a 	bl	800e436 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fd47 	bl	800dc16 <USBD_CtlSendStatus>

              break;
 800d188:	e004      	b.n	800d194 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d18a:	6839      	ldr	r1, [r7, #0]
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 fc88 	bl	800daa2 <USBD_CtlError>
              break;
 800d192:	bf00      	nop
          }
          break;
 800d194:	e107      	b.n	800d3a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d002      	beq.n	800d1a8 <USBD_StdEPReq+0x124>
 800d1a2:	2b03      	cmp	r3, #3
 800d1a4:	d016      	beq.n	800d1d4 <USBD_StdEPReq+0x150>
 800d1a6:	e04b      	b.n	800d240 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1a8:	7bbb      	ldrb	r3, [r7, #14]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00d      	beq.n	800d1ca <USBD_StdEPReq+0x146>
 800d1ae:	7bbb      	ldrb	r3, [r7, #14]
 800d1b0:	2b80      	cmp	r3, #128	@ 0x80
 800d1b2:	d00a      	beq.n	800d1ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1b4:	7bbb      	ldrb	r3, [r7, #14]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f001 f93c 	bl	800e436 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1be:	2180      	movs	r1, #128	@ 0x80
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f001 f938 	bl	800e436 <USBD_LL_StallEP>
 800d1c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1c8:	e040      	b.n	800d24c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d1ca:	6839      	ldr	r1, [r7, #0]
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 fc68 	bl	800daa2 <USBD_CtlError>
              break;
 800d1d2:	e03b      	b.n	800d24c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	885b      	ldrh	r3, [r3, #2]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d136      	bne.n	800d24a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d1dc:	7bbb      	ldrb	r3, [r7, #14]
 800d1de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d004      	beq.n	800d1f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d1e6:	7bbb      	ldrb	r3, [r7, #14]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f001 f942 	bl	800e474 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fd10 	bl	800dc16 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d1f6:	7bbb      	ldrb	r3, [r7, #14]
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7ff fde3 	bl	800cdc6 <USBD_CoreFindEP>
 800d200:	4603      	mov	r3, r0
 800d202:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d204:	7b7b      	ldrb	r3, [r7, #13]
 800d206:	2bff      	cmp	r3, #255	@ 0xff
 800d208:	d01f      	beq.n	800d24a <USBD_StdEPReq+0x1c6>
 800d20a:	7b7b      	ldrb	r3, [r7, #13]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d11c      	bne.n	800d24a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d210:	7b7a      	ldrb	r2, [r7, #13]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d218:	7b7a      	ldrb	r2, [r7, #13]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	32ae      	adds	r2, #174	@ 0xae
 800d21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d010      	beq.n	800d24a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d228:	7b7a      	ldrb	r2, [r7, #13]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	32ae      	adds	r2, #174	@ 0xae
 800d22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	6839      	ldr	r1, [r7, #0]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	4798      	blx	r3
 800d23a:	4603      	mov	r3, r0
 800d23c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d23e:	e004      	b.n	800d24a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d240:	6839      	ldr	r1, [r7, #0]
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 fc2d 	bl	800daa2 <USBD_CtlError>
              break;
 800d248:	e000      	b.n	800d24c <USBD_StdEPReq+0x1c8>
              break;
 800d24a:	bf00      	nop
          }
          break;
 800d24c:	e0ab      	b.n	800d3a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d254:	b2db      	uxtb	r3, r3
 800d256:	2b02      	cmp	r3, #2
 800d258:	d002      	beq.n	800d260 <USBD_StdEPReq+0x1dc>
 800d25a:	2b03      	cmp	r3, #3
 800d25c:	d032      	beq.n	800d2c4 <USBD_StdEPReq+0x240>
 800d25e:	e097      	b.n	800d390 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d260:	7bbb      	ldrb	r3, [r7, #14]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d007      	beq.n	800d276 <USBD_StdEPReq+0x1f2>
 800d266:	7bbb      	ldrb	r3, [r7, #14]
 800d268:	2b80      	cmp	r3, #128	@ 0x80
 800d26a:	d004      	beq.n	800d276 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d26c:	6839      	ldr	r1, [r7, #0]
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 fc17 	bl	800daa2 <USBD_CtlError>
                break;
 800d274:	e091      	b.n	800d39a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d276:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	da0b      	bge.n	800d296 <USBD_StdEPReq+0x212>
 800d27e:	7bbb      	ldrb	r3, [r7, #14]
 800d280:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d284:	4613      	mov	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4413      	add	r3, r2
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	3310      	adds	r3, #16
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	4413      	add	r3, r2
 800d292:	3304      	adds	r3, #4
 800d294:	e00b      	b.n	800d2ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d296:	7bbb      	ldrb	r3, [r7, #14]
 800d298:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d29c:	4613      	mov	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4413      	add	r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	3304      	adds	r3, #4
 800d2ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	2202      	movs	r2, #2
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 fc6d 	bl	800db9c <USBD_CtlSendData>
              break;
 800d2c2:	e06a      	b.n	800d39a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d2c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	da11      	bge.n	800d2f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d2cc:	7bbb      	ldrb	r3, [r7, #14]
 800d2ce:	f003 020f 	and.w	r2, r3, #15
 800d2d2:	6879      	ldr	r1, [r7, #4]
 800d2d4:	4613      	mov	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	4413      	add	r3, r2
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	440b      	add	r3, r1
 800d2de:	3324      	adds	r3, #36	@ 0x24
 800d2e0:	881b      	ldrh	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d117      	bne.n	800d316 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d2e6:	6839      	ldr	r1, [r7, #0]
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 fbda 	bl	800daa2 <USBD_CtlError>
                  break;
 800d2ee:	e054      	b.n	800d39a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d2f0:	7bbb      	ldrb	r3, [r7, #14]
 800d2f2:	f003 020f 	and.w	r2, r3, #15
 800d2f6:	6879      	ldr	r1, [r7, #4]
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	4413      	add	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	440b      	add	r3, r1
 800d302:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d306:	881b      	ldrh	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d104      	bne.n	800d316 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 fbc7 	bl	800daa2 <USBD_CtlError>
                  break;
 800d314:	e041      	b.n	800d39a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d316:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	da0b      	bge.n	800d336 <USBD_StdEPReq+0x2b2>
 800d31e:	7bbb      	ldrb	r3, [r7, #14]
 800d320:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d324:	4613      	mov	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4413      	add	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	3310      	adds	r3, #16
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	4413      	add	r3, r2
 800d332:	3304      	adds	r3, #4
 800d334:	e00b      	b.n	800d34e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d336:	7bbb      	ldrb	r3, [r7, #14]
 800d338:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d33c:	4613      	mov	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4413      	add	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	4413      	add	r3, r2
 800d34c:	3304      	adds	r3, #4
 800d34e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d350:	7bbb      	ldrb	r3, [r7, #14]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d002      	beq.n	800d35c <USBD_StdEPReq+0x2d8>
 800d356:	7bbb      	ldrb	r3, [r7, #14]
 800d358:	2b80      	cmp	r3, #128	@ 0x80
 800d35a:	d103      	bne.n	800d364 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	2200      	movs	r2, #0
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	e00e      	b.n	800d382 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d364:	7bbb      	ldrb	r3, [r7, #14]
 800d366:	4619      	mov	r1, r3
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f001 f8a2 	bl	800e4b2 <USBD_LL_IsStallEP>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d003      	beq.n	800d37c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2201      	movs	r2, #1
 800d378:	601a      	str	r2, [r3, #0]
 800d37a:	e002      	b.n	800d382 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	2200      	movs	r2, #0
 800d380:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	2202      	movs	r2, #2
 800d386:	4619      	mov	r1, r3
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 fc07 	bl	800db9c <USBD_CtlSendData>
              break;
 800d38e:	e004      	b.n	800d39a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d390:	6839      	ldr	r1, [r7, #0]
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 fb85 	bl	800daa2 <USBD_CtlError>
              break;
 800d398:	bf00      	nop
          }
          break;
 800d39a:	e004      	b.n	800d3a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d39c:	6839      	ldr	r1, [r7, #0]
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 fb7f 	bl	800daa2 <USBD_CtlError>
          break;
 800d3a4:	bf00      	nop
      }
      break;
 800d3a6:	e005      	b.n	800d3b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fb79 	bl	800daa2 <USBD_CtlError>
      break;
 800d3b0:	e000      	b.n	800d3b4 <USBD_StdEPReq+0x330>
      break;
 800d3b2:	bf00      	nop
  }

  return ret;
 800d3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
	...

0800d3c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	885b      	ldrh	r3, [r3, #2]
 800d3da:	0a1b      	lsrs	r3, r3, #8
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	2b0e      	cmp	r3, #14
 800d3e2:	f200 8152 	bhi.w	800d68a <USBD_GetDescriptor+0x2ca>
 800d3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3ec <USBD_GetDescriptor+0x2c>)
 800d3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ec:	0800d45d 	.word	0x0800d45d
 800d3f0:	0800d475 	.word	0x0800d475
 800d3f4:	0800d4b5 	.word	0x0800d4b5
 800d3f8:	0800d68b 	.word	0x0800d68b
 800d3fc:	0800d68b 	.word	0x0800d68b
 800d400:	0800d62b 	.word	0x0800d62b
 800d404:	0800d657 	.word	0x0800d657
 800d408:	0800d68b 	.word	0x0800d68b
 800d40c:	0800d68b 	.word	0x0800d68b
 800d410:	0800d68b 	.word	0x0800d68b
 800d414:	0800d68b 	.word	0x0800d68b
 800d418:	0800d68b 	.word	0x0800d68b
 800d41c:	0800d68b 	.word	0x0800d68b
 800d420:	0800d68b 	.word	0x0800d68b
 800d424:	0800d429 	.word	0x0800d429
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d42e:	69db      	ldr	r3, [r3, #28]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00b      	beq.n	800d44c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d43a:	69db      	ldr	r3, [r3, #28]
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	7c12      	ldrb	r2, [r2, #16]
 800d440:	f107 0108 	add.w	r1, r7, #8
 800d444:	4610      	mov	r0, r2
 800d446:	4798      	blx	r3
 800d448:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d44a:	e126      	b.n	800d69a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d44c:	6839      	ldr	r1, [r7, #0]
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 fb27 	bl	800daa2 <USBD_CtlError>
        err++;
 800d454:	7afb      	ldrb	r3, [r7, #11]
 800d456:	3301      	adds	r3, #1
 800d458:	72fb      	strb	r3, [r7, #11]
      break;
 800d45a:	e11e      	b.n	800d69a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	7c12      	ldrb	r2, [r2, #16]
 800d468:	f107 0108 	add.w	r1, r7, #8
 800d46c:	4610      	mov	r0, r2
 800d46e:	4798      	blx	r3
 800d470:	60f8      	str	r0, [r7, #12]
      break;
 800d472:	e112      	b.n	800d69a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	7c1b      	ldrb	r3, [r3, #16]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10d      	bne.n	800d498 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d484:	f107 0208 	add.w	r2, r7, #8
 800d488:	4610      	mov	r0, r2
 800d48a:	4798      	blx	r3
 800d48c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	3301      	adds	r3, #1
 800d492:	2202      	movs	r2, #2
 800d494:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d496:	e100      	b.n	800d69a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4a0:	f107 0208 	add.w	r2, r7, #8
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	4798      	blx	r3
 800d4a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	701a      	strb	r2, [r3, #0]
      break;
 800d4b2:	e0f2      	b.n	800d69a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	885b      	ldrh	r3, [r3, #2]
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	2b05      	cmp	r3, #5
 800d4bc:	f200 80ac 	bhi.w	800d618 <USBD_GetDescriptor+0x258>
 800d4c0:	a201      	add	r2, pc, #4	@ (adr r2, 800d4c8 <USBD_GetDescriptor+0x108>)
 800d4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c6:	bf00      	nop
 800d4c8:	0800d4e1 	.word	0x0800d4e1
 800d4cc:	0800d515 	.word	0x0800d515
 800d4d0:	0800d549 	.word	0x0800d549
 800d4d4:	0800d57d 	.word	0x0800d57d
 800d4d8:	0800d5b1 	.word	0x0800d5b1
 800d4dc:	0800d5e5 	.word	0x0800d5e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00b      	beq.n	800d504 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	7c12      	ldrb	r2, [r2, #16]
 800d4f8:	f107 0108 	add.w	r1, r7, #8
 800d4fc:	4610      	mov	r0, r2
 800d4fe:	4798      	blx	r3
 800d500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d502:	e091      	b.n	800d628 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d504:	6839      	ldr	r1, [r7, #0]
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 facb 	bl	800daa2 <USBD_CtlError>
            err++;
 800d50c:	7afb      	ldrb	r3, [r7, #11]
 800d50e:	3301      	adds	r3, #1
 800d510:	72fb      	strb	r3, [r7, #11]
          break;
 800d512:	e089      	b.n	800d628 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d51a:	689b      	ldr	r3, [r3, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00b      	beq.n	800d538 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d526:	689b      	ldr	r3, [r3, #8]
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	7c12      	ldrb	r2, [r2, #16]
 800d52c:	f107 0108 	add.w	r1, r7, #8
 800d530:	4610      	mov	r0, r2
 800d532:	4798      	blx	r3
 800d534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d536:	e077      	b.n	800d628 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d538:	6839      	ldr	r1, [r7, #0]
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 fab1 	bl	800daa2 <USBD_CtlError>
            err++;
 800d540:	7afb      	ldrb	r3, [r7, #11]
 800d542:	3301      	adds	r3, #1
 800d544:	72fb      	strb	r3, [r7, #11]
          break;
 800d546:	e06f      	b.n	800d628 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00b      	beq.n	800d56c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	7c12      	ldrb	r2, [r2, #16]
 800d560:	f107 0108 	add.w	r1, r7, #8
 800d564:	4610      	mov	r0, r2
 800d566:	4798      	blx	r3
 800d568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d56a:	e05d      	b.n	800d628 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d56c:	6839      	ldr	r1, [r7, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 fa97 	bl	800daa2 <USBD_CtlError>
            err++;
 800d574:	7afb      	ldrb	r3, [r7, #11]
 800d576:	3301      	adds	r3, #1
 800d578:	72fb      	strb	r3, [r7, #11]
          break;
 800d57a:	e055      	b.n	800d628 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d00b      	beq.n	800d5a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d58e:	691b      	ldr	r3, [r3, #16]
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	7c12      	ldrb	r2, [r2, #16]
 800d594:	f107 0108 	add.w	r1, r7, #8
 800d598:	4610      	mov	r0, r2
 800d59a:	4798      	blx	r3
 800d59c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d59e:	e043      	b.n	800d628 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5a0:	6839      	ldr	r1, [r7, #0]
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 fa7d 	bl	800daa2 <USBD_CtlError>
            err++;
 800d5a8:	7afb      	ldrb	r3, [r7, #11]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	72fb      	strb	r3, [r7, #11]
          break;
 800d5ae:	e03b      	b.n	800d628 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00b      	beq.n	800d5d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5c2:	695b      	ldr	r3, [r3, #20]
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	7c12      	ldrb	r2, [r2, #16]
 800d5c8:	f107 0108 	add.w	r1, r7, #8
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	4798      	blx	r3
 800d5d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5d2:	e029      	b.n	800d628 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 fa63 	bl	800daa2 <USBD_CtlError>
            err++;
 800d5dc:	7afb      	ldrb	r3, [r7, #11]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	72fb      	strb	r3, [r7, #11]
          break;
 800d5e2:	e021      	b.n	800d628 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ea:	699b      	ldr	r3, [r3, #24]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00b      	beq.n	800d608 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5f6:	699b      	ldr	r3, [r3, #24]
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	7c12      	ldrb	r2, [r2, #16]
 800d5fc:	f107 0108 	add.w	r1, r7, #8
 800d600:	4610      	mov	r0, r2
 800d602:	4798      	blx	r3
 800d604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d606:	e00f      	b.n	800d628 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d608:	6839      	ldr	r1, [r7, #0]
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 fa49 	bl	800daa2 <USBD_CtlError>
            err++;
 800d610:	7afb      	ldrb	r3, [r7, #11]
 800d612:	3301      	adds	r3, #1
 800d614:	72fb      	strb	r3, [r7, #11]
          break;
 800d616:	e007      	b.n	800d628 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d618:	6839      	ldr	r1, [r7, #0]
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fa41 	bl	800daa2 <USBD_CtlError>
          err++;
 800d620:	7afb      	ldrb	r3, [r7, #11]
 800d622:	3301      	adds	r3, #1
 800d624:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d626:	bf00      	nop
      }
      break;
 800d628:	e037      	b.n	800d69a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	7c1b      	ldrb	r3, [r3, #16]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d109      	bne.n	800d646 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d63a:	f107 0208 	add.w	r2, r7, #8
 800d63e:	4610      	mov	r0, r2
 800d640:	4798      	blx	r3
 800d642:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d644:	e029      	b.n	800d69a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d646:	6839      	ldr	r1, [r7, #0]
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 fa2a 	bl	800daa2 <USBD_CtlError>
        err++;
 800d64e:	7afb      	ldrb	r3, [r7, #11]
 800d650:	3301      	adds	r3, #1
 800d652:	72fb      	strb	r3, [r7, #11]
      break;
 800d654:	e021      	b.n	800d69a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	7c1b      	ldrb	r3, [r3, #16]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d10d      	bne.n	800d67a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d666:	f107 0208 	add.w	r2, r7, #8
 800d66a:	4610      	mov	r0, r2
 800d66c:	4798      	blx	r3
 800d66e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	3301      	adds	r3, #1
 800d674:	2207      	movs	r2, #7
 800d676:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d678:	e00f      	b.n	800d69a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d67a:	6839      	ldr	r1, [r7, #0]
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fa10 	bl	800daa2 <USBD_CtlError>
        err++;
 800d682:	7afb      	ldrb	r3, [r7, #11]
 800d684:	3301      	adds	r3, #1
 800d686:	72fb      	strb	r3, [r7, #11]
      break;
 800d688:	e007      	b.n	800d69a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d68a:	6839      	ldr	r1, [r7, #0]
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 fa08 	bl	800daa2 <USBD_CtlError>
      err++;
 800d692:	7afb      	ldrb	r3, [r7, #11]
 800d694:	3301      	adds	r3, #1
 800d696:	72fb      	strb	r3, [r7, #11]
      break;
 800d698:	bf00      	nop
  }

  if (err != 0U)
 800d69a:	7afb      	ldrb	r3, [r7, #11]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d11e      	bne.n	800d6de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	88db      	ldrh	r3, [r3, #6]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d016      	beq.n	800d6d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d6a8:	893b      	ldrh	r3, [r7, #8]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00e      	beq.n	800d6cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	88da      	ldrh	r2, [r3, #6]
 800d6b2:	893b      	ldrh	r3, [r7, #8]
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	bf28      	it	cs
 800d6b8:	4613      	movcs	r3, r2
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d6be:	893b      	ldrh	r3, [r7, #8]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	68f9      	ldr	r1, [r7, #12]
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 fa69 	bl	800db9c <USBD_CtlSendData>
 800d6ca:	e009      	b.n	800d6e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d6cc:	6839      	ldr	r1, [r7, #0]
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 f9e7 	bl	800daa2 <USBD_CtlError>
 800d6d4:	e004      	b.n	800d6e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 fa9d 	bl	800dc16 <USBD_CtlSendStatus>
 800d6dc:	e000      	b.n	800d6e0 <USBD_GetDescriptor+0x320>
    return;
 800d6de:	bf00      	nop
  }
}
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop

0800d6e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	889b      	ldrh	r3, [r3, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d131      	bne.n	800d75e <USBD_SetAddress+0x76>
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	88db      	ldrh	r3, [r3, #6]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d12d      	bne.n	800d75e <USBD_SetAddress+0x76>
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	885b      	ldrh	r3, [r3, #2]
 800d706:	2b7f      	cmp	r3, #127	@ 0x7f
 800d708:	d829      	bhi.n	800d75e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	885b      	ldrh	r3, [r3, #2]
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d714:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	2b03      	cmp	r3, #3
 800d720:	d104      	bne.n	800d72c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d722:	6839      	ldr	r1, [r7, #0]
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 f9bc 	bl	800daa2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d72a:	e01d      	b.n	800d768 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	7bfa      	ldrb	r2, [r7, #15]
 800d730:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d734:	7bfb      	ldrb	r3, [r7, #15]
 800d736:	4619      	mov	r1, r3
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 fee6 	bl	800e50a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 fa69 	bl	800dc16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d744:	7bfb      	ldrb	r3, [r7, #15]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d004      	beq.n	800d754 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2202      	movs	r2, #2
 800d74e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d752:	e009      	b.n	800d768 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d75c:	e004      	b.n	800d768 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d75e:	6839      	ldr	r1, [r7, #0]
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 f99e 	bl	800daa2 <USBD_CtlError>
  }
}
 800d766:	bf00      	nop
 800d768:	bf00      	nop
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d77a:	2300      	movs	r3, #0
 800d77c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	885b      	ldrh	r3, [r3, #2]
 800d782:	b2da      	uxtb	r2, r3
 800d784:	4b4e      	ldr	r3, [pc, #312]	@ (800d8c0 <USBD_SetConfig+0x150>)
 800d786:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d788:	4b4d      	ldr	r3, [pc, #308]	@ (800d8c0 <USBD_SetConfig+0x150>)
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d905      	bls.n	800d79c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d790:	6839      	ldr	r1, [r7, #0]
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 f985 	bl	800daa2 <USBD_CtlError>
    return USBD_FAIL;
 800d798:	2303      	movs	r3, #3
 800d79a:	e08c      	b.n	800d8b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	2b02      	cmp	r3, #2
 800d7a6:	d002      	beq.n	800d7ae <USBD_SetConfig+0x3e>
 800d7a8:	2b03      	cmp	r3, #3
 800d7aa:	d029      	beq.n	800d800 <USBD_SetConfig+0x90>
 800d7ac:	e075      	b.n	800d89a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d7ae:	4b44      	ldr	r3, [pc, #272]	@ (800d8c0 <USBD_SetConfig+0x150>)
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d020      	beq.n	800d7f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d7b6:	4b42      	ldr	r3, [pc, #264]	@ (800d8c0 <USBD_SetConfig+0x150>)
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d7c0:	4b3f      	ldr	r3, [pc, #252]	@ (800d8c0 <USBD_SetConfig+0x150>)
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7fe ffb8 	bl	800c73c <USBD_SetClassConfig>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d7d0:	7bfb      	ldrb	r3, [r7, #15]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d008      	beq.n	800d7e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d7d6:	6839      	ldr	r1, [r7, #0]
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 f962 	bl	800daa2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2202      	movs	r2, #2
 800d7e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d7e6:	e065      	b.n	800d8b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 fa14 	bl	800dc16 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2203      	movs	r2, #3
 800d7f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d7f6:	e05d      	b.n	800d8b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 fa0c 	bl	800dc16 <USBD_CtlSendStatus>
      break;
 800d7fe:	e059      	b.n	800d8b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d800:	4b2f      	ldr	r3, [pc, #188]	@ (800d8c0 <USBD_SetConfig+0x150>)
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d112      	bne.n	800d82e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2202      	movs	r2, #2
 800d80c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d810:	4b2b      	ldr	r3, [pc, #172]	@ (800d8c0 <USBD_SetConfig+0x150>)
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	461a      	mov	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d81a:	4b29      	ldr	r3, [pc, #164]	@ (800d8c0 <USBD_SetConfig+0x150>)
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	4619      	mov	r1, r3
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f7fe ffa7 	bl	800c774 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f9f5 	bl	800dc16 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d82c:	e042      	b.n	800d8b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d82e:	4b24      	ldr	r3, [pc, #144]	@ (800d8c0 <USBD_SetConfig+0x150>)
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	461a      	mov	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d02a      	beq.n	800d892 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	b2db      	uxtb	r3, r3
 800d842:	4619      	mov	r1, r3
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f7fe ff95 	bl	800c774 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d84a:	4b1d      	ldr	r3, [pc, #116]	@ (800d8c0 <USBD_SetConfig+0x150>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	461a      	mov	r2, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d854:	4b1a      	ldr	r3, [pc, #104]	@ (800d8c0 <USBD_SetConfig+0x150>)
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	4619      	mov	r1, r3
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f7fe ff6e 	bl	800c73c <USBD_SetClassConfig>
 800d860:	4603      	mov	r3, r0
 800d862:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d864:	7bfb      	ldrb	r3, [r7, #15]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00f      	beq.n	800d88a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d86a:	6839      	ldr	r1, [r7, #0]
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 f918 	bl	800daa2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	b2db      	uxtb	r3, r3
 800d878:	4619      	mov	r1, r3
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f7fe ff7a 	bl	800c774 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2202      	movs	r2, #2
 800d884:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d888:	e014      	b.n	800d8b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 f9c3 	bl	800dc16 <USBD_CtlSendStatus>
      break;
 800d890:	e010      	b.n	800d8b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 f9bf 	bl	800dc16 <USBD_CtlSendStatus>
      break;
 800d898:	e00c      	b.n	800d8b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d89a:	6839      	ldr	r1, [r7, #0]
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 f900 	bl	800daa2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8a2:	4b07      	ldr	r3, [pc, #28]	@ (800d8c0 <USBD_SetConfig+0x150>)
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7fe ff63 	bl	800c774 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d8ae:	2303      	movs	r3, #3
 800d8b0:	73fb      	strb	r3, [r7, #15]
      break;
 800d8b2:	bf00      	nop
  }

  return ret;
 800d8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	2400028c 	.word	0x2400028c

0800d8c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	88db      	ldrh	r3, [r3, #6]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d004      	beq.n	800d8e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d8d6:	6839      	ldr	r1, [r7, #0]
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 f8e2 	bl	800daa2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d8de:	e023      	b.n	800d928 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	2b02      	cmp	r3, #2
 800d8ea:	dc02      	bgt.n	800d8f2 <USBD_GetConfig+0x2e>
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	dc03      	bgt.n	800d8f8 <USBD_GetConfig+0x34>
 800d8f0:	e015      	b.n	800d91e <USBD_GetConfig+0x5a>
 800d8f2:	2b03      	cmp	r3, #3
 800d8f4:	d00b      	beq.n	800d90e <USBD_GetConfig+0x4a>
 800d8f6:	e012      	b.n	800d91e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	3308      	adds	r3, #8
 800d902:	2201      	movs	r2, #1
 800d904:	4619      	mov	r1, r3
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f948 	bl	800db9c <USBD_CtlSendData>
        break;
 800d90c:	e00c      	b.n	800d928 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	3304      	adds	r3, #4
 800d912:	2201      	movs	r2, #1
 800d914:	4619      	mov	r1, r3
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 f940 	bl	800db9c <USBD_CtlSendData>
        break;
 800d91c:	e004      	b.n	800d928 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 f8be 	bl	800daa2 <USBD_CtlError>
        break;
 800d926:	bf00      	nop
}
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d940:	b2db      	uxtb	r3, r3
 800d942:	3b01      	subs	r3, #1
 800d944:	2b02      	cmp	r3, #2
 800d946:	d81e      	bhi.n	800d986 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	88db      	ldrh	r3, [r3, #6]
 800d94c:	2b02      	cmp	r3, #2
 800d94e:	d004      	beq.n	800d95a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d950:	6839      	ldr	r1, [r7, #0]
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 f8a5 	bl	800daa2 <USBD_CtlError>
        break;
 800d958:	e01a      	b.n	800d990 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2201      	movs	r2, #1
 800d95e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d966:	2b00      	cmp	r3, #0
 800d968:	d005      	beq.n	800d976 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	f043 0202 	orr.w	r2, r3, #2
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	330c      	adds	r3, #12
 800d97a:	2202      	movs	r2, #2
 800d97c:	4619      	mov	r1, r3
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 f90c 	bl	800db9c <USBD_CtlSendData>
      break;
 800d984:	e004      	b.n	800d990 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d986:	6839      	ldr	r1, [r7, #0]
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 f88a 	bl	800daa2 <USBD_CtlError>
      break;
 800d98e:	bf00      	nop
  }
}
 800d990:	bf00      	nop
 800d992:	3708      	adds	r7, #8
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	885b      	ldrh	r3, [r3, #2]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d107      	bne.n	800d9ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 f92f 	bl	800dc16 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d9b8:	e013      	b.n	800d9e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	885b      	ldrh	r3, [r3, #2]
 800d9be:	2b02      	cmp	r3, #2
 800d9c0:	d10b      	bne.n	800d9da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	889b      	ldrh	r3, [r3, #4]
 800d9c6:	0a1b      	lsrs	r3, r3, #8
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	b2da      	uxtb	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 f91f 	bl	800dc16 <USBD_CtlSendStatus>
}
 800d9d8:	e003      	b.n	800d9e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d9da:	6839      	ldr	r1, [r7, #0]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 f860 	bl	800daa2 <USBD_CtlError>
}
 800d9e2:	bf00      	nop
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b082      	sub	sp, #8
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	3b01      	subs	r3, #1
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d80b      	bhi.n	800da1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	885b      	ldrh	r3, [r3, #2]
 800da06:	2b01      	cmp	r3, #1
 800da08:	d10c      	bne.n	800da24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 f8ff 	bl	800dc16 <USBD_CtlSendStatus>
      }
      break;
 800da18:	e004      	b.n	800da24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800da1a:	6839      	ldr	r1, [r7, #0]
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 f840 	bl	800daa2 <USBD_CtlError>
      break;
 800da22:	e000      	b.n	800da26 <USBD_ClrFeature+0x3c>
      break;
 800da24:	bf00      	nop
  }
}
 800da26:	bf00      	nop
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b084      	sub	sp, #16
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	781a      	ldrb	r2, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	3301      	adds	r3, #1
 800da48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	781a      	ldrb	r2, [r3, #0]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	3301      	adds	r3, #1
 800da56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f7ff fa15 	bl	800ce88 <SWAPBYTE>
 800da5e:	4603      	mov	r3, r0
 800da60:	461a      	mov	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	3301      	adds	r3, #1
 800da6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	3301      	adds	r3, #1
 800da70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800da72:	68f8      	ldr	r0, [r7, #12]
 800da74:	f7ff fa08 	bl	800ce88 <SWAPBYTE>
 800da78:	4603      	mov	r3, r0
 800da7a:	461a      	mov	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	3301      	adds	r3, #1
 800da84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	3301      	adds	r3, #1
 800da8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800da8c:	68f8      	ldr	r0, [r7, #12]
 800da8e:	f7ff f9fb 	bl	800ce88 <SWAPBYTE>
 800da92:	4603      	mov	r3, r0
 800da94:	461a      	mov	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	80da      	strh	r2, [r3, #6]
}
 800da9a:	bf00      	nop
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b082      	sub	sp, #8
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800daac:	2180      	movs	r1, #128	@ 0x80
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 fcc1 	bl	800e436 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dab4:	2100      	movs	r1, #0
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 fcbd 	bl	800e436 <USBD_LL_StallEP>
}
 800dabc:	bf00      	nop
 800dabe:	3708      	adds	r7, #8
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b086      	sub	sp, #24
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dad0:	2300      	movs	r3, #0
 800dad2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d042      	beq.n	800db60 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800dade:	6938      	ldr	r0, [r7, #16]
 800dae0:	f000 f842 	bl	800db68 <USBD_GetLen>
 800dae4:	4603      	mov	r3, r0
 800dae6:	3301      	adds	r3, #1
 800dae8:	005b      	lsls	r3, r3, #1
 800daea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800daee:	d808      	bhi.n	800db02 <USBD_GetString+0x3e>
 800daf0:	6938      	ldr	r0, [r7, #16]
 800daf2:	f000 f839 	bl	800db68 <USBD_GetLen>
 800daf6:	4603      	mov	r3, r0
 800daf8:	3301      	adds	r3, #1
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	005b      	lsls	r3, r3, #1
 800dafe:	b29a      	uxth	r2, r3
 800db00:	e001      	b.n	800db06 <USBD_GetString+0x42>
 800db02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800db0a:	7dfb      	ldrb	r3, [r7, #23]
 800db0c:	68ba      	ldr	r2, [r7, #8]
 800db0e:	4413      	add	r3, r2
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	7812      	ldrb	r2, [r2, #0]
 800db14:	701a      	strb	r2, [r3, #0]
  idx++;
 800db16:	7dfb      	ldrb	r3, [r7, #23]
 800db18:	3301      	adds	r3, #1
 800db1a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800db1c:	7dfb      	ldrb	r3, [r7, #23]
 800db1e:	68ba      	ldr	r2, [r7, #8]
 800db20:	4413      	add	r3, r2
 800db22:	2203      	movs	r2, #3
 800db24:	701a      	strb	r2, [r3, #0]
  idx++;
 800db26:	7dfb      	ldrb	r3, [r7, #23]
 800db28:	3301      	adds	r3, #1
 800db2a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800db2c:	e013      	b.n	800db56 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800db2e:	7dfb      	ldrb	r3, [r7, #23]
 800db30:	68ba      	ldr	r2, [r7, #8]
 800db32:	4413      	add	r3, r2
 800db34:	693a      	ldr	r2, [r7, #16]
 800db36:	7812      	ldrb	r2, [r2, #0]
 800db38:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	3301      	adds	r3, #1
 800db3e:	613b      	str	r3, [r7, #16]
    idx++;
 800db40:	7dfb      	ldrb	r3, [r7, #23]
 800db42:	3301      	adds	r3, #1
 800db44:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800db46:	7dfb      	ldrb	r3, [r7, #23]
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	4413      	add	r3, r2
 800db4c:	2200      	movs	r2, #0
 800db4e:	701a      	strb	r2, [r3, #0]
    idx++;
 800db50:	7dfb      	ldrb	r3, [r7, #23]
 800db52:	3301      	adds	r3, #1
 800db54:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1e7      	bne.n	800db2e <USBD_GetString+0x6a>
 800db5e:	e000      	b.n	800db62 <USBD_GetString+0x9e>
    return;
 800db60:	bf00      	nop
  }
}
 800db62:	3718      	adds	r7, #24
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800db70:	2300      	movs	r3, #0
 800db72:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800db78:	e005      	b.n	800db86 <USBD_GetLen+0x1e>
  {
    len++;
 800db7a:	7bfb      	ldrb	r3, [r7, #15]
 800db7c:	3301      	adds	r3, #1
 800db7e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	3301      	adds	r3, #1
 800db84:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1f5      	bne.n	800db7a <USBD_GetLen+0x12>
  }

  return len;
 800db8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db90:	4618      	mov	r0, r3
 800db92:	3714      	adds	r7, #20
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2202      	movs	r2, #2
 800dbac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	68ba      	ldr	r2, [r7, #8]
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	68f8      	ldr	r0, [r7, #12]
 800dbc4:	f000 fcc0 	bl	800e548 <USBD_LL_Transmit>

  return USBD_OK;
 800dbc8:	2300      	movs	r3, #0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	60f8      	str	r0, [r7, #12]
 800dbda:	60b9      	str	r1, [r7, #8]
 800dbdc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f000 fcaf 	bl	800e548 <USBD_LL_Transmit>

  return USBD_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	68ba      	ldr	r2, [r7, #8]
 800dc04:	2100      	movs	r1, #0
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f000 fcbf 	bl	800e58a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b082      	sub	sp, #8
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2204      	movs	r2, #4
 800dc22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dc26:	2300      	movs	r3, #0
 800dc28:	2200      	movs	r2, #0
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 fc8b 	bl	800e548 <USBD_LL_Transmit>

  return USBD_OK;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2205      	movs	r2, #5
 800dc48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	2200      	movs	r2, #0
 800dc50:	2100      	movs	r1, #0
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 fc99 	bl	800e58a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc58:	2300      	movs	r3, #0
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
	...

0800dc64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	4913      	ldr	r1, [pc, #76]	@ (800dcb8 <MX_USB_DEVICE_Init+0x54>)
 800dc6c:	4813      	ldr	r0, [pc, #76]	@ (800dcbc <MX_USB_DEVICE_Init+0x58>)
 800dc6e:	f7fe fce8 	bl	800c642 <USBD_Init>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dc78:	f7f2 ffb8 	bl	8000bec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800dc7c:	4910      	ldr	r1, [pc, #64]	@ (800dcc0 <MX_USB_DEVICE_Init+0x5c>)
 800dc7e:	480f      	ldr	r0, [pc, #60]	@ (800dcbc <MX_USB_DEVICE_Init+0x58>)
 800dc80:	f7fe fd0f 	bl	800c6a2 <USBD_RegisterClass>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d001      	beq.n	800dc8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dc8a:	f7f2 ffaf 	bl	8000bec <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800dc8e:	490d      	ldr	r1, [pc, #52]	@ (800dcc4 <MX_USB_DEVICE_Init+0x60>)
 800dc90:	480a      	ldr	r0, [pc, #40]	@ (800dcbc <MX_USB_DEVICE_Init+0x58>)
 800dc92:	f7fc ff8d 	bl	800abb0 <USBD_MSC_RegisterStorage>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d001      	beq.n	800dca0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dc9c:	f7f2 ffa6 	bl	8000bec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dca0:	4806      	ldr	r0, [pc, #24]	@ (800dcbc <MX_USB_DEVICE_Init+0x58>)
 800dca2:	f7fe fd34 	bl	800c70e <USBD_Start>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d001      	beq.n	800dcb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dcac:	f7f2 ff9e 	bl	8000bec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800dcb0:	f7f6 f876 	bl	8003da0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dcb4:	bf00      	nop
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	24000090 	.word	0x24000090
 800dcbc:	24000290 	.word	0x24000290
 800dcc0:	24000010 	.word	0x24000010
 800dcc4:	240000e4 	.word	0x240000e4

0800dcc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	4603      	mov	r3, r0
 800dcd0:	6039      	str	r1, [r7, #0]
 800dcd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	2212      	movs	r2, #18
 800dcd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dcda:	4b03      	ldr	r3, [pc, #12]	@ (800dce8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr
 800dce8:	240000b0 	.word	0x240000b0

0800dcec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	6039      	str	r1, [r7, #0]
 800dcf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	2204      	movs	r2, #4
 800dcfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dcfe:	4b03      	ldr	r3, [pc, #12]	@ (800dd0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	240000c4 	.word	0x240000c4

0800dd10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	4603      	mov	r3, r0
 800dd18:	6039      	str	r1, [r7, #0]
 800dd1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd1c:	79fb      	ldrb	r3, [r7, #7]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d105      	bne.n	800dd2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd22:	683a      	ldr	r2, [r7, #0]
 800dd24:	4907      	ldr	r1, [pc, #28]	@ (800dd44 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd26:	4808      	ldr	r0, [pc, #32]	@ (800dd48 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd28:	f7ff fecc 	bl	800dac4 <USBD_GetString>
 800dd2c:	e004      	b.n	800dd38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd2e:	683a      	ldr	r2, [r7, #0]
 800dd30:	4904      	ldr	r1, [pc, #16]	@ (800dd44 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd32:	4805      	ldr	r0, [pc, #20]	@ (800dd48 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd34:	f7ff fec6 	bl	800dac4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd38:	4b02      	ldr	r3, [pc, #8]	@ (800dd44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	2400056c 	.word	0x2400056c
 800dd48:	0800e6ec 	.word	0x0800e6ec

0800dd4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	4603      	mov	r3, r0
 800dd54:	6039      	str	r1, [r7, #0]
 800dd56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd58:	683a      	ldr	r2, [r7, #0]
 800dd5a:	4904      	ldr	r1, [pc, #16]	@ (800dd6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd5c:	4804      	ldr	r0, [pc, #16]	@ (800dd70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd5e:	f7ff feb1 	bl	800dac4 <USBD_GetString>
  return USBD_StrDesc;
 800dd62:	4b02      	ldr	r3, [pc, #8]	@ (800dd6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	2400056c 	.word	0x2400056c
 800dd70:	0800e700 	.word	0x0800e700

0800dd74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	6039      	str	r1, [r7, #0]
 800dd7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	221a      	movs	r2, #26
 800dd84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd86:	f000 f843 	bl	800de10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dd8a:	4b02      	ldr	r3, [pc, #8]	@ (800dd94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	240000c8 	.word	0x240000c8

0800dd98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	4603      	mov	r3, r0
 800dda0:	6039      	str	r1, [r7, #0]
 800dda2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dda4:	79fb      	ldrb	r3, [r7, #7]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d105      	bne.n	800ddb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddaa:	683a      	ldr	r2, [r7, #0]
 800ddac:	4907      	ldr	r1, [pc, #28]	@ (800ddcc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddae:	4808      	ldr	r0, [pc, #32]	@ (800ddd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddb0:	f7ff fe88 	bl	800dac4 <USBD_GetString>
 800ddb4:	e004      	b.n	800ddc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddb6:	683a      	ldr	r2, [r7, #0]
 800ddb8:	4904      	ldr	r1, [pc, #16]	@ (800ddcc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddba:	4805      	ldr	r0, [pc, #20]	@ (800ddd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddbc:	f7ff fe82 	bl	800dac4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddc0:	4b02      	ldr	r3, [pc, #8]	@ (800ddcc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	2400056c 	.word	0x2400056c
 800ddd0:	0800e714 	.word	0x0800e714

0800ddd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	4603      	mov	r3, r0
 800dddc:	6039      	str	r1, [r7, #0]
 800ddde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dde0:	79fb      	ldrb	r3, [r7, #7]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d105      	bne.n	800ddf2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	4907      	ldr	r1, [pc, #28]	@ (800de08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ddea:	4808      	ldr	r0, [pc, #32]	@ (800de0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ddec:	f7ff fe6a 	bl	800dac4 <USBD_GetString>
 800ddf0:	e004      	b.n	800ddfc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	4904      	ldr	r1, [pc, #16]	@ (800de08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ddf6:	4805      	ldr	r0, [pc, #20]	@ (800de0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ddf8:	f7ff fe64 	bl	800dac4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddfc:	4b02      	ldr	r3, [pc, #8]	@ (800de08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	2400056c 	.word	0x2400056c
 800de0c:	0800e720 	.word	0x0800e720

0800de10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de16:	4b0f      	ldr	r3, [pc, #60]	@ (800de54 <Get_SerialNum+0x44>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de1c:	4b0e      	ldr	r3, [pc, #56]	@ (800de58 <Get_SerialNum+0x48>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de22:	4b0e      	ldr	r3, [pc, #56]	@ (800de5c <Get_SerialNum+0x4c>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4413      	add	r3, r2
 800de2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d009      	beq.n	800de4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de36:	2208      	movs	r2, #8
 800de38:	4909      	ldr	r1, [pc, #36]	@ (800de60 <Get_SerialNum+0x50>)
 800de3a:	68f8      	ldr	r0, [r7, #12]
 800de3c:	f000 f814 	bl	800de68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de40:	2204      	movs	r2, #4
 800de42:	4908      	ldr	r1, [pc, #32]	@ (800de64 <Get_SerialNum+0x54>)
 800de44:	68b8      	ldr	r0, [r7, #8]
 800de46:	f000 f80f 	bl	800de68 <IntToUnicode>
  }
}
 800de4a:	bf00      	nop
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	1ff1e800 	.word	0x1ff1e800
 800de58:	1ff1e804 	.word	0x1ff1e804
 800de5c:	1ff1e808 	.word	0x1ff1e808
 800de60:	240000ca 	.word	0x240000ca
 800de64:	240000da 	.word	0x240000da

0800de68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de68:	b480      	push	{r7}
 800de6a:	b087      	sub	sp, #28
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	4613      	mov	r3, r2
 800de74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de76:	2300      	movs	r3, #0
 800de78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de7a:	2300      	movs	r3, #0
 800de7c:	75fb      	strb	r3, [r7, #23]
 800de7e:	e027      	b.n	800ded0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	0f1b      	lsrs	r3, r3, #28
 800de84:	2b09      	cmp	r3, #9
 800de86:	d80b      	bhi.n	800dea0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	0f1b      	lsrs	r3, r3, #28
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	7dfb      	ldrb	r3, [r7, #23]
 800de90:	005b      	lsls	r3, r3, #1
 800de92:	4619      	mov	r1, r3
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	440b      	add	r3, r1
 800de98:	3230      	adds	r2, #48	@ 0x30
 800de9a:	b2d2      	uxtb	r2, r2
 800de9c:	701a      	strb	r2, [r3, #0]
 800de9e:	e00a      	b.n	800deb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	0f1b      	lsrs	r3, r3, #28
 800dea4:	b2da      	uxtb	r2, r3
 800dea6:	7dfb      	ldrb	r3, [r7, #23]
 800dea8:	005b      	lsls	r3, r3, #1
 800deaa:	4619      	mov	r1, r3
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	440b      	add	r3, r1
 800deb0:	3237      	adds	r2, #55	@ 0x37
 800deb2:	b2d2      	uxtb	r2, r2
 800deb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	011b      	lsls	r3, r3, #4
 800deba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800debc:	7dfb      	ldrb	r3, [r7, #23]
 800debe:	005b      	lsls	r3, r3, #1
 800dec0:	3301      	adds	r3, #1
 800dec2:	68ba      	ldr	r2, [r7, #8]
 800dec4:	4413      	add	r3, r2
 800dec6:	2200      	movs	r2, #0
 800dec8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800deca:	7dfb      	ldrb	r3, [r7, #23]
 800decc:	3301      	adds	r3, #1
 800dece:	75fb      	strb	r3, [r7, #23]
 800ded0:	7dfa      	ldrb	r2, [r7, #23]
 800ded2:	79fb      	ldrb	r3, [r7, #7]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d3d3      	bcc.n	800de80 <IntToUnicode+0x18>
  }
}
 800ded8:	bf00      	nop
 800deda:	bf00      	nop
 800dedc:	371c      	adds	r7, #28
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800dee6:	b480      	push	{r7}
 800dee8:	b083      	sub	sp, #12
 800deea:	af00      	add	r7, sp, #0
 800deec:	4603      	mov	r3, r0
 800deee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800def0:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800def2:	4618      	mov	r0, r3
 800def4:	370c      	adds	r7, #12
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr

0800defe <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800defe:	b480      	push	{r7}
 800df00:	b085      	sub	sp, #20
 800df02:	af00      	add	r7, sp, #0
 800df04:	4603      	mov	r3, r0
 800df06:	60b9      	str	r1, [r7, #8]
 800df08:	607a      	str	r2, [r7, #4]
 800df0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800df12:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df1a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800df1c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3714      	adds	r7, #20
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr

0800df2a <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800df2a:	b480      	push	{r7}
 800df2c:	b083      	sub	sp, #12
 800df2e:	af00      	add	r7, sp, #0
 800df30:	4603      	mov	r3, r0
 800df32:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800df34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800df36:	4618      	mov	r0, r3
 800df38:	370c      	adds	r7, #12
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr

0800df42 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800df42:	b480      	push	{r7}
 800df44:	b083      	sub	sp, #12
 800df46:	af00      	add	r7, sp, #0
 800df48:	4603      	mov	r3, r0
 800df4a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800df4c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800df4e:	4618      	mov	r0, r3
 800df50:	370c      	adds	r7, #12
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr

0800df5a <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800df5a:	b480      	push	{r7}
 800df5c:	b085      	sub	sp, #20
 800df5e:	af00      	add	r7, sp, #0
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	607a      	str	r2, [r7, #4]
 800df64:	461a      	mov	r2, r3
 800df66:	4603      	mov	r3, r0
 800df68:	73fb      	strb	r3, [r7, #15]
 800df6a:	4613      	mov	r3, r2
 800df6c:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800df6e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800df70:	4618      	mov	r0, r3
 800df72:	3714      	adds	r7, #20
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b085      	sub	sp, #20
 800df80:	af00      	add	r7, sp, #0
 800df82:	60b9      	str	r1, [r7, #8]
 800df84:	607a      	str	r2, [r7, #4]
 800df86:	461a      	mov	r2, r3
 800df88:	4603      	mov	r3, r0
 800df8a:	73fb      	strb	r3, [r7, #15]
 800df8c:	4613      	mov	r3, r2
 800df8e:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800df90:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800df92:	4618      	mov	r0, r3
 800df94:	3714      	adds	r7, #20
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr

0800df9e <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800df9e:	b480      	push	{r7}
 800dfa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800dfa2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr
	...

0800dfb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b0ba      	sub	sp, #232	@ 0xe8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfb8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	601a      	str	r2, [r3, #0]
 800dfc0:	605a      	str	r2, [r3, #4]
 800dfc2:	609a      	str	r2, [r3, #8]
 800dfc4:	60da      	str	r2, [r3, #12]
 800dfc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dfc8:	f107 0310 	add.w	r3, r7, #16
 800dfcc:	22c0      	movs	r2, #192	@ 0xc0
 800dfce:	2100      	movs	r1, #0
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f000 fb53 	bl	800e67c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a33      	ldr	r2, [pc, #204]	@ (800e0a8 <HAL_PCD_MspInit+0xf8>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d15f      	bne.n	800e0a0 <HAL_PCD_MspInit+0xf0>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dfe0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800dfe4:	f04f 0300 	mov.w	r3, #0
 800dfe8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 800dfec:	2319      	movs	r3, #25
 800dfee:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800dff0:	23c0      	movs	r3, #192	@ 0xc0
 800dff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800dff4:	2302      	movs	r3, #2
 800dff6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800dff8:	2304      	movs	r3, #4
 800dffa:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800dffc:	2302      	movs	r3, #2
 800dffe:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800e000:	2300      	movs	r3, #0
 800e002:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800e004:	2300      	movs	r3, #0
 800e006:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800e008:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e00c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e010:	f107 0310 	add.w	r3, r7, #16
 800e014:	4618      	mov	r0, r3
 800e016:	f7f7 f9a7 	bl	8005368 <HAL_RCCEx_PeriphCLKConfig>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <HAL_PCD_MspInit+0x74>
    {
      Error_Handler();
 800e020:	f7f2 fde4 	bl	8000bec <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e024:	f7f5 febc 	bl	8003da0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e028:	4b20      	ldr	r3, [pc, #128]	@ (800e0ac <HAL_PCD_MspInit+0xfc>)
 800e02a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e02e:	4a1f      	ldr	r2, [pc, #124]	@ (800e0ac <HAL_PCD_MspInit+0xfc>)
 800e030:	f043 0301 	orr.w	r3, r3, #1
 800e034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e038:	4b1c      	ldr	r3, [pc, #112]	@ (800e0ac <HAL_PCD_MspInit+0xfc>)
 800e03a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	60fb      	str	r3, [r7, #12]
 800e044:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e046:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e04a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e04e:	2302      	movs	r3, #2
 800e050:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e054:	2300      	movs	r3, #0
 800e056:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e05a:	2300      	movs	r3, #0
 800e05c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e060:	230a      	movs	r3, #10
 800e062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e066:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e06a:	4619      	mov	r1, r3
 800e06c:	4810      	ldr	r0, [pc, #64]	@ (800e0b0 <HAL_PCD_MspInit+0x100>)
 800e06e:	f7f4 f895 	bl	800219c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e072:	4b0e      	ldr	r3, [pc, #56]	@ (800e0ac <HAL_PCD_MspInit+0xfc>)
 800e074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e078:	4a0c      	ldr	r2, [pc, #48]	@ (800e0ac <HAL_PCD_MspInit+0xfc>)
 800e07a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e07e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e082:	4b0a      	ldr	r3, [pc, #40]	@ (800e0ac <HAL_PCD_MspInit+0xfc>)
 800e084:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e08c:	60bb      	str	r3, [r7, #8]
 800e08e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e090:	2200      	movs	r2, #0
 800e092:	2100      	movs	r1, #0
 800e094:	2065      	movs	r0, #101	@ 0x65
 800e096:	f7f3 fa62 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e09a:	2065      	movs	r0, #101	@ 0x65
 800e09c:	f7f3 fa79 	bl	8001592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e0a0:	bf00      	nop
 800e0a2:	37e8      	adds	r7, #232	@ 0xe8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	40080000 	.word	0x40080000
 800e0ac:	58024400 	.word	0x58024400
 800e0b0:	58020000 	.word	0x58020000

0800e0b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	4610      	mov	r0, r2
 800e0cc:	f7fe fb6c 	bl	800c7a8 <USBD_LL_SetupStage>
}
 800e0d0:	bf00      	nop
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	460b      	mov	r3, r1
 800e0e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e0ea:	78fa      	ldrb	r2, [r7, #3]
 800e0ec:	6879      	ldr	r1, [r7, #4]
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	00db      	lsls	r3, r3, #3
 800e0f2:	4413      	add	r3, r2
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	440b      	add	r3, r1
 800e0f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	78fb      	ldrb	r3, [r7, #3]
 800e100:	4619      	mov	r1, r3
 800e102:	f7fe fba6 	bl	800c852 <USBD_LL_DataOutStage>
}
 800e106:	bf00      	nop
 800e108:	3708      	adds	r7, #8
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b082      	sub	sp, #8
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	460b      	mov	r3, r1
 800e118:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e120:	78fa      	ldrb	r2, [r7, #3]
 800e122:	6879      	ldr	r1, [r7, #4]
 800e124:	4613      	mov	r3, r2
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	4413      	add	r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	440b      	add	r3, r1
 800e12e:	3320      	adds	r3, #32
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	78fb      	ldrb	r3, [r7, #3]
 800e134:	4619      	mov	r1, r3
 800e136:	f7fe fc3f 	bl	800c9b8 <USBD_LL_DataInStage>
}
 800e13a:	bf00      	nop
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b082      	sub	sp, #8
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e150:	4618      	mov	r0, r3
 800e152:	f7fe fd79 	bl	800cc48 <USBD_LL_SOF>
}
 800e156:	bf00      	nop
 800e158:	3708      	adds	r7, #8
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b084      	sub	sp, #16
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e166:	2301      	movs	r3, #1
 800e168:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	79db      	ldrb	r3, [r3, #7]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d102      	bne.n	800e178 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e172:	2300      	movs	r3, #0
 800e174:	73fb      	strb	r3, [r7, #15]
 800e176:	e008      	b.n	800e18a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	79db      	ldrb	r3, [r3, #7]
 800e17c:	2b02      	cmp	r3, #2
 800e17e:	d102      	bne.n	800e186 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e180:	2301      	movs	r3, #1
 800e182:	73fb      	strb	r3, [r7, #15]
 800e184:	e001      	b.n	800e18a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e186:	f7f2 fd31 	bl	8000bec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e190:	7bfa      	ldrb	r2, [r7, #15]
 800e192:	4611      	mov	r1, r2
 800e194:	4618      	mov	r0, r3
 800e196:	f7fe fd13 	bl	800cbc0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fe fcbb 	bl	800cb1c <USBD_LL_Reset>
}
 800e1a6:	bf00      	nop
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
	...

0800e1b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fe fd0e 	bl	800cbe0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	6812      	ldr	r2, [r2, #0]
 800e1d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e1d6:	f043 0301 	orr.w	r3, r3, #1
 800e1da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	7adb      	ldrb	r3, [r3, #11]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d005      	beq.n	800e1f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1e4:	4b04      	ldr	r3, [pc, #16]	@ (800e1f8 <HAL_PCD_SuspendCallback+0x48>)
 800e1e6:	691b      	ldr	r3, [r3, #16]
 800e1e8:	4a03      	ldr	r2, [pc, #12]	@ (800e1f8 <HAL_PCD_SuspendCallback+0x48>)
 800e1ea:	f043 0306 	orr.w	r3, r3, #6
 800e1ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e1f0:	bf00      	nop
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	e000ed00 	.word	0xe000ed00

0800e1fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fe fd04 	bl	800cc18 <USBD_LL_Resume>
}
 800e210:	bf00      	nop
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	460b      	mov	r3, r1
 800e222:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e22a:	78fa      	ldrb	r2, [r7, #3]
 800e22c:	4611      	mov	r1, r2
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fe fd5c 	bl	800ccec <USBD_LL_IsoOUTIncomplete>
}
 800e234:	bf00      	nop
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	460b      	mov	r3, r1
 800e246:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e24e:	78fa      	ldrb	r2, [r7, #3]
 800e250:	4611      	mov	r1, r2
 800e252:	4618      	mov	r0, r3
 800e254:	f7fe fd18 	bl	800cc88 <USBD_LL_IsoINIncomplete>
}
 800e258:	bf00      	nop
 800e25a:	3708      	adds	r7, #8
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fe fd6e 	bl	800cd50 <USBD_LL_DevConnected>
}
 800e274:	bf00      	nop
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7fe fd6b 	bl	800cd66 <USBD_LL_DevDisconnected>
}
 800e290:	bf00      	nop
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d13e      	bne.n	800e326 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e2a8:	4a21      	ldr	r2, [pc, #132]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4a1f      	ldr	r2, [pc, #124]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2b4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e2b8:	4b1d      	ldr	r3, [pc, #116]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2ba:	4a1e      	ldr	r2, [pc, #120]	@ (800e334 <USBD_LL_Init+0x9c>)
 800e2bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800e2be:	4b1c      	ldr	r3, [pc, #112]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2c0:	2209      	movs	r2, #9
 800e2c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e2c4:	4b1a      	ldr	r3, [pc, #104]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2c6:	2202      	movs	r2, #2
 800e2c8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e2ca:	4b19      	ldr	r3, [pc, #100]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e2d0:	4b17      	ldr	r3, [pc, #92]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2d2:	2202      	movs	r2, #2
 800e2d4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e2d6:	4b16      	ldr	r3, [pc, #88]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2d8:	2200      	movs	r2, #0
 800e2da:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e2dc:	4b14      	ldr	r3, [pc, #80]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2de:	2200      	movs	r2, #0
 800e2e0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e2e2:	4b13      	ldr	r3, [pc, #76]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e2e8:	4b11      	ldr	r3, [pc, #68]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e2ee:	4b10      	ldr	r3, [pc, #64]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e2f4:	4b0e      	ldr	r3, [pc, #56]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e2fa:	480d      	ldr	r0, [pc, #52]	@ (800e330 <USBD_LL_Init+0x98>)
 800e2fc:	f7f4 fa48 	bl	8002790 <HAL_PCD_Init>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d001      	beq.n	800e30a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e306:	f7f2 fc71 	bl	8000bec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e30a:	2180      	movs	r1, #128	@ 0x80
 800e30c:	4808      	ldr	r0, [pc, #32]	@ (800e330 <USBD_LL_Init+0x98>)
 800e30e:	f7f5 fccc 	bl	8003caa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e312:	2240      	movs	r2, #64	@ 0x40
 800e314:	2100      	movs	r1, #0
 800e316:	4806      	ldr	r0, [pc, #24]	@ (800e330 <USBD_LL_Init+0x98>)
 800e318:	f7f5 fc80 	bl	8003c1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e31c:	2280      	movs	r2, #128	@ 0x80
 800e31e:	2101      	movs	r1, #1
 800e320:	4803      	ldr	r0, [pc, #12]	@ (800e330 <USBD_LL_Init+0x98>)
 800e322:	f7f5 fc7b 	bl	8003c1c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800e326:	2300      	movs	r3, #0
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	2400076c 	.word	0x2400076c
 800e334:	40080000 	.word	0x40080000

0800e338 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e340:	2300      	movs	r3, #0
 800e342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e344:	2300      	movs	r3, #0
 800e346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e34e:	4618      	mov	r0, r3
 800e350:	f7f4 fb2a 	bl	80029a8 <HAL_PCD_Start>
 800e354:	4603      	mov	r3, r0
 800e356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e358:	7bfb      	ldrb	r3, [r7, #15]
 800e35a:	4618      	mov	r0, r3
 800e35c:	f000 f962 	bl	800e624 <USBD_Get_USB_Status>
 800e360:	4603      	mov	r3, r0
 800e362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e364:	7bbb      	ldrb	r3, [r7, #14]
}
 800e366:	4618      	mov	r0, r3
 800e368:	3710      	adds	r7, #16
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}

0800e36e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e36e:	b580      	push	{r7, lr}
 800e370:	b084      	sub	sp, #16
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
 800e376:	4608      	mov	r0, r1
 800e378:	4611      	mov	r1, r2
 800e37a:	461a      	mov	r2, r3
 800e37c:	4603      	mov	r3, r0
 800e37e:	70fb      	strb	r3, [r7, #3]
 800e380:	460b      	mov	r3, r1
 800e382:	70bb      	strb	r3, [r7, #2]
 800e384:	4613      	mov	r3, r2
 800e386:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e388:	2300      	movs	r3, #0
 800e38a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e38c:	2300      	movs	r3, #0
 800e38e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e396:	78bb      	ldrb	r3, [r7, #2]
 800e398:	883a      	ldrh	r2, [r7, #0]
 800e39a:	78f9      	ldrb	r1, [r7, #3]
 800e39c:	f7f5 f82b 	bl	80033f6 <HAL_PCD_EP_Open>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f000 f93c 	bl	800e624 <USBD_Get_USB_Status>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3d4:	78fa      	ldrb	r2, [r7, #3]
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7f5 f876 	bl	80034ca <HAL_PCD_EP_Close>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3e2:	7bfb      	ldrb	r3, [r7, #15]
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f000 f91d 	bl	800e624 <USBD_Get_USB_Status>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3710      	adds	r7, #16
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	460b      	mov	r3, r1
 800e402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e404:	2300      	movs	r3, #0
 800e406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e408:	2300      	movs	r3, #0
 800e40a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e412:	78fa      	ldrb	r2, [r7, #3]
 800e414:	4611      	mov	r1, r2
 800e416:	4618      	mov	r0, r3
 800e418:	f7f5 fa18 	bl	800384c <HAL_PCD_EP_Flush>
 800e41c:	4603      	mov	r3, r0
 800e41e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e420:	7bfb      	ldrb	r3, [r7, #15]
 800e422:	4618      	mov	r0, r3
 800e424:	f000 f8fe 	bl	800e624 <USBD_Get_USB_Status>
 800e428:	4603      	mov	r3, r0
 800e42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}

0800e436 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e436:	b580      	push	{r7, lr}
 800e438:	b084      	sub	sp, #16
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
 800e43e:	460b      	mov	r3, r1
 800e440:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e442:	2300      	movs	r3, #0
 800e444:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e446:	2300      	movs	r3, #0
 800e448:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e450:	78fa      	ldrb	r2, [r7, #3]
 800e452:	4611      	mov	r1, r2
 800e454:	4618      	mov	r0, r3
 800e456:	f7f5 f90f 	bl	8003678 <HAL_PCD_EP_SetStall>
 800e45a:	4603      	mov	r3, r0
 800e45c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e45e:	7bfb      	ldrb	r3, [r7, #15]
 800e460:	4618      	mov	r0, r3
 800e462:	f000 f8df 	bl	800e624 <USBD_Get_USB_Status>
 800e466:	4603      	mov	r3, r0
 800e468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e46a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	460b      	mov	r3, r1
 800e47e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e480:	2300      	movs	r3, #0
 800e482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e484:	2300      	movs	r3, #0
 800e486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e48e:	78fa      	ldrb	r2, [r7, #3]
 800e490:	4611      	mov	r1, r2
 800e492:	4618      	mov	r0, r3
 800e494:	f7f5 f953 	bl	800373e <HAL_PCD_EP_ClrStall>
 800e498:	4603      	mov	r3, r0
 800e49a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e49c:	7bfb      	ldrb	r3, [r7, #15]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f000 f8c0 	bl	800e624 <USBD_Get_USB_Status>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4b2:	b480      	push	{r7}
 800e4b4:	b085      	sub	sp, #20
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4c4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e4c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	da0b      	bge.n	800e4e6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e4ce:	78fb      	ldrb	r3, [r7, #3]
 800e4d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e4d4:	68f9      	ldr	r1, [r7, #12]
 800e4d6:	4613      	mov	r3, r2
 800e4d8:	00db      	lsls	r3, r3, #3
 800e4da:	4413      	add	r3, r2
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	440b      	add	r3, r1
 800e4e0:	3316      	adds	r3, #22
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	e00b      	b.n	800e4fe <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e4e6:	78fb      	ldrb	r3, [r7, #3]
 800e4e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e4ec:	68f9      	ldr	r1, [r7, #12]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	00db      	lsls	r3, r3, #3
 800e4f2:	4413      	add	r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	440b      	add	r3, r1
 800e4f8:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e4fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3714      	adds	r7, #20
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr

0800e50a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b084      	sub	sp, #16
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	460b      	mov	r3, r1
 800e514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e516:	2300      	movs	r3, #0
 800e518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e51a:	2300      	movs	r3, #0
 800e51c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e524:	78fa      	ldrb	r2, [r7, #3]
 800e526:	4611      	mov	r1, r2
 800e528:	4618      	mov	r0, r3
 800e52a:	f7f4 ff40 	bl	80033ae <HAL_PCD_SetAddress>
 800e52e:	4603      	mov	r3, r0
 800e530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e532:	7bfb      	ldrb	r3, [r7, #15]
 800e534:	4618      	mov	r0, r3
 800e536:	f000 f875 	bl	800e624 <USBD_Get_USB_Status>
 800e53a:	4603      	mov	r3, r0
 800e53c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e53e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e540:	4618      	mov	r0, r3
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b086      	sub	sp, #24
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	607a      	str	r2, [r7, #4]
 800e552:	603b      	str	r3, [r7, #0]
 800e554:	460b      	mov	r3, r1
 800e556:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e558:	2300      	movs	r3, #0
 800e55a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e55c:	2300      	movs	r3, #0
 800e55e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e566:	7af9      	ldrb	r1, [r7, #11]
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	f7f5 f84a 	bl	8003604 <HAL_PCD_EP_Transmit>
 800e570:	4603      	mov	r3, r0
 800e572:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e574:	7dfb      	ldrb	r3, [r7, #23]
 800e576:	4618      	mov	r0, r3
 800e578:	f000 f854 	bl	800e624 <USBD_Get_USB_Status>
 800e57c:	4603      	mov	r3, r0
 800e57e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e580:	7dbb      	ldrb	r3, [r7, #22]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3718      	adds	r7, #24
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b086      	sub	sp, #24
 800e58e:	af00      	add	r7, sp, #0
 800e590:	60f8      	str	r0, [r7, #12]
 800e592:	607a      	str	r2, [r7, #4]
 800e594:	603b      	str	r3, [r7, #0]
 800e596:	460b      	mov	r3, r1
 800e598:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e59a:	2300      	movs	r3, #0
 800e59c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e5a8:	7af9      	ldrb	r1, [r7, #11]
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	f7f4 ffd6 	bl	800355e <HAL_PCD_EP_Receive>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5b6:	7dfb      	ldrb	r3, [r7, #23]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f000 f833 	bl	800e624 <USBD_Get_USB_Status>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e5c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3718      	adds	r7, #24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e5de:	78fa      	ldrb	r2, [r7, #3]
 800e5e0:	4611      	mov	r1, r2
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7f4 fff6 	bl	80035d4 <HAL_PCD_EP_GetRxCount>
 800e5e8:	4603      	mov	r3, r0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
	...

0800e5f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e5fc:	4b03      	ldr	r3, [pc, #12]	@ (800e60c <USBD_static_malloc+0x18>)
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	370c      	adds	r7, #12
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	24000c50 	.word	0x24000c50

0800e610 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e618:	bf00      	nop
 800e61a:	370c      	adds	r7, #12
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e624:	b480      	push	{r7}
 800e626:	b085      	sub	sp, #20
 800e628:	af00      	add	r7, sp, #0
 800e62a:	4603      	mov	r3, r0
 800e62c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e62e:	2300      	movs	r3, #0
 800e630:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e632:	79fb      	ldrb	r3, [r7, #7]
 800e634:	2b03      	cmp	r3, #3
 800e636:	d817      	bhi.n	800e668 <USBD_Get_USB_Status+0x44>
 800e638:	a201      	add	r2, pc, #4	@ (adr r2, 800e640 <USBD_Get_USB_Status+0x1c>)
 800e63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63e:	bf00      	nop
 800e640:	0800e651 	.word	0x0800e651
 800e644:	0800e657 	.word	0x0800e657
 800e648:	0800e65d 	.word	0x0800e65d
 800e64c:	0800e663 	.word	0x0800e663
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e650:	2300      	movs	r3, #0
 800e652:	73fb      	strb	r3, [r7, #15]
    break;
 800e654:	e00b      	b.n	800e66e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e656:	2303      	movs	r3, #3
 800e658:	73fb      	strb	r3, [r7, #15]
    break;
 800e65a:	e008      	b.n	800e66e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e65c:	2301      	movs	r3, #1
 800e65e:	73fb      	strb	r3, [r7, #15]
    break;
 800e660:	e005      	b.n	800e66e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e662:	2303      	movs	r3, #3
 800e664:	73fb      	strb	r3, [r7, #15]
    break;
 800e666:	e002      	b.n	800e66e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e668:	2303      	movs	r3, #3
 800e66a:	73fb      	strb	r3, [r7, #15]
    break;
 800e66c:	bf00      	nop
  }
  return usb_status;
 800e66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3714      	adds	r7, #20
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <memset>:
 800e67c:	4402      	add	r2, r0
 800e67e:	4603      	mov	r3, r0
 800e680:	4293      	cmp	r3, r2
 800e682:	d100      	bne.n	800e686 <memset+0xa>
 800e684:	4770      	bx	lr
 800e686:	f803 1b01 	strb.w	r1, [r3], #1
 800e68a:	e7f9      	b.n	800e680 <memset+0x4>

0800e68c <__libc_init_array>:
 800e68c:	b570      	push	{r4, r5, r6, lr}
 800e68e:	4d0d      	ldr	r5, [pc, #52]	@ (800e6c4 <__libc_init_array+0x38>)
 800e690:	4c0d      	ldr	r4, [pc, #52]	@ (800e6c8 <__libc_init_array+0x3c>)
 800e692:	1b64      	subs	r4, r4, r5
 800e694:	10a4      	asrs	r4, r4, #2
 800e696:	2600      	movs	r6, #0
 800e698:	42a6      	cmp	r6, r4
 800e69a:	d109      	bne.n	800e6b0 <__libc_init_array+0x24>
 800e69c:	4d0b      	ldr	r5, [pc, #44]	@ (800e6cc <__libc_init_array+0x40>)
 800e69e:	4c0c      	ldr	r4, [pc, #48]	@ (800e6d0 <__libc_init_array+0x44>)
 800e6a0:	f000 f818 	bl	800e6d4 <_init>
 800e6a4:	1b64      	subs	r4, r4, r5
 800e6a6:	10a4      	asrs	r4, r4, #2
 800e6a8:	2600      	movs	r6, #0
 800e6aa:	42a6      	cmp	r6, r4
 800e6ac:	d105      	bne.n	800e6ba <__libc_init_array+0x2e>
 800e6ae:	bd70      	pop	{r4, r5, r6, pc}
 800e6b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6b4:	4798      	blx	r3
 800e6b6:	3601      	adds	r6, #1
 800e6b8:	e7ee      	b.n	800e698 <__libc_init_array+0xc>
 800e6ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6be:	4798      	blx	r3
 800e6c0:	3601      	adds	r6, #1
 800e6c2:	e7f2      	b.n	800e6aa <__libc_init_array+0x1e>
 800e6c4:	0800e794 	.word	0x0800e794
 800e6c8:	0800e794 	.word	0x0800e794
 800e6cc:	0800e794 	.word	0x0800e794
 800e6d0:	0800e798 	.word	0x0800e798

0800e6d4 <_init>:
 800e6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d6:	bf00      	nop
 800e6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6da:	bc08      	pop	{r3}
 800e6dc:	469e      	mov	lr, r3
 800e6de:	4770      	bx	lr

0800e6e0 <_fini>:
 800e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e2:	bf00      	nop
 800e6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6e6:	bc08      	pop	{r3}
 800e6e8:	469e      	mov	lr, r3
 800e6ea:	4770      	bx	lr
