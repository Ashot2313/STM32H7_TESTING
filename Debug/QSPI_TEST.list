
QSPI_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecf4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800ef8c  0800ef8c  0000ff8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f02c  0800f02c  0001002c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f034  0800f034  00010034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f038  0800f038  00010038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  24000000  0800f03c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d88  240001f8  0800f234  000111f8  2**2
                  ALLOC
  8 ._user_heap_stack 0000c000  24001f80  0800f234  00011f80  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024cdc  00000000  00000000  00011226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004c08  00000000  00000000  00035f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ad8  00000000  00000000  0003ab10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014b9  00000000  00000000  0003c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c0ef  00000000  00000000  0003daa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026f2c  00000000  00000000  00079b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016ac47  00000000  00000000  000a0abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020b703  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007184  00000000  00000000  0020b748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  002128cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001f8 	.word	0x240001f8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ef74 	.word	0x0800ef74

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001fc 	.word	0x240001fc
 80002d4:	0800ef74 	.word	0x0800ef74

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800060a:	f000 f9e7 	bl	80009dc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f001 f827 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f82b 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f951 	bl	80008bc <MX_GPIO_Init>
  MX_QUADSPI_Init();
 800061a:	f000 f8a1 	bl	8000760 <MX_QUADSPI_Init>
  MX_TIM7_Init();
 800061e:	f000 f8cb 	bl	80007b8 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8000622:	f000 f8ff 	bl	8000824 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000626:	f00d ff6d 	bl	800e504 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

 int32_t err=0;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
err=CSP_QUADSPI_Init();
 800062e:	f000 fa35 	bl	8000a9c <CSP_QUADSPI_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	607b      	str	r3, [r7, #4]


if (CSP_QSPI_WriteMemory(aTxBuffer, 0, sizeof(aTxBuffer)) != HAL_OK) Error_Handler();
 8000636:	22f1      	movs	r2, #241	@ 0xf1
 8000638:	2100      	movs	r1, #0
 800063a:	480a      	ldr	r0, [pc, #40]	@ (8000664 <main+0x60>)
 800063c:	f000 fbea 	bl	8000e14 <CSP_QSPI_WriteMemory>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <main+0x46>
 8000646:	f000 f9f5 	bl	8000a34 <Error_Handler>

if (CSP_QSPI_Read(aRxBuffer, 0, 100) != HAL_OK) Error_Handler();
 800064a:	2264      	movs	r2, #100	@ 0x64
 800064c:	2100      	movs	r1, #0
 800064e:	4806      	ldr	r0, [pc, #24]	@ (8000668 <main+0x64>)
 8000650:	f000 fcd4 	bl	8000ffc <CSP_QSPI_Read>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <main+0x5c>
 800065a:	f000 f9eb 	bl	8000a34 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <main+0x5c>
 8000664:	24000000 	.word	0x24000000
 8000668:	24000340 	.word	0x24000340

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b09c      	sub	sp, #112	@ 0x70
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000676:	224c      	movs	r2, #76	@ 0x4c
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f00e fc4e 	bl	800ef1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2220      	movs	r2, #32
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f00e fc48 	bl	800ef1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800068c:	2002      	movs	r0, #2
 800068e:	f003 fd35 	bl	80040fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b30      	ldr	r3, [pc, #192]	@ (8000758 <SystemClock_Config+0xec>)
 8000698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800069a:	4a2f      	ldr	r2, [pc, #188]	@ (8000758 <SystemClock_Config+0xec>)
 800069c:	f023 0301 	bic.w	r3, r3, #1
 80006a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000758 <SystemClock_Config+0xec>)
 80006a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4b2b      	ldr	r3, [pc, #172]	@ (800075c <SystemClock_Config+0xf0>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a2a      	ldr	r2, [pc, #168]	@ (800075c <SystemClock_Config+0xf0>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b28      	ldr	r3, [pc, #160]	@ (800075c <SystemClock_Config+0xf0>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c4:	bf00      	nop
 80006c6:	4b25      	ldr	r3, [pc, #148]	@ (800075c <SystemClock_Config+0xf0>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006d2:	d1f8      	bne.n	80006c6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006e6:	2305      	movs	r3, #5
 80006e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006ea:	23a0      	movs	r3, #160	@ 0xa0
 80006ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006fa:	2308      	movs	r3, #8
 80006fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006fe:	2300      	movs	r3, #0
 8000700:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070a:	4618      	mov	r0, r3
 800070c:	f004 f9b4 	bl	8004a78 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000716:	f000 f98d 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	233f      	movs	r3, #63	@ 0x3f
 800071c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000726:	2308      	movs	r3, #8
 8000728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072a:	2340      	movs	r3, #64	@ 0x40
 800072c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800072e:	2340      	movs	r3, #64	@ 0x40
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000738:	2340      	movs	r3, #64	@ 0x40
 800073a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2102      	movs	r1, #2
 8000740:	4618      	mov	r0, r3
 8000742:	f004 fdf3 	bl	800532c <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800074c:	f000 f972 	bl	8000a34 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3770      	adds	r7, #112	@ 0x70
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	58000400 	.word	0x58000400
 800075c:	58024800 	.word	0x58024800

08000760 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_QUADSPI_Init+0x50>)
 8000766:	4a13      	ldr	r2, [pc, #76]	@ (80007b4 <MX_QUADSPI_Init+0x54>)
 8000768:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_QUADSPI_Init+0x50>)
 800076c:	22ff      	movs	r2, #255	@ 0xff
 800076e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_QUADSPI_Init+0x50>)
 8000772:	2201      	movs	r2, #1
 8000774:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_QUADSPI_Init+0x50>)
 8000778:	2210      	movs	r2, #16
 800077a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_QUADSPI_Init+0x50>)
 800077e:	2216      	movs	r2, #22
 8000780:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_QUADSPI_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_QUADSPI_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_QUADSPI_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_QUADSPI_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_QUADSPI_Init+0x50>)
 800079c:	f003 fcf8 	bl	8004190 <HAL_QSPI_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80007a6:	f000 f945 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	24000214 	.word	0x24000214
 80007b4:	52005000 	.word	0x52005000

080007b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_TIM7_Init+0x64>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <MX_TIM7_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 199;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_TIM7_Init+0x64>)
 80007d0:	22c7      	movs	r2, #199	@ 0xc7
 80007d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_TIM7_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_TIM7_Init+0x64>)
 80007dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_TIM7_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007e8:	480c      	ldr	r0, [pc, #48]	@ (800081c <MX_TIM7_Init+0x64>)
 80007ea:	f006 ff57 	bl	800769c <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80007f4:	f000 f91e 	bl	8000a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_TIM7_Init+0x64>)
 8000806:	f007 f979 	bl	8007afc <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 f910 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	24000260 	.word	0x24000260
 8000820:	40001400 	.word	0x40001400

08000824 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000828:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 800082a:	4a23      	ldr	r2, [pc, #140]	@ (80008b8 <MX_USART1_UART_Init+0x94>)
 800082c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086c:	4811      	ldr	r0, [pc, #68]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 800086e:	f007 f9f1 	bl	8007c54 <HAL_UART_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000878:	f000 f8dc 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000880:	f008 fe4a 	bl	8009518 <HAL_UARTEx_SetTxFifoThreshold>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800088a:	f000 f8d3 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 8000892:	f008 fe7f 	bl	8009594 <HAL_UARTEx_SetRxFifoThreshold>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800089c:	f000 f8ca 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_USART1_UART_Init+0x90>)
 80008a2:	f008 fe00 	bl	80094a6 <HAL_UARTEx_DisableFifoMode>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 f8c2 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	240002ac 	.word	0x240002ac
 80008b8:	40011000 	.word	0x40011000

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	@ 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	4b3f      	ldr	r3, [pc, #252]	@ (80009d0 <MX_GPIO_Init+0x114>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d8:	4a3d      	ldr	r2, [pc, #244]	@ (80009d0 <MX_GPIO_Init+0x114>)
 80008da:	f043 0310 	orr.w	r3, r3, #16
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e2:	4b3b      	ldr	r3, [pc, #236]	@ (80009d0 <MX_GPIO_Init+0x114>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e8:	f003 0310 	and.w	r3, r3, #16
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f0:	4b37      	ldr	r3, [pc, #220]	@ (80009d0 <MX_GPIO_Init+0x114>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	4a36      	ldr	r2, [pc, #216]	@ (80009d0 <MX_GPIO_Init+0x114>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000900:	4b33      	ldr	r3, [pc, #204]	@ (80009d0 <MX_GPIO_Init+0x114>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	4b30      	ldr	r3, [pc, #192]	@ (80009d0 <MX_GPIO_Init+0x114>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000914:	4a2e      	ldr	r2, [pc, #184]	@ (80009d0 <MX_GPIO_Init+0x114>)
 8000916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091e:	4b2c      	ldr	r3, [pc, #176]	@ (80009d0 <MX_GPIO_Init+0x114>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b28      	ldr	r3, [pc, #160]	@ (80009d0 <MX_GPIO_Init+0x114>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000932:	4a27      	ldr	r2, [pc, #156]	@ (80009d0 <MX_GPIO_Init+0x114>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800093c:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <MX_GPIO_Init+0x114>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	4b21      	ldr	r3, [pc, #132]	@ (80009d0 <MX_GPIO_Init+0x114>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000950:	4a1f      	ldr	r2, [pc, #124]	@ (80009d0 <MX_GPIO_Init+0x114>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095a:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <MX_GPIO_Init+0x114>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	f003 0308 	and.w	r3, r3, #8
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <MX_GPIO_Init+0x114>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096e:	4a18      	ldr	r2, [pc, #96]	@ (80009d0 <MX_GPIO_Init+0x114>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000978:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <MX_GPIO_Init+0x114>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2108      	movs	r1, #8
 800098a:	4812      	ldr	r0, [pc, #72]	@ (80009d4 <MX_GPIO_Init+0x118>)
 800098c:	f002 f8d0 	bl	8002b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000990:	2308      	movs	r3, #8
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	480b      	ldr	r0, [pc, #44]	@ (80009d4 <MX_GPIO_Init+0x118>)
 80009a8:	f001 fe08 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_BUTTON_Pin */
  GPIO_InitStruct.Pin = EXT_BUTTON_Pin;
 80009ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009b6:	2302      	movs	r3, #2
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EXT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_GPIO_Init+0x11c>)
 80009c2:	f001 fdfb 	bl	80025bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c6:	bf00      	nop
 80009c8:	3730      	adds	r7, #48	@ 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	58024400 	.word	0x58024400
 80009d4:	58021000 	.word	0x58021000
 80009d8:	58020800 	.word	0x58020800

080009dc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009ee:	f001 f809 	bl	8001a04 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009f2:	2301      	movs	r3, #1
 80009f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009fe:	231f      	movs	r3, #31
 8000a00:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a02:	2387      	movs	r3, #135	@ 0x87
 8000a04:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a12:	2301      	movs	r3, #1
 8000a14:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 f827 	bl	8001a74 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a26:	2004      	movs	r0, #4
 8000a28:	f001 f804 	bl	8001a34 <HAL_MPU_Enable>

}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
 // __disable_irq();
//  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <_QUADSPI_Init>:
extern QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */

void _QUADSPI_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  hqspi.Instance = QUADSPI;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <_QUADSPI_Init+0x50>)
 8000a4a:	4a13      	ldr	r2, [pc, #76]	@ (8000a98 <_QUADSPI_Init+0x54>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 200;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <_QUADSPI_Init+0x50>)
 8000a50:	22c8      	movs	r2, #200	@ 0xc8
 8000a52:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <_QUADSPI_Init+0x50>)
 8000a56:	2204      	movs	r2, #4
 8000a58:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <_QUADSPI_Init+0x50>)
 8000a5c:	2210      	movs	r2, #16
 8000a5e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 21;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <_QUADSPI_Init+0x50>)
 8000a62:	2215      	movs	r2, #21
 8000a64:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <_QUADSPI_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <_QUADSPI_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <_QUADSPI_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <_QUADSPI_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <_QUADSPI_Init+0x50>)
 8000a80:	f003 fb86 	bl	8004190 <HAL_QSPI_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000a8a:	f7ff ffd3 	bl	8000a34 <Error_Handler>
  }

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	24000214 	.word	0x24000214
 8000a98:	52005000 	.word	0x52005000

08000a9c <CSP_QUADSPI_Init>:
  }
}

/* USER CODE BEGIN 1 */
/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <CSP_QUADSPI_Init+0x68>)
 8000aa2:	4a19      	ldr	r2, [pc, #100]	@ (8000b08 <CSP_QUADSPI_Init+0x6c>)
 8000aa4:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000aa6:	4817      	ldr	r0, [pc, #92]	@ (8000b04 <CSP_QUADSPI_Init+0x68>)
 8000aa8:	f003 fbe6 	bl	8004278 <HAL_QSPI_DeInit>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <CSP_QUADSPI_Init+0x1a>
		return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e024      	b.n	8000b00 <CSP_QUADSPI_Init+0x64>
	}

	_QUADSPI_Init();
 8000ab6:	f7ff ffc5 	bl	8000a44 <_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 8000aba:	f000 fa37 	bl	8000f2c <QSPI_ResetChip>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <CSP_QUADSPI_Init+0x2c>
		return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e01b      	b.n	8000b00 <CSP_QUADSPI_Init+0x64>
	}

	HAL_Delay(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f000 fe5b 	bl	8001784 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000ace:	f000 f81d 	bl	8000b0c <QSPI_AutoPollingMemReady>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <CSP_QUADSPI_Init+0x40>
		return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e011      	b.n	8000b00 <CSP_QUADSPI_Init+0x64>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 8000adc:	f000 f862 	bl	8000ba4 <QSPI_WriteEnable>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <CSP_QUADSPI_Init+0x4e>

		return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00a      	b.n	8000b00 <CSP_QUADSPI_Init+0x64>
	}

	if (QSPI_Configuration() != HAL_OK) {
 8000aea:	f000 f8bd 	bl	8000c68 <QSPI_Configuration>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <CSP_QUADSPI_Init+0x5c>
		return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e003      	b.n	8000b00 <CSP_QUADSPI_Init+0x64>
	}

	HAL_Delay(100);
 8000af8:	2064      	movs	r0, #100	@ 0x64
 8000afa:	f000 fe43 	bl	8001784 <HAL_Delay>

	return HAL_OK;
 8000afe:	2300      	movs	r3, #0

}
 8000b00:	4618      	mov	r0, r3
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24000214 	.word	0x24000214
 8000b08:	52005000 	.word	0x52005000

08000b0c <QSPI_AutoPollingMemReady>:

	return HAL_OK;

}

uint8_t QSPI_AutoPollingMemReady(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b096      	sub	sp, #88	@ 0x58
 8000b10:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2238      	movs	r2, #56	@ 0x38
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00e f9fe 	bl	800ef1c <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b34:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000b36:	2305      	movs	r3, #5
 8000b38:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000b42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b46:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b50:	2300      	movs	r3, #0
 8000b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b54:	2300      	movs	r3, #0
 8000b56:	653b      	str	r3, [r7, #80]	@ 0x50

	sConfig.Match = 0x00;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x01;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000b6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b70:	61bb      	str	r3, [r7, #24]
	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000b72:	1d3a      	adds	r2, r7, #4
 8000b74:	f107 011c 	add.w	r1, r7, #28
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	4808      	ldr	r0, [pc, #32]	@ (8000ba0 <QSPI_AutoPollingMemReady+0x94>)
 8000b7e:	f003 fd28 	bl	80045d2 <HAL_QSPI_AutoPolling>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000b88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d002      	beq.n	8000b96 <QSPI_AutoPollingMemReady+0x8a>
			HAL_MAX_DELAY)) != HAL_OK) {
		return ret;
 8000b90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000b94:	e000      	b.n	8000b98 <QSPI_AutoPollingMemReady+0x8c>
	}
	return HAL_OK;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3758      	adds	r7, #88	@ 0x58
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	24000214 	.word	0x24000214

08000ba4 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b096      	sub	sp, #88	@ 0x58
 8000ba8:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	2238      	movs	r2, #56	@ 0x38
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f00e f9b2 	bl	800ef1c <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
 8000bc6:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000bc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bcc:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8000bce:	2306      	movs	r3, #6
 8000bd0:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_NONE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000be6:	2300      	movs	r3, #0
 8000be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000bea:	2300      	movs	r3, #0
 8000bec:	653b      	str	r3, [r7, #80]	@ 0x50

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	481a      	ldr	r0, [pc, #104]	@ (8000c64 <QSPI_WriteEnable+0xc0>)
 8000bfa:	f003 fb5d 	bl	80042b8 <HAL_QSPI_Command>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000c04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d002      	beq.n	8000c12 <QSPI_WriteEnable+0x6e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000c0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000c10:	e024      	b.n	8000c5c <QSPI_WriteEnable+0xb8>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8000c12:	2302      	movs	r3, #2
 8000c14:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x02;
 8000c16:	2302      	movs	r3, #2
 8000c18:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 8000c22:	2310      	movs	r3, #16
 8000c24:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c2a:	61bb      	str	r3, [r7, #24]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	61fb      	str	r3, [r7, #28]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000c30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c34:	643b      	str	r3, [r7, #64]	@ 0x40

	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000c36:	1d3a      	adds	r2, r7, #4
 8000c38:	f107 011c 	add.w	r1, r7, #28
 8000c3c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c40:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <QSPI_WriteEnable+0xc0>)
 8000c42:	f003 fcc6 	bl	80045d2 <HAL_QSPI_AutoPolling>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000c4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <QSPI_WriteEnable+0xb6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000c54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000c58:	e000      	b.n	8000c5c <QSPI_WriteEnable+0xb8>
	}
	return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3758      	adds	r7, #88	@ 0x58
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	24000214 	.word	0x24000214

08000c68 <QSPI_Configuration>:
/*Enable quad mode*/
/* Las versiones acabadas en IQ lo llevan activado por defecto, como en mi caso. */

uint8_t QSPI_Configuration(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b090      	sub	sp, #64	@ 0x40
 8000c6c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2238      	movs	r2, #56	@ 0x38
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00e f951 	bl	800ef1c <memset>
	uint8_t reg;
	HAL_StatusTypeDef ret;

	/* Read Volatile Configuration register 2 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c7e:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG2_CMD;
 8000c80:	2335      	movs	r3, #53	@ 0x35
 8000c82:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000c8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DummyCycles = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.NbData = 1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cac:	4619      	mov	r1, r3
 8000cae:	4858      	ldr	r0, [pc, #352]	@ (8000e10 <QSPI_Configuration+0x1a8>)
 8000cb0:	f003 fb02 	bl	80042b8 <HAL_QSPI_Command>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000cba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <QSPI_Configuration+0x60>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000cc2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000cc6:	e09f      	b.n	8000e08 <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 8000cc8:	1cfb      	adds	r3, r7, #3
 8000cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cce:	4619      	mov	r1, r3
 8000cd0:	484f      	ldr	r0, [pc, #316]	@ (8000e10 <QSPI_Configuration+0x1a8>)
 8000cd2:	f003 fbe1 	bl	8004498 <HAL_QSPI_Receive>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000cdc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d002      	beq.n	8000cea <QSPI_Configuration+0x82>
			!= HAL_OK) {
		return ret;
 8000ce4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ce8:	e08e      	b.n	8000e08 <QSPI_Configuration+0x1a0>
	}

	/* Enable Volatile Write operations ---------------------------------------- */
	sCommand.DataMode = QSPI_DATA_NONE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Instruction = VOLATILE_SR_WRITE_ENABLE;
 8000cee:	2350      	movs	r3, #80	@ 0x50
 8000cf0:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4845      	ldr	r0, [pc, #276]	@ (8000e10 <QSPI_Configuration+0x1a8>)
 8000cfc:	f003 fadc 	bl	80042b8 <HAL_QSPI_Command>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <QSPI_Configuration+0xa4>
			!= HAL_OK) {
		return ret;
 8000d06:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000d0a:	e07d      	b.n	8000e08 <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (QE = 1) -- */
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000d0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d10:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.Instruction = WRITE_STATUS_REG2_CMD;
 8000d12:	2331      	movs	r3, #49	@ 0x31
 8000d14:	607b      	str	r3, [r7, #4]
	reg |= 2; // QE bit
 8000d16:	78fb      	ldrb	r3, [r7, #3]
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d26:	4619      	mov	r1, r3
 8000d28:	4839      	ldr	r0, [pc, #228]	@ (8000e10 <QSPI_Configuration+0x1a8>)
 8000d2a:	f003 fac5 	bl	80042b8 <HAL_QSPI_Command>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <QSPI_Configuration+0xd2>
			!= HAL_OK) {
		return ret;
 8000d34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000d38:	e066      	b.n	8000e08 <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000d3a:	1cfb      	adds	r3, r7, #3
 8000d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d40:	4619      	mov	r1, r3
 8000d42:	4833      	ldr	r0, [pc, #204]	@ (8000e10 <QSPI_Configuration+0x1a8>)
 8000d44:	f003 fb16 	bl	8004374 <HAL_QSPI_Transmit>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <QSPI_Configuration+0xec>
			!= HAL_OK) {
		return ret;
 8000d4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000d52:	e059      	b.n	8000e08 <QSPI_Configuration+0x1a0>
	}

	/* Read Volatile Configuration register 3 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d58:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG3_CMD;
 8000d5a:	2315      	movs	r3, #21
 8000d5c:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000d66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DummyCycles = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d74:	2300      	movs	r3, #0
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.NbData = 1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d86:	4619      	mov	r1, r3
 8000d88:	4821      	ldr	r0, [pc, #132]	@ (8000e10 <QSPI_Configuration+0x1a8>)
 8000d8a:	f003 fa95 	bl	80042b8 <HAL_QSPI_Command>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000d94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <QSPI_Configuration+0x13a>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000d9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000da0:	e032      	b.n	8000e08 <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 8000da2:	1cfb      	adds	r3, r7, #3
 8000da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000da8:	4619      	mov	r1, r3
 8000daa:	4819      	ldr	r0, [pc, #100]	@ (8000e10 <QSPI_Configuration+0x1a8>)
 8000dac:	f003 fb74 	bl	8004498 <HAL_QSPI_Receive>
 8000db0:	4603      	mov	r3, r0
 8000db2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000db6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <QSPI_Configuration+0x15c>
			!= HAL_OK) {
		return ret;
 8000dbe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000dc2:	e021      	b.n	8000e08 <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (DRV1:2 = 00) -- */
	sCommand.Instruction = WRITE_STATUS_REG3_CMD;
 8000dc4:	2311      	movs	r3, #17
 8000dc6:	607b      	str	r3, [r7, #4]
	reg &= 0x9f; // DRV1:2 bit
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <QSPI_Configuration+0x1a8>)
 8000ddc:	f003 fa6c 	bl	80042b8 <HAL_QSPI_Command>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <QSPI_Configuration+0x184>
			!= HAL_OK) {
		return ret;
 8000de6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000dea:	e00d      	b.n	8000e08 <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000dec:	1cfb      	adds	r3, r7, #3
 8000dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000df2:	4619      	mov	r1, r3
 8000df4:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <QSPI_Configuration+0x1a8>)
 8000df6:	f003 fabd 	bl	8004374 <HAL_QSPI_Transmit>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <QSPI_Configuration+0x19e>
			!= HAL_OK) {
		return ret;
 8000e00:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000e04:	e000      	b.n	8000e08 <QSPI_Configuration+0x1a0>
	}

	return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3740      	adds	r7, #64	@ 0x40
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	24000214 	.word	0x24000214

08000e14 <CSP_QSPI_WriteMemory>:

	return HAL_OK;
}

uint8_t CSP_QSPI_WriteMemory(uint8_t *buffer, uint32_t address,
		uint32_t buffer_size) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b096      	sub	sp, #88	@ 0x58
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]

	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	653b      	str	r3, [r7, #80]	@ 0x50

	//
	while (current_addr <= address) {
 8000e24:	e003      	b.n	8000e2e <CSP_QSPI_WriteMemory+0x1a>
		current_addr += MEMORY_PAGE_SIZE;
 8000e26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e28:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000e2c:	653b      	str	r3, [r7, #80]	@ 0x50
	while (current_addr <= address) {
 8000e2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d9f7      	bls.n	8000e26 <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
 8000e36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	657b      	str	r3, [r7, #84]	@ 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
 8000e3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d901      	bls.n	8000e4a <CSP_QSPI_WriteMemory+0x36>
		current_size = buffer_size;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	657b      	str	r3, [r7, #84]	@ 0x54
	}

	/* Initialize the adress variables */
	current_addr = address;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	653b      	str	r3, [r7, #80]	@ 0x50
	end_addr = address + buffer_size;
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	64fb      	str	r3, [r7, #76]	@ 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 8000e5c:	2332      	movs	r3, #50	@ 0x32
 8000e5e:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8000e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e64:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000e66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e6a:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e74:	2300      	movs	r3, #0
 8000e76:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DataMode = QSPI_DATA_4_LINES;
 8000e7c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.NbData = buffer_size;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address = address;
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
 8000e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e90:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
 8000e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e94:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if (current_size == 0) {
 8000e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <CSP_QSPI_WriteMemory+0x8c>
			return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	e03f      	b.n	8000f20 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
 8000ea0:	f7ff fe80 	bl	8000ba4 <QSPI_WriteEnable>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <CSP_QSPI_WriteMemory+0x9a>
			return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e038      	b.n	8000f20 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	481b      	ldr	r0, [pc, #108]	@ (8000f28 <CSP_QSPI_WriteMemory+0x114>)
 8000eba:	f003 f9fd 	bl	80042b8 <HAL_QSPI_Command>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <CSP_QSPI_WriteMemory+0xb4>
				!= HAL_OK) {

			return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e02b      	b.n	8000f20 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ecc:	68f9      	ldr	r1, [r7, #12]
 8000ece:	4816      	ldr	r0, [pc, #88]	@ (8000f28 <CSP_QSPI_WriteMemory+0x114>)
 8000ed0:	f003 fa50 	bl	8004374 <HAL_QSPI_Transmit>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <CSP_QSPI_WriteMemory+0xca>
				!= HAL_OK) {

			return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e020      	b.n	8000f20 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000ede:	f7ff fe15 	bl	8000b0c <QSPI_AutoPollingMemReady>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <CSP_QSPI_WriteMemory+0xd8>
			return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e019      	b.n	8000f20 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 8000eec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ef0:	4413      	add	r3, r2
 8000ef2:	653b      	str	r3, [r7, #80]	@ 0x50
		buffer += current_size;
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ef8:	4413      	add	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 8000efc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000efe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 8000f02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d203      	bcs.n	8000f10 <CSP_QSPI_WriteMemory+0xfc>
 8000f08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	e001      	b.n	8000f14 <CSP_QSPI_WriteMemory+0x100>
 8000f10:	f44f 7380 	mov.w	r3, #256	@ 0x100
		current_size =
 8000f14:	657b      	str	r3, [r7, #84]	@ 0x54
	} while (current_addr <= end_addr);
 8000f16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d9b7      	bls.n	8000e8e <CSP_QSPI_WriteMemory+0x7a>

	return HAL_OK;
 8000f1e:	2300      	movs	r3, #0

}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3758      	adds	r7, #88	@ 0x58
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	24000214 	.word	0x24000214

08000f2c <QSPI_ResetChip>:
	}
	HAL_Delay(100);
	return HAL_OK;
}

uint8_t QSPI_ResetChip() {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b090      	sub	sp, #64	@ 0x40
 8000f30:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 8000f32:	463b      	mov	r3, r7
 8000f34:	2238      	movs	r2, #56	@ 0x38
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f00d ffef 	bl	800ef1c <memset>
	uint32_t temp = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_StatusTypeDef ret;

	/* Enable Reset --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f46:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_ENABLE_CMD;
 8000f48:	2366      	movs	r3, #102	@ 0x66
 8000f4a:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f60:	2300      	movs	r3, #0
 8000f62:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000f68:	463b      	mov	r3, r7
 8000f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4820      	ldr	r0, [pc, #128]	@ (8000ff4 <QSPI_ResetChip+0xc8>)
 8000f72:	f003 f9a1 	bl	80042b8 <HAL_QSPI_Command>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8000f7c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d002      	beq.n	8000f8a <QSPI_ResetChip+0x5e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000f84:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000f88:	e02f      	b.n	8000fea <QSPI_ResetChip+0xbe>
	}

	/* Reset Device --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f8e:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8000f90:	2399      	movs	r3, #153	@ 0x99
 8000f92:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DummyCycles = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	@ 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480e      	ldr	r0, [pc, #56]	@ (8000ff4 <QSPI_ResetChip+0xc8>)
 8000fba:	f003 f97d 	bl	80042b8 <HAL_QSPI_Command>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8000fc4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <QSPI_ResetChip+0xa6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000fcc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000fd0:	e00b      	b.n	8000fea <QSPI_ResetChip+0xbe>
	}

	for (temp = 0; temp < 500000; temp++) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fd6:	e003      	b.n	8000fe0 <QSPI_ResetChip+0xb4>
		__NOP();
 8000fd8:	bf00      	nop
	for (temp = 0; temp < 500000; temp++) {
 8000fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fdc:	3301      	adds	r3, #1
 8000fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <QSPI_ResetChip+0xcc>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d9f7      	bls.n	8000fd8 <QSPI_ResetChip+0xac>
	}

	return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3740      	adds	r7, #64	@ 0x40
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	24000214 	.word	0x24000214
 8000ff8:	0007a11f 	.word	0x0007a11f

08000ffc <CSP_QSPI_Read>:

uint8_t CSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b092      	sub	sp, #72	@ 0x48
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the read command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001008:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
	s_command.Instruction = QUAD_IN_OUT_FAST_READ_CMD;
 800100e:	23eb      	movs	r3, #235	@ 0xeb
 8001010:	613b      	str	r3, [r7, #16]
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8001012:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8001018:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800101c:	61fb      	str	r3, [r7, #28]
	s_command.Address = ReadAddr;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	@ 0x30
	s_command.DataMode = QSPI_DATA_4_LINES;
 8001026:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800102a:	637b      	str	r3, [r7, #52]	@ 0x34
	s_command.DummyCycles = 6U;
 800102c:	2306      	movs	r3, #6
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
	s_command.NbData = Size;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	63bb      	str	r3, [r7, #56]	@ 0x38
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	63fb      	str	r3, [r7, #60]	@ 0x3c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001038:	2300      	movs	r3, #0
 800103a:	643b      	str	r3, [r7, #64]	@ 0x40
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800103c:	2300      	movs	r3, #0
 800103e:	647b      	str	r3, [r7, #68]	@ 0x44

	/* Configure the command */
	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001048:	4619      	mov	r1, r3
 800104a:	4816      	ldr	r0, [pc, #88]	@ (80010a4 <CSP_QSPI_Read+0xa8>)
 800104c:	f003 f934 	bl	80042b8 <HAL_QSPI_Command>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <CSP_QSPI_Read+0x5e>
			!= HAL_OK) {
		return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e01f      	b.n	800109a <CSP_QSPI_Read+0x9e>
	}

	/* Set S# timing for Read command */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <CSP_QSPI_Read+0xa8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <CSP_QSPI_Read+0xa8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800106c:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_5_CYCLE);

	/* Reception of the data */
	if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800106e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001072:	68f9      	ldr	r1, [r7, #12]
 8001074:	480b      	ldr	r0, [pc, #44]	@ (80010a4 <CSP_QSPI_Read+0xa8>)
 8001076:	f003 fa0f 	bl	8004498 <HAL_QSPI_Receive>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <CSP_QSPI_Read+0x88>
			!= HAL_OK) {
		return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e00a      	b.n	800109a <CSP_QSPI_Read+0x9e>
	}

	/* Restore S# timing for nonRead commands */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
 8001084:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <CSP_QSPI_Read+0xa8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800108e:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <CSP_QSPI_Read+0xa8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f442 62a0 	orr.w	r2, r2, #1280	@ 0x500
 8001096:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3748      	adds	r7, #72	@ 0x48
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	24000214 	.word	0x24000214

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_MspInit+0x30>)
 80010b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010b4:	4a08      	ldr	r2, [pc, #32]	@ (80010d8 <HAL_MspInit+0x30>)
 80010b6:	f043 0302 	orr.w	r3, r3, #2
 80010ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_MspInit+0x30>)
 80010c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	58024400 	.word	0x58024400

080010dc <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0bc      	sub	sp, #240	@ 0xf0
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	22c0      	movs	r2, #192	@ 0xc0
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00d ff0d 	bl	800ef1c <memset>
  if(hqspi->Instance==QUADSPI)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a55      	ldr	r2, [pc, #340]	@ (800125c <HAL_QSPI_MspInit+0x180>)
 8001108:	4293      	cmp	r3, r2
 800110a:	f040 80a3 	bne.w	8001254 <HAL_QSPI_MspInit+0x178>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800110e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800111a:	2300      	movs	r3, #0
 800111c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	4618      	mov	r0, r3
 8001124:	f004 fc8e 	bl	8005a44 <HAL_RCCEx_PeriphCLKConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800112e:	f7ff fc81 	bl	8000a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001132:	4b4b      	ldr	r3, [pc, #300]	@ (8001260 <HAL_QSPI_MspInit+0x184>)
 8001134:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001138:	4a49      	ldr	r2, [pc, #292]	@ (8001260 <HAL_QSPI_MspInit+0x184>)
 800113a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001142:	4b47      	ldr	r3, [pc, #284]	@ (8001260 <HAL_QSPI_MspInit+0x184>)
 8001144:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001150:	4b43      	ldr	r3, [pc, #268]	@ (8001260 <HAL_QSPI_MspInit+0x184>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001156:	4a42      	ldr	r2, [pc, #264]	@ (8001260 <HAL_QSPI_MspInit+0x184>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001160:	4b3f      	ldr	r3, [pc, #252]	@ (8001260 <HAL_QSPI_MspInit+0x184>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <HAL_QSPI_MspInit+0x184>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001174:	4a3a      	ldr	r2, [pc, #232]	@ (8001260 <HAL_QSPI_MspInit+0x184>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <HAL_QSPI_MspInit+0x184>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118c:	4b34      	ldr	r3, [pc, #208]	@ (8001260 <HAL_QSPI_MspInit+0x184>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001192:	4a33      	ldr	r2, [pc, #204]	@ (8001260 <HAL_QSPI_MspInit+0x184>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_QSPI_MspInit+0x184>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011aa:	2304      	movs	r3, #4
 80011ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011c2:	2309      	movs	r3, #9
 80011c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011cc:	4619      	mov	r1, r3
 80011ce:	4825      	ldr	r0, [pc, #148]	@ (8001264 <HAL_QSPI_MspInit+0x188>)
 80011d0:	f001 f9f4 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011d4:	2304      	movs	r3, #4
 80011d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011ec:	2309      	movs	r3, #9
 80011ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011f6:	4619      	mov	r1, r3
 80011f8:	481b      	ldr	r0, [pc, #108]	@ (8001268 <HAL_QSPI_MspInit+0x18c>)
 80011fa:	f001 f9df 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80011fe:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001218:	2309      	movs	r3, #9
 800121a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001222:	4619      	mov	r1, r3
 8001224:	4811      	ldr	r0, [pc, #68]	@ (800126c <HAL_QSPI_MspInit+0x190>)
 8001226:	f001 f9c9 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800122a:	2340      	movs	r3, #64	@ 0x40
 800122c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001242:	230a      	movs	r3, #10
 8001244:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	@ (8001268 <HAL_QSPI_MspInit+0x18c>)
 8001250:	f001 f9b4 	bl	80025bc <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001254:	bf00      	nop
 8001256:	37f0      	adds	r7, #240	@ 0xf0
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	52005000 	.word	0x52005000
 8001260:	58024400 	.word	0x58024400
 8001264:	58021000 	.word	0x58021000
 8001268:	58020400 	.word	0x58020400
 800126c:	58020c00 	.word	0x58020c00

08001270 <HAL_QSPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <HAL_QSPI_MspDeInit+0x44>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d114      	bne.n	80012ac <HAL_QSPI_MspDeInit+0x3c>
  {
    /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

    /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_QSPI_MspDeInit+0x48>)
 8001284:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001288:	4a0b      	ldr	r2, [pc, #44]	@ (80012b8 <HAL_QSPI_MspDeInit+0x48>)
 800128a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800128e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001292:	2104      	movs	r1, #4
 8001294:	4809      	ldr	r0, [pc, #36]	@ (80012bc <HAL_QSPI_MspDeInit+0x4c>)
 8001296:	f001 fb41 	bl	800291c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 800129a:	2144      	movs	r1, #68	@ 0x44
 800129c:	4808      	ldr	r0, [pc, #32]	@ (80012c0 <HAL_QSPI_MspDeInit+0x50>)
 800129e:	f001 fb3d 	bl	800291c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13);
 80012a2:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 80012a6:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <HAL_QSPI_MspDeInit+0x54>)
 80012a8:	f001 fb38 	bl	800291c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

    /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	52005000 	.word	0x52005000
 80012b8:	58024400 	.word	0x58024400
 80012bc:	58021000 	.word	0x58021000
 80012c0:	58020400 	.word	0x58020400
 80012c4:	58020c00 	.word	0x58020c00

080012c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001310 <HAL_TIM_Base_MspInit+0x48>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d116      	bne.n	8001308 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <HAL_TIM_Base_MspInit+0x4c>)
 80012dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001314 <HAL_TIM_Base_MspInit+0x4c>)
 80012e2:	f043 0320 	orr.w	r3, r3, #32
 80012e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_TIM_Base_MspInit+0x4c>)
 80012ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2037      	movs	r0, #55	@ 0x37
 80012fe:	f000 fb4c 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001302:	2037      	movs	r0, #55	@ 0x37
 8001304:	f000 fb63 	bl	80019ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40001400 	.word	0x40001400
 8001314:	58024400 	.word	0x58024400

08001318 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0ba      	sub	sp, #232	@ 0xe8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	22c0      	movs	r2, #192	@ 0xc0
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f00d fdef 	bl	800ef1c <memset>
  if(huart->Instance==USART1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a2b      	ldr	r2, [pc, #172]	@ (80013f0 <HAL_UART_MspInit+0xd8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d14e      	bne.n	80013e6 <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001348:	f04f 0201 	mov.w	r2, #1
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	4618      	mov	r0, r3
 8001360:	f004 fb70 	bl	8005a44 <HAL_RCCEx_PeriphCLKConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800136a:	f7ff fb63 	bl	8000a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <HAL_UART_MspInit+0xdc>)
 8001370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001374:	4a1f      	ldr	r2, [pc, #124]	@ (80013f4 <HAL_UART_MspInit+0xdc>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <HAL_UART_MspInit+0xdc>)
 8001380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <HAL_UART_MspInit+0xdc>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001392:	4a18      	ldr	r2, [pc, #96]	@ (80013f4 <HAL_UART_MspInit+0xdc>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800139c:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_UART_MspInit+0xdc>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013c4:	2307      	movs	r3, #7
 80013c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013ce:	4619      	mov	r1, r3
 80013d0:	4809      	ldr	r0, [pc, #36]	@ (80013f8 <HAL_UART_MspInit+0xe0>)
 80013d2:	f001 f8f3 	bl	80025bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2025      	movs	r0, #37	@ 0x25
 80013dc:	f000 fadd 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013e0:	2025      	movs	r0, #37	@ 0x25
 80013e2:	f000 faf4 	bl	80019ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80013e6:	bf00      	nop
 80013e8:	37e8      	adds	r7, #232	@ 0xe8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40011000 	.word	0x40011000
 80013f4:	58024400 	.word	0x58024400
 80013f8:	58020000 	.word	0x58020000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <NMI_Handler+0x4>

08001404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <MemManage_Handler+0x4>

08001414 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <UsageFault_Handler+0x4>

08001424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001452:	f000 f977 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <USART1_IRQHandler+0x10>)
 8001462:	f006 fc47 	bl	8007cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	240002ac 	.word	0x240002ac

08001470 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <TIM7_IRQHandler+0x10>)
 8001476:	f006 f968 	bl	800774a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	24000260 	.word	0x24000260

08001484 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001488:	4802      	ldr	r0, [pc, #8]	@ (8001494 <OTG_FS_IRQHandler+0x10>)
 800148a:	f001 fcab 	bl	8002de4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	24000a24 	.word	0x24000a24

08001498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800149c:	4b43      	ldr	r3, [pc, #268]	@ (80015ac <SystemInit+0x114>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014a2:	4a42      	ldr	r2, [pc, #264]	@ (80015ac <SystemInit+0x114>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ac:	4b40      	ldr	r3, [pc, #256]	@ (80015b0 <SystemInit+0x118>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	2b06      	cmp	r3, #6
 80014b6:	d807      	bhi.n	80014c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014b8:	4b3d      	ldr	r3, [pc, #244]	@ (80015b0 <SystemInit+0x118>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 030f 	bic.w	r3, r3, #15
 80014c0:	4a3b      	ldr	r2, [pc, #236]	@ (80015b0 <SystemInit+0x118>)
 80014c2:	f043 0307 	orr.w	r3, r3, #7
 80014c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014c8:	4b3a      	ldr	r3, [pc, #232]	@ (80015b4 <SystemInit+0x11c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a39      	ldr	r2, [pc, #228]	@ (80015b4 <SystemInit+0x11c>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014d4:	4b37      	ldr	r3, [pc, #220]	@ (80015b4 <SystemInit+0x11c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014da:	4b36      	ldr	r3, [pc, #216]	@ (80015b4 <SystemInit+0x11c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4935      	ldr	r1, [pc, #212]	@ (80015b4 <SystemInit+0x11c>)
 80014e0:	4b35      	ldr	r3, [pc, #212]	@ (80015b8 <SystemInit+0x120>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014e6:	4b32      	ldr	r3, [pc, #200]	@ (80015b0 <SystemInit+0x118>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014f2:	4b2f      	ldr	r3, [pc, #188]	@ (80015b0 <SystemInit+0x118>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 030f 	bic.w	r3, r3, #15
 80014fa:	4a2d      	ldr	r2, [pc, #180]	@ (80015b0 <SystemInit+0x118>)
 80014fc:	f043 0307 	orr.w	r3, r3, #7
 8001500:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001502:	4b2c      	ldr	r3, [pc, #176]	@ (80015b4 <SystemInit+0x11c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001508:	4b2a      	ldr	r3, [pc, #168]	@ (80015b4 <SystemInit+0x11c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800150e:	4b29      	ldr	r3, [pc, #164]	@ (80015b4 <SystemInit+0x11c>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001514:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <SystemInit+0x11c>)
 8001516:	4a29      	ldr	r2, [pc, #164]	@ (80015bc <SystemInit+0x124>)
 8001518:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800151a:	4b26      	ldr	r3, [pc, #152]	@ (80015b4 <SystemInit+0x11c>)
 800151c:	4a28      	ldr	r2, [pc, #160]	@ (80015c0 <SystemInit+0x128>)
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001520:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <SystemInit+0x11c>)
 8001522:	4a28      	ldr	r2, [pc, #160]	@ (80015c4 <SystemInit+0x12c>)
 8001524:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001526:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <SystemInit+0x11c>)
 8001528:	2200      	movs	r2, #0
 800152a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800152c:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <SystemInit+0x11c>)
 800152e:	4a25      	ldr	r2, [pc, #148]	@ (80015c4 <SystemInit+0x12c>)
 8001530:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001532:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <SystemInit+0x11c>)
 8001534:	2200      	movs	r2, #0
 8001536:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001538:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <SystemInit+0x11c>)
 800153a:	4a22      	ldr	r2, [pc, #136]	@ (80015c4 <SystemInit+0x12c>)
 800153c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800153e:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <SystemInit+0x11c>)
 8001540:	2200      	movs	r2, #0
 8001542:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001544:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <SystemInit+0x11c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1a      	ldr	r2, [pc, #104]	@ (80015b4 <SystemInit+0x11c>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001550:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <SystemInit+0x11c>)
 8001552:	2200      	movs	r2, #0
 8001554:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001556:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <SystemInit+0x130>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <SystemInit+0x134>)
 800155c:	4013      	ands	r3, r2
 800155e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001562:	d202      	bcs.n	800156a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001564:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <SystemInit+0x138>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <SystemInit+0x11c>)
 800156c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d113      	bne.n	80015a0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001578:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <SystemInit+0x11c>)
 800157a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800157e:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <SystemInit+0x11c>)
 8001580:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001584:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <SystemInit+0x13c>)
 800158a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800158e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <SystemInit+0x11c>)
 8001592:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001596:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <SystemInit+0x11c>)
 8001598:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800159c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	52002000 	.word	0x52002000
 80015b4:	58024400 	.word	0x58024400
 80015b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80015bc:	02020200 	.word	0x02020200
 80015c0:	01ff0000 	.word	0x01ff0000
 80015c4:	01010280 	.word	0x01010280
 80015c8:	5c001000 	.word	0x5c001000
 80015cc:	ffff0000 	.word	0xffff0000
 80015d0:	51008108 	.word	0x51008108
 80015d4:	52004000 	.word	0x52004000

080015d8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80015dc:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <ExitRun0Mode+0x2c>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <ExitRun0Mode+0x2c>)
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80015e8:	bf00      	nop
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <ExitRun0Mode+0x2c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f9      	beq.n	80015ea <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	58024800 	.word	0x58024800

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001608:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001644 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800160c:	f7ff ffe4 	bl	80015d8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001610:	f7ff ff42 	bl	8001498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001614:	480c      	ldr	r0, [pc, #48]	@ (8001648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001616:	490d      	ldr	r1, [pc, #52]	@ (800164c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001618:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800162c:	4c0a      	ldr	r4, [pc, #40]	@ (8001658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163a:	f00d fc77 	bl	800ef2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7fe ffe1 	bl	8000604 <main>
  bx  lr
 8001642:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001648:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800164c:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8001650:	0800f03c 	.word	0x0800f03c
  ldr r2, =_sbss
 8001654:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8001658:	24001f80 	.word	0x24001f80

0800165c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC3_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001666:	2003      	movs	r0, #3
 8001668:	f000 f98c 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800166c:	f004 f814 	bl	8005698 <HAL_RCC_GetSysClockFreq>
 8001670:	4602      	mov	r2, r0
 8001672:	4b15      	ldr	r3, [pc, #84]	@ (80016c8 <HAL_Init+0x68>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	4913      	ldr	r1, [pc, #76]	@ (80016cc <HAL_Init+0x6c>)
 800167e:	5ccb      	ldrb	r3, [r1, r3]
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <HAL_Init+0x68>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	4a0e      	ldr	r2, [pc, #56]	@ (80016cc <HAL_Init+0x6c>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
 80016a0:	4a0b      	ldr	r2, [pc, #44]	@ (80016d0 <HAL_Init+0x70>)
 80016a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016a4:	4a0b      	ldr	r2, [pc, #44]	@ (80016d4 <HAL_Init+0x74>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016aa:	200f      	movs	r0, #15
 80016ac:	f000 f814 	bl	80016d8 <HAL_InitTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e002      	b.n	80016c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ba:	f7ff fcf5 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	58024400 	.word	0x58024400
 80016cc:	0800efd0 	.word	0x0800efd0
 80016d0:	240000f8 	.word	0x240000f8
 80016d4:	240000f4 	.word	0x240000f4

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016e0:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <HAL_InitTick+0x60>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e021      	b.n	8001730 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016ec:	4b13      	ldr	r3, [pc, #76]	@ (800173c <HAL_InitTick+0x64>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <HAL_InitTick+0x60>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f971 	bl	80019ea <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f000 f93b 	bl	800199a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	@ (8001740 <HAL_InitTick+0x68>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	24000100 	.word	0x24000100
 800173c:	240000f4 	.word	0x240000f4
 8001740:	240000fc 	.word	0x240000fc

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	@ (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	24000100 	.word	0x24000100
 8001768:	24000540 	.word	0x24000540

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	@ (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	24000540 	.word	0x24000540

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <HAL_Delay+0x44>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffde 	bl	800176c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	24000100 	.word	0x24000100

080017cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017d0:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <HAL_GetREVID+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0c1b      	lsrs	r3, r3, #16
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	5c001000 	.word	0x5c001000

080017e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <__NVIC_SetPriorityGrouping+0x40>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	4313      	orrs	r3, r2
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <__NVIC_SetPriorityGrouping+0x40>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	05fa0000 	.word	0x05fa0000

0800182c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db0b      	blt.n	8001872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	f003 021f 	and.w	r2, r3, #31
 8001860:	4907      	ldr	r1, [pc, #28]	@ (8001880 <__NVIC_EnableIRQ+0x38>)
 8001862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	2001      	movs	r0, #1
 800186a:	fa00 f202 	lsl.w	r2, r0, r2
 800186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	@ (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	@ (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	@ 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	@ 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001950:	d301      	bcc.n	8001956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001952:	2301      	movs	r3, #1
 8001954:	e00f      	b.n	8001976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001956:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <SysTick_Config+0x40>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195e:	210f      	movs	r1, #15
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f7ff ff8e 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <SysTick_Config+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	4b04      	ldr	r3, [pc, #16]	@ (8001980 <SysTick_Config+0x40>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff29 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff40 	bl	800182c <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ff90 	bl	80018d8 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff5f 	bl	8001884 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff33 	bl	8001848 <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa4 	bl	8001940 <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a08:	f3bf 8f5f 	dmb	sy
}
 8001a0c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <HAL_MPU_Disable+0x28>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	4a06      	ldr	r2, [pc, #24]	@ (8001a2c <HAL_MPU_Disable+0x28>)
 8001a14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a18:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a1a:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <HAL_MPU_Disable+0x2c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00
 8001a30:	e000ed90 	.word	0xe000ed90

08001a34 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a6c <HAL_MPU_Enable+0x38>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <HAL_MPU_Enable+0x3c>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4a:	4a09      	ldr	r2, [pc, #36]	@ (8001a70 <HAL_MPU_Enable+0x3c>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a50:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a52:	f3bf 8f4f 	dsb	sy
}
 8001a56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a58:	f3bf 8f6f 	isb	sy
}
 8001a5c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed90 	.word	0xe000ed90
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	785a      	ldrb	r2, [r3, #1]
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a82:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a84:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	4a19      	ldr	r2, [pc, #100]	@ (8001af0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a8a:	f023 0301 	bic.w	r3, r3, #1
 8001a8e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a90:	4a17      	ldr	r2, [pc, #92]	@ (8001af0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7b1b      	ldrb	r3, [r3, #12]
 8001a9c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7adb      	ldrb	r3, [r3, #11]
 8001aa2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001aa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7a9b      	ldrb	r3, [r3, #10]
 8001aaa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001aac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7b5b      	ldrb	r3, [r3, #13]
 8001ab2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ab4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7b9b      	ldrb	r3, [r3, #14]
 8001aba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001abc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7bdb      	ldrb	r3, [r3, #15]
 8001ac2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ac4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7a5b      	ldrb	r3, [r3, #9]
 8001aca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001acc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7a1b      	ldrb	r3, [r3, #8]
 8001ad2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ad4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001adc:	4a04      	ldr	r2, [pc, #16]	@ (8001af0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ade:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ae0:	6113      	str	r3, [r2, #16]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed90 	.word	0xe000ed90

08001af4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff fe36 	bl	800176c <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e2dc      	b.n	80020c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d008      	beq.n	8001b2a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2280      	movs	r2, #128	@ 0x80
 8001b1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e2cd      	b.n	80020c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a76      	ldr	r2, [pc, #472]	@ (8001d08 <HAL_DMA_Abort+0x214>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d04a      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a74      	ldr	r2, [pc, #464]	@ (8001d0c <HAL_DMA_Abort+0x218>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d045      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a73      	ldr	r2, [pc, #460]	@ (8001d10 <HAL_DMA_Abort+0x21c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d040      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a71      	ldr	r2, [pc, #452]	@ (8001d14 <HAL_DMA_Abort+0x220>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d03b      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a70      	ldr	r2, [pc, #448]	@ (8001d18 <HAL_DMA_Abort+0x224>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d036      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a6e      	ldr	r2, [pc, #440]	@ (8001d1c <HAL_DMA_Abort+0x228>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d031      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a6d      	ldr	r2, [pc, #436]	@ (8001d20 <HAL_DMA_Abort+0x22c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d02c      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a6b      	ldr	r2, [pc, #428]	@ (8001d24 <HAL_DMA_Abort+0x230>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d027      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a6a      	ldr	r2, [pc, #424]	@ (8001d28 <HAL_DMA_Abort+0x234>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d022      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a68      	ldr	r2, [pc, #416]	@ (8001d2c <HAL_DMA_Abort+0x238>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01d      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a67      	ldr	r2, [pc, #412]	@ (8001d30 <HAL_DMA_Abort+0x23c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d018      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a65      	ldr	r2, [pc, #404]	@ (8001d34 <HAL_DMA_Abort+0x240>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a64      	ldr	r2, [pc, #400]	@ (8001d38 <HAL_DMA_Abort+0x244>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d00e      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a62      	ldr	r2, [pc, #392]	@ (8001d3c <HAL_DMA_Abort+0x248>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d009      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a61      	ldr	r2, [pc, #388]	@ (8001d40 <HAL_DMA_Abort+0x24c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d004      	beq.n	8001bca <HAL_DMA_Abort+0xd6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a5f      	ldr	r2, [pc, #380]	@ (8001d44 <HAL_DMA_Abort+0x250>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_DMA_Abort+0xda>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_DMA_Abort+0xdc>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 021e 	bic.w	r2, r2, #30
 8001be2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695a      	ldr	r2, [r3, #20]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bf2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e00a      	b.n	8001c12 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 020e 	bic.w	r2, r2, #14
 8001c0a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a3c      	ldr	r2, [pc, #240]	@ (8001d08 <HAL_DMA_Abort+0x214>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d072      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a3a      	ldr	r2, [pc, #232]	@ (8001d0c <HAL_DMA_Abort+0x218>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d06d      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a39      	ldr	r2, [pc, #228]	@ (8001d10 <HAL_DMA_Abort+0x21c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d068      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a37      	ldr	r2, [pc, #220]	@ (8001d14 <HAL_DMA_Abort+0x220>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d063      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a36      	ldr	r2, [pc, #216]	@ (8001d18 <HAL_DMA_Abort+0x224>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d05e      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a34      	ldr	r2, [pc, #208]	@ (8001d1c <HAL_DMA_Abort+0x228>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d059      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a33      	ldr	r2, [pc, #204]	@ (8001d20 <HAL_DMA_Abort+0x22c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d054      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a31      	ldr	r2, [pc, #196]	@ (8001d24 <HAL_DMA_Abort+0x230>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d04f      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a30      	ldr	r2, [pc, #192]	@ (8001d28 <HAL_DMA_Abort+0x234>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d04a      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2e      	ldr	r2, [pc, #184]	@ (8001d2c <HAL_DMA_Abort+0x238>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d045      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d30 <HAL_DMA_Abort+0x23c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d040      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a2b      	ldr	r2, [pc, #172]	@ (8001d34 <HAL_DMA_Abort+0x240>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d03b      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8001d38 <HAL_DMA_Abort+0x244>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d036      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a28      	ldr	r2, [pc, #160]	@ (8001d3c <HAL_DMA_Abort+0x248>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d031      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a27      	ldr	r2, [pc, #156]	@ (8001d40 <HAL_DMA_Abort+0x24c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d02c      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a25      	ldr	r2, [pc, #148]	@ (8001d44 <HAL_DMA_Abort+0x250>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d027      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a24      	ldr	r2, [pc, #144]	@ (8001d48 <HAL_DMA_Abort+0x254>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d022      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a22      	ldr	r2, [pc, #136]	@ (8001d4c <HAL_DMA_Abort+0x258>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01d      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a21      	ldr	r2, [pc, #132]	@ (8001d50 <HAL_DMA_Abort+0x25c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d018      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d54 <HAL_DMA_Abort+0x260>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1e      	ldr	r2, [pc, #120]	@ (8001d58 <HAL_DMA_Abort+0x264>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00e      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d5c <HAL_DMA_Abort+0x268>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d009      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d60 <HAL_DMA_Abort+0x26c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d004      	beq.n	8001d02 <HAL_DMA_Abort+0x20e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a19      	ldr	r2, [pc, #100]	@ (8001d64 <HAL_DMA_Abort+0x270>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d132      	bne.n	8001d68 <HAL_DMA_Abort+0x274>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e031      	b.n	8001d6a <HAL_DMA_Abort+0x276>
 8001d06:	bf00      	nop
 8001d08:	40020010 	.word	0x40020010
 8001d0c:	40020028 	.word	0x40020028
 8001d10:	40020040 	.word	0x40020040
 8001d14:	40020058 	.word	0x40020058
 8001d18:	40020070 	.word	0x40020070
 8001d1c:	40020088 	.word	0x40020088
 8001d20:	400200a0 	.word	0x400200a0
 8001d24:	400200b8 	.word	0x400200b8
 8001d28:	40020410 	.word	0x40020410
 8001d2c:	40020428 	.word	0x40020428
 8001d30:	40020440 	.word	0x40020440
 8001d34:	40020458 	.word	0x40020458
 8001d38:	40020470 	.word	0x40020470
 8001d3c:	40020488 	.word	0x40020488
 8001d40:	400204a0 	.word	0x400204a0
 8001d44:	400204b8 	.word	0x400204b8
 8001d48:	58025408 	.word	0x58025408
 8001d4c:	5802541c 	.word	0x5802541c
 8001d50:	58025430 	.word	0x58025430
 8001d54:	58025444 	.word	0x58025444
 8001d58:	58025458 	.word	0x58025458
 8001d5c:	5802546c 	.word	0x5802546c
 8001d60:	58025480 	.word	0x58025480
 8001d64:	58025494 	.word	0x58025494
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6d      	ldr	r2, [pc, #436]	@ (8001f38 <HAL_DMA_Abort+0x444>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d04a      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a6b      	ldr	r2, [pc, #428]	@ (8001f3c <HAL_DMA_Abort+0x448>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d045      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6a      	ldr	r2, [pc, #424]	@ (8001f40 <HAL_DMA_Abort+0x44c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d040      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a68      	ldr	r2, [pc, #416]	@ (8001f44 <HAL_DMA_Abort+0x450>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d03b      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a67      	ldr	r2, [pc, #412]	@ (8001f48 <HAL_DMA_Abort+0x454>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d036      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a65      	ldr	r2, [pc, #404]	@ (8001f4c <HAL_DMA_Abort+0x458>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d031      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a64      	ldr	r2, [pc, #400]	@ (8001f50 <HAL_DMA_Abort+0x45c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d02c      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a62      	ldr	r2, [pc, #392]	@ (8001f54 <HAL_DMA_Abort+0x460>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d027      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a61      	ldr	r2, [pc, #388]	@ (8001f58 <HAL_DMA_Abort+0x464>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d022      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a5f      	ldr	r2, [pc, #380]	@ (8001f5c <HAL_DMA_Abort+0x468>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01d      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a5e      	ldr	r2, [pc, #376]	@ (8001f60 <HAL_DMA_Abort+0x46c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d018      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a5c      	ldr	r2, [pc, #368]	@ (8001f64 <HAL_DMA_Abort+0x470>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5b      	ldr	r2, [pc, #364]	@ (8001f68 <HAL_DMA_Abort+0x474>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00e      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a59      	ldr	r2, [pc, #356]	@ (8001f6c <HAL_DMA_Abort+0x478>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d009      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a58      	ldr	r2, [pc, #352]	@ (8001f70 <HAL_DMA_Abort+0x47c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d004      	beq.n	8001e1e <HAL_DMA_Abort+0x32a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a56      	ldr	r2, [pc, #344]	@ (8001f74 <HAL_DMA_Abort+0x480>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d108      	bne.n	8001e30 <HAL_DMA_Abort+0x33c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	e007      	b.n	8001e40 <HAL_DMA_Abort+0x34c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e40:	e013      	b.n	8001e6a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e42:	f7ff fc93 	bl	800176c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d90c      	bls.n	8001e6a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e12d      	b.n	80020c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1e5      	bne.n	8001e42 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f38 <HAL_DMA_Abort+0x444>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d04a      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a2d      	ldr	r2, [pc, #180]	@ (8001f3c <HAL_DMA_Abort+0x448>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d045      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f40 <HAL_DMA_Abort+0x44c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d040      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2a      	ldr	r2, [pc, #168]	@ (8001f44 <HAL_DMA_Abort+0x450>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d03b      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a29      	ldr	r2, [pc, #164]	@ (8001f48 <HAL_DMA_Abort+0x454>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d036      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a27      	ldr	r2, [pc, #156]	@ (8001f4c <HAL_DMA_Abort+0x458>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d031      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a26      	ldr	r2, [pc, #152]	@ (8001f50 <HAL_DMA_Abort+0x45c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d02c      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a24      	ldr	r2, [pc, #144]	@ (8001f54 <HAL_DMA_Abort+0x460>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d027      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a23      	ldr	r2, [pc, #140]	@ (8001f58 <HAL_DMA_Abort+0x464>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d022      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a21      	ldr	r2, [pc, #132]	@ (8001f5c <HAL_DMA_Abort+0x468>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01d      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a20      	ldr	r2, [pc, #128]	@ (8001f60 <HAL_DMA_Abort+0x46c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d018      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f64 <HAL_DMA_Abort+0x470>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <HAL_DMA_Abort+0x474>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00e      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f6c <HAL_DMA_Abort+0x478>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1a      	ldr	r2, [pc, #104]	@ (8001f70 <HAL_DMA_Abort+0x47c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_DMA_Abort+0x422>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a18      	ldr	r2, [pc, #96]	@ (8001f74 <HAL_DMA_Abort+0x480>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_DMA_Abort+0x426>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_DMA_Abort+0x428>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d02b      	beq.n	8001f78 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f24:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	223f      	movs	r2, #63	@ 0x3f
 8001f30:	409a      	lsls	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	e02a      	b.n	8001f8e <HAL_DMA_Abort+0x49a>
 8001f38:	40020010 	.word	0x40020010
 8001f3c:	40020028 	.word	0x40020028
 8001f40:	40020040 	.word	0x40020040
 8001f44:	40020058 	.word	0x40020058
 8001f48:	40020070 	.word	0x40020070
 8001f4c:	40020088 	.word	0x40020088
 8001f50:	400200a0 	.word	0x400200a0
 8001f54:	400200b8 	.word	0x400200b8
 8001f58:	40020410 	.word	0x40020410
 8001f5c:	40020428 	.word	0x40020428
 8001f60:	40020440 	.word	0x40020440
 8001f64:	40020458 	.word	0x40020458
 8001f68:	40020470 	.word	0x40020470
 8001f6c:	40020488 	.word	0x40020488
 8001f70:	400204a0 	.word	0x400204a0
 8001f74:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	2201      	movs	r2, #1
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a4f      	ldr	r2, [pc, #316]	@ (80020d0 <HAL_DMA_Abort+0x5dc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d072      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a4d      	ldr	r2, [pc, #308]	@ (80020d4 <HAL_DMA_Abort+0x5e0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d06d      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a4c      	ldr	r2, [pc, #304]	@ (80020d8 <HAL_DMA_Abort+0x5e4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d068      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80020dc <HAL_DMA_Abort+0x5e8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d063      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a49      	ldr	r2, [pc, #292]	@ (80020e0 <HAL_DMA_Abort+0x5ec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d05e      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a47      	ldr	r2, [pc, #284]	@ (80020e4 <HAL_DMA_Abort+0x5f0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d059      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a46      	ldr	r2, [pc, #280]	@ (80020e8 <HAL_DMA_Abort+0x5f4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d054      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a44      	ldr	r2, [pc, #272]	@ (80020ec <HAL_DMA_Abort+0x5f8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d04f      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a43      	ldr	r2, [pc, #268]	@ (80020f0 <HAL_DMA_Abort+0x5fc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d04a      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a41      	ldr	r2, [pc, #260]	@ (80020f4 <HAL_DMA_Abort+0x600>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d045      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a40      	ldr	r2, [pc, #256]	@ (80020f8 <HAL_DMA_Abort+0x604>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d040      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a3e      	ldr	r2, [pc, #248]	@ (80020fc <HAL_DMA_Abort+0x608>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d03b      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a3d      	ldr	r2, [pc, #244]	@ (8002100 <HAL_DMA_Abort+0x60c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d036      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a3b      	ldr	r2, [pc, #236]	@ (8002104 <HAL_DMA_Abort+0x610>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d031      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a3a      	ldr	r2, [pc, #232]	@ (8002108 <HAL_DMA_Abort+0x614>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d02c      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a38      	ldr	r2, [pc, #224]	@ (800210c <HAL_DMA_Abort+0x618>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d027      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a37      	ldr	r2, [pc, #220]	@ (8002110 <HAL_DMA_Abort+0x61c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d022      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a35      	ldr	r2, [pc, #212]	@ (8002114 <HAL_DMA_Abort+0x620>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01d      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a34      	ldr	r2, [pc, #208]	@ (8002118 <HAL_DMA_Abort+0x624>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d018      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a32      	ldr	r2, [pc, #200]	@ (800211c <HAL_DMA_Abort+0x628>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a31      	ldr	r2, [pc, #196]	@ (8002120 <HAL_DMA_Abort+0x62c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00e      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a2f      	ldr	r2, [pc, #188]	@ (8002124 <HAL_DMA_Abort+0x630>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d009      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2e      	ldr	r2, [pc, #184]	@ (8002128 <HAL_DMA_Abort+0x634>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d004      	beq.n	800207e <HAL_DMA_Abort+0x58a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2c      	ldr	r2, [pc, #176]	@ (800212c <HAL_DMA_Abort+0x638>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_DMA_Abort+0x58e>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_DMA_Abort+0x590>
 8002082:	2300      	movs	r3, #0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d015      	beq.n	80020b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002090:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40020010 	.word	0x40020010
 80020d4:	40020028 	.word	0x40020028
 80020d8:	40020040 	.word	0x40020040
 80020dc:	40020058 	.word	0x40020058
 80020e0:	40020070 	.word	0x40020070
 80020e4:	40020088 	.word	0x40020088
 80020e8:	400200a0 	.word	0x400200a0
 80020ec:	400200b8 	.word	0x400200b8
 80020f0:	40020410 	.word	0x40020410
 80020f4:	40020428 	.word	0x40020428
 80020f8:	40020440 	.word	0x40020440
 80020fc:	40020458 	.word	0x40020458
 8002100:	40020470 	.word	0x40020470
 8002104:	40020488 	.word	0x40020488
 8002108:	400204a0 	.word	0x400204a0
 800210c:	400204b8 	.word	0x400204b8
 8002110:	58025408 	.word	0x58025408
 8002114:	5802541c 	.word	0x5802541c
 8002118:	58025430 	.word	0x58025430
 800211c:	58025444 	.word	0x58025444
 8002120:	58025458 	.word	0x58025458
 8002124:	5802546c 	.word	0x5802546c
 8002128:	58025480 	.word	0x58025480
 800212c:	58025494 	.word	0x58025494

08002130 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e237      	b.n	80025b2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d004      	beq.n	8002158 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2280      	movs	r2, #128	@ 0x80
 8002152:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e22c      	b.n	80025b2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a5c      	ldr	r2, [pc, #368]	@ (80022d0 <HAL_DMA_Abort_IT+0x1a0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d04a      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a5b      	ldr	r2, [pc, #364]	@ (80022d4 <HAL_DMA_Abort_IT+0x1a4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d045      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a59      	ldr	r2, [pc, #356]	@ (80022d8 <HAL_DMA_Abort_IT+0x1a8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d040      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a58      	ldr	r2, [pc, #352]	@ (80022dc <HAL_DMA_Abort_IT+0x1ac>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d03b      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a56      	ldr	r2, [pc, #344]	@ (80022e0 <HAL_DMA_Abort_IT+0x1b0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d036      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a55      	ldr	r2, [pc, #340]	@ (80022e4 <HAL_DMA_Abort_IT+0x1b4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d031      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a53      	ldr	r2, [pc, #332]	@ (80022e8 <HAL_DMA_Abort_IT+0x1b8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d02c      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a52      	ldr	r2, [pc, #328]	@ (80022ec <HAL_DMA_Abort_IT+0x1bc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d027      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a50      	ldr	r2, [pc, #320]	@ (80022f0 <HAL_DMA_Abort_IT+0x1c0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d022      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a4f      	ldr	r2, [pc, #316]	@ (80022f4 <HAL_DMA_Abort_IT+0x1c4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d01d      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a4d      	ldr	r2, [pc, #308]	@ (80022f8 <HAL_DMA_Abort_IT+0x1c8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d018      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a4c      	ldr	r2, [pc, #304]	@ (80022fc <HAL_DMA_Abort_IT+0x1cc>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002300 <HAL_DMA_Abort_IT+0x1d0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00e      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a49      	ldr	r2, [pc, #292]	@ (8002304 <HAL_DMA_Abort_IT+0x1d4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a47      	ldr	r2, [pc, #284]	@ (8002308 <HAL_DMA_Abort_IT+0x1d8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_DMA_Abort_IT+0xc8>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a46      	ldr	r2, [pc, #280]	@ (800230c <HAL_DMA_Abort_IT+0x1dc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_DMA_Abort_IT+0xcc>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_DMA_Abort_IT+0xce>
 80021fc:	2300      	movs	r3, #0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8086 	beq.w	8002310 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2204      	movs	r2, #4
 8002208:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a2f      	ldr	r2, [pc, #188]	@ (80022d0 <HAL_DMA_Abort_IT+0x1a0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d04a      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a2e      	ldr	r2, [pc, #184]	@ (80022d4 <HAL_DMA_Abort_IT+0x1a4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d045      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a2c      	ldr	r2, [pc, #176]	@ (80022d8 <HAL_DMA_Abort_IT+0x1a8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d040      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2b      	ldr	r2, [pc, #172]	@ (80022dc <HAL_DMA_Abort_IT+0x1ac>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d03b      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a29      	ldr	r2, [pc, #164]	@ (80022e0 <HAL_DMA_Abort_IT+0x1b0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d036      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a28      	ldr	r2, [pc, #160]	@ (80022e4 <HAL_DMA_Abort_IT+0x1b4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d031      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a26      	ldr	r2, [pc, #152]	@ (80022e8 <HAL_DMA_Abort_IT+0x1b8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d02c      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a25      	ldr	r2, [pc, #148]	@ (80022ec <HAL_DMA_Abort_IT+0x1bc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d027      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a23      	ldr	r2, [pc, #140]	@ (80022f0 <HAL_DMA_Abort_IT+0x1c0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d022      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a22      	ldr	r2, [pc, #136]	@ (80022f4 <HAL_DMA_Abort_IT+0x1c4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d01d      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a20      	ldr	r2, [pc, #128]	@ (80022f8 <HAL_DMA_Abort_IT+0x1c8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d018      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1f      	ldr	r2, [pc, #124]	@ (80022fc <HAL_DMA_Abort_IT+0x1cc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d013      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1d      	ldr	r2, [pc, #116]	@ (8002300 <HAL_DMA_Abort_IT+0x1d0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00e      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1c      	ldr	r2, [pc, #112]	@ (8002304 <HAL_DMA_Abort_IT+0x1d4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d009      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1a      	ldr	r2, [pc, #104]	@ (8002308 <HAL_DMA_Abort_IT+0x1d8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d004      	beq.n	80022ac <HAL_DMA_Abort_IT+0x17c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a19      	ldr	r2, [pc, #100]	@ (800230c <HAL_DMA_Abort_IT+0x1dc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d108      	bne.n	80022be <HAL_DMA_Abort_IT+0x18e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e178      	b.n	80025b0 <HAL_DMA_Abort_IT+0x480>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e16f      	b.n	80025b0 <HAL_DMA_Abort_IT+0x480>
 80022d0:	40020010 	.word	0x40020010
 80022d4:	40020028 	.word	0x40020028
 80022d8:	40020040 	.word	0x40020040
 80022dc:	40020058 	.word	0x40020058
 80022e0:	40020070 	.word	0x40020070
 80022e4:	40020088 	.word	0x40020088
 80022e8:	400200a0 	.word	0x400200a0
 80022ec:	400200b8 	.word	0x400200b8
 80022f0:	40020410 	.word	0x40020410
 80022f4:	40020428 	.word	0x40020428
 80022f8:	40020440 	.word	0x40020440
 80022fc:	40020458 	.word	0x40020458
 8002300:	40020470 	.word	0x40020470
 8002304:	40020488 	.word	0x40020488
 8002308:	400204a0 	.word	0x400204a0
 800230c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 020e 	bic.w	r2, r2, #14
 800231e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6c      	ldr	r2, [pc, #432]	@ (80024d8 <HAL_DMA_Abort_IT+0x3a8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d04a      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6b      	ldr	r2, [pc, #428]	@ (80024dc <HAL_DMA_Abort_IT+0x3ac>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d045      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a69      	ldr	r2, [pc, #420]	@ (80024e0 <HAL_DMA_Abort_IT+0x3b0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d040      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a68      	ldr	r2, [pc, #416]	@ (80024e4 <HAL_DMA_Abort_IT+0x3b4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d03b      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a66      	ldr	r2, [pc, #408]	@ (80024e8 <HAL_DMA_Abort_IT+0x3b8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d036      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a65      	ldr	r2, [pc, #404]	@ (80024ec <HAL_DMA_Abort_IT+0x3bc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d031      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a63      	ldr	r2, [pc, #396]	@ (80024f0 <HAL_DMA_Abort_IT+0x3c0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d02c      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a62      	ldr	r2, [pc, #392]	@ (80024f4 <HAL_DMA_Abort_IT+0x3c4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d027      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a60      	ldr	r2, [pc, #384]	@ (80024f8 <HAL_DMA_Abort_IT+0x3c8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d022      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a5f      	ldr	r2, [pc, #380]	@ (80024fc <HAL_DMA_Abort_IT+0x3cc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d01d      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a5d      	ldr	r2, [pc, #372]	@ (8002500 <HAL_DMA_Abort_IT+0x3d0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d018      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a5c      	ldr	r2, [pc, #368]	@ (8002504 <HAL_DMA_Abort_IT+0x3d4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d013      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a5a      	ldr	r2, [pc, #360]	@ (8002508 <HAL_DMA_Abort_IT+0x3d8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00e      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a59      	ldr	r2, [pc, #356]	@ (800250c <HAL_DMA_Abort_IT+0x3dc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d009      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a57      	ldr	r2, [pc, #348]	@ (8002510 <HAL_DMA_Abort_IT+0x3e0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x290>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a56      	ldr	r2, [pc, #344]	@ (8002514 <HAL_DMA_Abort_IT+0x3e4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d108      	bne.n	80023d2 <HAL_DMA_Abort_IT+0x2a2>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e007      	b.n	80023e2 <HAL_DMA_Abort_IT+0x2b2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a3c      	ldr	r2, [pc, #240]	@ (80024d8 <HAL_DMA_Abort_IT+0x3a8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d072      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a3a      	ldr	r2, [pc, #232]	@ (80024dc <HAL_DMA_Abort_IT+0x3ac>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d06d      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a39      	ldr	r2, [pc, #228]	@ (80024e0 <HAL_DMA_Abort_IT+0x3b0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d068      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a37      	ldr	r2, [pc, #220]	@ (80024e4 <HAL_DMA_Abort_IT+0x3b4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d063      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a36      	ldr	r2, [pc, #216]	@ (80024e8 <HAL_DMA_Abort_IT+0x3b8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d05e      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a34      	ldr	r2, [pc, #208]	@ (80024ec <HAL_DMA_Abort_IT+0x3bc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d059      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a33      	ldr	r2, [pc, #204]	@ (80024f0 <HAL_DMA_Abort_IT+0x3c0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d054      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a31      	ldr	r2, [pc, #196]	@ (80024f4 <HAL_DMA_Abort_IT+0x3c4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d04f      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a30      	ldr	r2, [pc, #192]	@ (80024f8 <HAL_DMA_Abort_IT+0x3c8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d04a      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a2e      	ldr	r2, [pc, #184]	@ (80024fc <HAL_DMA_Abort_IT+0x3cc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d045      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a2d      	ldr	r2, [pc, #180]	@ (8002500 <HAL_DMA_Abort_IT+0x3d0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d040      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a2b      	ldr	r2, [pc, #172]	@ (8002504 <HAL_DMA_Abort_IT+0x3d4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d03b      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a2a      	ldr	r2, [pc, #168]	@ (8002508 <HAL_DMA_Abort_IT+0x3d8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d036      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a28      	ldr	r2, [pc, #160]	@ (800250c <HAL_DMA_Abort_IT+0x3dc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d031      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a27      	ldr	r2, [pc, #156]	@ (8002510 <HAL_DMA_Abort_IT+0x3e0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d02c      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a25      	ldr	r2, [pc, #148]	@ (8002514 <HAL_DMA_Abort_IT+0x3e4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d027      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a24      	ldr	r2, [pc, #144]	@ (8002518 <HAL_DMA_Abort_IT+0x3e8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a22      	ldr	r2, [pc, #136]	@ (800251c <HAL_DMA_Abort_IT+0x3ec>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01d      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a21      	ldr	r2, [pc, #132]	@ (8002520 <HAL_DMA_Abort_IT+0x3f0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d018      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002524 <HAL_DMA_Abort_IT+0x3f4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002528 <HAL_DMA_Abort_IT+0x3f8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00e      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1c      	ldr	r2, [pc, #112]	@ (800252c <HAL_DMA_Abort_IT+0x3fc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002530 <HAL_DMA_Abort_IT+0x400>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d004      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x3a2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a19      	ldr	r2, [pc, #100]	@ (8002534 <HAL_DMA_Abort_IT+0x404>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d132      	bne.n	8002538 <HAL_DMA_Abort_IT+0x408>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e031      	b.n	800253a <HAL_DMA_Abort_IT+0x40a>
 80024d6:	bf00      	nop
 80024d8:	40020010 	.word	0x40020010
 80024dc:	40020028 	.word	0x40020028
 80024e0:	40020040 	.word	0x40020040
 80024e4:	40020058 	.word	0x40020058
 80024e8:	40020070 	.word	0x40020070
 80024ec:	40020088 	.word	0x40020088
 80024f0:	400200a0 	.word	0x400200a0
 80024f4:	400200b8 	.word	0x400200b8
 80024f8:	40020410 	.word	0x40020410
 80024fc:	40020428 	.word	0x40020428
 8002500:	40020440 	.word	0x40020440
 8002504:	40020458 	.word	0x40020458
 8002508:	40020470 	.word	0x40020470
 800250c:	40020488 	.word	0x40020488
 8002510:	400204a0 	.word	0x400204a0
 8002514:	400204b8 	.word	0x400204b8
 8002518:	58025408 	.word	0x58025408
 800251c:	5802541c 	.word	0x5802541c
 8002520:	58025430 	.word	0x58025430
 8002524:	58025444 	.word	0x58025444
 8002528:	58025458 	.word	0x58025458
 800252c:	5802546c 	.word	0x5802546c
 8002530:	58025480 	.word	0x58025480
 8002534:	58025494 	.word	0x58025494
 8002538:	2300      	movs	r3, #0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d028      	beq.n	8002590 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800254c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002552:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	2201      	movs	r2, #1
 800255e:	409a      	lsls	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800256c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00c      	beq.n	8002590 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002580:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002584:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800258e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	@ 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025ca:	4b89      	ldr	r3, [pc, #548]	@ (80027f0 <HAL_GPIO_Init+0x234>)
 80025cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025ce:	e194      	b.n	80028fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 8186 	beq.w	80028f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d005      	beq.n	8002600 <HAL_GPIO_Init+0x44>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d130      	bne.n	8002662 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002636:	2201      	movs	r2, #1
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0201 	and.w	r2, r3, #1
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b03      	cmp	r3, #3
 800266c:	d017      	beq.n	800269e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d123      	bne.n	80026f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3208      	adds	r2, #8
 80026ec:	69b9      	ldr	r1, [r7, #24]
 80026ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	2203      	movs	r2, #3
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0203 	and.w	r2, r3, #3
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80e0 	beq.w	80028f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002734:	4b2f      	ldr	r3, [pc, #188]	@ (80027f4 <HAL_GPIO_Init+0x238>)
 8002736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800273a:	4a2e      	ldr	r2, [pc, #184]	@ (80027f4 <HAL_GPIO_Init+0x238>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002744:	4b2b      	ldr	r3, [pc, #172]	@ (80027f4 <HAL_GPIO_Init+0x238>)
 8002746:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002752:	4a29      	ldr	r2, [pc, #164]	@ (80027f8 <HAL_GPIO_Init+0x23c>)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	3302      	adds	r3, #2
 800275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	220f      	movs	r2, #15
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a20      	ldr	r2, [pc, #128]	@ (80027fc <HAL_GPIO_Init+0x240>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d052      	beq.n	8002824 <HAL_GPIO_Init+0x268>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a1f      	ldr	r2, [pc, #124]	@ (8002800 <HAL_GPIO_Init+0x244>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d031      	beq.n	80027ea <HAL_GPIO_Init+0x22e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a1e      	ldr	r2, [pc, #120]	@ (8002804 <HAL_GPIO_Init+0x248>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d02b      	beq.n	80027e6 <HAL_GPIO_Init+0x22a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a1d      	ldr	r2, [pc, #116]	@ (8002808 <HAL_GPIO_Init+0x24c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d025      	beq.n	80027e2 <HAL_GPIO_Init+0x226>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a1c      	ldr	r2, [pc, #112]	@ (800280c <HAL_GPIO_Init+0x250>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01f      	beq.n	80027de <HAL_GPIO_Init+0x222>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002810 <HAL_GPIO_Init+0x254>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d019      	beq.n	80027da <HAL_GPIO_Init+0x21e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002814 <HAL_GPIO_Init+0x258>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x21a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a19      	ldr	r2, [pc, #100]	@ (8002818 <HAL_GPIO_Init+0x25c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x216>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a18      	ldr	r2, [pc, #96]	@ (800281c <HAL_GPIO_Init+0x260>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x212>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <HAL_GPIO_Init+0x264>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x20e>
 80027c6:	2309      	movs	r3, #9
 80027c8:	e02d      	b.n	8002826 <HAL_GPIO_Init+0x26a>
 80027ca:	230a      	movs	r3, #10
 80027cc:	e02b      	b.n	8002826 <HAL_GPIO_Init+0x26a>
 80027ce:	2308      	movs	r3, #8
 80027d0:	e029      	b.n	8002826 <HAL_GPIO_Init+0x26a>
 80027d2:	2307      	movs	r3, #7
 80027d4:	e027      	b.n	8002826 <HAL_GPIO_Init+0x26a>
 80027d6:	2306      	movs	r3, #6
 80027d8:	e025      	b.n	8002826 <HAL_GPIO_Init+0x26a>
 80027da:	2305      	movs	r3, #5
 80027dc:	e023      	b.n	8002826 <HAL_GPIO_Init+0x26a>
 80027de:	2304      	movs	r3, #4
 80027e0:	e021      	b.n	8002826 <HAL_GPIO_Init+0x26a>
 80027e2:	2303      	movs	r3, #3
 80027e4:	e01f      	b.n	8002826 <HAL_GPIO_Init+0x26a>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e01d      	b.n	8002826 <HAL_GPIO_Init+0x26a>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e01b      	b.n	8002826 <HAL_GPIO_Init+0x26a>
 80027ee:	bf00      	nop
 80027f0:	58000080 	.word	0x58000080
 80027f4:	58024400 	.word	0x58024400
 80027f8:	58000400 	.word	0x58000400
 80027fc:	58020000 	.word	0x58020000
 8002800:	58020400 	.word	0x58020400
 8002804:	58020800 	.word	0x58020800
 8002808:	58020c00 	.word	0x58020c00
 800280c:	58021000 	.word	0x58021000
 8002810:	58021400 	.word	0x58021400
 8002814:	58021800 	.word	0x58021800
 8002818:	58021c00 	.word	0x58021c00
 800281c:	58022000 	.word	0x58022000
 8002820:	58022400 	.word	0x58022400
 8002824:	2300      	movs	r3, #0
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	f002 0203 	and.w	r2, r2, #3
 800282c:	0092      	lsls	r2, r2, #2
 800282e:	4093      	lsls	r3, r2
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002836:	4938      	ldr	r1, [pc, #224]	@ (8002918 <HAL_GPIO_Init+0x35c>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800286a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002898:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	3301      	adds	r3, #1
 80028f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	f47f ae63 	bne.w	80025d0 <HAL_GPIO_Init+0x14>
  }
}
 800290a:	bf00      	nop
 800290c:	bf00      	nop
 800290e:	3724      	adds	r7, #36	@ 0x24
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	58000400 	.word	0x58000400

0800291c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800292a:	4b75      	ldr	r3, [pc, #468]	@ (8002b00 <HAL_GPIO_DeInit+0x1e4>)
 800292c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800292e:	e0d9      	b.n	8002ae4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002930:	2201      	movs	r2, #1
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	4013      	ands	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80cc 	beq.w	8002ade <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002946:	4a6f      	ldr	r2, [pc, #444]	@ (8002b04 <HAL_GPIO_DeInit+0x1e8>)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3302      	adds	r3, #2
 800294e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002952:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	220f      	movs	r2, #15
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	4013      	ands	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a67      	ldr	r2, [pc, #412]	@ (8002b08 <HAL_GPIO_DeInit+0x1ec>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d037      	beq.n	80029e0 <HAL_GPIO_DeInit+0xc4>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a66      	ldr	r2, [pc, #408]	@ (8002b0c <HAL_GPIO_DeInit+0x1f0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d031      	beq.n	80029dc <HAL_GPIO_DeInit+0xc0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a65      	ldr	r2, [pc, #404]	@ (8002b10 <HAL_GPIO_DeInit+0x1f4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d02b      	beq.n	80029d8 <HAL_GPIO_DeInit+0xbc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a64      	ldr	r2, [pc, #400]	@ (8002b14 <HAL_GPIO_DeInit+0x1f8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d025      	beq.n	80029d4 <HAL_GPIO_DeInit+0xb8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a63      	ldr	r2, [pc, #396]	@ (8002b18 <HAL_GPIO_DeInit+0x1fc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d01f      	beq.n	80029d0 <HAL_GPIO_DeInit+0xb4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a62      	ldr	r2, [pc, #392]	@ (8002b1c <HAL_GPIO_DeInit+0x200>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d019      	beq.n	80029cc <HAL_GPIO_DeInit+0xb0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a61      	ldr	r2, [pc, #388]	@ (8002b20 <HAL_GPIO_DeInit+0x204>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d013      	beq.n	80029c8 <HAL_GPIO_DeInit+0xac>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a60      	ldr	r2, [pc, #384]	@ (8002b24 <HAL_GPIO_DeInit+0x208>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00d      	beq.n	80029c4 <HAL_GPIO_DeInit+0xa8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002b28 <HAL_GPIO_DeInit+0x20c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d007      	beq.n	80029c0 <HAL_GPIO_DeInit+0xa4>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a5e      	ldr	r2, [pc, #376]	@ (8002b2c <HAL_GPIO_DeInit+0x210>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d101      	bne.n	80029bc <HAL_GPIO_DeInit+0xa0>
 80029b8:	2309      	movs	r3, #9
 80029ba:	e012      	b.n	80029e2 <HAL_GPIO_DeInit+0xc6>
 80029bc:	230a      	movs	r3, #10
 80029be:	e010      	b.n	80029e2 <HAL_GPIO_DeInit+0xc6>
 80029c0:	2308      	movs	r3, #8
 80029c2:	e00e      	b.n	80029e2 <HAL_GPIO_DeInit+0xc6>
 80029c4:	2307      	movs	r3, #7
 80029c6:	e00c      	b.n	80029e2 <HAL_GPIO_DeInit+0xc6>
 80029c8:	2306      	movs	r3, #6
 80029ca:	e00a      	b.n	80029e2 <HAL_GPIO_DeInit+0xc6>
 80029cc:	2305      	movs	r3, #5
 80029ce:	e008      	b.n	80029e2 <HAL_GPIO_DeInit+0xc6>
 80029d0:	2304      	movs	r3, #4
 80029d2:	e006      	b.n	80029e2 <HAL_GPIO_DeInit+0xc6>
 80029d4:	2303      	movs	r3, #3
 80029d6:	e004      	b.n	80029e2 <HAL_GPIO_DeInit+0xc6>
 80029d8:	2302      	movs	r3, #2
 80029da:	e002      	b.n	80029e2 <HAL_GPIO_DeInit+0xc6>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <HAL_GPIO_DeInit+0xc6>
 80029e0:	2300      	movs	r3, #0
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	f002 0203 	and.w	r2, r2, #3
 80029e8:	0092      	lsls	r2, r2, #2
 80029ea:	4093      	lsls	r3, r2
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d136      	bne.n	8002a60 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	401a      	ands	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	401a      	ands	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a2e:	4013      	ands	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002a42:	4a30      	ldr	r2, [pc, #192]	@ (8002b04 <HAL_GPIO_DeInit+0x1e8>)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	089b      	lsrs	r3, r3, #2
 8002a48:	3302      	adds	r3, #2
 8002a4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	482c      	ldr	r0, [pc, #176]	@ (8002b04 <HAL_GPIO_DeInit+0x1e8>)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	400a      	ands	r2, r1
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	2103      	movs	r1, #3
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	08da      	lsrs	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	220f      	movs	r2, #15
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	08d2      	lsrs	r2, r2, #3
 8002a94:	4019      	ands	r1, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	401a      	ands	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2103      	movs	r1, #3
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	401a      	ands	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f47f af1f 	bne.w	8002930 <HAL_GPIO_DeInit+0x14>
  }
}
 8002af2:	bf00      	nop
 8002af4:	bf00      	nop
 8002af6:	371c      	adds	r7, #28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	58000080 	.word	0x58000080
 8002b04:	58000400 	.word	0x58000400
 8002b08:	58020000 	.word	0x58020000
 8002b0c:	58020400 	.word	0x58020400
 8002b10:	58020800 	.word	0x58020800
 8002b14:	58020c00 	.word	0x58020c00
 8002b18:	58021000 	.word	0x58021000
 8002b1c:	58021400 	.word	0x58021400
 8002b20:	58021800 	.word	0x58021800
 8002b24:	58021c00 	.word	0x58021c00
 8002b28:	58022000 	.word	0x58022000
 8002b2c:	58022400 	.word	0x58022400

08002b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b40:	787b      	ldrb	r3, [r7, #1]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b4c:	e003      	b.n	8002b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	041a      	lsls	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	619a      	str	r2, [r3, #24]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af02      	add	r7, sp, #8
 8002b68:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0fe      	b.n	8002d72 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d106      	bne.n	8002b8e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f00b fe61 	bl	800e850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2203      	movs	r2, #3
 8002b92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f006 feab 	bl	80098f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7c1a      	ldrb	r2, [r3, #16]
 8002ba8:	f88d 2000 	strb.w	r2, [sp]
 8002bac:	3304      	adds	r3, #4
 8002bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb0:	f006 fd7c 	bl	80096ac <USB_CoreInit>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0d5      	b.n	8002d72 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f006 fea3 	bl	8009918 <USB_SetCurrentMode>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0c6      	b.n	8002d72 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e04a      	b.n	8002c80 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3315      	adds	r3, #21
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3314      	adds	r3, #20
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	b298      	uxth	r0, r3
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	332e      	adds	r3, #46	@ 0x2e
 8002c26:	4602      	mov	r2, r0
 8002c28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3318      	adds	r3, #24
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	331c      	adds	r3, #28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3320      	adds	r3, #32
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c66:	7bfa      	ldrb	r2, [r7, #15]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	3324      	adds	r3, #36	@ 0x24
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	791b      	ldrb	r3, [r3, #4]
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d3af      	bcc.n	8002bea <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	e044      	b.n	8002d1a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	3301      	adds	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	791b      	ldrb	r3, [r3, #4]
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d3b5      	bcc.n	8002c90 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7c1a      	ldrb	r2, [r3, #16]
 8002d2c:	f88d 2000 	strb.w	r2, [sp]
 8002d30:	3304      	adds	r3, #4
 8002d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d34:	f006 fe3c 	bl	80099b0 <USB_DevInit>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2202      	movs	r2, #2
 8002d42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e013      	b.n	8002d72 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7b1b      	ldrb	r3, [r3, #12]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d102      	bne.n	8002d66 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f001 f99b 	bl	800409c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f007 fe7f 	bl	800aa6e <USB_DevDisconnect>

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_PCD_Start+0x1c>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e022      	b.n	8002ddc <HAL_PCD_Start+0x62>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d009      	beq.n	8002dbe <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d105      	bne.n	8002dbe <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f006 fd86 	bl	80098d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f007 fe2d 	bl	800aa2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b08d      	sub	sp, #52	@ 0x34
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f007 feeb 	bl	800abd6 <USB_GetMode>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 84b9 	bne.w	800377a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f007 fe4f 	bl	800aab0 <USB_ReadInterrupts>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 84af 	beq.w	8003778 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f007 fe3c 	bl	800aab0 <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d107      	bne.n	8002e52 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f002 0202 	and.w	r2, r2, #2
 8002e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f007 fe2a 	bl	800aab0 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d161      	bne.n	8002f2a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0210 	bic.w	r2, r2, #16
 8002e74:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f003 020f 	and.w	r2, r3, #15
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	3304      	adds	r3, #4
 8002e94:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002e9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ea0:	d124      	bne.n	8002eec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d035      	beq.n	8002f1a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	6a38      	ldr	r0, [r7, #32]
 8002ec2:	f007 fc61 	bl	800a788 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed2:	441a      	add	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee4:	441a      	add	r2, r3
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	615a      	str	r2, [r3, #20]
 8002eea:	e016      	b.n	8002f1a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002ef2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ef6:	d110      	bne.n	8002f1a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002efe:	2208      	movs	r2, #8
 8002f00:	4619      	mov	r1, r3
 8002f02:	6a38      	ldr	r0, [r7, #32]
 8002f04:	f007 fc40 	bl	800a788 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f14:	441a      	add	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0210 	orr.w	r2, r2, #16
 8002f28:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f007 fdbe 	bl	800aab0 <USB_ReadInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f3e:	f040 80a7 	bne.w	8003090 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f007 fdc3 	bl	800aad6 <USB_ReadDevAllOutEpInterrupt>
 8002f50:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002f52:	e099      	b.n	8003088 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 808e 	beq.w	800307c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f007 fde7 	bl	800ab3e <USB_ReadDevOutEPInterrupt>
 8002f70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00c      	beq.n	8002f96 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fefd 	bl	8003d90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00c      	beq.n	8002fba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fac:	461a      	mov	r2, r3
 8002fae:	2308      	movs	r3, #8
 8002fb0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 ffd3 	bl	8003f60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2310      	movs	r3, #16
 8002fd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d030      	beq.n	8003042 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe8:	2b80      	cmp	r3, #128	@ 0x80
 8002fea:	d109      	bne.n	8003000 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ffa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ffe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003002:	4613      	mov	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	3304      	adds	r3, #4
 8003014:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	78db      	ldrb	r3, [r3, #3]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d108      	bne.n	8003030 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2200      	movs	r2, #0
 8003022:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f00b fd44 	bl	800eab8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800303c:	461a      	mov	r2, r3
 800303e:	2302      	movs	r3, #2
 8003040:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003058:	461a      	mov	r2, r3
 800305a:	2320      	movs	r3, #32
 800305c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003074:	461a      	mov	r2, r3
 8003076:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800307a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	3301      	adds	r3, #1
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003084:	085b      	lsrs	r3, r3, #1
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	f47f af62 	bne.w	8002f54 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f007 fd0b 	bl	800aab0 <USB_ReadInterrupts>
 800309a:	4603      	mov	r3, r0
 800309c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030a4:	f040 80db 	bne.w	800325e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f007 fd2c 	bl	800ab0a <USB_ReadDevAllInEpInterrupt>
 80030b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80030b8:	e0cd      	b.n	8003256 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80c2 	beq.w	800324a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f007 fd52 	bl	800ab7a <USB_ReadDevInEPInterrupt>
 80030d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d057      	beq.n	8003192 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	2201      	movs	r2, #1
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69f9      	ldr	r1, [r7, #28]
 80030fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003102:	4013      	ands	r3, r2
 8003104:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003112:	461a      	mov	r2, r3
 8003114:	2301      	movs	r3, #1
 8003116:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	799b      	ldrb	r3, [r3, #6]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d132      	bne.n	8003186 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	3320      	adds	r3, #32
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4403      	add	r3, r0
 8003140:	331c      	adds	r3, #28
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4419      	add	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4403      	add	r3, r0
 8003154:	3320      	adds	r3, #32
 8003156:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	2b00      	cmp	r3, #0
 800315c:	d113      	bne.n	8003186 <HAL_PCD_IRQHandler+0x3a2>
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3324      	adds	r3, #36	@ 0x24
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d108      	bne.n	8003186 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800317e:	461a      	mov	r2, r3
 8003180:	2101      	movs	r1, #1
 8003182:	f007 fd5b 	bl	800ac3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	b2db      	uxtb	r3, r3
 800318a:	4619      	mov	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f00b fc0e 	bl	800e9ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031a8:	461a      	mov	r2, r3
 80031aa:	2308      	movs	r3, #8
 80031ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031c4:	461a      	mov	r2, r3
 80031c6:	2310      	movs	r3, #16
 80031c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031e0:	461a      	mov	r2, r3
 80031e2:	2340      	movs	r3, #64	@ 0x40
 80031e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d023      	beq.n	8003238 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031f2:	6a38      	ldr	r0, [r7, #32]
 80031f4:	f006 fd3a 	bl	8009c6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	3310      	adds	r3, #16
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4413      	add	r3, r2
 8003208:	3304      	adds	r3, #4
 800320a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	78db      	ldrb	r3, [r3, #3]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d108      	bne.n	8003226 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2200      	movs	r2, #0
 8003218:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	b2db      	uxtb	r3, r3
 800321e:	4619      	mov	r1, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f00b fc5b 	bl	800eadc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003232:	461a      	mov	r2, r3
 8003234:	2302      	movs	r3, #2
 8003236:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003242:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fd17 	bl	8003c78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	3301      	adds	r3, #1
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003258:	2b00      	cmp	r3, #0
 800325a:	f47f af2e 	bne.w	80030ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f007 fc24 	bl	800aab0 <USB_ReadInterrupts>
 8003268:	4603      	mov	r3, r0
 800326a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800326e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003272:	d122      	bne.n	80032ba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003282:	f023 0301 	bic.w	r3, r3, #1
 8003286:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800328e:	2b01      	cmp	r3, #1
 8003290:	d108      	bne.n	80032a4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800329a:	2100      	movs	r1, #0
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 ff21 	bl	80040e4 <HAL_PCDEx_LPM_Callback>
 80032a2:	e002      	b.n	80032aa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f00b fbf9 	bl	800ea9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80032b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f007 fbf6 	bl	800aab0 <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032ce:	d112      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d102      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f00b fbb5 	bl	800ea50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80032f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f007 fbd8 	bl	800aab0 <USB_ReadInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003306:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800330a:	d121      	bne.n	8003350 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800331a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003322:	2b00      	cmp	r3, #0
 8003324:	d111      	bne.n	800334a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	f003 020f 	and.w	r2, r3, #15
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003340:	2101      	movs	r1, #1
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fece 	bl	80040e4 <HAL_PCDEx_LPM_Callback>
 8003348:	e002      	b.n	8003350 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f00b fb80 	bl	800ea50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f007 fbab 	bl	800aab0 <USB_ReadInterrupts>
 800335a:	4603      	mov	r3, r0
 800335c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003364:	f040 80b7 	bne.w	80034d6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2110      	movs	r1, #16
 8003382:	4618      	mov	r0, r3
 8003384:	f006 fc72 	bl	8009c6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003388:	2300      	movs	r3, #0
 800338a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800338c:	e046      	b.n	800341c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800338e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800339a:	461a      	mov	r2, r3
 800339c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033b2:	0151      	lsls	r1, r2, #5
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	440a      	add	r2, r1
 80033b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ce:	461a      	mov	r2, r3
 80033d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e6:	0151      	lsls	r1, r2, #5
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	440a      	add	r2, r1
 80033ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003406:	0151      	lsls	r1, r2, #5
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	440a      	add	r2, r1
 800340c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003410:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003414:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003418:	3301      	adds	r3, #1
 800341a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	791b      	ldrb	r3, [r3, #4]
 8003420:	461a      	mov	r2, r3
 8003422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003424:	4293      	cmp	r3, r2
 8003426:	d3b2      	bcc.n	800338e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003436:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800343a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7bdb      	ldrb	r3, [r3, #15]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d016      	beq.n	8003472 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800344a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003454:	f043 030b 	orr.w	r3, r3, #11
 8003458:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800346a:	f043 030b 	orr.w	r3, r3, #11
 800346e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003470:	e015      	b.n	800349e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003480:	4619      	mov	r1, r3
 8003482:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003486:	4313      	orrs	r3, r2
 8003488:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003498:	f043 030b 	orr.w	r3, r3, #11
 800349c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034ac:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80034b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034c0:	461a      	mov	r2, r3
 80034c2:	f007 fbbb 	bl	800ac3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80034d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f007 fae8 	bl	800aab0 <USB_ReadInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ea:	d123      	bne.n	8003534 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f007 fb7f 	bl	800abf4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f006 fc2f 	bl	8009d5e <USB_GetDevSpeed>
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681c      	ldr	r4, [r3, #0]
 800350c:	f002 fa3e 	bl	800598c <HAL_RCC_GetHCLKFreq>
 8003510:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003516:	461a      	mov	r2, r3
 8003518:	4620      	mov	r0, r4
 800351a:	f006 f939 	bl	8009790 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f00b fa6d 	bl	800e9fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003532:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f007 fab9 	bl	800aab0 <USB_ReadInterrupts>
 800353e:	4603      	mov	r3, r0
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d10a      	bne.n	800355e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f00b fa4a 	bl	800e9e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f002 0208 	and.w	r2, r2, #8
 800355c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f007 faa4 	bl	800aab0 <USB_ReadInterrupts>
 8003568:	4603      	mov	r3, r0
 800356a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356e:	2b80      	cmp	r3, #128	@ 0x80
 8003570:	d123      	bne.n	80035ba <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800357e:	2301      	movs	r3, #1
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
 8003582:	e014      	b.n	80035ae <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	4619      	mov	r1, r3
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fb0a 	bl	8003bbc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	3301      	adds	r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	791b      	ldrb	r3, [r3, #4]
 80035b2:	461a      	mov	r2, r3
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d3e4      	bcc.n	8003584 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f007 fa76 	bl	800aab0 <USB_ReadInterrupts>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ce:	d13c      	bne.n	800364a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035d0:	2301      	movs	r3, #1
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d4:	e02b      	b.n	800362e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3318      	adds	r3, #24
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d115      	bne.n	8003628 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da12      	bge.n	8003628 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	3317      	adds	r3, #23
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800361e:	b2db      	uxtb	r3, r3
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 faca 	bl	8003bbc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	3301      	adds	r3, #1
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	791b      	ldrb	r3, [r3, #4]
 8003632:	461a      	mov	r2, r3
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	4293      	cmp	r3, r2
 8003638:	d3cd      	bcc.n	80035d6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f007 fa2e 	bl	800aab0 <USB_ReadInterrupts>
 8003654:	4603      	mov	r3, r0
 8003656:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800365a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800365e:	d156      	bne.n	800370e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003660:	2301      	movs	r3, #1
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
 8003664:	e045      	b.n	80036f2 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d12e      	bne.n	80036ec <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800368e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003690:	2b00      	cmp	r3, #0
 8003692:	da2b      	bge.n	80036ec <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	0c1a      	lsrs	r2, r3, #16
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800369e:	4053      	eors	r3, r2
 80036a0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d121      	bne.n	80036ec <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036e8:	6053      	str	r3, [r2, #4]
            break;
 80036ea:	e008      	b.n	80036fe <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	3301      	adds	r3, #1
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	791b      	ldrb	r3, [r3, #4]
 80036f6:	461a      	mov	r2, r3
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d3b3      	bcc.n	8003666 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800370c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f007 f9cc 	bl	800aab0 <USB_ReadInterrupts>
 8003718:	4603      	mov	r3, r0
 800371a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003722:	d10a      	bne.n	800373a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f00b f9eb 	bl	800eb00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f007 f9b6 	bl	800aab0 <USB_ReadInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d115      	bne.n	800377a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f00b f9db 	bl	800eb1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	e000      	b.n	800377a <HAL_PCD_IRQHandler+0x996>
      return;
 8003778:	bf00      	nop
    }
  }
}
 800377a:	3734      	adds	r7, #52	@ 0x34
 800377c:	46bd      	mov	sp, r7
 800377e:	bd90      	pop	{r4, r7, pc}

08003780 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_PCD_SetAddress+0x1a>
 8003796:	2302      	movs	r3, #2
 8003798:	e012      	b.n	80037c0 <HAL_PCD_SetAddress+0x40>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	78fa      	ldrb	r2, [r7, #3]
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f007 f915 	bl	800a9e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	70fb      	strb	r3, [r7, #3]
 80037da:	460b      	mov	r3, r1
 80037dc:	803b      	strh	r3, [r7, #0]
 80037de:	4613      	mov	r3, r2
 80037e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	da0f      	bge.n	800380e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	f003 020f 	and.w	r2, r3, #15
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	3310      	adds	r3, #16
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	3304      	adds	r3, #4
 8003804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	705a      	strb	r2, [r3, #1]
 800380c:	e00f      	b.n	800382e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	f003 020f 	and.w	r2, r3, #15
 8003814:	4613      	mov	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4413      	add	r3, r2
 8003824:	3304      	adds	r3, #4
 8003826:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800383a:	883b      	ldrh	r3, [r7, #0]
 800383c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	78ba      	ldrb	r2, [r7, #2]
 8003848:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800385c:	78bb      	ldrb	r3, [r7, #2]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d102      	bne.n	8003868 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_PCD_EP_Open+0xae>
 8003872:	2302      	movs	r3, #2
 8003874:	e00e      	b.n	8003894 <HAL_PCD_EP_Open+0xcc>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68f9      	ldr	r1, [r7, #12]
 8003884:	4618      	mov	r0, r3
 8003886:	f006 fa8f 	bl	8009da8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003892:	7afb      	ldrb	r3, [r7, #11]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	da0f      	bge.n	80038d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	f003 020f 	and.w	r2, r3, #15
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	3310      	adds	r3, #16
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4413      	add	r3, r2
 80038c4:	3304      	adds	r3, #4
 80038c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	705a      	strb	r2, [r3, #1]
 80038ce:	e00f      	b.n	80038f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	f003 020f 	and.w	r2, r3, #15
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4413      	add	r3, r2
 80038e6:	3304      	adds	r3, #4
 80038e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_PCD_EP_Close+0x6e>
 8003906:	2302      	movs	r3, #2
 8003908:	e00e      	b.n	8003928 <HAL_PCD_EP_Close+0x8c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	4618      	mov	r0, r3
 800391a:	f006 facd 	bl	8009eb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	460b      	mov	r3, r1
 800393e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003940:	7afb      	ldrb	r3, [r7, #11]
 8003942:	f003 020f 	and.w	r2, r3, #15
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	3304      	adds	r3, #4
 8003958:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2200      	movs	r2, #0
 800396a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2200      	movs	r2, #0
 8003970:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003972:	7afb      	ldrb	r3, [r7, #11]
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	b2da      	uxtb	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	799b      	ldrb	r3, [r3, #6]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d102      	bne.n	800398c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	799b      	ldrb	r3, [r3, #6]
 8003994:	461a      	mov	r2, r3
 8003996:	6979      	ldr	r1, [r7, #20]
 8003998:	f006 fb6a 	bl	800a070 <USB_EPStartXfer>

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	f003 020f 	and.w	r2, r3, #15
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80039c8:	681b      	ldr	r3, [r3, #0]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	460b      	mov	r3, r1
 80039e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e6:	7afb      	ldrb	r3, [r7, #11]
 80039e8:	f003 020f 	and.w	r2, r3, #15
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	3310      	adds	r3, #16
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	3304      	adds	r3, #4
 80039fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2201      	movs	r2, #1
 8003a14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a16:	7afb      	ldrb	r3, [r7, #11]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	799b      	ldrb	r3, [r3, #6]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d102      	bne.n	8003a30 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	799b      	ldrb	r3, [r3, #6]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	f006 fb18 	bl	800a070 <USB_EPStartXfer>

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	7912      	ldrb	r2, [r2, #4]
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e04f      	b.n	8003b08 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	da0f      	bge.n	8003a90 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	3310      	adds	r3, #16
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	705a      	strb	r2, [r3, #1]
 8003a8e:	e00d      	b.n	8003aac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_PCD_EP_SetStall+0x82>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e01d      	b.n	8003b08 <HAL_PCD_EP_SetStall+0xbe>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68f9      	ldr	r1, [r7, #12]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f006 feac 	bl	800a838 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	7999      	ldrb	r1, [r3, #6]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003af8:	461a      	mov	r2, r3
 8003afa:	f007 f89f 	bl	800ac3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	7912      	ldrb	r2, [r2, #4]
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e042      	b.n	8003bb4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	da0f      	bge.n	8003b56 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	f003 020f 	and.w	r2, r3, #15
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	3310      	adds	r3, #16
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	705a      	strb	r2, [r3, #1]
 8003b54:	e00f      	b.n	8003b76 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	f003 020f 	and.w	r2, r3, #15
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_PCD_EP_ClrStall+0x86>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e00e      	b.n	8003bb4 <HAL_PCD_EP_ClrStall+0xa4>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68f9      	ldr	r1, [r7, #12]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f006 feb5 	bl	800a914 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da0c      	bge.n	8003bea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	f003 020f 	and.w	r2, r3, #15
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	3310      	adds	r3, #16
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	3304      	adds	r3, #4
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	e00c      	b.n	8003c04 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	3304      	adds	r3, #4
 8003c02:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68f9      	ldr	r1, [r7, #12]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f006 fcd4 	bl	800a5b8 <USB_EPStopXfer>
 8003c10:	4603      	mov	r3, r0
 8003c12:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c14:	7afb      	ldrb	r3, [r7, #11]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	460b      	mov	r3, r1
 8003c28:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_PCD_EP_Flush+0x1a>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e01b      	b.n	8003c70 <HAL_PCD_EP_Flush+0x52>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8003c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	da09      	bge.n	8003c5c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f006 f809 	bl	8009c6c <USB_FlushTxFifo>
 8003c5a:	e004      	b.n	8003c66 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f006 f835 	bl	8009cd0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	@ 0x28
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	3310      	adds	r3, #16
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d901      	bls.n	8003cb0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e06b      	b.n	8003d88 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d902      	bls.n	8003ccc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	3303      	adds	r3, #3
 8003cd0:	089b      	lsrs	r3, r3, #2
 8003cd2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cd4:	e02a      	b.n	8003d2c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d902      	bls.n	8003cf2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3303      	adds	r3, #3
 8003cf6:	089b      	lsrs	r3, r3, #2
 8003cf8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	68d9      	ldr	r1, [r3, #12]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	6978      	ldr	r0, [r7, #20]
 8003d10:	f006 fcfc 	bl	800a70c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	441a      	add	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	441a      	add	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d809      	bhi.n	8003d56 <PCD_WriteEmptyTxFifo+0xde>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d203      	bcs.n	8003d56 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1bf      	bne.n	8003cd6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d811      	bhi.n	8003d86 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	2201      	movs	r2, #1
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	6939      	ldr	r1, [r7, #16]
 8003d7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d82:	4013      	ands	r3, r2
 8003d84:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3720      	adds	r7, #32
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	333c      	adds	r3, #60	@ 0x3c
 8003da8:	3304      	adds	r3, #4
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	799b      	ldrb	r3, [r3, #6]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d17b      	bne.n	8003ebe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d015      	beq.n	8003dfc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	4a61      	ldr	r2, [pc, #388]	@ (8003f58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	f240 80b9 	bls.w	8003f4c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80b3 	beq.w	8003f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df2:	461a      	mov	r2, r3
 8003df4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003df8:	6093      	str	r3, [r2, #8]
 8003dfa:	e0a7      	b.n	8003f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e12:	461a      	mov	r2, r3
 8003e14:	2320      	movs	r3, #32
 8003e16:	6093      	str	r3, [r2, #8]
 8003e18:	e098      	b.n	8003f4c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f040 8093 	bne.w	8003f4c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	4a4b      	ldr	r2, [pc, #300]	@ (8003f58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d90f      	bls.n	8003e4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e44:	461a      	mov	r2, r3
 8003e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e4a:	6093      	str	r3, [r2, #8]
 8003e4c:	e07e      	b.n	8003f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	3304      	adds	r3, #4
 8003e62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a1a      	ldr	r2, [r3, #32]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	0159      	lsls	r1, r3, #5
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	440b      	add	r3, r1
 8003e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7a:	1ad2      	subs	r2, r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d114      	bne.n	8003eb0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	f006 fece 	bl	800ac3c <USB_EP0_OutStart>
 8003ea0:	e006      	b.n	8003eb0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	441a      	add	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f00a fd5e 	bl	800e978 <HAL_PCD_DataOutStageCallback>
 8003ebc:	e046      	b.n	8003f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	4a26      	ldr	r2, [pc, #152]	@ (8003f5c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d124      	bne.n	8003f10 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003edc:	461a      	mov	r2, r3
 8003ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ee2:	6093      	str	r3, [r2, #8]
 8003ee4:	e032      	b.n	8003f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efc:	461a      	mov	r2, r3
 8003efe:	2320      	movs	r3, #32
 8003f00:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	4619      	mov	r1, r3
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f00a fd35 	bl	800e978 <HAL_PCD_DataOutStageCallback>
 8003f0e:	e01d      	b.n	8003f4c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d114      	bne.n	8003f40 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d108      	bne.n	8003f40 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f38:	461a      	mov	r2, r3
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	f006 fe7e 	bl	800ac3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	4619      	mov	r1, r3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f00a fd16 	bl	800e978 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	4f54300a 	.word	0x4f54300a
 8003f5c:	4f54310a 	.word	0x4f54310a

08003f60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	333c      	adds	r3, #60	@ 0x3c
 8003f78:	3304      	adds	r3, #4
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4a15      	ldr	r2, [pc, #84]	@ (8003fe8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d90e      	bls.n	8003fb4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d009      	beq.n	8003fb4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fac:	461a      	mov	r2, r3
 8003fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fb2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f00a fccd 	bl	800e954 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d90c      	bls.n	8003fdc <PCD_EP_OutSetupPacket_int+0x7c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	799b      	ldrb	r3, [r3, #6]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d108      	bne.n	8003fdc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	f006 fe30 	bl	800ac3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	4f54300a 	.word	0x4f54300a

08003fec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	70fb      	strb	r3, [r7, #3]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d107      	bne.n	800401a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800400a:	883b      	ldrh	r3, [r7, #0]
 800400c:	0419      	lsls	r1, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	430a      	orrs	r2, r1
 8004016:	629a      	str	r2, [r3, #40]	@ 0x28
 8004018:	e028      	b.n	800406c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004020:	0c1b      	lsrs	r3, r3, #16
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	4413      	add	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e00d      	b.n	800404a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	3340      	adds	r3, #64	@ 0x40
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4413      	add	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	3301      	adds	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	3b01      	subs	r3, #1
 8004050:	429a      	cmp	r2, r3
 8004052:	d3ec      	bcc.n	800402e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004054:	883b      	ldrh	r3, [r7, #0]
 8004056:	0418      	lsls	r0, r3, #16
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6819      	ldr	r1, [r3, #0]
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	3b01      	subs	r3, #1
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	4302      	orrs	r2, r0
 8004064:	3340      	adds	r3, #64	@ 0x40
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	460b      	mov	r3, r1
 8004084:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040ca:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	10000003 	.word	0x10000003

080040e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004104:	4b19      	ldr	r3, [pc, #100]	@ (800416c <HAL_PWREx_ConfigSupply+0x70>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b04      	cmp	r3, #4
 800410e:	d00a      	beq.n	8004126 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004110:	4b16      	ldr	r3, [pc, #88]	@ (800416c <HAL_PWREx_ConfigSupply+0x70>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d001      	beq.n	8004122 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e01f      	b.n	8004162 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e01d      	b.n	8004162 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004126:	4b11      	ldr	r3, [pc, #68]	@ (800416c <HAL_PWREx_ConfigSupply+0x70>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f023 0207 	bic.w	r2, r3, #7
 800412e:	490f      	ldr	r1, [pc, #60]	@ (800416c <HAL_PWREx_ConfigSupply+0x70>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4313      	orrs	r3, r2
 8004134:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004136:	f7fd fb19 	bl	800176c <HAL_GetTick>
 800413a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800413c:	e009      	b.n	8004152 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800413e:	f7fd fb15 	bl	800176c <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800414c:	d901      	bls.n	8004152 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e007      	b.n	8004162 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <HAL_PWREx_ConfigSupply+0x70>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800415a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800415e:	d1ee      	bne.n	800413e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	58024800 	.word	0x58024800

08004170 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004174:	4b05      	ldr	r3, [pc, #20]	@ (800418c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a04      	ldr	r2, [pc, #16]	@ (800418c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800417a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800417e:	60d3      	str	r3, [r2, #12]
}
 8004180:	bf00      	nop
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	58024800 	.word	0x58024800

08004190 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af02      	add	r7, sp, #8
 8004196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004198:	f7fd fae8 	bl	800176c <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e05f      	b.n	8004268 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d107      	bne.n	80041c4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7fc ff91 	bl	80010dc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80041ba:	f241 3188 	movw	r1, #5000	@ 0x1388
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fa7e 	bl	80046c0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	021a      	lsls	r2, r3, #8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	2120      	movs	r1, #32
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fa76 	bl	80046dc <QSPI_WaitFlagStateUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80041f4:	7afb      	ldrb	r3, [r7, #11]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d135      	bne.n	8004266 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <HAL_QSPI_Init+0xe0>)
 8004202:	4013      	ands	r3, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6852      	ldr	r2, [r2, #4]
 8004208:	0611      	lsls	r1, r2, #24
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68d2      	ldr	r2, [r2, #12]
 800420e:	4311      	orrs	r1, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	69d2      	ldr	r2, [r2, #28]
 8004214:	4311      	orrs	r1, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6a12      	ldr	r2, [r2, #32]
 800421a:	4311      	orrs	r1, r2
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	430b      	orrs	r3, r1
 8004222:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	4b12      	ldr	r3, [pc, #72]	@ (8004274 <HAL_QSPI_Init+0xe4>)
 800422c:	4013      	ands	r3, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6912      	ldr	r2, [r2, #16]
 8004232:	0411      	lsls	r1, r2, #16
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6952      	ldr	r2, [r2, #20]
 8004238:	4311      	orrs	r1, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6992      	ldr	r2, [r2, #24]
 800423e:	4311      	orrs	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	430b      	orrs	r3, r1
 8004246:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004266:	7afb      	ldrb	r3, [r7, #11]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	00ffff2f 	.word	0x00ffff2f
 8004274:	ffe0f8fe 	.word	0xffe0f8fe

08004278 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e012      	b.n	80042b0 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fc ffe8 	bl	8001270 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80042c4:	f7fd fa52 	bl	800176c <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_QSPI_Command+0x22>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e048      	b.n	800436c <HAL_QSPI_Command+0xb4>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d137      	bne.n	800435e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2200      	movs	r2, #0
 8004304:	2120      	movs	r1, #32
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f9e8 	bl	80046dc <QSPI_WaitFlagStateUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d125      	bne.n	8004362 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004316:	2200      	movs	r2, #0
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fa15 	bl	800474a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d115      	bne.n	8004354 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2201      	movs	r2, #1
 8004330:	2102      	movs	r1, #2
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f9d2 	bl	80046dc <QSPI_WaitFlagStateUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10f      	bne.n	8004362 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2202      	movs	r2, #2
 8004348:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004352:	e006      	b.n	8004362 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800435c:	e001      	b.n	8004362 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800435e:	2302      	movs	r3, #2
 8004360:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	@ 0x28
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004384:	f7fd f9f2 	bl	800176c <HAL_GetTick>
 8004388:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3320      	adds	r3, #32
 8004390:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_QSPI_Transmit+0x2e>
 800439e:	2302      	movs	r3, #2
 80043a0:	e076      	b.n	8004490 <HAL_QSPI_Transmit+0x11c>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d165      	bne.n	8004482 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d056      	beq.n	8004470 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2212      	movs	r2, #18
 80043c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80043f6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80043f8:	e01b      	b.n	8004432 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2201      	movs	r2, #1
 8004402:	2104      	movs	r1, #4
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f969 	bl	80046dc <QSPI_WaitFlagStateUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800440e:	7ffb      	ldrb	r3, [r7, #31]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d113      	bne.n	800443c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	1e5a      	subs	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1df      	bne.n	80043fa <HAL_QSPI_Transmit+0x86>
 800443a:	e000      	b.n	800443e <HAL_QSPI_Transmit+0xca>
          break;
 800443c:	bf00      	nop
      }

      if (status == HAL_OK)
 800443e:	7ffb      	ldrb	r3, [r7, #31]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d110      	bne.n	8004466 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2201      	movs	r2, #1
 800444c:	2102      	movs	r1, #2
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f944 	bl	80046dc <QSPI_WaitFlagStateUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004458:	7ffb      	ldrb	r3, [r7, #31]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d103      	bne.n	8004466 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2202      	movs	r2, #2
 8004464:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800446e:	e00a      	b.n	8004486 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004474:	f043 0208 	orr.w	r2, r3, #8
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e001      	b.n	8004486 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004482:	2302      	movs	r3, #2
 8004484:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 800448e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3720      	adds	r7, #32
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	@ 0x28
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80044a8:	f7fd f960 	bl	800176c <HAL_GetTick>
 80044ac:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3320      	adds	r3, #32
 80044bc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_QSPI_Receive+0x36>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e07d      	b.n	80045ca <HAL_QSPI_Receive+0x132>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d16c      	bne.n	80045bc <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d05d      	beq.n	80045aa <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2222      	movs	r2, #34	@ 0x22
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004526:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004530:	e01c      	b.n	800456c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2201      	movs	r2, #1
 800453a:	2106      	movs	r1, #6
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f8cd 	bl	80046dc <QSPI_WaitFlagStateUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004546:	7ffb      	ldrb	r3, [r7, #31]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d114      	bne.n	8004576 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	7812      	ldrb	r2, [r2, #0]
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004566:	1e5a      	subs	r2, r3, #1
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1de      	bne.n	8004532 <HAL_QSPI_Receive+0x9a>
 8004574:	e000      	b.n	8004578 <HAL_QSPI_Receive+0xe0>
          break;
 8004576:	bf00      	nop
      }

      if (status == HAL_OK)
 8004578:	7ffb      	ldrb	r3, [r7, #31]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d110      	bne.n	80045a0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2201      	movs	r2, #1
 8004586:	2102      	movs	r1, #2
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f8a7 	bl	80046dc <QSPI_WaitFlagStateUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004592:	7ffb      	ldrb	r3, [r7, #31]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d103      	bne.n	80045a0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2202      	movs	r2, #2
 800459e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045a8:	e00a      	b.n	80045c0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ae:	f043 0208 	orr.w	r2, r3, #8
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	77fb      	strb	r3, [r7, #31]
 80045ba:	e001      	b.n	80045c0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80045bc:	2302      	movs	r3, #2
 80045be:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 80045c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b088      	sub	sp, #32
 80045d6:	af02      	add	r7, sp, #8
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
 80045de:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80045e0:	f7fd f8c4 	bl	800176c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_QSPI_AutoPolling+0x24>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e060      	b.n	80046b8 <HAL_QSPI_AutoPolling+0xe6>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b01      	cmp	r3, #1
 8004608:	d14f      	bne.n	80046aa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2242      	movs	r2, #66	@ 0x42
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2200      	movs	r2, #0
 8004620:	2120      	movs	r1, #32
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f85a 	bl	80046dc <QSPI_WaitFlagStateUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800462c:	7dfb      	ldrb	r3, [r7, #23]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d13d      	bne.n	80046ae <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6812      	ldr	r2, [r2, #0]
 800463a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6852      	ldr	r2, [r2, #4]
 8004644:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6892      	ldr	r2, [r2, #8]
 800464e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	431a      	orrs	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004668:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004672:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f866 	bl	800474a <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2201      	movs	r2, #1
 8004686:	2108      	movs	r1, #8
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f827 	bl	80046dc <QSPI_WaitFlagStateUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8004692:	7dfb      	ldrb	r3, [r7, #23]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2208      	movs	r2, #8
 800469e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046a8:	e001      	b.n	80046ae <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80046aa:	2302      	movs	r3, #2
 80046ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80046ec:	e01a      	b.n	8004724 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d016      	beq.n	8004724 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fd f839 	bl	800176c <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2204      	movs	r2, #4
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004718:	f043 0201 	orr.w	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e00e      	b.n	8004742 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4013      	ands	r3, r2
 800472e:	2b00      	cmp	r3, #0
 8004730:	bf14      	ite	ne
 8004732:	2301      	movne	r3, #1
 8004734:	2300      	moveq	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	429a      	cmp	r2, r3
 800473e:	d1d6      	bne.n	80046ee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <QSPI_Config+0x28>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004764:	d005      	beq.n	8004772 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3a01      	subs	r2, #1
 8004770:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80c1 	beq.w	80048fe <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d063      	beq.n	800484c <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	6892      	ldr	r2, [r2, #8]
 800478c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d031      	beq.n	80047fa <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479e:	431a      	orrs	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a4:	431a      	orrs	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	431a      	orrs	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	049b      	lsls	r3, r3, #18
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	431a      	orrs	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	ea42 0103 	orr.w	r1, r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80047ea:	f000 813f 	beq.w	8004a6c <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	6852      	ldr	r2, [r2, #4]
 80047f6:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 80047f8:	e138      	b.n	8004a6c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004802:	431a      	orrs	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004808:	431a      	orrs	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	431a      	orrs	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	049b      	lsls	r3, r3, #18
 8004816:	431a      	orrs	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	431a      	orrs	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	431a      	orrs	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	431a      	orrs	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	431a      	orrs	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	ea42 0103 	orr.w	r1, r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	430a      	orrs	r2, r1
 8004840:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	619a      	str	r2, [r3, #24]
}
 800484a:	e10f      	b.n	8004a6c <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d02e      	beq.n	80048b2 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	431a      	orrs	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004862:	431a      	orrs	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	431a      	orrs	r2, r3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	049b      	lsls	r3, r3, #18
 8004870:	431a      	orrs	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	431a      	orrs	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	431a      	orrs	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	431a      	orrs	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	431a      	orrs	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	ea42 0103 	orr.w	r1, r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	430a      	orrs	r2, r1
 800489a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80048a2:	f000 80e3 	beq.w	8004a6c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	6852      	ldr	r2, [r2, #4]
 80048ae:	619a      	str	r2, [r3, #24]
}
 80048b0:	e0dc      	b.n	8004a6c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ba:	431a      	orrs	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	431a      	orrs	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	049b      	lsls	r3, r3, #18
 80048ce:	431a      	orrs	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	431a      	orrs	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	ea42 0103 	orr.w	r1, r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2200      	movs	r2, #0
 80048fa:	619a      	str	r2, [r3, #24]
}
 80048fc:	e0b6      	b.n	8004a6c <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d05d      	beq.n	80049c2 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	6892      	ldr	r2, [r2, #8]
 800490e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d02e      	beq.n	8004976 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004920:	431a      	orrs	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004926:	431a      	orrs	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	431a      	orrs	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	049b      	lsls	r3, r3, #18
 8004934:	431a      	orrs	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	431a      	orrs	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	431a      	orrs	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	431a      	orrs	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	431a      	orrs	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	ea42 0103 	orr.w	r1, r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	430a      	orrs	r2, r1
 800495e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004966:	f000 8081 	beq.w	8004a6c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	6852      	ldr	r2, [r2, #4]
 8004972:	619a      	str	r2, [r3, #24]
}
 8004974:	e07a      	b.n	8004a6c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	431a      	orrs	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004984:	431a      	orrs	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	431a      	orrs	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	049b      	lsls	r3, r3, #18
 8004992:	431a      	orrs	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	431a      	orrs	r2, r3
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	431a      	orrs	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	ea42 0103 	orr.w	r1, r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2200      	movs	r2, #0
 80049be:	619a      	str	r2, [r3, #24]
}
 80049c0:	e054      	b.n	8004a6c <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d02a      	beq.n	8004a20 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d2:	431a      	orrs	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d8:	431a      	orrs	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	431a      	orrs	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	049b      	lsls	r3, r3, #18
 80049e6:	431a      	orrs	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	ea42 0103 	orr.w	r1, r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004a12:	d02b      	beq.n	8004a6c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	6852      	ldr	r2, [r2, #4]
 8004a1c:	619a      	str	r2, [r3, #24]
}
 8004a1e:	e025      	b.n	8004a6c <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d021      	beq.n	8004a6c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a36:	431a      	orrs	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	049b      	lsls	r3, r3, #18
 8004a44:	431a      	orrs	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	ea42 0103 	orr.w	r1, r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	619a      	str	r2, [r3, #24]
}
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08c      	sub	sp, #48	@ 0x30
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f000 bc48 	b.w	800531c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8088 	beq.w	8004baa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9a:	4b99      	ldr	r3, [pc, #612]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004aa4:	4b96      	ldr	r3, [pc, #600]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d007      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x48>
 8004ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab2:	2b18      	cmp	r3, #24
 8004ab4:	d111      	bne.n	8004ada <HAL_RCC_OscConfig+0x62>
 8004ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d10c      	bne.n	8004ada <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac0:	4b8f      	ldr	r3, [pc, #572]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d06d      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x130>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d169      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f000 bc21 	b.w	800531c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCC_OscConfig+0x7a>
 8004ae4:	4b86      	ldr	r3, [pc, #536]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a85      	ldr	r2, [pc, #532]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e02e      	b.n	8004b50 <HAL_RCC_OscConfig+0xd8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x9c>
 8004afa:	4b81      	ldr	r3, [pc, #516]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a80      	ldr	r2, [pc, #512]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4b7e      	ldr	r3, [pc, #504]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a7d      	ldr	r2, [pc, #500]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e01d      	b.n	8004b50 <HAL_RCC_OscConfig+0xd8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0xc0>
 8004b1e:	4b78      	ldr	r3, [pc, #480]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a77      	ldr	r2, [pc, #476]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b75      	ldr	r3, [pc, #468]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a74      	ldr	r2, [pc, #464]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e00b      	b.n	8004b50 <HAL_RCC_OscConfig+0xd8>
 8004b38:	4b71      	ldr	r3, [pc, #452]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a70      	ldr	r2, [pc, #448]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	4b6e      	ldr	r3, [pc, #440]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a6d      	ldr	r2, [pc, #436]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d013      	beq.n	8004b80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fc fe08 	bl	800176c <HAL_GetTick>
 8004b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b60:	f7fc fe04 	bl	800176c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	@ 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e3d4      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b72:	4b63      	ldr	r3, [pc, #396]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0xe8>
 8004b7e:	e014      	b.n	8004baa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fc fdf4 	bl	800176c <HAL_GetTick>
 8004b84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fc fdf0 	bl	800176c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	@ 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e3c0      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b9a:	4b59      	ldr	r3, [pc, #356]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x110>
 8004ba6:	e000      	b.n	8004baa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80ca 	beq.w	8004d4c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bb8:	4b51      	ldr	r3, [pc, #324]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <HAL_RCC_OscConfig+0x166>
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	2b18      	cmp	r3, #24
 8004bd2:	d156      	bne.n	8004c82 <HAL_RCC_OscConfig+0x20a>
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d151      	bne.n	8004c82 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bde:	4b48      	ldr	r3, [pc, #288]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x17e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e392      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bf6:	4b42      	ldr	r3, [pc, #264]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 0219 	bic.w	r2, r3, #25
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	493f      	ldr	r1, [pc, #252]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fc fdb0 	bl	800176c <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fc fdac 	bl	800176c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e37c      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c22:	4b37      	ldr	r3, [pc, #220]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2e:	f7fc fdcd 	bl	80017cc <HAL_GetREVID>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d817      	bhi.n	8004c6c <HAL_RCC_OscConfig+0x1f4>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	2b40      	cmp	r3, #64	@ 0x40
 8004c42:	d108      	bne.n	8004c56 <HAL_RCC_OscConfig+0x1de>
 8004c44:	4b2e      	ldr	r3, [pc, #184]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c52:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c54:	e07a      	b.n	8004d4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c56:	4b2a      	ldr	r3, [pc, #168]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	031b      	lsls	r3, r3, #12
 8004c64:	4926      	ldr	r1, [pc, #152]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c6a:	e06f      	b.n	8004d4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6c:	4b24      	ldr	r3, [pc, #144]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	061b      	lsls	r3, r3, #24
 8004c7a:	4921      	ldr	r1, [pc, #132]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c80:	e064      	b.n	8004d4c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d047      	beq.n	8004d1a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 0219 	bic.w	r2, r3, #25
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	491a      	ldr	r1, [pc, #104]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fc fd66 	bl	800176c <HAL_GetTick>
 8004ca0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca4:	f7fc fd62 	bl	800176c <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e332      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb6:	4b12      	ldr	r3, [pc, #72]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc2:	f7fc fd83 	bl	80017cc <HAL_GetREVID>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d819      	bhi.n	8004d04 <HAL_RCC_OscConfig+0x28c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b40      	cmp	r3, #64	@ 0x40
 8004cd6:	d108      	bne.n	8004cea <HAL_RCC_OscConfig+0x272>
 8004cd8:	4b09      	ldr	r3, [pc, #36]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ce0:	4a07      	ldr	r2, [pc, #28]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce6:	6053      	str	r3, [r2, #4]
 8004ce8:	e030      	b.n	8004d4c <HAL_RCC_OscConfig+0x2d4>
 8004cea:	4b05      	ldr	r3, [pc, #20]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	031b      	lsls	r3, r3, #12
 8004cf8:	4901      	ldr	r1, [pc, #4]	@ (8004d00 <HAL_RCC_OscConfig+0x288>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	604b      	str	r3, [r1, #4]
 8004cfe:	e025      	b.n	8004d4c <HAL_RCC_OscConfig+0x2d4>
 8004d00:	58024400 	.word	0x58024400
 8004d04:	4b9a      	ldr	r3, [pc, #616]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	061b      	lsls	r3, r3, #24
 8004d12:	4997      	ldr	r1, [pc, #604]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	604b      	str	r3, [r1, #4]
 8004d18:	e018      	b.n	8004d4c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d1a:	4b95      	ldr	r3, [pc, #596]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a94      	ldr	r2, [pc, #592]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fc fd21 	bl	800176c <HAL_GetTick>
 8004d2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d2e:	f7fc fd1d 	bl	800176c <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e2ed      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d40:	4b8b      	ldr	r3, [pc, #556]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80a9 	beq.w	8004eac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5a:	4b85      	ldr	r3, [pc, #532]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d64:	4b82      	ldr	r3, [pc, #520]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d68:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d007      	beq.n	8004d80 <HAL_RCC_OscConfig+0x308>
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	2b18      	cmp	r3, #24
 8004d74:	d13a      	bne.n	8004dec <HAL_RCC_OscConfig+0x374>
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d135      	bne.n	8004dec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d80:	4b7b      	ldr	r3, [pc, #492]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_RCC_OscConfig+0x320>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	2b80      	cmp	r3, #128	@ 0x80
 8004d92:	d001      	beq.n	8004d98 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e2c1      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d98:	f7fc fd18 	bl	80017cc <HAL_GetREVID>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d817      	bhi.n	8004dd6 <HAL_RCC_OscConfig+0x35e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d108      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x348>
 8004dae:	4b70      	ldr	r3, [pc, #448]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004db6:	4a6e      	ldr	r2, [pc, #440]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004db8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004dbc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dbe:	e075      	b.n	8004eac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dc0:	4b6b      	ldr	r3, [pc, #428]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	069b      	lsls	r3, r3, #26
 8004dce:	4968      	ldr	r1, [pc, #416]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dd4:	e06a      	b.n	8004eac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dd6:	4b66      	ldr	r3, [pc, #408]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	061b      	lsls	r3, r3, #24
 8004de4:	4962      	ldr	r1, [pc, #392]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dea:	e05f      	b.n	8004eac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d042      	beq.n	8004e7a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004df4:	4b5e      	ldr	r3, [pc, #376]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a5d      	ldr	r2, [pc, #372]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fc fcb4 	bl	800176c <HAL_GetTick>
 8004e04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e08:	f7fc fcb0 	bl	800176c <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e280      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e1a:	4b55      	ldr	r3, [pc, #340]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e26:	f7fc fcd1 	bl	80017cc <HAL_GetREVID>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d817      	bhi.n	8004e64 <HAL_RCC_OscConfig+0x3ec>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d108      	bne.n	8004e4e <HAL_RCC_OscConfig+0x3d6>
 8004e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e44:	4a4a      	ldr	r2, [pc, #296]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004e46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e4a:	6053      	str	r3, [r2, #4]
 8004e4c:	e02e      	b.n	8004eac <HAL_RCC_OscConfig+0x434>
 8004e4e:	4b48      	ldr	r3, [pc, #288]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	069b      	lsls	r3, r3, #26
 8004e5c:	4944      	ldr	r1, [pc, #272]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	604b      	str	r3, [r1, #4]
 8004e62:	e023      	b.n	8004eac <HAL_RCC_OscConfig+0x434>
 8004e64:	4b42      	ldr	r3, [pc, #264]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	061b      	lsls	r3, r3, #24
 8004e72:	493f      	ldr	r1, [pc, #252]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60cb      	str	r3, [r1, #12]
 8004e78:	e018      	b.n	8004eac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a3c      	ldr	r2, [pc, #240]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004e80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fc fc71 	bl	800176c <HAL_GetTick>
 8004e8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e8e:	f7fc fc6d 	bl	800176c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e23d      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ea0:	4b33      	ldr	r3, [pc, #204]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d036      	beq.n	8004f26 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d019      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ecc:	f7fc fc4e 	bl	800176c <HAL_GetTick>
 8004ed0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed4:	f7fc fc4a 	bl	800176c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e21a      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ee6:	4b22      	ldr	r3, [pc, #136]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x45c>
 8004ef2:	e018      	b.n	8004f26 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f00:	f7fc fc34 	bl	800176c <HAL_GetTick>
 8004f04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f08:	f7fc fc30 	bl	800176c <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e200      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f1a:	4b15      	ldr	r3, [pc, #84]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d039      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01c      	beq.n	8004f74 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004f40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f46:	f7fc fc11 	bl	800176c <HAL_GetTick>
 8004f4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f4e:	f7fc fc0d 	bl	800176c <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e1dd      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f60:	4b03      	ldr	r3, [pc, #12]	@ (8004f70 <HAL_RCC_OscConfig+0x4f8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0f0      	beq.n	8004f4e <HAL_RCC_OscConfig+0x4d6>
 8004f6c:	e01b      	b.n	8004fa6 <HAL_RCC_OscConfig+0x52e>
 8004f6e:	bf00      	nop
 8004f70:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f74:	4b9b      	ldr	r3, [pc, #620]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a9a      	ldr	r2, [pc, #616]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8004f7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f80:	f7fc fbf4 	bl	800176c <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f88:	f7fc fbf0 	bl	800176c <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e1c0      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f9a:	4b92      	ldr	r3, [pc, #584]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 8081 	beq.w	80050b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fb4:	4b8c      	ldr	r3, [pc, #560]	@ (80051e8 <HAL_RCC_OscConfig+0x770>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a8b      	ldr	r2, [pc, #556]	@ (80051e8 <HAL_RCC_OscConfig+0x770>)
 8004fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fc0:	f7fc fbd4 	bl	800176c <HAL_GetTick>
 8004fc4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc8:	f7fc fbd0 	bl	800176c <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b64      	cmp	r3, #100	@ 0x64
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e1a0      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fda:	4b83      	ldr	r3, [pc, #524]	@ (80051e8 <HAL_RCC_OscConfig+0x770>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0f0      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d106      	bne.n	8004ffc <HAL_RCC_OscConfig+0x584>
 8004fee:	4b7d      	ldr	r3, [pc, #500]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff2:	4a7c      	ldr	r2, [pc, #496]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ffa:	e02d      	b.n	8005058 <HAL_RCC_OscConfig+0x5e0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10c      	bne.n	800501e <HAL_RCC_OscConfig+0x5a6>
 8005004:	4b77      	ldr	r3, [pc, #476]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005008:	4a76      	ldr	r2, [pc, #472]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005010:	4b74      	ldr	r3, [pc, #464]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005014:	4a73      	ldr	r2, [pc, #460]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005016:	f023 0304 	bic.w	r3, r3, #4
 800501a:	6713      	str	r3, [r2, #112]	@ 0x70
 800501c:	e01c      	b.n	8005058 <HAL_RCC_OscConfig+0x5e0>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b05      	cmp	r3, #5
 8005024:	d10c      	bne.n	8005040 <HAL_RCC_OscConfig+0x5c8>
 8005026:	4b6f      	ldr	r3, [pc, #444]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502a:	4a6e      	ldr	r2, [pc, #440]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 800502c:	f043 0304 	orr.w	r3, r3, #4
 8005030:	6713      	str	r3, [r2, #112]	@ 0x70
 8005032:	4b6c      	ldr	r3, [pc, #432]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005036:	4a6b      	ldr	r2, [pc, #428]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	6713      	str	r3, [r2, #112]	@ 0x70
 800503e:	e00b      	b.n	8005058 <HAL_RCC_OscConfig+0x5e0>
 8005040:	4b68      	ldr	r3, [pc, #416]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005044:	4a67      	ldr	r2, [pc, #412]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005046:	f023 0301 	bic.w	r3, r3, #1
 800504a:	6713      	str	r3, [r2, #112]	@ 0x70
 800504c:	4b65      	ldr	r3, [pc, #404]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 800504e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005050:	4a64      	ldr	r2, [pc, #400]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005052:	f023 0304 	bic.w	r3, r3, #4
 8005056:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d015      	beq.n	800508c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fc fb84 	bl	800176c <HAL_GetTick>
 8005064:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005066:	e00a      	b.n	800507e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005068:	f7fc fb80 	bl	800176c <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e14e      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800507e:	4b59      	ldr	r3, [pc, #356]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0ee      	beq.n	8005068 <HAL_RCC_OscConfig+0x5f0>
 800508a:	e014      	b.n	80050b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508c:	f7fc fb6e 	bl	800176c <HAL_GetTick>
 8005090:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005092:	e00a      	b.n	80050aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005094:	f7fc fb6a 	bl	800176c <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e138      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050aa:	4b4e      	ldr	r3, [pc, #312]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1ee      	bne.n	8005094 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 812d 	beq.w	800531a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050c0:	4b48      	ldr	r3, [pc, #288]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050c8:	2b18      	cmp	r3, #24
 80050ca:	f000 80bd 	beq.w	8005248 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	f040 809e 	bne.w	8005214 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d8:	4b42      	ldr	r3, [pc, #264]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a41      	ldr	r2, [pc, #260]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80050de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fc fb42 	bl	800176c <HAL_GetTick>
 80050e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fc fb3e 	bl	800176c <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e10e      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050fe:	4b39      	ldr	r3, [pc, #228]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800510a:	4b36      	ldr	r3, [pc, #216]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 800510c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800510e:	4b37      	ldr	r3, [pc, #220]	@ (80051ec <HAL_RCC_OscConfig+0x774>)
 8005110:	4013      	ands	r3, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800511a:	0112      	lsls	r2, r2, #4
 800511c:	430a      	orrs	r2, r1
 800511e:	4931      	ldr	r1, [pc, #196]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005120:	4313      	orrs	r3, r2
 8005122:	628b      	str	r3, [r1, #40]	@ 0x28
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005128:	3b01      	subs	r3, #1
 800512a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005132:	3b01      	subs	r3, #1
 8005134:	025b      	lsls	r3, r3, #9
 8005136:	b29b      	uxth	r3, r3
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513e:	3b01      	subs	r3, #1
 8005140:	041b      	lsls	r3, r3, #16
 8005142:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514c:	3b01      	subs	r3, #1
 800514e:	061b      	lsls	r3, r3, #24
 8005150:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005154:	4923      	ldr	r1, [pc, #140]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005156:	4313      	orrs	r3, r2
 8005158:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800515a:	4b22      	ldr	r3, [pc, #136]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 800515c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515e:	4a21      	ldr	r2, [pc, #132]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005160:	f023 0301 	bic.w	r3, r3, #1
 8005164:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005166:	4b1f      	ldr	r3, [pc, #124]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800516a:	4b21      	ldr	r3, [pc, #132]	@ (80051f0 <HAL_RCC_OscConfig+0x778>)
 800516c:	4013      	ands	r3, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005172:	00d2      	lsls	r2, r2, #3
 8005174:	491b      	ldr	r1, [pc, #108]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005176:	4313      	orrs	r3, r2
 8005178:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800517a:	4b1a      	ldr	r3, [pc, #104]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 800517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517e:	f023 020c 	bic.w	r2, r3, #12
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	4917      	ldr	r1, [pc, #92]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 8005188:	4313      	orrs	r3, r2
 800518a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800518c:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 800518e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005190:	f023 0202 	bic.w	r2, r3, #2
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005198:	4912      	ldr	r1, [pc, #72]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 800519a:	4313      	orrs	r3, r2
 800519c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800519e:	4b11      	ldr	r3, [pc, #68]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	4a10      	ldr	r2, [pc, #64]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80051a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051aa:	4b0e      	ldr	r3, [pc, #56]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	4a0d      	ldr	r2, [pc, #52]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80051b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051b6:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ba:	4a0a      	ldr	r2, [pc, #40]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80051bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051c2:	4b08      	ldr	r3, [pc, #32]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c6:	4a07      	ldr	r2, [pc, #28]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ce:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a04      	ldr	r2, [pc, #16]	@ (80051e4 <HAL_RCC_OscConfig+0x76c>)
 80051d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051da:	f7fc fac7 	bl	800176c <HAL_GetTick>
 80051de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051e0:	e011      	b.n	8005206 <HAL_RCC_OscConfig+0x78e>
 80051e2:	bf00      	nop
 80051e4:	58024400 	.word	0x58024400
 80051e8:	58024800 	.word	0x58024800
 80051ec:	fffffc0c 	.word	0xfffffc0c
 80051f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f4:	f7fc faba 	bl	800176c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e08a      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005206:	4b47      	ldr	r3, [pc, #284]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0x77c>
 8005212:	e082      	b.n	800531a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005214:	4b43      	ldr	r3, [pc, #268]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a42      	ldr	r2, [pc, #264]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 800521a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800521e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fc faa4 	bl	800176c <HAL_GetTick>
 8005224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005228:	f7fc faa0 	bl	800176c <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e070      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800523a:	4b3a      	ldr	r3, [pc, #232]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x7b0>
 8005246:	e068      	b.n	800531a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005248:	4b36      	ldr	r3, [pc, #216]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800524e:	4b35      	ldr	r3, [pc, #212]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005252:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005258:	2b01      	cmp	r3, #1
 800525a:	d031      	beq.n	80052c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	f003 0203 	and.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005266:	429a      	cmp	r2, r3
 8005268:	d12a      	bne.n	80052c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005276:	429a      	cmp	r2, r3
 8005278:	d122      	bne.n	80052c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005284:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005286:	429a      	cmp	r2, r3
 8005288:	d11a      	bne.n	80052c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	0a5b      	lsrs	r3, r3, #9
 800528e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005296:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005298:	429a      	cmp	r2, r3
 800529a:	d111      	bne.n	80052c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d108      	bne.n	80052c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	0e1b      	lsrs	r3, r3, #24
 80052b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e02b      	b.n	800531c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052c4:	4b17      	ldr	r3, [pc, #92]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 80052c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c8:	08db      	lsrs	r3, r3, #3
 80052ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d01f      	beq.n	800531a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80052da:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052de:	4a11      	ldr	r2, [pc, #68]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052e6:	f7fc fa41 	bl	800176c <HAL_GetTick>
 80052ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80052ec:	bf00      	nop
 80052ee:	f7fc fa3d 	bl	800176c <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d0f9      	beq.n	80052ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 80052fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <HAL_RCC_OscConfig+0x8b0>)
 8005300:	4013      	ands	r3, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005306:	00d2      	lsls	r2, r2, #3
 8005308:	4906      	ldr	r1, [pc, #24]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 800530a:	4313      	orrs	r3, r2
 800530c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800530e:	4b05      	ldr	r3, [pc, #20]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 8005310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005312:	4a04      	ldr	r2, [pc, #16]	@ (8005324 <HAL_RCC_OscConfig+0x8ac>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3730      	adds	r7, #48	@ 0x30
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	58024400 	.word	0x58024400
 8005328:	ffff0007 	.word	0xffff0007

0800532c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e19c      	b.n	800567a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005340:	4b8a      	ldr	r3, [pc, #552]	@ (800556c <HAL_RCC_ClockConfig+0x240>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d910      	bls.n	8005370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534e:	4b87      	ldr	r3, [pc, #540]	@ (800556c <HAL_RCC_ClockConfig+0x240>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f023 020f 	bic.w	r2, r3, #15
 8005356:	4985      	ldr	r1, [pc, #532]	@ (800556c <HAL_RCC_ClockConfig+0x240>)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	4313      	orrs	r3, r2
 800535c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800535e:	4b83      	ldr	r3, [pc, #524]	@ (800556c <HAL_RCC_ClockConfig+0x240>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e184      	b.n	800567a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d010      	beq.n	800539e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	4b7b      	ldr	r3, [pc, #492]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005388:	429a      	cmp	r2, r3
 800538a:	d908      	bls.n	800539e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800538c:	4b78      	ldr	r3, [pc, #480]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	4975      	ldr	r1, [pc, #468]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 800539a:	4313      	orrs	r3, r2
 800539c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d010      	beq.n	80053cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	4b70      	ldr	r3, [pc, #448]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d908      	bls.n	80053cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	496a      	ldr	r1, [pc, #424]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d010      	beq.n	80053fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	4b64      	ldr	r3, [pc, #400]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d908      	bls.n	80053fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053e8:	4b61      	ldr	r3, [pc, #388]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	495e      	ldr	r1, [pc, #376]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d010      	beq.n	8005428 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69da      	ldr	r2, [r3, #28]
 800540a:	4b59      	ldr	r3, [pc, #356]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005412:	429a      	cmp	r2, r3
 8005414:	d908      	bls.n	8005428 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005416:	4b56      	ldr	r3, [pc, #344]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	4953      	ldr	r1, [pc, #332]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 8005424:	4313      	orrs	r3, r2
 8005426:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d010      	beq.n	8005456 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	4b4d      	ldr	r3, [pc, #308]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	429a      	cmp	r2, r3
 8005442:	d908      	bls.n	8005456 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005444:	4b4a      	ldr	r3, [pc, #296]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f023 020f 	bic.w	r2, r3, #15
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	4947      	ldr	r1, [pc, #284]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 8005452:	4313      	orrs	r3, r2
 8005454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d055      	beq.n	800550e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005462:	4b43      	ldr	r3, [pc, #268]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	4940      	ldr	r1, [pc, #256]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 8005470:	4313      	orrs	r3, r2
 8005472:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d107      	bne.n	800548c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800547c:	4b3c      	ldr	r3, [pc, #240]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d121      	bne.n	80054cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0f6      	b.n	800567a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d107      	bne.n	80054a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005494:	4b36      	ldr	r3, [pc, #216]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d115      	bne.n	80054cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0ea      	b.n	800567a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d107      	bne.n	80054bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054ac:	4b30      	ldr	r3, [pc, #192]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0de      	b.n	800567a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0d6      	b.n	800567a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054cc:	4b28      	ldr	r3, [pc, #160]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f023 0207 	bic.w	r2, r3, #7
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	4925      	ldr	r1, [pc, #148]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054de:	f7fc f945 	bl	800176c <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e4:	e00a      	b.n	80054fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e6:	f7fc f941 	bl	800176c <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d901      	bls.n	80054fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e0be      	b.n	800567a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	429a      	cmp	r2, r3
 800550c:	d1eb      	bne.n	80054e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d010      	beq.n	800553c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	4b14      	ldr	r3, [pc, #80]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	429a      	cmp	r2, r3
 8005528:	d208      	bcs.n	800553c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800552a:	4b11      	ldr	r3, [pc, #68]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f023 020f 	bic.w	r2, r3, #15
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	490e      	ldr	r1, [pc, #56]	@ (8005570 <HAL_RCC_ClockConfig+0x244>)
 8005538:	4313      	orrs	r3, r2
 800553a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800553c:	4b0b      	ldr	r3, [pc, #44]	@ (800556c <HAL_RCC_ClockConfig+0x240>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d214      	bcs.n	8005574 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800554a:	4b08      	ldr	r3, [pc, #32]	@ (800556c <HAL_RCC_ClockConfig+0x240>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f023 020f 	bic.w	r2, r3, #15
 8005552:	4906      	ldr	r1, [pc, #24]	@ (800556c <HAL_RCC_ClockConfig+0x240>)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	4313      	orrs	r3, r2
 8005558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800555a:	4b04      	ldr	r3, [pc, #16]	@ (800556c <HAL_RCC_ClockConfig+0x240>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d005      	beq.n	8005574 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e086      	b.n	800567a <HAL_RCC_ClockConfig+0x34e>
 800556c:	52002000 	.word	0x52002000
 8005570:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	4b3f      	ldr	r3, [pc, #252]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800558c:	429a      	cmp	r2, r3
 800558e:	d208      	bcs.n	80055a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005590:	4b3c      	ldr	r3, [pc, #240]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	4939      	ldr	r1, [pc, #228]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d010      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	4b34      	ldr	r3, [pc, #208]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d208      	bcs.n	80055d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055be:	4b31      	ldr	r3, [pc, #196]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	492e      	ldr	r1, [pc, #184]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d010      	beq.n	80055fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699a      	ldr	r2, [r3, #24]
 80055e0:	4b28      	ldr	r3, [pc, #160]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d208      	bcs.n	80055fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055ec:	4b25      	ldr	r3, [pc, #148]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	4922      	ldr	r1, [pc, #136]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d010      	beq.n	800562c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69da      	ldr	r2, [r3, #28]
 800560e:	4b1d      	ldr	r3, [pc, #116]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005616:	429a      	cmp	r2, r3
 8005618:	d208      	bcs.n	800562c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800561a:	4b1a      	ldr	r3, [pc, #104]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	4917      	ldr	r1, [pc, #92]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 8005628:	4313      	orrs	r3, r2
 800562a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800562c:	f000 f834 	bl	8005698 <HAL_RCC_GetSysClockFreq>
 8005630:	4602      	mov	r2, r0
 8005632:	4b14      	ldr	r3, [pc, #80]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	0a1b      	lsrs	r3, r3, #8
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	4912      	ldr	r1, [pc, #72]	@ (8005688 <HAL_RCC_ClockConfig+0x35c>)
 800563e:	5ccb      	ldrb	r3, [r1, r3]
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
 8005648:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800564a:	4b0e      	ldr	r3, [pc, #56]	@ (8005684 <HAL_RCC_ClockConfig+0x358>)
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	4a0d      	ldr	r2, [pc, #52]	@ (8005688 <HAL_RCC_ClockConfig+0x35c>)
 8005654:	5cd3      	ldrb	r3, [r2, r3]
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
 8005660:	4a0a      	ldr	r2, [pc, #40]	@ (800568c <HAL_RCC_ClockConfig+0x360>)
 8005662:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005664:	4a0a      	ldr	r2, [pc, #40]	@ (8005690 <HAL_RCC_ClockConfig+0x364>)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800566a:	4b0a      	ldr	r3, [pc, #40]	@ (8005694 <HAL_RCC_ClockConfig+0x368>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f7fc f832 	bl	80016d8 <HAL_InitTick>
 8005674:	4603      	mov	r3, r0
 8005676:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	58024400 	.word	0x58024400
 8005688:	0800efd0 	.word	0x0800efd0
 800568c:	240000f8 	.word	0x240000f8
 8005690:	240000f4 	.word	0x240000f4
 8005694:	240000fc 	.word	0x240000fc

08005698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005698:	b480      	push	{r7}
 800569a:	b089      	sub	sp, #36	@ 0x24
 800569c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800569e:	4bb3      	ldr	r3, [pc, #716]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056a6:	2b18      	cmp	r3, #24
 80056a8:	f200 8155 	bhi.w	8005956 <HAL_RCC_GetSysClockFreq+0x2be>
 80056ac:	a201      	add	r2, pc, #4	@ (adr r2, 80056b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	08005719 	.word	0x08005719
 80056b8:	08005957 	.word	0x08005957
 80056bc:	08005957 	.word	0x08005957
 80056c0:	08005957 	.word	0x08005957
 80056c4:	08005957 	.word	0x08005957
 80056c8:	08005957 	.word	0x08005957
 80056cc:	08005957 	.word	0x08005957
 80056d0:	08005957 	.word	0x08005957
 80056d4:	0800573f 	.word	0x0800573f
 80056d8:	08005957 	.word	0x08005957
 80056dc:	08005957 	.word	0x08005957
 80056e0:	08005957 	.word	0x08005957
 80056e4:	08005957 	.word	0x08005957
 80056e8:	08005957 	.word	0x08005957
 80056ec:	08005957 	.word	0x08005957
 80056f0:	08005957 	.word	0x08005957
 80056f4:	08005745 	.word	0x08005745
 80056f8:	08005957 	.word	0x08005957
 80056fc:	08005957 	.word	0x08005957
 8005700:	08005957 	.word	0x08005957
 8005704:	08005957 	.word	0x08005957
 8005708:	08005957 	.word	0x08005957
 800570c:	08005957 	.word	0x08005957
 8005710:	08005957 	.word	0x08005957
 8005714:	0800574b 	.word	0x0800574b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005718:	4b94      	ldr	r3, [pc, #592]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005724:	4b91      	ldr	r3, [pc, #580]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	08db      	lsrs	r3, r3, #3
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	4a90      	ldr	r2, [pc, #576]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
 8005734:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005736:	e111      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005738:	4b8d      	ldr	r3, [pc, #564]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800573a:	61bb      	str	r3, [r7, #24]
      break;
 800573c:	e10e      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800573e:	4b8d      	ldr	r3, [pc, #564]	@ (8005974 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005740:	61bb      	str	r3, [r7, #24]
      break;
 8005742:	e10b      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005744:	4b8c      	ldr	r3, [pc, #560]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005746:	61bb      	str	r3, [r7, #24]
      break;
 8005748:	e108      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800574a:	4b88      	ldr	r3, [pc, #544]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005754:	4b85      	ldr	r3, [pc, #532]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	091b      	lsrs	r3, r3, #4
 800575a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800575e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005760:	4b82      	ldr	r3, [pc, #520]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800576a:	4b80      	ldr	r3, [pc, #512]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576e:	08db      	lsrs	r3, r3, #3
 8005770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005782:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80e1 	beq.w	8005950 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b02      	cmp	r3, #2
 8005792:	f000 8083 	beq.w	800589c <HAL_RCC_GetSysClockFreq+0x204>
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b02      	cmp	r3, #2
 800579a:	f200 80a1 	bhi.w	80058e0 <HAL_RCC_GetSysClockFreq+0x248>
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_RCC_GetSysClockFreq+0x114>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d056      	beq.n	8005858 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057aa:	e099      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ac:	4b6f      	ldr	r3, [pc, #444]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d02d      	beq.n	8005814 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057b8:	4b6c      	ldr	r3, [pc, #432]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	08db      	lsrs	r3, r3, #3
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	4a6b      	ldr	r2, [pc, #428]	@ (8005970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
 80057c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	ee07 3a90 	vmov	s15, r3
 80057d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e2:	4b62      	ldr	r3, [pc, #392]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80057f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800597c <HAL_RCC_GetSysClockFreq+0x2e4>
 80057fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800580a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005812:	e087      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005980 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005826:	4b51      	ldr	r3, [pc, #324]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005836:	ed97 6a02 	vldr	s12, [r7, #8]
 800583a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800597c <HAL_RCC_GetSysClockFreq+0x2e4>
 800583e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800584a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800584e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005852:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005856:	e065      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005862:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005984 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800586a:	4b40      	ldr	r3, [pc, #256]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587a:	ed97 6a02 	vldr	s12, [r7, #8]
 800587e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800597c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800588a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800588e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005896:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800589a:	e043      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005988 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ae:	4b2f      	ldr	r3, [pc, #188]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058be:	ed97 6a02 	vldr	s12, [r7, #8]
 80058c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800597c <HAL_RCC_GetSysClockFreq+0x2e4>
 80058c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058de:	e021      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005984 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f2:	4b1e      	ldr	r3, [pc, #120]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005902:	ed97 6a02 	vldr	s12, [r7, #8]
 8005906:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800597c <HAL_RCC_GetSysClockFreq+0x2e4>
 800590a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800590e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800591a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005922:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005924:	4b11      	ldr	r3, [pc, #68]	@ (800596c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005928:	0a5b      	lsrs	r3, r3, #9
 800592a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800592e:	3301      	adds	r3, #1
 8005930:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	ee07 3a90 	vmov	s15, r3
 8005938:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800593c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005948:	ee17 3a90 	vmov	r3, s15
 800594c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800594e:	e005      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	61bb      	str	r3, [r7, #24]
      break;
 8005954:	e002      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005956:	4b07      	ldr	r3, [pc, #28]	@ (8005974 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005958:	61bb      	str	r3, [r7, #24]
      break;
 800595a:	bf00      	nop
  }

  return sysclockfreq;
 800595c:	69bb      	ldr	r3, [r7, #24]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3724      	adds	r7, #36	@ 0x24
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	58024400 	.word	0x58024400
 8005970:	03d09000 	.word	0x03d09000
 8005974:	003d0900 	.word	0x003d0900
 8005978:	017d7840 	.word	0x017d7840
 800597c:	46000000 	.word	0x46000000
 8005980:	4c742400 	.word	0x4c742400
 8005984:	4a742400 	.word	0x4a742400
 8005988:	4bbebc20 	.word	0x4bbebc20

0800598c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005992:	f7ff fe81 	bl	8005698 <HAL_RCC_GetSysClockFreq>
 8005996:	4602      	mov	r2, r0
 8005998:	4b10      	ldr	r3, [pc, #64]	@ (80059dc <HAL_RCC_GetHCLKFreq+0x50>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	0a1b      	lsrs	r3, r3, #8
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	490f      	ldr	r1, [pc, #60]	@ (80059e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80059a4:	5ccb      	ldrb	r3, [r1, r3]
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059b0:	4b0a      	ldr	r3, [pc, #40]	@ (80059dc <HAL_RCC_GetHCLKFreq+0x50>)
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	4a09      	ldr	r2, [pc, #36]	@ (80059e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80059ba:	5cd3      	ldrb	r3, [r2, r3]
 80059bc:	f003 031f 	and.w	r3, r3, #31
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	fa22 f303 	lsr.w	r3, r2, r3
 80059c6:	4a07      	ldr	r2, [pc, #28]	@ (80059e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80059c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059ca:	4a07      	ldr	r2, [pc, #28]	@ (80059e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059d0:	4b04      	ldr	r3, [pc, #16]	@ (80059e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80059d2:	681b      	ldr	r3, [r3, #0]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	58024400 	.word	0x58024400
 80059e0:	0800efd0 	.word	0x0800efd0
 80059e4:	240000f8 	.word	0x240000f8
 80059e8:	240000f4 	.word	0x240000f4

080059ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059f0:	f7ff ffcc 	bl	800598c <HAL_RCC_GetHCLKFreq>
 80059f4:	4602      	mov	r2, r0
 80059f6:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	091b      	lsrs	r3, r3, #4
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	4904      	ldr	r1, [pc, #16]	@ (8005a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a02:	5ccb      	ldrb	r3, [r1, r3]
 8005a04:	f003 031f 	and.w	r3, r3, #31
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	58024400 	.word	0x58024400
 8005a14:	0800efd0 	.word	0x0800efd0

08005a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a1c:	f7ff ffb6 	bl	800598c <HAL_RCC_GetHCLKFreq>
 8005a20:	4602      	mov	r2, r0
 8005a22:	4b06      	ldr	r3, [pc, #24]	@ (8005a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	0a1b      	lsrs	r3, r3, #8
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	4904      	ldr	r1, [pc, #16]	@ (8005a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a2e:	5ccb      	ldrb	r3, [r1, r3]
 8005a30:	f003 031f 	and.w	r3, r3, #31
 8005a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	58024400 	.word	0x58024400
 8005a40:	0800efd0 	.word	0x0800efd0

08005a44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a48:	b0ca      	sub	sp, #296	@ 0x128
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a68:	2500      	movs	r5, #0
 8005a6a:	ea54 0305 	orrs.w	r3, r4, r5
 8005a6e:	d049      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a7a:	d02f      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a80:	d828      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a86:	d01a      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a8c:	d822      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a96:	d007      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a98:	e01c      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a9a:	4bb8      	ldr	r3, [pc, #736]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	4ab7      	ldr	r2, [pc, #732]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aa6:	e01a      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aac:	3308      	adds	r3, #8
 8005aae:	2102      	movs	r1, #2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 fc8f 	bl	80073d4 <RCCEx_PLL2_Config>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005abc:	e00f      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac2:	3328      	adds	r3, #40	@ 0x28
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 fd36 	bl	8007538 <RCCEx_PLL3_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ad2:	e004      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ada:	e000      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ae6:	4ba5      	ldr	r3, [pc, #660]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005af4:	4aa1      	ldr	r2, [pc, #644]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005af6:	430b      	orrs	r3, r1
 8005af8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005afa:	e003      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005b10:	f04f 0900 	mov.w	r9, #0
 8005b14:	ea58 0309 	orrs.w	r3, r8, r9
 8005b18:	d047      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d82a      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b24:	a201      	add	r2, pc, #4	@ (adr r2, 8005b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b41 	.word	0x08005b41
 8005b30:	08005b4f 	.word	0x08005b4f
 8005b34:	08005b65 	.word	0x08005b65
 8005b38:	08005b83 	.word	0x08005b83
 8005b3c:	08005b83 	.word	0x08005b83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b40:	4b8e      	ldr	r3, [pc, #568]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b44:	4a8d      	ldr	r2, [pc, #564]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b4c:	e01a      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b52:	3308      	adds	r3, #8
 8005b54:	2100      	movs	r1, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 fc3c 	bl	80073d4 <RCCEx_PLL2_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b62:	e00f      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b68:	3328      	adds	r3, #40	@ 0x28
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 fce3 	bl	8007538 <RCCEx_PLL3_Config>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b78:	e004      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b80:	e000      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b8c:	4b7b      	ldr	r3, [pc, #492]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b90:	f023 0107 	bic.w	r1, r3, #7
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9a:	4a78      	ldr	r2, [pc, #480]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ba0:	e003      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005bb6:	f04f 0b00 	mov.w	fp, #0
 8005bba:	ea5a 030b 	orrs.w	r3, sl, fp
 8005bbe:	d04c      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bca:	d030      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd0:	d829      	bhi.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bd4:	d02d      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bd8:	d825      	bhi.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bda:	2b80      	cmp	r3, #128	@ 0x80
 8005bdc:	d018      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005bde:	2b80      	cmp	r3, #128	@ 0x80
 8005be0:	d821      	bhi.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005be6:	2b40      	cmp	r3, #64	@ 0x40
 8005be8:	d007      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005bea:	e01c      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bec:	4b63      	ldr	r3, [pc, #396]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf0:	4a62      	ldr	r2, [pc, #392]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bf8:	e01c      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfe:	3308      	adds	r3, #8
 8005c00:	2100      	movs	r1, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 fbe6 	bl	80073d4 <RCCEx_PLL2_Config>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c0e:	e011      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c14:	3328      	adds	r3, #40	@ 0x28
 8005c16:	2100      	movs	r1, #0
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 fc8d 	bl	8007538 <RCCEx_PLL3_Config>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c24:	e006      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c2c:	e002      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c2e:	bf00      	nop
 8005c30:	e000      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c40:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c4a:	4a4c      	ldr	r2, [pc, #304]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c50:	e003      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c70:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c74:	460b      	mov	r3, r1
 8005c76:	4313      	orrs	r3, r2
 8005c78:	d053      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c86:	d035      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c8c:	d82e      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c92:	d031      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c98:	d828      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c9e:	d01a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005ca0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ca4:	d822      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005caa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cae:	d007      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005cb0:	e01c      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb2:	4b32      	ldr	r3, [pc, #200]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb6:	4a31      	ldr	r2, [pc, #196]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cbe:	e01c      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 fb83 	bl	80073d4 <RCCEx_PLL2_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cd4:	e011      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cda:	3328      	adds	r3, #40	@ 0x28
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fc2a 	bl	8007538 <RCCEx_PLL3_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cea:	e006      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cf2:	e002      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cf4:	bf00      	nop
 8005cf6:	e000      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10b      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d02:	4b1e      	ldr	r3, [pc, #120]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d06:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d12:	4a1a      	ldr	r2, [pc, #104]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d18:	e003      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d2e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d32:	2300      	movs	r3, #0
 8005d34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d38:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	d056      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d4e:	d038      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d54:	d831      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d5a:	d034      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d60:	d82b      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d66:	d01d      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d6c:	d825      	bhi.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d006      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d78:	e01f      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d7a:	bf00      	nop
 8005d7c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d80:	4ba2      	ldr	r3, [pc, #648]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	4aa1      	ldr	r2, [pc, #644]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d8c:	e01c      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d92:	3308      	adds	r3, #8
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 fb1c 	bl	80073d4 <RCCEx_PLL2_Config>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005da2:	e011      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da8:	3328      	adds	r3, #40	@ 0x28
 8005daa:	2100      	movs	r1, #0
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 fbc3 	bl	8007538 <RCCEx_PLL3_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005db8:	e006      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dc0:	e002      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005dc2:	bf00      	nop
 8005dc4:	e000      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10b      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005dd0:	4b8e      	ldr	r3, [pc, #568]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ddc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005de0:	4a8a      	ldr	r2, [pc, #552]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005de2:	430b      	orrs	r3, r1
 8005de4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005de6:	e003      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e00:	2300      	movs	r3, #0
 8005e02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	d03a      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e16:	2b30      	cmp	r3, #48	@ 0x30
 8005e18:	d01f      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005e1a:	2b30      	cmp	r3, #48	@ 0x30
 8005e1c:	d819      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d00c      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	d815      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d019      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005e2a:	2b10      	cmp	r3, #16
 8005e2c:	d111      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e2e:	4b77      	ldr	r3, [pc, #476]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e32:	4a76      	ldr	r2, [pc, #472]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e3a:	e011      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e40:	3308      	adds	r3, #8
 8005e42:	2102      	movs	r1, #2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 fac5 	bl	80073d4 <RCCEx_PLL2_Config>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e50:	e006      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e58:	e002      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e5a:	bf00      	nop
 8005e5c:	e000      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e68:	4b68      	ldr	r3, [pc, #416]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e6c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e76:	4a65      	ldr	r2, [pc, #404]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e7c:	e003      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e96:	2300      	movs	r3, #0
 8005e98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e9c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	d051      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eb0:	d035      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005eb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eb6:	d82e      	bhi.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005eb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ebc:	d031      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005ebe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ec2:	d828      	bhi.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec8:	d01a      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ece:	d822      	bhi.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed8:	d007      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005eda:	e01c      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005edc:	4b4b      	ldr	r3, [pc, #300]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ee8:	e01c      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eee:	3308      	adds	r3, #8
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 fa6e 	bl	80073d4 <RCCEx_PLL2_Config>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005efe:	e011      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f04:	3328      	adds	r3, #40	@ 0x28
 8005f06:	2100      	movs	r1, #0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 fb15 	bl	8007538 <RCCEx_PLL3_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f14:	e006      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f1c:	e002      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f1e:	bf00      	nop
 8005f20:	e000      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f2c:	4b37      	ldr	r3, [pc, #220]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f30:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f3a:	4a34      	ldr	r2, [pc, #208]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f40:	e003      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f64:	460b      	mov	r3, r1
 8005f66:	4313      	orrs	r3, r2
 8005f68:	d056      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f74:	d033      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f7a:	d82c      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f80:	d02f      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f86:	d826      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f8c:	d02b      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f92:	d820      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f98:	d012      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f9e:	d81a      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d022      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa8:	d115      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fae:	3308      	adds	r3, #8
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f001 fa0e 	bl	80073d4 <RCCEx_PLL2_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fbe:	e015      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc4:	3328      	adds	r3, #40	@ 0x28
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 fab5 	bl	8007538 <RCCEx_PLL3_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fd4:	e00a      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fdc:	e006      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fde:	bf00      	nop
 8005fe0:	e004      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fe2:	bf00      	nop
 8005fe4:	e002      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fe6:	bf00      	nop
 8005fe8:	e000      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10d      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ff4:	4b05      	ldr	r3, [pc, #20]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006002:	4a02      	ldr	r2, [pc, #8]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006004:	430b      	orrs	r3, r1
 8006006:	6513      	str	r3, [r2, #80]	@ 0x50
 8006008:	e006      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800600a:	bf00      	nop
 800600c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800602e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d055      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006040:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006044:	d033      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006046:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800604a:	d82c      	bhi.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006050:	d02f      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006056:	d826      	bhi.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006058:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800605c:	d02b      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800605e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006062:	d820      	bhi.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006068:	d012      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800606a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800606e:	d81a      	bhi.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d022      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006078:	d115      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800607a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607e:	3308      	adds	r3, #8
 8006080:	2101      	movs	r1, #1
 8006082:	4618      	mov	r0, r3
 8006084:	f001 f9a6 	bl	80073d4 <RCCEx_PLL2_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800608e:	e015      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006094:	3328      	adds	r3, #40	@ 0x28
 8006096:	2101      	movs	r1, #1
 8006098:	4618      	mov	r0, r3
 800609a:	f001 fa4d 	bl	8007538 <RCCEx_PLL3_Config>
 800609e:	4603      	mov	r3, r0
 80060a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060a4:	e00a      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060ac:	e006      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060ae:	bf00      	nop
 80060b0:	e004      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060b2:	bf00      	nop
 80060b4:	e002      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060b6:	bf00      	nop
 80060b8:	e000      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80060ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060c4:	4ba3      	ldr	r3, [pc, #652]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060d4:	4a9f      	ldr	r2, [pc, #636]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060d6:	430b      	orrs	r3, r1
 80060d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80060da:	e003      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060f4:	2300      	movs	r3, #0
 80060f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060fe:	460b      	mov	r3, r1
 8006100:	4313      	orrs	r3, r2
 8006102:	d037      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800610e:	d00e      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006114:	d816      	bhi.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d018      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800611a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800611e:	d111      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006120:	4b8c      	ldr	r3, [pc, #560]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006124:	4a8b      	ldr	r2, [pc, #556]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006126:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800612a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800612c:	e00f      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800612e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006132:	3308      	adds	r3, #8
 8006134:	2101      	movs	r1, #1
 8006136:	4618      	mov	r0, r3
 8006138:	f001 f94c 	bl	80073d4 <RCCEx_PLL2_Config>
 800613c:	4603      	mov	r3, r0
 800613e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006142:	e004      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800614a:	e000      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800614c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800614e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006156:	4b7f      	ldr	r3, [pc, #508]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800615a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006164:	4a7b      	ldr	r2, [pc, #492]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006166:	430b      	orrs	r3, r1
 8006168:	6513      	str	r3, [r2, #80]	@ 0x50
 800616a:	e003      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006170:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006180:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006184:	2300      	movs	r3, #0
 8006186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800618a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800618e:	460b      	mov	r3, r1
 8006190:	4313      	orrs	r3, r2
 8006192:	d039      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800619a:	2b03      	cmp	r3, #3
 800619c:	d81c      	bhi.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800619e:	a201      	add	r2, pc, #4	@ (adr r2, 80061a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	080061e1 	.word	0x080061e1
 80061a8:	080061b5 	.word	0x080061b5
 80061ac:	080061c3 	.word	0x080061c3
 80061b0:	080061e1 	.word	0x080061e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b4:	4b67      	ldr	r3, [pc, #412]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	4a66      	ldr	r2, [pc, #408]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061c0:	e00f      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c6:	3308      	adds	r3, #8
 80061c8:	2102      	movs	r1, #2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 f902 	bl	80073d4 <RCCEx_PLL2_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061d6:	e004      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061de:	e000      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80061e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ee:	f023 0103 	bic.w	r1, r3, #3
 80061f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061f8:	4a56      	ldr	r2, [pc, #344]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061fa:	430b      	orrs	r3, r1
 80061fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061fe:	e003      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006204:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006214:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006218:	2300      	movs	r3, #0
 800621a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800621e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006222:	460b      	mov	r3, r1
 8006224:	4313      	orrs	r3, r2
 8006226:	f000 809f 	beq.w	8006368 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800622a:	4b4b      	ldr	r3, [pc, #300]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a4a      	ldr	r2, [pc, #296]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006234:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006236:	f7fb fa99 	bl	800176c <HAL_GetTick>
 800623a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800623e:	e00b      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006240:	f7fb fa94 	bl	800176c <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b64      	cmp	r3, #100	@ 0x64
 800624e:	d903      	bls.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006256:	e005      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006258:	4b3f      	ldr	r3, [pc, #252]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0ed      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006268:	2b00      	cmp	r3, #0
 800626a:	d179      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800626c:	4b39      	ldr	r3, [pc, #228]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800626e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006274:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006278:	4053      	eors	r3, r2
 800627a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800627e:	2b00      	cmp	r3, #0
 8006280:	d015      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006282:	4b34      	ldr	r3, [pc, #208]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800628a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800628e:	4b31      	ldr	r3, [pc, #196]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006292:	4a30      	ldr	r2, [pc, #192]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006298:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800629a:	4b2e      	ldr	r3, [pc, #184]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629e:	4a2d      	ldr	r2, [pc, #180]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ba:	d118      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062bc:	f7fb fa56 	bl	800176c <HAL_GetTick>
 80062c0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062c4:	e00d      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c6:	f7fb fa51 	bl	800176c <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80062d0:	1ad2      	subs	r2, r2, r3
 80062d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d903      	bls.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80062e0:	e005      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062e2:	4b1c      	ldr	r3, [pc, #112]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0eb      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80062ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d129      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006306:	d10e      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006308:	4b12      	ldr	r3, [pc, #72]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006314:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006318:	091a      	lsrs	r2, r3, #4
 800631a:	4b10      	ldr	r3, [pc, #64]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800631c:	4013      	ands	r3, r2
 800631e:	4a0d      	ldr	r2, [pc, #52]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006320:	430b      	orrs	r3, r1
 8006322:	6113      	str	r3, [r2, #16]
 8006324:	e005      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006326:	4b0b      	ldr	r3, [pc, #44]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	4a0a      	ldr	r2, [pc, #40]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800632c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006330:	6113      	str	r3, [r2, #16]
 8006332:	4b08      	ldr	r3, [pc, #32]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006334:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800633e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006342:	4a04      	ldr	r2, [pc, #16]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006344:	430b      	orrs	r3, r1
 8006346:	6713      	str	r3, [r2, #112]	@ 0x70
 8006348:	e00e      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800634a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800634e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006352:	e009      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006354:	58024400 	.word	0x58024400
 8006358:	58024800 	.word	0x58024800
 800635c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f002 0301 	and.w	r3, r2, #1
 8006374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006378:	2300      	movs	r3, #0
 800637a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800637e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006382:	460b      	mov	r3, r1
 8006384:	4313      	orrs	r3, r2
 8006386:	f000 8089 	beq.w	800649c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800638a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006390:	2b28      	cmp	r3, #40	@ 0x28
 8006392:	d86b      	bhi.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006394:	a201      	add	r2, pc, #4	@ (adr r2, 800639c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	08006475 	.word	0x08006475
 80063a0:	0800646d 	.word	0x0800646d
 80063a4:	0800646d 	.word	0x0800646d
 80063a8:	0800646d 	.word	0x0800646d
 80063ac:	0800646d 	.word	0x0800646d
 80063b0:	0800646d 	.word	0x0800646d
 80063b4:	0800646d 	.word	0x0800646d
 80063b8:	0800646d 	.word	0x0800646d
 80063bc:	08006441 	.word	0x08006441
 80063c0:	0800646d 	.word	0x0800646d
 80063c4:	0800646d 	.word	0x0800646d
 80063c8:	0800646d 	.word	0x0800646d
 80063cc:	0800646d 	.word	0x0800646d
 80063d0:	0800646d 	.word	0x0800646d
 80063d4:	0800646d 	.word	0x0800646d
 80063d8:	0800646d 	.word	0x0800646d
 80063dc:	08006457 	.word	0x08006457
 80063e0:	0800646d 	.word	0x0800646d
 80063e4:	0800646d 	.word	0x0800646d
 80063e8:	0800646d 	.word	0x0800646d
 80063ec:	0800646d 	.word	0x0800646d
 80063f0:	0800646d 	.word	0x0800646d
 80063f4:	0800646d 	.word	0x0800646d
 80063f8:	0800646d 	.word	0x0800646d
 80063fc:	08006475 	.word	0x08006475
 8006400:	0800646d 	.word	0x0800646d
 8006404:	0800646d 	.word	0x0800646d
 8006408:	0800646d 	.word	0x0800646d
 800640c:	0800646d 	.word	0x0800646d
 8006410:	0800646d 	.word	0x0800646d
 8006414:	0800646d 	.word	0x0800646d
 8006418:	0800646d 	.word	0x0800646d
 800641c:	08006475 	.word	0x08006475
 8006420:	0800646d 	.word	0x0800646d
 8006424:	0800646d 	.word	0x0800646d
 8006428:	0800646d 	.word	0x0800646d
 800642c:	0800646d 	.word	0x0800646d
 8006430:	0800646d 	.word	0x0800646d
 8006434:	0800646d 	.word	0x0800646d
 8006438:	0800646d 	.word	0x0800646d
 800643c:	08006475 	.word	0x08006475
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006444:	3308      	adds	r3, #8
 8006446:	2101      	movs	r1, #1
 8006448:	4618      	mov	r0, r3
 800644a:	f000 ffc3 	bl	80073d4 <RCCEx_PLL2_Config>
 800644e:	4603      	mov	r3, r0
 8006450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006454:	e00f      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645a:	3328      	adds	r3, #40	@ 0x28
 800645c:	2101      	movs	r1, #1
 800645e:	4618      	mov	r0, r3
 8006460:	f001 f86a 	bl	8007538 <RCCEx_PLL3_Config>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800646a:	e004      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006472:	e000      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800647e:	4bbf      	ldr	r3, [pc, #764]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006482:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800648c:	4abb      	ldr	r2, [pc, #748]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800648e:	430b      	orrs	r3, r1
 8006490:	6553      	str	r3, [r2, #84]	@ 0x54
 8006492:	e003      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f002 0302 	and.w	r3, r2, #2
 80064a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064ac:	2300      	movs	r3, #0
 80064ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80064b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80064b6:	460b      	mov	r3, r1
 80064b8:	4313      	orrs	r3, r2
 80064ba:	d041      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d824      	bhi.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80064c6:	a201      	add	r2, pc, #4	@ (adr r2, 80064cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80064c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064cc:	08006519 	.word	0x08006519
 80064d0:	080064e5 	.word	0x080064e5
 80064d4:	080064fb 	.word	0x080064fb
 80064d8:	08006519 	.word	0x08006519
 80064dc:	08006519 	.word	0x08006519
 80064e0:	08006519 	.word	0x08006519
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e8:	3308      	adds	r3, #8
 80064ea:	2101      	movs	r1, #1
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 ff71 	bl	80073d4 <RCCEx_PLL2_Config>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064f8:	e00f      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fe:	3328      	adds	r3, #40	@ 0x28
 8006500:	2101      	movs	r1, #1
 8006502:	4618      	mov	r0, r3
 8006504:	f001 f818 	bl	8007538 <RCCEx_PLL3_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800650e:	e004      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006516:	e000      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800651a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10a      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006522:	4b96      	ldr	r3, [pc, #600]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006526:	f023 0107 	bic.w	r1, r3, #7
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006530:	4a92      	ldr	r2, [pc, #584]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006532:	430b      	orrs	r3, r1
 8006534:	6553      	str	r3, [r2, #84]	@ 0x54
 8006536:	e003      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800653c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f002 0304 	and.w	r3, r2, #4
 800654c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006550:	2300      	movs	r3, #0
 8006552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006556:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800655a:	460b      	mov	r3, r1
 800655c:	4313      	orrs	r3, r2
 800655e:	d044      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006568:	2b05      	cmp	r3, #5
 800656a:	d825      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800656c:	a201      	add	r2, pc, #4	@ (adr r2, 8006574 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	080065c1 	.word	0x080065c1
 8006578:	0800658d 	.word	0x0800658d
 800657c:	080065a3 	.word	0x080065a3
 8006580:	080065c1 	.word	0x080065c1
 8006584:	080065c1 	.word	0x080065c1
 8006588:	080065c1 	.word	0x080065c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800658c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006590:	3308      	adds	r3, #8
 8006592:	2101      	movs	r1, #1
 8006594:	4618      	mov	r0, r3
 8006596:	f000 ff1d 	bl	80073d4 <RCCEx_PLL2_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065a0:	e00f      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a6:	3328      	adds	r3, #40	@ 0x28
 80065a8:	2101      	movs	r1, #1
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 ffc4 	bl	8007538 <RCCEx_PLL3_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065b6:	e004      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065be:	e000      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80065c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065ca:	4b6c      	ldr	r3, [pc, #432]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ce:	f023 0107 	bic.w	r1, r3, #7
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065da:	4a68      	ldr	r2, [pc, #416]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065dc:	430b      	orrs	r3, r1
 80065de:	6593      	str	r3, [r2, #88]	@ 0x58
 80065e0:	e003      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	f002 0320 	and.w	r3, r2, #32
 80065f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065fa:	2300      	movs	r3, #0
 80065fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006604:	460b      	mov	r3, r1
 8006606:	4313      	orrs	r3, r2
 8006608:	d055      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006612:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006616:	d033      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006618:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800661c:	d82c      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800661e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006622:	d02f      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006628:	d826      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800662a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800662e:	d02b      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006630:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006634:	d820      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800663a:	d012      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800663c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006640:	d81a      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d022      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006646:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800664a:	d115      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800664c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006650:	3308      	adds	r3, #8
 8006652:	2100      	movs	r1, #0
 8006654:	4618      	mov	r0, r3
 8006656:	f000 febd 	bl	80073d4 <RCCEx_PLL2_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006660:	e015      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006666:	3328      	adds	r3, #40	@ 0x28
 8006668:	2102      	movs	r1, #2
 800666a:	4618      	mov	r0, r3
 800666c:	f000 ff64 	bl	8007538 <RCCEx_PLL3_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006676:	e00a      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800667e:	e006      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006680:	bf00      	nop
 8006682:	e004      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006684:	bf00      	nop
 8006686:	e002      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006688:	bf00      	nop
 800668a:	e000      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800668c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800668e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10b      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006696:	4b39      	ldr	r3, [pc, #228]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800669a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800669e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a6:	4a35      	ldr	r2, [pc, #212]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066a8:	430b      	orrs	r3, r1
 80066aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80066ac:	e003      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80066c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066c6:	2300      	movs	r3, #0
 80066c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80066cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4313      	orrs	r3, r2
 80066d4:	d058      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066e2:	d033      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80066e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066e8:	d82c      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ee:	d02f      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80066f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066f4:	d826      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066fa:	d02b      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80066fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006700:	d820      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006706:	d012      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800670c:	d81a      	bhi.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d022      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006716:	d115      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671c:	3308      	adds	r3, #8
 800671e:	2100      	movs	r1, #0
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fe57 	bl	80073d4 <RCCEx_PLL2_Config>
 8006726:	4603      	mov	r3, r0
 8006728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800672c:	e015      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800672e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006732:	3328      	adds	r3, #40	@ 0x28
 8006734:	2102      	movs	r1, #2
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fefe 	bl	8007538 <RCCEx_PLL3_Config>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006742:	e00a      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800674a:	e006      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800674c:	bf00      	nop
 800674e:	e004      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006750:	bf00      	nop
 8006752:	e002      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006754:	bf00      	nop
 8006756:	e000      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800675a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10e      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006762:	4b06      	ldr	r3, [pc, #24]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006766:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800676a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006772:	4a02      	ldr	r2, [pc, #8]	@ (800677c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006774:	430b      	orrs	r3, r1
 8006776:	6593      	str	r3, [r2, #88]	@ 0x58
 8006778:	e006      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800677a:	bf00      	nop
 800677c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006784:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006798:	2300      	movs	r3, #0
 800679a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800679e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80067a2:	460b      	mov	r3, r1
 80067a4:	4313      	orrs	r3, r2
 80067a6:	d055      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80067a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067b4:	d033      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80067b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067ba:	d82c      	bhi.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067c0:	d02f      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80067c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067c6:	d826      	bhi.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067cc:	d02b      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80067ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067d2:	d820      	bhi.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067d8:	d012      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80067da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067de:	d81a      	bhi.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d022      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80067e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067e8:	d115      	bne.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ee:	3308      	adds	r3, #8
 80067f0:	2100      	movs	r1, #0
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fdee 	bl	80073d4 <RCCEx_PLL2_Config>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067fe:	e015      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006804:	3328      	adds	r3, #40	@ 0x28
 8006806:	2102      	movs	r1, #2
 8006808:	4618      	mov	r0, r3
 800680a:	f000 fe95 	bl	8007538 <RCCEx_PLL3_Config>
 800680e:	4603      	mov	r3, r0
 8006810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006814:	e00a      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800681c:	e006      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800681e:	bf00      	nop
 8006820:	e004      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006822:	bf00      	nop
 8006824:	e002      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006826:	bf00      	nop
 8006828:	e000      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800682a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800682c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10b      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006834:	4ba1      	ldr	r3, [pc, #644]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006838:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800683c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006840:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006844:	4a9d      	ldr	r2, [pc, #628]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006846:	430b      	orrs	r3, r1
 8006848:	6593      	str	r3, [r2, #88]	@ 0x58
 800684a:	e003      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006850:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f002 0308 	and.w	r3, r2, #8
 8006860:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006864:	2300      	movs	r3, #0
 8006866:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800686a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800686e:	460b      	mov	r3, r1
 8006870:	4313      	orrs	r3, r2
 8006872:	d01e      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800687c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006880:	d10c      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006886:	3328      	adds	r3, #40	@ 0x28
 8006888:	2102      	movs	r1, #2
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fe54 	bl	8007538 <RCCEx_PLL3_Config>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800689c:	4b87      	ldr	r3, [pc, #540]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800689e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ac:	4a83      	ldr	r2, [pc, #524]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068ae:	430b      	orrs	r3, r1
 80068b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	f002 0310 	and.w	r3, r2, #16
 80068be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068c2:	2300      	movs	r3, #0
 80068c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80068cc:	460b      	mov	r3, r1
 80068ce:	4313      	orrs	r3, r2
 80068d0:	d01e      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068de:	d10c      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e4:	3328      	adds	r3, #40	@ 0x28
 80068e6:	2102      	movs	r1, #2
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fe25 	bl	8007538 <RCCEx_PLL3_Config>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068fa:	4b70      	ldr	r3, [pc, #448]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006906:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800690a:	4a6c      	ldr	r2, [pc, #432]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800690c:	430b      	orrs	r3, r1
 800690e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800691c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006920:	2300      	movs	r3, #0
 8006922:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006926:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800692a:	460b      	mov	r3, r1
 800692c:	4313      	orrs	r3, r2
 800692e:	d03e      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006934:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800693c:	d022      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800693e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006942:	d81b      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800694c:	d00b      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800694e:	e015      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006954:	3308      	adds	r3, #8
 8006956:	2100      	movs	r1, #0
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fd3b 	bl	80073d4 <RCCEx_PLL2_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006964:	e00f      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696a:	3328      	adds	r3, #40	@ 0x28
 800696c:	2102      	movs	r1, #2
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fde2 	bl	8007538 <RCCEx_PLL3_Config>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800697a:	e004      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006982:	e000      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10b      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800698e:	4b4b      	ldr	r3, [pc, #300]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006992:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800699e:	4a47      	ldr	r2, [pc, #284]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80069a4:	e003      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80069ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069bc:	2300      	movs	r3, #0
 80069be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80069c4:	460b      	mov	r3, r1
 80069c6:	4313      	orrs	r3, r2
 80069c8:	d03b      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069d6:	d01f      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80069d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069dc:	d818      	bhi.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80069de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069e2:	d003      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80069e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069e8:	d007      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80069ea:	e011      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069ec:	4b33      	ldr	r3, [pc, #204]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f0:	4a32      	ldr	r2, [pc, #200]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069f8:	e00f      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fe:	3328      	adds	r3, #40	@ 0x28
 8006a00:	2101      	movs	r1, #1
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fd98 	bl	8007538 <RCCEx_PLL3_Config>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a0e:	e004      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a16:	e000      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10b      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a22:	4b26      	ldr	r3, [pc, #152]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a32:	4a22      	ldr	r2, [pc, #136]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a38:	e003      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a50:	2300      	movs	r3, #0
 8006a52:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	d034      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a6c:	d007      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a6e:	e011      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a70:	4b12      	ldr	r3, [pc, #72]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	4a11      	ldr	r2, [pc, #68]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a7c:	e00e      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a82:	3308      	adds	r3, #8
 8006a84:	2102      	movs	r1, #2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fca4 	bl	80073d4 <RCCEx_PLL2_Config>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a92:	e003      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10d      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006aa4:	4b05      	ldr	r3, [pc, #20]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab2:	4a02      	ldr	r2, [pc, #8]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ab4:	430b      	orrs	r3, r1
 8006ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ab8:	e006      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006aba:	bf00      	nop
 8006abc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ada:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	d00c      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae8:	3328      	adds	r3, #40	@ 0x28
 8006aea:	2102      	movs	r1, #2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 fd23 	bl	8007538 <RCCEx_PLL3_Config>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006b14:	460b      	mov	r3, r1
 8006b16:	4313      	orrs	r3, r2
 8006b18:	d038      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b26:	d018      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006b28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b2c:	d811      	bhi.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b32:	d014      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b38:	d80b      	bhi.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d011      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b42:	d106      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b44:	4bc3      	ldr	r3, [pc, #780]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b48:	4ac2      	ldr	r2, [pc, #776]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b50:	e008      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b58:	e004      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b5a:	bf00      	nop
 8006b5c:	e002      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b5e:	bf00      	nop
 8006b60:	e000      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10b      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b6c:	4bb9      	ldr	r3, [pc, #740]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b70:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b7c:	4ab5      	ldr	r2, [pc, #724]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b7e:	430b      	orrs	r3, r1
 8006b80:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b82:	e003      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ba8:	4baa      	ldr	r3, [pc, #680]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bb6:	4aa7      	ldr	r2, [pc, #668]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006bc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bca:	2300      	movs	r3, #0
 8006bcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	d00a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006bd8:	4b9e      	ldr	r3, [pc, #632]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006be8:	4a9a      	ldr	r2, [pc, #616]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bea:	430b      	orrs	r3, r1
 8006bec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006c04:	460b      	mov	r3, r1
 8006c06:	4313      	orrs	r3, r2
 8006c08:	d009      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c0a:	4b92      	ldr	r3, [pc, #584]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c0e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c18:	4a8e      	ldr	r2, [pc, #568]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c34:	460b      	mov	r3, r1
 8006c36:	4313      	orrs	r3, r2
 8006c38:	d00e      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c3a:	4b86      	ldr	r3, [pc, #536]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	4a85      	ldr	r2, [pc, #532]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c44:	6113      	str	r3, [r2, #16]
 8006c46:	4b83      	ldr	r3, [pc, #524]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c48:	6919      	ldr	r1, [r3, #16]
 8006c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c52:	4a80      	ldr	r2, [pc, #512]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c60:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c66:	2300      	movs	r3, #0
 8006c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4313      	orrs	r3, r2
 8006c72:	d009      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c74:	4b77      	ldr	r3, [pc, #476]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c78:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c82:	4a74      	ldr	r2, [pc, #464]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c84:	430b      	orrs	r3, r1
 8006c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c96:	2300      	movs	r3, #0
 8006c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	d00a      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cb4:	4a67      	ldr	r2, [pc, #412]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ccc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	d011      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cda:	3308      	adds	r3, #8
 8006cdc:	2100      	movs	r1, #0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fb78 	bl	80073d4 <RCCEx_PLL2_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	2100      	movs	r1, #0
 8006d04:	6239      	str	r1, [r7, #32]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d0c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d10:	460b      	mov	r3, r1
 8006d12:	4313      	orrs	r3, r2
 8006d14:	d011      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fb58 	bl	80073d4 <RCCEx_PLL2_Config>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	2100      	movs	r1, #0
 8006d44:	61b9      	str	r1, [r7, #24]
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d50:	460b      	mov	r3, r1
 8006d52:	4313      	orrs	r3, r2
 8006d54:	d011      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	2102      	movs	r1, #2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fb38 	bl	80073d4 <RCCEx_PLL2_Config>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	2100      	movs	r1, #0
 8006d84:	6139      	str	r1, [r7, #16]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d90:	460b      	mov	r3, r1
 8006d92:	4313      	orrs	r3, r2
 8006d94:	d011      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9a:	3328      	adds	r3, #40	@ 0x28
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fbca 	bl	8007538 <RCCEx_PLL3_Config>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	f003 0310 	and.w	r3, r3, #16
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	d011      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dda:	3328      	adds	r3, #40	@ 0x28
 8006ddc:	2101      	movs	r1, #1
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fbaa 	bl	8007538 <RCCEx_PLL3_Config>
 8006de4:	4603      	mov	r3, r0
 8006de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	2100      	movs	r1, #0
 8006e04:	6039      	str	r1, [r7, #0]
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	607b      	str	r3, [r7, #4]
 8006e0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e10:	460b      	mov	r3, r1
 8006e12:	4313      	orrs	r3, r2
 8006e14:	d011      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1a:	3328      	adds	r3, #40	@ 0x28
 8006e1c:	2102      	movs	r1, #2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fb8a 	bl	8007538 <RCCEx_PLL3_Config>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006e3a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	e000      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e54:	58024400 	.word	0x58024400

08006e58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e5c:	f7fe fd96 	bl	800598c <HAL_RCC_GetHCLKFreq>
 8006e60:	4602      	mov	r2, r0
 8006e62:	4b06      	ldr	r3, [pc, #24]	@ (8006e7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	091b      	lsrs	r3, r3, #4
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	4904      	ldr	r1, [pc, #16]	@ (8006e80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e6e:	5ccb      	ldrb	r3, [r1, r3]
 8006e70:	f003 031f 	and.w	r3, r3, #31
 8006e74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	58024400 	.word	0x58024400
 8006e80:	0800efd0 	.word	0x0800efd0

08006e84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b089      	sub	sp, #36	@ 0x24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e8c:	4ba1      	ldr	r3, [pc, #644]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e96:	4b9f      	ldr	r3, [pc, #636]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9a:	0b1b      	lsrs	r3, r3, #12
 8006e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ea0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ea2:	4b9c      	ldr	r3, [pc, #624]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea6:	091b      	lsrs	r3, r3, #4
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006eae:	4b99      	ldr	r3, [pc, #612]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb2:	08db      	lsrs	r3, r3, #3
 8006eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	fb02 f303 	mul.w	r3, r2, r3
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8111 	beq.w	80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	f000 8083 	beq.w	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	f200 80a1 	bhi.w	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d056      	beq.n	8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006eee:	e099      	b.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ef0:	4b88      	ldr	r3, [pc, #544]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d02d      	beq.n	8006f58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006efc:	4b85      	ldr	r3, [pc, #532]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	08db      	lsrs	r3, r3, #3
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	4a84      	ldr	r2, [pc, #528]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f08:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	ee07 3a90 	vmov	s15, r3
 8006f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f26:	4b7b      	ldr	r3, [pc, #492]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800711c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f56:	e087      	b.n	8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6a:	4b6a      	ldr	r3, [pc, #424]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800711c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f9a:	e065      	b.n	8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fae:	4b59      	ldr	r3, [pc, #356]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800711c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fde:	e043      	b.n	8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff2:	4b48      	ldr	r3, [pc, #288]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007002:	ed97 6a03 	vldr	s12, [r7, #12]
 8007006:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800711c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800700a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007022:	e021      	b.n	8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007036:	4b37      	ldr	r3, [pc, #220]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007046:	ed97 6a03 	vldr	s12, [r7, #12]
 800704a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800711c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800704e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800705a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007066:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007068:	4b2a      	ldr	r3, [pc, #168]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706c:	0a5b      	lsrs	r3, r3, #9
 800706e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800707e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007082:	edd7 6a07 	vldr	s13, [r7, #28]
 8007086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708e:	ee17 2a90 	vmov	r2, s15
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007096:	4b1f      	ldr	r3, [pc, #124]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709a:	0c1b      	lsrs	r3, r3, #16
 800709c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070a0:	ee07 3a90 	vmov	s15, r3
 80070a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070bc:	ee17 2a90 	vmov	r2, s15
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80070c4:	4b13      	ldr	r3, [pc, #76]	@ (8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	0e1b      	lsrs	r3, r3, #24
 80070ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070de:	edd7 6a07 	vldr	s13, [r7, #28]
 80070e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ea:	ee17 2a90 	vmov	r2, s15
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070f2:	e008      	b.n	8007106 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	609a      	str	r2, [r3, #8]
}
 8007106:	bf00      	nop
 8007108:	3724      	adds	r7, #36	@ 0x24
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	58024400 	.word	0x58024400
 8007118:	03d09000 	.word	0x03d09000
 800711c:	46000000 	.word	0x46000000
 8007120:	4c742400 	.word	0x4c742400
 8007124:	4a742400 	.word	0x4a742400
 8007128:	4bbebc20 	.word	0x4bbebc20

0800712c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800712c:	b480      	push	{r7}
 800712e:	b089      	sub	sp, #36	@ 0x24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007134:	4ba1      	ldr	r3, [pc, #644]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007138:	f003 0303 	and.w	r3, r3, #3
 800713c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800713e:	4b9f      	ldr	r3, [pc, #636]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007142:	0d1b      	lsrs	r3, r3, #20
 8007144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007148:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800714a:	4b9c      	ldr	r3, [pc, #624]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800714c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714e:	0a1b      	lsrs	r3, r3, #8
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007156:	4b99      	ldr	r3, [pc, #612]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800715a:	08db      	lsrs	r3, r3, #3
 800715c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	fb02 f303 	mul.w	r3, r2, r3
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8111 	beq.w	800739c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b02      	cmp	r3, #2
 800717e:	f000 8083 	beq.w	8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b02      	cmp	r3, #2
 8007186:	f200 80a1 	bhi.w	80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d056      	beq.n	8007244 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007196:	e099      	b.n	80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007198:	4b88      	ldr	r3, [pc, #544]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d02d      	beq.n	8007200 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071a4:	4b85      	ldr	r3, [pc, #532]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	08db      	lsrs	r3, r3, #3
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	4a84      	ldr	r2, [pc, #528]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
 80071b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ce:	4b7b      	ldr	r3, [pc, #492]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071fe:	e087      	b.n	8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800720e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007212:	4b6a      	ldr	r3, [pc, #424]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007222:	ed97 6a03 	vldr	s12, [r7, #12]
 8007226:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800722a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007242:	e065      	b.n	8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007256:	4b59      	ldr	r3, [pc, #356]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007266:	ed97 6a03 	vldr	s12, [r7, #12]
 800726a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800726e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800727a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007286:	e043      	b.n	8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007292:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729a:	4b48      	ldr	r3, [pc, #288]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800729c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ca:	e021      	b.n	8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072de:	4b37      	ldr	r3, [pc, #220]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800730e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007310:	4b2a      	ldr	r3, [pc, #168]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007314:	0a5b      	lsrs	r3, r3, #9
 8007316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800732a:	edd7 6a07 	vldr	s13, [r7, #28]
 800732e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007336:	ee17 2a90 	vmov	r2, s15
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800733e:	4b1f      	ldr	r3, [pc, #124]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007342:	0c1b      	lsrs	r3, r3, #16
 8007344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007348:	ee07 3a90 	vmov	s15, r3
 800734c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007350:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007354:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007358:	edd7 6a07 	vldr	s13, [r7, #28]
 800735c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007364:	ee17 2a90 	vmov	r2, s15
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800736c:	4b13      	ldr	r3, [pc, #76]	@ (80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800736e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007370:	0e1b      	lsrs	r3, r3, #24
 8007372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007382:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007386:	edd7 6a07 	vldr	s13, [r7, #28]
 800738a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800738e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007392:	ee17 2a90 	vmov	r2, s15
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800739a:	e008      	b.n	80073ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	609a      	str	r2, [r3, #8]
}
 80073ae:	bf00      	nop
 80073b0:	3724      	adds	r7, #36	@ 0x24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	58024400 	.word	0x58024400
 80073c0:	03d09000 	.word	0x03d09000
 80073c4:	46000000 	.word	0x46000000
 80073c8:	4c742400 	.word	0x4c742400
 80073cc:	4a742400 	.word	0x4a742400
 80073d0:	4bbebc20 	.word	0x4bbebc20

080073d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073e2:	4b53      	ldr	r3, [pc, #332]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80073e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d101      	bne.n	80073f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e099      	b.n	8007526 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073f2:	4b4f      	ldr	r3, [pc, #316]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a4e      	ldr	r2, [pc, #312]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80073f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073fe:	f7fa f9b5 	bl	800176c <HAL_GetTick>
 8007402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007404:	e008      	b.n	8007418 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007406:	f7fa f9b1 	bl	800176c <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d901      	bls.n	8007418 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e086      	b.n	8007526 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007418:	4b45      	ldr	r3, [pc, #276]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1f0      	bne.n	8007406 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007424:	4b42      	ldr	r3, [pc, #264]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 8007426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007428:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	031b      	lsls	r3, r3, #12
 8007432:	493f      	ldr	r1, [pc, #252]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 8007434:	4313      	orrs	r3, r2
 8007436:	628b      	str	r3, [r1, #40]	@ 0x28
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	3b01      	subs	r3, #1
 800743e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	3b01      	subs	r3, #1
 8007448:	025b      	lsls	r3, r3, #9
 800744a:	b29b      	uxth	r3, r3
 800744c:	431a      	orrs	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	3b01      	subs	r3, #1
 8007454:	041b      	lsls	r3, r3, #16
 8007456:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	3b01      	subs	r3, #1
 8007462:	061b      	lsls	r3, r3, #24
 8007464:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007468:	4931      	ldr	r1, [pc, #196]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 800746a:	4313      	orrs	r3, r2
 800746c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800746e:	4b30      	ldr	r3, [pc, #192]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 8007470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007472:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	492d      	ldr	r1, [pc, #180]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 800747c:	4313      	orrs	r3, r2
 800747e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007480:	4b2b      	ldr	r3, [pc, #172]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007484:	f023 0220 	bic.w	r2, r3, #32
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	4928      	ldr	r1, [pc, #160]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 800748e:	4313      	orrs	r3, r2
 8007490:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007492:	4b27      	ldr	r3, [pc, #156]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 8007494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007496:	4a26      	ldr	r2, [pc, #152]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 8007498:	f023 0310 	bic.w	r3, r3, #16
 800749c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800749e:	4b24      	ldr	r3, [pc, #144]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80074a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074a2:	4b24      	ldr	r3, [pc, #144]	@ (8007534 <RCCEx_PLL2_Config+0x160>)
 80074a4:	4013      	ands	r3, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	69d2      	ldr	r2, [r2, #28]
 80074aa:	00d2      	lsls	r2, r2, #3
 80074ac:	4920      	ldr	r1, [pc, #128]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074b2:	4b1f      	ldr	r3, [pc, #124]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80074b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	f043 0310 	orr.w	r3, r3, #16
 80074bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d106      	bne.n	80074d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80074c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	4a19      	ldr	r2, [pc, #100]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80074ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074d0:	e00f      	b.n	80074f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d106      	bne.n	80074e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074d8:	4b15      	ldr	r3, [pc, #84]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80074da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074dc:	4a14      	ldr	r2, [pc, #80]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80074de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074e4:	e005      	b.n	80074f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074e6:	4b12      	ldr	r3, [pc, #72]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80074e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ea:	4a11      	ldr	r2, [pc, #68]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80074ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a0e      	ldr	r2, [pc, #56]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 80074f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074fe:	f7fa f935 	bl	800176c <HAL_GetTick>
 8007502:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007504:	e008      	b.n	8007518 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007506:	f7fa f931 	bl	800176c <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b02      	cmp	r3, #2
 8007512:	d901      	bls.n	8007518 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e006      	b.n	8007526 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007518:	4b05      	ldr	r3, [pc, #20]	@ (8007530 <RCCEx_PLL2_Config+0x15c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0f0      	beq.n	8007506 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007524:	7bfb      	ldrb	r3, [r7, #15]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	58024400 	.word	0x58024400
 8007534:	ffff0007 	.word	0xffff0007

08007538 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007546:	4b53      	ldr	r3, [pc, #332]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 8007548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	2b03      	cmp	r3, #3
 8007550:	d101      	bne.n	8007556 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e099      	b.n	800768a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007556:	4b4f      	ldr	r3, [pc, #316]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a4e      	ldr	r2, [pc, #312]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 800755c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007562:	f7fa f903 	bl	800176c <HAL_GetTick>
 8007566:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007568:	e008      	b.n	800757c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800756a:	f7fa f8ff 	bl	800176c <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	2b02      	cmp	r3, #2
 8007576:	d901      	bls.n	800757c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e086      	b.n	800768a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800757c:	4b45      	ldr	r3, [pc, #276]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1f0      	bne.n	800756a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007588:	4b42      	ldr	r3, [pc, #264]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 800758a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	051b      	lsls	r3, r3, #20
 8007596:	493f      	ldr	r1, [pc, #252]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 8007598:	4313      	orrs	r3, r2
 800759a:	628b      	str	r3, [r1, #40]	@ 0x28
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	025b      	lsls	r3, r3, #9
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	431a      	orrs	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	041b      	lsls	r3, r3, #16
 80075ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075be:	431a      	orrs	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	061b      	lsls	r3, r3, #24
 80075c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075cc:	4931      	ldr	r1, [pc, #196]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075d2:	4b30      	ldr	r3, [pc, #192]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	492d      	ldr	r1, [pc, #180]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 80075e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	4928      	ldr	r1, [pc, #160]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075f6:	4b27      	ldr	r3, [pc, #156]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 80075f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fa:	4a26      	ldr	r2, [pc, #152]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 80075fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007600:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007602:	4b24      	ldr	r3, [pc, #144]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 8007604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007606:	4b24      	ldr	r3, [pc, #144]	@ (8007698 <RCCEx_PLL3_Config+0x160>)
 8007608:	4013      	ands	r3, r2
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	69d2      	ldr	r2, [r2, #28]
 800760e:	00d2      	lsls	r2, r2, #3
 8007610:	4920      	ldr	r1, [pc, #128]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 8007612:	4313      	orrs	r3, r2
 8007614:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007616:	4b1f      	ldr	r3, [pc, #124]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 8007618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761a:	4a1e      	ldr	r2, [pc, #120]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 800761c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007620:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007628:	4b1a      	ldr	r3, [pc, #104]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 800762a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762c:	4a19      	ldr	r2, [pc, #100]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 800762e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007632:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007634:	e00f      	b.n	8007656 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d106      	bne.n	800764a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800763c:	4b15      	ldr	r3, [pc, #84]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 800763e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007640:	4a14      	ldr	r2, [pc, #80]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 8007642:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007646:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007648:	e005      	b.n	8007656 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800764a:	4b12      	ldr	r3, [pc, #72]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 800764c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764e:	4a11      	ldr	r2, [pc, #68]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 8007650:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007654:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007656:	4b0f      	ldr	r3, [pc, #60]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a0e      	ldr	r2, [pc, #56]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 800765c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007662:	f7fa f883 	bl	800176c <HAL_GetTick>
 8007666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007668:	e008      	b.n	800767c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800766a:	f7fa f87f 	bl	800176c <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	2b02      	cmp	r3, #2
 8007676:	d901      	bls.n	800767c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e006      	b.n	800768a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800767c:	4b05      	ldr	r3, [pc, #20]	@ (8007694 <RCCEx_PLL3_Config+0x15c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0f0      	beq.n	800766a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007688:	7bfb      	ldrb	r3, [r7, #15]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	58024400 	.word	0x58024400
 8007698:	ffff0007 	.word	0xffff0007

0800769c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e049      	b.n	8007742 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d106      	bne.n	80076c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7f9 fe00 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3304      	adds	r3, #4
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f000 f96e 	bl	80079bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d020      	beq.n	80077ae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d01b      	beq.n	80077ae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f06f 0202 	mvn.w	r2, #2
 800777e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	f003 0303 	and.w	r3, r3, #3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f8f3 	bl	8007980 <HAL_TIM_IC_CaptureCallback>
 800779a:	e005      	b.n	80077a8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f8e5 	bl	800796c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f8f6 	bl	8007994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d020      	beq.n	80077fa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01b      	beq.n	80077fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f06f 0204 	mvn.w	r2, #4
 80077ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f8cd 	bl	8007980 <HAL_TIM_IC_CaptureCallback>
 80077e6:	e005      	b.n	80077f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f8bf 	bl	800796c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f8d0 	bl	8007994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	2b00      	cmp	r3, #0
 8007802:	d020      	beq.n	8007846 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f003 0308 	and.w	r3, r3, #8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d01b      	beq.n	8007846 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f06f 0208 	mvn.w	r2, #8
 8007816:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2204      	movs	r2, #4
 800781c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f8a7 	bl	8007980 <HAL_TIM_IC_CaptureCallback>
 8007832:	e005      	b.n	8007840 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f899 	bl	800796c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f8aa 	bl	8007994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f003 0310 	and.w	r3, r3, #16
 800784c:	2b00      	cmp	r3, #0
 800784e:	d020      	beq.n	8007892 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f003 0310 	and.w	r3, r3, #16
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01b      	beq.n	8007892 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f06f 0210 	mvn.w	r2, #16
 8007862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2208      	movs	r2, #8
 8007868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f881 	bl	8007980 <HAL_TIM_IC_CaptureCallback>
 800787e:	e005      	b.n	800788c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f873 	bl	800796c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f884 	bl	8007994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00c      	beq.n	80078b6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d007      	beq.n	80078b6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f06f 0201 	mvn.w	r2, #1
 80078ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f851 	bl	8007958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d104      	bne.n	80078ca <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00c      	beq.n	80078e4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d007      	beq.n	80078e4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80078dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9a4 	bl	8007c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00c      	beq.n	8007908 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d007      	beq.n	8007908 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f99c 	bl	8007c40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00c      	beq.n	800792c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f83e 	bl	80079a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00c      	beq.n	8007950 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f003 0320 	and.w	r3, r3, #32
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f06f 0220 	mvn.w	r2, #32
 8007948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f964 	bl	8007c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007950:	bf00      	nop
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a43      	ldr	r2, [pc, #268]	@ (8007adc <TIM_Base_SetConfig+0x120>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d013      	beq.n	80079fc <TIM_Base_SetConfig+0x40>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079da:	d00f      	beq.n	80079fc <TIM_Base_SetConfig+0x40>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a40      	ldr	r2, [pc, #256]	@ (8007ae0 <TIM_Base_SetConfig+0x124>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d00b      	beq.n	80079fc <TIM_Base_SetConfig+0x40>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ae4 <TIM_Base_SetConfig+0x128>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d007      	beq.n	80079fc <TIM_Base_SetConfig+0x40>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a3e      	ldr	r2, [pc, #248]	@ (8007ae8 <TIM_Base_SetConfig+0x12c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d003      	beq.n	80079fc <TIM_Base_SetConfig+0x40>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a3d      	ldr	r2, [pc, #244]	@ (8007aec <TIM_Base_SetConfig+0x130>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d108      	bne.n	8007a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a32      	ldr	r2, [pc, #200]	@ (8007adc <TIM_Base_SetConfig+0x120>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d01f      	beq.n	8007a56 <TIM_Base_SetConfig+0x9a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a1c:	d01b      	beq.n	8007a56 <TIM_Base_SetConfig+0x9a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a2f      	ldr	r2, [pc, #188]	@ (8007ae0 <TIM_Base_SetConfig+0x124>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d017      	beq.n	8007a56 <TIM_Base_SetConfig+0x9a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a2e      	ldr	r2, [pc, #184]	@ (8007ae4 <TIM_Base_SetConfig+0x128>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d013      	beq.n	8007a56 <TIM_Base_SetConfig+0x9a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a2d      	ldr	r2, [pc, #180]	@ (8007ae8 <TIM_Base_SetConfig+0x12c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00f      	beq.n	8007a56 <TIM_Base_SetConfig+0x9a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a2c      	ldr	r2, [pc, #176]	@ (8007aec <TIM_Base_SetConfig+0x130>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00b      	beq.n	8007a56 <TIM_Base_SetConfig+0x9a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a2b      	ldr	r2, [pc, #172]	@ (8007af0 <TIM_Base_SetConfig+0x134>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d007      	beq.n	8007a56 <TIM_Base_SetConfig+0x9a>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a2a      	ldr	r2, [pc, #168]	@ (8007af4 <TIM_Base_SetConfig+0x138>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d003      	beq.n	8007a56 <TIM_Base_SetConfig+0x9a>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a29      	ldr	r2, [pc, #164]	@ (8007af8 <TIM_Base_SetConfig+0x13c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d108      	bne.n	8007a68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a14      	ldr	r2, [pc, #80]	@ (8007adc <TIM_Base_SetConfig+0x120>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00f      	beq.n	8007aae <TIM_Base_SetConfig+0xf2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a16      	ldr	r2, [pc, #88]	@ (8007aec <TIM_Base_SetConfig+0x130>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00b      	beq.n	8007aae <TIM_Base_SetConfig+0xf2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a15      	ldr	r2, [pc, #84]	@ (8007af0 <TIM_Base_SetConfig+0x134>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d007      	beq.n	8007aae <TIM_Base_SetConfig+0xf2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a14      	ldr	r2, [pc, #80]	@ (8007af4 <TIM_Base_SetConfig+0x138>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d003      	beq.n	8007aae <TIM_Base_SetConfig+0xf2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a13      	ldr	r2, [pc, #76]	@ (8007af8 <TIM_Base_SetConfig+0x13c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d103      	bne.n	8007ab6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	691a      	ldr	r2, [r3, #16]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f043 0204 	orr.w	r2, r3, #4
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	601a      	str	r2, [r3, #0]
}
 8007ace:	bf00      	nop
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40010000 	.word	0x40010000
 8007ae0:	40000400 	.word	0x40000400
 8007ae4:	40000800 	.word	0x40000800
 8007ae8:	40000c00 	.word	0x40000c00
 8007aec:	40010400 	.word	0x40010400
 8007af0:	40014000 	.word	0x40014000
 8007af4:	40014400 	.word	0x40014400
 8007af8:	40014800 	.word	0x40014800

08007afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e06d      	b.n	8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a30      	ldr	r2, [pc, #192]	@ (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d004      	beq.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a2f      	ldr	r2, [pc, #188]	@ (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d108      	bne.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007b4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a20      	ldr	r2, [pc, #128]	@ (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d022      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b86:	d01d      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d018      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1c      	ldr	r2, [pc, #112]	@ (8007c08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d013      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00e      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a15      	ldr	r2, [pc, #84]	@ (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d009      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a16      	ldr	r2, [pc, #88]	@ (8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d004      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a15      	ldr	r2, [pc, #84]	@ (8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d10c      	bne.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	40010000 	.word	0x40010000
 8007c00:	40010400 	.word	0x40010400
 8007c04:	40000400 	.word	0x40000400
 8007c08:	40000800 	.word	0x40000800
 8007c0c:	40000c00 	.word	0x40000c00
 8007c10:	40001800 	.word	0x40001800
 8007c14:	40014000 	.word	0x40014000

08007c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e042      	b.n	8007cec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d106      	bne.n	8007c7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7f9 fb4d 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2224      	movs	r2, #36	@ 0x24
 8007c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0201 	bic.w	r2, r2, #1
 8007c94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 f986 	bl	8008fb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fc1b 	bl	80084e0 <UART_SetConfig>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d101      	bne.n	8007cb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e01b      	b.n	8007cec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0201 	orr.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fa05 	bl	80090f4 <UART_CheckIdleState>
 8007cea:	4603      	mov	r3, r0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b0ba      	sub	sp, #232	@ 0xe8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007d1e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007d22:	4013      	ands	r3, r2
 8007d24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007d28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d11b      	bne.n	8007d68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d015      	beq.n	8007d68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d105      	bne.n	8007d54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d009      	beq.n	8007d68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 8393 	beq.w	8008484 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	4798      	blx	r3
      }
      return;
 8007d66:	e38d      	b.n	8008484 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 8123 	beq.w	8007fb8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007d72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007d76:	4b8d      	ldr	r3, [pc, #564]	@ (8007fac <HAL_UART_IRQHandler+0x2b8>)
 8007d78:	4013      	ands	r3, r2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007d7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007d82:	4b8b      	ldr	r3, [pc, #556]	@ (8007fb0 <HAL_UART_IRQHandler+0x2bc>)
 8007d84:	4013      	ands	r3, r2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 8116 	beq.w	8007fb8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d011      	beq.n	8007dbc <HAL_UART_IRQHandler+0xc8>
 8007d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2201      	movs	r2, #1
 8007daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007db2:	f043 0201 	orr.w	r2, r3, #1
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dc0:	f003 0302 	and.w	r3, r3, #2
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d011      	beq.n	8007dec <HAL_UART_IRQHandler+0xf8>
 8007dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2202      	movs	r2, #2
 8007dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007de2:	f043 0204 	orr.w	r2, r3, #4
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d011      	beq.n	8007e1c <HAL_UART_IRQHandler+0x128>
 8007df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2204      	movs	r2, #4
 8007e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e12:	f043 0202 	orr.w	r2, r3, #2
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d017      	beq.n	8007e58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d105      	bne.n	8007e40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007e38:	4b5c      	ldr	r3, [pc, #368]	@ (8007fac <HAL_UART_IRQHandler+0x2b8>)
 8007e3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2208      	movs	r2, #8
 8007e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e4e:	f043 0208 	orr.w	r2, r3, #8
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d012      	beq.n	8007e8a <HAL_UART_IRQHandler+0x196>
 8007e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00c      	beq.n	8007e8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e80:	f043 0220 	orr.w	r2, r3, #32
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 82f9 	beq.w	8008488 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d013      	beq.n	8007eca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d105      	bne.n	8007eba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d007      	beq.n	8007eca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ede:	2b40      	cmp	r3, #64	@ 0x40
 8007ee0:	d005      	beq.n	8007eee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ee6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d054      	beq.n	8007f98 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fa18 	bl	8009324 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007efe:	2b40      	cmp	r3, #64	@ 0x40
 8007f00:	d146      	bne.n	8007f90 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3308      	adds	r3, #8
 8007f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1d9      	bne.n	8007f02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d017      	beq.n	8007f88 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f5e:	4a15      	ldr	r2, [pc, #84]	@ (8007fb4 <HAL_UART_IRQHandler+0x2c0>)
 8007f60:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fa f8e1 	bl	8002130 <HAL_DMA_Abort_IT>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d019      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007f82:	4610      	mov	r0, r2
 8007f84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f86:	e00f      	b.n	8007fa8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fa93 	bl	80084b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f8e:	e00b      	b.n	8007fa8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fa8f 	bl	80084b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f96:	e007      	b.n	8007fa8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa8b 	bl	80084b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007fa6:	e26f      	b.n	8008488 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa8:	bf00      	nop
    return;
 8007faa:	e26d      	b.n	8008488 <HAL_UART_IRQHandler+0x794>
 8007fac:	10000001 	.word	0x10000001
 8007fb0:	04000120 	.word	0x04000120
 8007fb4:	080093f1 	.word	0x080093f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	f040 8203 	bne.w	80083c8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fc6:	f003 0310 	and.w	r3, r3, #16
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 81fc 	beq.w	80083c8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fd4:	f003 0310 	and.w	r3, r3, #16
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 81f5 	beq.w	80083c8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2210      	movs	r2, #16
 8007fe4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ff0:	2b40      	cmp	r3, #64	@ 0x40
 8007ff2:	f040 816d 	bne.w	80082d0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4aa4      	ldr	r2, [pc, #656]	@ (8008290 <HAL_UART_IRQHandler+0x59c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d068      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4aa1      	ldr	r2, [pc, #644]	@ (8008294 <HAL_UART_IRQHandler+0x5a0>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d061      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a9f      	ldr	r2, [pc, #636]	@ (8008298 <HAL_UART_IRQHandler+0x5a4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d05a      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a9c      	ldr	r2, [pc, #624]	@ (800829c <HAL_UART_IRQHandler+0x5a8>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d053      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a9a      	ldr	r2, [pc, #616]	@ (80082a0 <HAL_UART_IRQHandler+0x5ac>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d04c      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a97      	ldr	r2, [pc, #604]	@ (80082a4 <HAL_UART_IRQHandler+0x5b0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d045      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a95      	ldr	r2, [pc, #596]	@ (80082a8 <HAL_UART_IRQHandler+0x5b4>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d03e      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a92      	ldr	r2, [pc, #584]	@ (80082ac <HAL_UART_IRQHandler+0x5b8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d037      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a90      	ldr	r2, [pc, #576]	@ (80082b0 <HAL_UART_IRQHandler+0x5bc>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d030      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a8d      	ldr	r2, [pc, #564]	@ (80082b4 <HAL_UART_IRQHandler+0x5c0>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d029      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a8b      	ldr	r2, [pc, #556]	@ (80082b8 <HAL_UART_IRQHandler+0x5c4>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d022      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a88      	ldr	r2, [pc, #544]	@ (80082bc <HAL_UART_IRQHandler+0x5c8>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d01b      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a86      	ldr	r2, [pc, #536]	@ (80082c0 <HAL_UART_IRQHandler+0x5cc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d014      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a83      	ldr	r2, [pc, #524]	@ (80082c4 <HAL_UART_IRQHandler+0x5d0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00d      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a81      	ldr	r2, [pc, #516]	@ (80082c8 <HAL_UART_IRQHandler+0x5d4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d006      	beq.n	80080d6 <HAL_UART_IRQHandler+0x3e2>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a7e      	ldr	r2, [pc, #504]	@ (80082cc <HAL_UART_IRQHandler+0x5d8>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d106      	bne.n	80080e4 <HAL_UART_IRQHandler+0x3f0>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	e005      	b.n	80080f0 <HAL_UART_IRQHandler+0x3fc>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 80ad 	beq.w	8008258 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008104:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008108:	429a      	cmp	r2, r3
 800810a:	f080 80a5 	bcs.w	8008258 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008114:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008124:	f000 8087 	beq.w	8008236 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008134:	e853 3f00 	ldrex	r3, [r3]
 8008138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800813c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008144:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008152:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008156:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800815e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800816a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1da      	bne.n	8008128 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3308      	adds	r3, #8
 8008178:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3308      	adds	r3, #8
 8008192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008196:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800819a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800819e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80081a2:	e841 2300 	strex	r3, r2, [r1]
 80081a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80081a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1e1      	bne.n	8008172 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3308      	adds	r3, #8
 80081b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80081be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3308      	adds	r3, #8
 80081ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80081d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80081d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80081d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80081e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e3      	bne.n	80081ae <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008204:	f023 0310 	bic.w	r3, r3, #16
 8008208:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008216:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008218:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800821c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e4      	bne.n	80081f4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008230:	4618      	mov	r0, r3
 8008232:	f7f9 fc5f 	bl	8001af4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2202      	movs	r2, #2
 800823a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008248:	b29b      	uxth	r3, r3
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	b29b      	uxth	r3, r3
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f939 	bl	80084c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008256:	e119      	b.n	800848c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800825e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008262:	429a      	cmp	r2, r3
 8008264:	f040 8112 	bne.w	800848c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008274:	f040 810a 	bne.w	800848c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f91e 	bl	80084c8 <HAL_UARTEx_RxEventCallback>
      return;
 800828c:	e0fe      	b.n	800848c <HAL_UART_IRQHandler+0x798>
 800828e:	bf00      	nop
 8008290:	40020010 	.word	0x40020010
 8008294:	40020028 	.word	0x40020028
 8008298:	40020040 	.word	0x40020040
 800829c:	40020058 	.word	0x40020058
 80082a0:	40020070 	.word	0x40020070
 80082a4:	40020088 	.word	0x40020088
 80082a8:	400200a0 	.word	0x400200a0
 80082ac:	400200b8 	.word	0x400200b8
 80082b0:	40020410 	.word	0x40020410
 80082b4:	40020428 	.word	0x40020428
 80082b8:	40020440 	.word	0x40020440
 80082bc:	40020458 	.word	0x40020458
 80082c0:	40020470 	.word	0x40020470
 80082c4:	40020488 	.word	0x40020488
 80082c8:	400204a0 	.word	0x400204a0
 80082cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082dc:	b29b      	uxth	r3, r3
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 80cf 	beq.w	8008490 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80082f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 80ca 	beq.w	8008490 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800830a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008310:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	461a      	mov	r2, r3
 800831a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800831e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008320:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008322:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008324:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800832c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e4      	bne.n	80082fc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3308      	adds	r3, #8
 8008338:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	623b      	str	r3, [r7, #32]
   return(result);
 8008342:	6a3a      	ldr	r2, [r7, #32]
 8008344:	4b55      	ldr	r3, [pc, #340]	@ (800849c <HAL_UART_IRQHandler+0x7a8>)
 8008346:	4013      	ands	r3, r2
 8008348:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3308      	adds	r3, #8
 8008352:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008356:	633a      	str	r2, [r7, #48]	@ 0x30
 8008358:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800835c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e3      	bne.n	8008332 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	60fb      	str	r3, [r7, #12]
   return(result);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f023 0310 	bic.w	r3, r3, #16
 8008392:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80083a0:	61fb      	str	r3, [r7, #28]
 80083a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	69b9      	ldr	r1, [r7, #24]
 80083a6:	69fa      	ldr	r2, [r7, #28]
 80083a8:	e841 2300 	strex	r3, r2, [r1]
 80083ac:	617b      	str	r3, [r7, #20]
   return(result);
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e4      	bne.n	800837e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2202      	movs	r2, #2
 80083b8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f881 	bl	80084c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083c6:	e063      	b.n	8008490 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00e      	beq.n	80083f2 <HAL_UART_IRQHandler+0x6fe>
 80083d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d008      	beq.n	80083f2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80083e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 f83d 	bl	800946a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083f0:	e051      	b.n	8008496 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80083f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d014      	beq.n	8008428 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80083fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008406:	2b00      	cmp	r3, #0
 8008408:	d105      	bne.n	8008416 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800840a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800840e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d008      	beq.n	8008428 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800841a:	2b00      	cmp	r3, #0
 800841c:	d03a      	beq.n	8008494 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	4798      	blx	r3
    }
    return;
 8008426:	e035      	b.n	8008494 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800842c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008430:	2b00      	cmp	r3, #0
 8008432:	d009      	beq.n	8008448 <HAL_UART_IRQHandler+0x754>
 8008434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 ffe7 	bl	8009414 <UART_EndTransmit_IT>
    return;
 8008446:	e026      	b.n	8008496 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800844c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d009      	beq.n	8008468 <HAL_UART_IRQHandler+0x774>
 8008454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008458:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f816 	bl	8009492 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008466:	e016      	b.n	8008496 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800846c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d010      	beq.n	8008496 <HAL_UART_IRQHandler+0x7a2>
 8008474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008478:	2b00      	cmp	r3, #0
 800847a:	da0c      	bge.n	8008496 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fffe 	bl	800947e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008482:	e008      	b.n	8008496 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008484:	bf00      	nop
 8008486:	e006      	b.n	8008496 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008488:	bf00      	nop
 800848a:	e004      	b.n	8008496 <HAL_UART_IRQHandler+0x7a2>
      return;
 800848c:	bf00      	nop
 800848e:	e002      	b.n	8008496 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008490:	bf00      	nop
 8008492:	e000      	b.n	8008496 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008494:	bf00      	nop
  }
}
 8008496:	37e8      	adds	r7, #232	@ 0xe8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	effffffe 	.word	0xeffffffe

080084a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084e4:	b092      	sub	sp, #72	@ 0x48
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	431a      	orrs	r2, r3
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	431a      	orrs	r2, r3
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	4313      	orrs	r3, r2
 8008506:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	4bbe      	ldr	r3, [pc, #760]	@ (8008808 <UART_SetConfig+0x328>)
 8008510:	4013      	ands	r3, r2
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	6812      	ldr	r2, [r2, #0]
 8008516:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008518:	430b      	orrs	r3, r1
 800851a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4ab3      	ldr	r2, [pc, #716]	@ (800880c <UART_SetConfig+0x32c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d004      	beq.n	800854c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008548:	4313      	orrs	r3, r2
 800854a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	4baf      	ldr	r3, [pc, #700]	@ (8008810 <UART_SetConfig+0x330>)
 8008554:	4013      	ands	r3, r2
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	6812      	ldr	r2, [r2, #0]
 800855a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800855c:	430b      	orrs	r3, r1
 800855e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008566:	f023 010f 	bic.w	r1, r3, #15
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4aa6      	ldr	r2, [pc, #664]	@ (8008814 <UART_SetConfig+0x334>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d177      	bne.n	8008670 <UART_SetConfig+0x190>
 8008580:	4ba5      	ldr	r3, [pc, #660]	@ (8008818 <UART_SetConfig+0x338>)
 8008582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008584:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008588:	2b28      	cmp	r3, #40	@ 0x28
 800858a:	d86d      	bhi.n	8008668 <UART_SetConfig+0x188>
 800858c:	a201      	add	r2, pc, #4	@ (adr r2, 8008594 <UART_SetConfig+0xb4>)
 800858e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008592:	bf00      	nop
 8008594:	08008639 	.word	0x08008639
 8008598:	08008669 	.word	0x08008669
 800859c:	08008669 	.word	0x08008669
 80085a0:	08008669 	.word	0x08008669
 80085a4:	08008669 	.word	0x08008669
 80085a8:	08008669 	.word	0x08008669
 80085ac:	08008669 	.word	0x08008669
 80085b0:	08008669 	.word	0x08008669
 80085b4:	08008641 	.word	0x08008641
 80085b8:	08008669 	.word	0x08008669
 80085bc:	08008669 	.word	0x08008669
 80085c0:	08008669 	.word	0x08008669
 80085c4:	08008669 	.word	0x08008669
 80085c8:	08008669 	.word	0x08008669
 80085cc:	08008669 	.word	0x08008669
 80085d0:	08008669 	.word	0x08008669
 80085d4:	08008649 	.word	0x08008649
 80085d8:	08008669 	.word	0x08008669
 80085dc:	08008669 	.word	0x08008669
 80085e0:	08008669 	.word	0x08008669
 80085e4:	08008669 	.word	0x08008669
 80085e8:	08008669 	.word	0x08008669
 80085ec:	08008669 	.word	0x08008669
 80085f0:	08008669 	.word	0x08008669
 80085f4:	08008651 	.word	0x08008651
 80085f8:	08008669 	.word	0x08008669
 80085fc:	08008669 	.word	0x08008669
 8008600:	08008669 	.word	0x08008669
 8008604:	08008669 	.word	0x08008669
 8008608:	08008669 	.word	0x08008669
 800860c:	08008669 	.word	0x08008669
 8008610:	08008669 	.word	0x08008669
 8008614:	08008659 	.word	0x08008659
 8008618:	08008669 	.word	0x08008669
 800861c:	08008669 	.word	0x08008669
 8008620:	08008669 	.word	0x08008669
 8008624:	08008669 	.word	0x08008669
 8008628:	08008669 	.word	0x08008669
 800862c:	08008669 	.word	0x08008669
 8008630:	08008669 	.word	0x08008669
 8008634:	08008661 	.word	0x08008661
 8008638:	2301      	movs	r3, #1
 800863a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863e:	e222      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008640:	2304      	movs	r3, #4
 8008642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008646:	e21e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008648:	2308      	movs	r3, #8
 800864a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800864e:	e21a      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008650:	2310      	movs	r3, #16
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008656:	e216      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008658:	2320      	movs	r3, #32
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865e:	e212      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008660:	2340      	movs	r3, #64	@ 0x40
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008666:	e20e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008668:	2380      	movs	r3, #128	@ 0x80
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e20a      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a69      	ldr	r2, [pc, #420]	@ (800881c <UART_SetConfig+0x33c>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d130      	bne.n	80086dc <UART_SetConfig+0x1fc>
 800867a:	4b67      	ldr	r3, [pc, #412]	@ (8008818 <UART_SetConfig+0x338>)
 800867c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800867e:	f003 0307 	and.w	r3, r3, #7
 8008682:	2b05      	cmp	r3, #5
 8008684:	d826      	bhi.n	80086d4 <UART_SetConfig+0x1f4>
 8008686:	a201      	add	r2, pc, #4	@ (adr r2, 800868c <UART_SetConfig+0x1ac>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	080086a5 	.word	0x080086a5
 8008690:	080086ad 	.word	0x080086ad
 8008694:	080086b5 	.word	0x080086b5
 8008698:	080086bd 	.word	0x080086bd
 800869c:	080086c5 	.word	0x080086c5
 80086a0:	080086cd 	.word	0x080086cd
 80086a4:	2300      	movs	r3, #0
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086aa:	e1ec      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086ac:	2304      	movs	r3, #4
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086b2:	e1e8      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086b4:	2308      	movs	r3, #8
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ba:	e1e4      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086bc:	2310      	movs	r3, #16
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086c2:	e1e0      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086c4:	2320      	movs	r3, #32
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ca:	e1dc      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086cc:	2340      	movs	r3, #64	@ 0x40
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d2:	e1d8      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086d4:	2380      	movs	r3, #128	@ 0x80
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e1d4      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a4f      	ldr	r2, [pc, #316]	@ (8008820 <UART_SetConfig+0x340>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d130      	bne.n	8008748 <UART_SetConfig+0x268>
 80086e6:	4b4c      	ldr	r3, [pc, #304]	@ (8008818 <UART_SetConfig+0x338>)
 80086e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ea:	f003 0307 	and.w	r3, r3, #7
 80086ee:	2b05      	cmp	r3, #5
 80086f0:	d826      	bhi.n	8008740 <UART_SetConfig+0x260>
 80086f2:	a201      	add	r2, pc, #4	@ (adr r2, 80086f8 <UART_SetConfig+0x218>)
 80086f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f8:	08008711 	.word	0x08008711
 80086fc:	08008719 	.word	0x08008719
 8008700:	08008721 	.word	0x08008721
 8008704:	08008729 	.word	0x08008729
 8008708:	08008731 	.word	0x08008731
 800870c:	08008739 	.word	0x08008739
 8008710:	2300      	movs	r3, #0
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008716:	e1b6      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008718:	2304      	movs	r3, #4
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871e:	e1b2      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008720:	2308      	movs	r3, #8
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008726:	e1ae      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008728:	2310      	movs	r3, #16
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872e:	e1aa      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008730:	2320      	movs	r3, #32
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008736:	e1a6      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008738:	2340      	movs	r3, #64	@ 0x40
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800873e:	e1a2      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008740:	2380      	movs	r3, #128	@ 0x80
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008746:	e19e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a35      	ldr	r2, [pc, #212]	@ (8008824 <UART_SetConfig+0x344>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d130      	bne.n	80087b4 <UART_SetConfig+0x2d4>
 8008752:	4b31      	ldr	r3, [pc, #196]	@ (8008818 <UART_SetConfig+0x338>)
 8008754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b05      	cmp	r3, #5
 800875c:	d826      	bhi.n	80087ac <UART_SetConfig+0x2cc>
 800875e:	a201      	add	r2, pc, #4	@ (adr r2, 8008764 <UART_SetConfig+0x284>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	0800877d 	.word	0x0800877d
 8008768:	08008785 	.word	0x08008785
 800876c:	0800878d 	.word	0x0800878d
 8008770:	08008795 	.word	0x08008795
 8008774:	0800879d 	.word	0x0800879d
 8008778:	080087a5 	.word	0x080087a5
 800877c:	2300      	movs	r3, #0
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008782:	e180      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008784:	2304      	movs	r3, #4
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878a:	e17c      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800878c:	2308      	movs	r3, #8
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008792:	e178      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008794:	2310      	movs	r3, #16
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879a:	e174      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800879c:	2320      	movs	r3, #32
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a2:	e170      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80087a4:	2340      	movs	r3, #64	@ 0x40
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087aa:	e16c      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80087ac:	2380      	movs	r3, #128	@ 0x80
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b2:	e168      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008828 <UART_SetConfig+0x348>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d142      	bne.n	8008844 <UART_SetConfig+0x364>
 80087be:	4b16      	ldr	r3, [pc, #88]	@ (8008818 <UART_SetConfig+0x338>)
 80087c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	2b05      	cmp	r3, #5
 80087c8:	d838      	bhi.n	800883c <UART_SetConfig+0x35c>
 80087ca:	a201      	add	r2, pc, #4	@ (adr r2, 80087d0 <UART_SetConfig+0x2f0>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	080087e9 	.word	0x080087e9
 80087d4:	080087f1 	.word	0x080087f1
 80087d8:	080087f9 	.word	0x080087f9
 80087dc:	08008801 	.word	0x08008801
 80087e0:	0800882d 	.word	0x0800882d
 80087e4:	08008835 	.word	0x08008835
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e14a      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80087f0:	2304      	movs	r3, #4
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e146      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80087f8:	2308      	movs	r3, #8
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fe:	e142      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008800:	2310      	movs	r3, #16
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008806:	e13e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008808:	cfff69f3 	.word	0xcfff69f3
 800880c:	58000c00 	.word	0x58000c00
 8008810:	11fff4ff 	.word	0x11fff4ff
 8008814:	40011000 	.word	0x40011000
 8008818:	58024400 	.word	0x58024400
 800881c:	40004400 	.word	0x40004400
 8008820:	40004800 	.word	0x40004800
 8008824:	40004c00 	.word	0x40004c00
 8008828:	40005000 	.word	0x40005000
 800882c:	2320      	movs	r3, #32
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008832:	e128      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008834:	2340      	movs	r3, #64	@ 0x40
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883a:	e124      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800883c:	2380      	movs	r3, #128	@ 0x80
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008842:	e120      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4acb      	ldr	r2, [pc, #812]	@ (8008b78 <UART_SetConfig+0x698>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d176      	bne.n	800893c <UART_SetConfig+0x45c>
 800884e:	4bcb      	ldr	r3, [pc, #812]	@ (8008b7c <UART_SetConfig+0x69c>)
 8008850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008852:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008856:	2b28      	cmp	r3, #40	@ 0x28
 8008858:	d86c      	bhi.n	8008934 <UART_SetConfig+0x454>
 800885a:	a201      	add	r2, pc, #4	@ (adr r2, 8008860 <UART_SetConfig+0x380>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	08008905 	.word	0x08008905
 8008864:	08008935 	.word	0x08008935
 8008868:	08008935 	.word	0x08008935
 800886c:	08008935 	.word	0x08008935
 8008870:	08008935 	.word	0x08008935
 8008874:	08008935 	.word	0x08008935
 8008878:	08008935 	.word	0x08008935
 800887c:	08008935 	.word	0x08008935
 8008880:	0800890d 	.word	0x0800890d
 8008884:	08008935 	.word	0x08008935
 8008888:	08008935 	.word	0x08008935
 800888c:	08008935 	.word	0x08008935
 8008890:	08008935 	.word	0x08008935
 8008894:	08008935 	.word	0x08008935
 8008898:	08008935 	.word	0x08008935
 800889c:	08008935 	.word	0x08008935
 80088a0:	08008915 	.word	0x08008915
 80088a4:	08008935 	.word	0x08008935
 80088a8:	08008935 	.word	0x08008935
 80088ac:	08008935 	.word	0x08008935
 80088b0:	08008935 	.word	0x08008935
 80088b4:	08008935 	.word	0x08008935
 80088b8:	08008935 	.word	0x08008935
 80088bc:	08008935 	.word	0x08008935
 80088c0:	0800891d 	.word	0x0800891d
 80088c4:	08008935 	.word	0x08008935
 80088c8:	08008935 	.word	0x08008935
 80088cc:	08008935 	.word	0x08008935
 80088d0:	08008935 	.word	0x08008935
 80088d4:	08008935 	.word	0x08008935
 80088d8:	08008935 	.word	0x08008935
 80088dc:	08008935 	.word	0x08008935
 80088e0:	08008925 	.word	0x08008925
 80088e4:	08008935 	.word	0x08008935
 80088e8:	08008935 	.word	0x08008935
 80088ec:	08008935 	.word	0x08008935
 80088f0:	08008935 	.word	0x08008935
 80088f4:	08008935 	.word	0x08008935
 80088f8:	08008935 	.word	0x08008935
 80088fc:	08008935 	.word	0x08008935
 8008900:	0800892d 	.word	0x0800892d
 8008904:	2301      	movs	r3, #1
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890a:	e0bc      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800890c:	2304      	movs	r3, #4
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008912:	e0b8      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008914:	2308      	movs	r3, #8
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891a:	e0b4      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800891c:	2310      	movs	r3, #16
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008922:	e0b0      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008924:	2320      	movs	r3, #32
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892a:	e0ac      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800892c:	2340      	movs	r3, #64	@ 0x40
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008932:	e0a8      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008934:	2380      	movs	r3, #128	@ 0x80
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e0a4      	b.n	8008a86 <UART_SetConfig+0x5a6>
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a8f      	ldr	r2, [pc, #572]	@ (8008b80 <UART_SetConfig+0x6a0>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d130      	bne.n	80089a8 <UART_SetConfig+0x4c8>
 8008946:	4b8d      	ldr	r3, [pc, #564]	@ (8008b7c <UART_SetConfig+0x69c>)
 8008948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894a:	f003 0307 	and.w	r3, r3, #7
 800894e:	2b05      	cmp	r3, #5
 8008950:	d826      	bhi.n	80089a0 <UART_SetConfig+0x4c0>
 8008952:	a201      	add	r2, pc, #4	@ (adr r2, 8008958 <UART_SetConfig+0x478>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	08008971 	.word	0x08008971
 800895c:	08008979 	.word	0x08008979
 8008960:	08008981 	.word	0x08008981
 8008964:	08008989 	.word	0x08008989
 8008968:	08008991 	.word	0x08008991
 800896c:	08008999 	.word	0x08008999
 8008970:	2300      	movs	r3, #0
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e086      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008978:	2304      	movs	r3, #4
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e082      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008980:	2308      	movs	r3, #8
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008986:	e07e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008988:	2310      	movs	r3, #16
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898e:	e07a      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008990:	2320      	movs	r3, #32
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008996:	e076      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008998:	2340      	movs	r3, #64	@ 0x40
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800899e:	e072      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80089a0:	2380      	movs	r3, #128	@ 0x80
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a6:	e06e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a75      	ldr	r2, [pc, #468]	@ (8008b84 <UART_SetConfig+0x6a4>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d130      	bne.n	8008a14 <UART_SetConfig+0x534>
 80089b2:	4b72      	ldr	r3, [pc, #456]	@ (8008b7c <UART_SetConfig+0x69c>)
 80089b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	2b05      	cmp	r3, #5
 80089bc:	d826      	bhi.n	8008a0c <UART_SetConfig+0x52c>
 80089be:	a201      	add	r2, pc, #4	@ (adr r2, 80089c4 <UART_SetConfig+0x4e4>)
 80089c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c4:	080089dd 	.word	0x080089dd
 80089c8:	080089e5 	.word	0x080089e5
 80089cc:	080089ed 	.word	0x080089ed
 80089d0:	080089f5 	.word	0x080089f5
 80089d4:	080089fd 	.word	0x080089fd
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	2300      	movs	r3, #0
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e050      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80089e4:	2304      	movs	r3, #4
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e04c      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80089ec:	2308      	movs	r3, #8
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f2:	e048      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80089f4:	2310      	movs	r3, #16
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e044      	b.n	8008a86 <UART_SetConfig+0x5a6>
 80089fc:	2320      	movs	r3, #32
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e040      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a04:	2340      	movs	r3, #64	@ 0x40
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0a:	e03c      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a0c:	2380      	movs	r3, #128	@ 0x80
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e038      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a5b      	ldr	r2, [pc, #364]	@ (8008b88 <UART_SetConfig+0x6a8>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d130      	bne.n	8008a80 <UART_SetConfig+0x5a0>
 8008a1e:	4b57      	ldr	r3, [pc, #348]	@ (8008b7c <UART_SetConfig+0x69c>)
 8008a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d826      	bhi.n	8008a78 <UART_SetConfig+0x598>
 8008a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <UART_SetConfig+0x550>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a49 	.word	0x08008a49
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a59 	.word	0x08008a59
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a69 	.word	0x08008a69
 8008a44:	08008a71 	.word	0x08008a71
 8008a48:	2302      	movs	r3, #2
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4e:	e01a      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a56:	e016      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e012      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e00e      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e00a      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a70:	2340      	movs	r3, #64	@ 0x40
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e006      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a78:	2380      	movs	r3, #128	@ 0x80
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e002      	b.n	8008a86 <UART_SetConfig+0x5a6>
 8008a80:	2380      	movs	r3, #128	@ 0x80
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8008b88 <UART_SetConfig+0x6a8>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	f040 80f8 	bne.w	8008c82 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	dc46      	bgt.n	8008b28 <UART_SetConfig+0x648>
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	f2c0 8082 	blt.w	8008ba4 <UART_SetConfig+0x6c4>
 8008aa0:	3b02      	subs	r3, #2
 8008aa2:	2b1e      	cmp	r3, #30
 8008aa4:	d87e      	bhi.n	8008ba4 <UART_SetConfig+0x6c4>
 8008aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8008aac <UART_SetConfig+0x5cc>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008b2f 	.word	0x08008b2f
 8008ab0:	08008ba5 	.word	0x08008ba5
 8008ab4:	08008b37 	.word	0x08008b37
 8008ab8:	08008ba5 	.word	0x08008ba5
 8008abc:	08008ba5 	.word	0x08008ba5
 8008ac0:	08008ba5 	.word	0x08008ba5
 8008ac4:	08008b47 	.word	0x08008b47
 8008ac8:	08008ba5 	.word	0x08008ba5
 8008acc:	08008ba5 	.word	0x08008ba5
 8008ad0:	08008ba5 	.word	0x08008ba5
 8008ad4:	08008ba5 	.word	0x08008ba5
 8008ad8:	08008ba5 	.word	0x08008ba5
 8008adc:	08008ba5 	.word	0x08008ba5
 8008ae0:	08008ba5 	.word	0x08008ba5
 8008ae4:	08008b57 	.word	0x08008b57
 8008ae8:	08008ba5 	.word	0x08008ba5
 8008aec:	08008ba5 	.word	0x08008ba5
 8008af0:	08008ba5 	.word	0x08008ba5
 8008af4:	08008ba5 	.word	0x08008ba5
 8008af8:	08008ba5 	.word	0x08008ba5
 8008afc:	08008ba5 	.word	0x08008ba5
 8008b00:	08008ba5 	.word	0x08008ba5
 8008b04:	08008ba5 	.word	0x08008ba5
 8008b08:	08008ba5 	.word	0x08008ba5
 8008b0c:	08008ba5 	.word	0x08008ba5
 8008b10:	08008ba5 	.word	0x08008ba5
 8008b14:	08008ba5 	.word	0x08008ba5
 8008b18:	08008ba5 	.word	0x08008ba5
 8008b1c:	08008ba5 	.word	0x08008ba5
 8008b20:	08008ba5 	.word	0x08008ba5
 8008b24:	08008b97 	.word	0x08008b97
 8008b28:	2b40      	cmp	r3, #64	@ 0x40
 8008b2a:	d037      	beq.n	8008b9c <UART_SetConfig+0x6bc>
 8008b2c:	e03a      	b.n	8008ba4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008b2e:	f7fe f993 	bl	8006e58 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b34:	e03c      	b.n	8008bb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe f9a2 	bl	8006e84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b44:	e034      	b.n	8008bb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b46:	f107 0318 	add.w	r3, r7, #24
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe faee 	bl	800712c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b54:	e02c      	b.n	8008bb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b56:	4b09      	ldr	r3, [pc, #36]	@ (8008b7c <UART_SetConfig+0x69c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d016      	beq.n	8008b90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b62:	4b06      	ldr	r3, [pc, #24]	@ (8008b7c <UART_SetConfig+0x69c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	08db      	lsrs	r3, r3, #3
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	4a07      	ldr	r2, [pc, #28]	@ (8008b8c <UART_SetConfig+0x6ac>)
 8008b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b74:	e01c      	b.n	8008bb0 <UART_SetConfig+0x6d0>
 8008b76:	bf00      	nop
 8008b78:	40011400 	.word	0x40011400
 8008b7c:	58024400 	.word	0x58024400
 8008b80:	40007800 	.word	0x40007800
 8008b84:	40007c00 	.word	0x40007c00
 8008b88:	58000c00 	.word	0x58000c00
 8008b8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008b90:	4b9d      	ldr	r3, [pc, #628]	@ (8008e08 <UART_SetConfig+0x928>)
 8008b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b94:	e00c      	b.n	8008bb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b96:	4b9d      	ldr	r3, [pc, #628]	@ (8008e0c <UART_SetConfig+0x92c>)
 8008b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b9a:	e009      	b.n	8008bb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ba2:	e005      	b.n	8008bb0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008bae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f000 81de 	beq.w	8008f74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bbc:	4a94      	ldr	r2, [pc, #592]	@ (8008e10 <UART_SetConfig+0x930>)
 8008bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	4413      	add	r3, r2
 8008bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d305      	bcc.n	8008be8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d903      	bls.n	8008bf0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008bee:	e1c1      	b.n	8008f74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	60bb      	str	r3, [r7, #8]
 8008bf6:	60fa      	str	r2, [r7, #12]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	4a84      	ldr	r2, [pc, #528]	@ (8008e10 <UART_SetConfig+0x930>)
 8008bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	2200      	movs	r2, #0
 8008c06:	603b      	str	r3, [r7, #0]
 8008c08:	607a      	str	r2, [r7, #4]
 8008c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c12:	f7f7 fb61 	bl	80002d8 <__aeabi_uldivmod>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	f04f 0200 	mov.w	r2, #0
 8008c22:	f04f 0300 	mov.w	r3, #0
 8008c26:	020b      	lsls	r3, r1, #8
 8008c28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c2c:	0202      	lsls	r2, r0, #8
 8008c2e:	6979      	ldr	r1, [r7, #20]
 8008c30:	6849      	ldr	r1, [r1, #4]
 8008c32:	0849      	lsrs	r1, r1, #1
 8008c34:	2000      	movs	r0, #0
 8008c36:	460c      	mov	r4, r1
 8008c38:	4605      	mov	r5, r0
 8008c3a:	eb12 0804 	adds.w	r8, r2, r4
 8008c3e:	eb43 0905 	adc.w	r9, r3, r5
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	469a      	mov	sl, r3
 8008c4a:	4693      	mov	fp, r2
 8008c4c:	4652      	mov	r2, sl
 8008c4e:	465b      	mov	r3, fp
 8008c50:	4640      	mov	r0, r8
 8008c52:	4649      	mov	r1, r9
 8008c54:	f7f7 fb40 	bl	80002d8 <__aeabi_uldivmod>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c66:	d308      	bcc.n	8008c7a <UART_SetConfig+0x79a>
 8008c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c6e:	d204      	bcs.n	8008c7a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c76:	60da      	str	r2, [r3, #12]
 8008c78:	e17c      	b.n	8008f74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c80:	e178      	b.n	8008f74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c8a:	f040 80c5 	bne.w	8008e18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008c8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	dc48      	bgt.n	8008d28 <UART_SetConfig+0x848>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	db7b      	blt.n	8008d92 <UART_SetConfig+0x8b2>
 8008c9a:	2b20      	cmp	r3, #32
 8008c9c:	d879      	bhi.n	8008d92 <UART_SetConfig+0x8b2>
 8008c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca4 <UART_SetConfig+0x7c4>)
 8008ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca4:	08008d2f 	.word	0x08008d2f
 8008ca8:	08008d37 	.word	0x08008d37
 8008cac:	08008d93 	.word	0x08008d93
 8008cb0:	08008d93 	.word	0x08008d93
 8008cb4:	08008d3f 	.word	0x08008d3f
 8008cb8:	08008d93 	.word	0x08008d93
 8008cbc:	08008d93 	.word	0x08008d93
 8008cc0:	08008d93 	.word	0x08008d93
 8008cc4:	08008d4f 	.word	0x08008d4f
 8008cc8:	08008d93 	.word	0x08008d93
 8008ccc:	08008d93 	.word	0x08008d93
 8008cd0:	08008d93 	.word	0x08008d93
 8008cd4:	08008d93 	.word	0x08008d93
 8008cd8:	08008d93 	.word	0x08008d93
 8008cdc:	08008d93 	.word	0x08008d93
 8008ce0:	08008d93 	.word	0x08008d93
 8008ce4:	08008d5f 	.word	0x08008d5f
 8008ce8:	08008d93 	.word	0x08008d93
 8008cec:	08008d93 	.word	0x08008d93
 8008cf0:	08008d93 	.word	0x08008d93
 8008cf4:	08008d93 	.word	0x08008d93
 8008cf8:	08008d93 	.word	0x08008d93
 8008cfc:	08008d93 	.word	0x08008d93
 8008d00:	08008d93 	.word	0x08008d93
 8008d04:	08008d93 	.word	0x08008d93
 8008d08:	08008d93 	.word	0x08008d93
 8008d0c:	08008d93 	.word	0x08008d93
 8008d10:	08008d93 	.word	0x08008d93
 8008d14:	08008d93 	.word	0x08008d93
 8008d18:	08008d93 	.word	0x08008d93
 8008d1c:	08008d93 	.word	0x08008d93
 8008d20:	08008d93 	.word	0x08008d93
 8008d24:	08008d85 	.word	0x08008d85
 8008d28:	2b40      	cmp	r3, #64	@ 0x40
 8008d2a:	d02e      	beq.n	8008d8a <UART_SetConfig+0x8aa>
 8008d2c:	e031      	b.n	8008d92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d2e:	f7fc fe5d 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 8008d32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d34:	e033      	b.n	8008d9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d36:	f7fc fe6f 	bl	8005a18 <HAL_RCC_GetPCLK2Freq>
 8008d3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d3c:	e02f      	b.n	8008d9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe f89e 	bl	8006e84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d4c:	e027      	b.n	8008d9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d4e:	f107 0318 	add.w	r3, r7, #24
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe f9ea 	bl	800712c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d5c:	e01f      	b.n	8008d9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8008e14 <UART_SetConfig+0x934>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0320 	and.w	r3, r3, #32
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d009      	beq.n	8008d7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8008e14 <UART_SetConfig+0x934>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	08db      	lsrs	r3, r3, #3
 8008d70:	f003 0303 	and.w	r3, r3, #3
 8008d74:	4a24      	ldr	r2, [pc, #144]	@ (8008e08 <UART_SetConfig+0x928>)
 8008d76:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d7c:	e00f      	b.n	8008d9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008d7e:	4b22      	ldr	r3, [pc, #136]	@ (8008e08 <UART_SetConfig+0x928>)
 8008d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d82:	e00c      	b.n	8008d9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d84:	4b21      	ldr	r3, [pc, #132]	@ (8008e0c <UART_SetConfig+0x92c>)
 8008d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d88:	e009      	b.n	8008d9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d90:	e005      	b.n	8008d9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 80e7 	beq.w	8008f74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008daa:	4a19      	ldr	r2, [pc, #100]	@ (8008e10 <UART_SetConfig+0x930>)
 8008dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008db0:	461a      	mov	r2, r3
 8008db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008db8:	005a      	lsls	r2, r3, #1
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	085b      	lsrs	r3, r3, #1
 8008dc0:	441a      	add	r2, r3
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dce:	2b0f      	cmp	r3, #15
 8008dd0:	d916      	bls.n	8008e00 <UART_SetConfig+0x920>
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dd8:	d212      	bcs.n	8008e00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f023 030f 	bic.w	r3, r3, #15
 8008de2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de6:	085b      	lsrs	r3, r3, #1
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f003 0307 	and.w	r3, r3, #7
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008df2:	4313      	orrs	r3, r2
 8008df4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008dfc:	60da      	str	r2, [r3, #12]
 8008dfe:	e0b9      	b.n	8008f74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e06:	e0b5      	b.n	8008f74 <UART_SetConfig+0xa94>
 8008e08:	03d09000 	.word	0x03d09000
 8008e0c:	003d0900 	.word	0x003d0900
 8008e10:	0800efe0 	.word	0x0800efe0
 8008e14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e18:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e1c:	2b20      	cmp	r3, #32
 8008e1e:	dc49      	bgt.n	8008eb4 <UART_SetConfig+0x9d4>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	db7c      	blt.n	8008f1e <UART_SetConfig+0xa3e>
 8008e24:	2b20      	cmp	r3, #32
 8008e26:	d87a      	bhi.n	8008f1e <UART_SetConfig+0xa3e>
 8008e28:	a201      	add	r2, pc, #4	@ (adr r2, 8008e30 <UART_SetConfig+0x950>)
 8008e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2e:	bf00      	nop
 8008e30:	08008ebb 	.word	0x08008ebb
 8008e34:	08008ec3 	.word	0x08008ec3
 8008e38:	08008f1f 	.word	0x08008f1f
 8008e3c:	08008f1f 	.word	0x08008f1f
 8008e40:	08008ecb 	.word	0x08008ecb
 8008e44:	08008f1f 	.word	0x08008f1f
 8008e48:	08008f1f 	.word	0x08008f1f
 8008e4c:	08008f1f 	.word	0x08008f1f
 8008e50:	08008edb 	.word	0x08008edb
 8008e54:	08008f1f 	.word	0x08008f1f
 8008e58:	08008f1f 	.word	0x08008f1f
 8008e5c:	08008f1f 	.word	0x08008f1f
 8008e60:	08008f1f 	.word	0x08008f1f
 8008e64:	08008f1f 	.word	0x08008f1f
 8008e68:	08008f1f 	.word	0x08008f1f
 8008e6c:	08008f1f 	.word	0x08008f1f
 8008e70:	08008eeb 	.word	0x08008eeb
 8008e74:	08008f1f 	.word	0x08008f1f
 8008e78:	08008f1f 	.word	0x08008f1f
 8008e7c:	08008f1f 	.word	0x08008f1f
 8008e80:	08008f1f 	.word	0x08008f1f
 8008e84:	08008f1f 	.word	0x08008f1f
 8008e88:	08008f1f 	.word	0x08008f1f
 8008e8c:	08008f1f 	.word	0x08008f1f
 8008e90:	08008f1f 	.word	0x08008f1f
 8008e94:	08008f1f 	.word	0x08008f1f
 8008e98:	08008f1f 	.word	0x08008f1f
 8008e9c:	08008f1f 	.word	0x08008f1f
 8008ea0:	08008f1f 	.word	0x08008f1f
 8008ea4:	08008f1f 	.word	0x08008f1f
 8008ea8:	08008f1f 	.word	0x08008f1f
 8008eac:	08008f1f 	.word	0x08008f1f
 8008eb0:	08008f11 	.word	0x08008f11
 8008eb4:	2b40      	cmp	r3, #64	@ 0x40
 8008eb6:	d02e      	beq.n	8008f16 <UART_SetConfig+0xa36>
 8008eb8:	e031      	b.n	8008f1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eba:	f7fc fd97 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 8008ebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ec0:	e033      	b.n	8008f2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ec2:	f7fc fda9 	bl	8005a18 <HAL_RCC_GetPCLK2Freq>
 8008ec6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ec8:	e02f      	b.n	8008f2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fd ffd8 	bl	8006e84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed8:	e027      	b.n	8008f2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eda:	f107 0318 	add.w	r3, r7, #24
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe f924 	bl	800712c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee8:	e01f      	b.n	8008f2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eea:	4b2d      	ldr	r3, [pc, #180]	@ (8008fa0 <UART_SetConfig+0xac0>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0320 	and.w	r3, r3, #32
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d009      	beq.n	8008f0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8008fa0 <UART_SetConfig+0xac0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	08db      	lsrs	r3, r3, #3
 8008efc:	f003 0303 	and.w	r3, r3, #3
 8008f00:	4a28      	ldr	r2, [pc, #160]	@ (8008fa4 <UART_SetConfig+0xac4>)
 8008f02:	fa22 f303 	lsr.w	r3, r2, r3
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f08:	e00f      	b.n	8008f2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008f0a:	4b26      	ldr	r3, [pc, #152]	@ (8008fa4 <UART_SetConfig+0xac4>)
 8008f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f0e:	e00c      	b.n	8008f2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f10:	4b25      	ldr	r3, [pc, #148]	@ (8008fa8 <UART_SetConfig+0xac8>)
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f14:	e009      	b.n	8008f2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f1c:	e005      	b.n	8008f2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f28:	bf00      	nop
    }

    if (pclk != 0U)
 8008f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d021      	beq.n	8008f74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f34:	4a1d      	ldr	r2, [pc, #116]	@ (8008fac <UART_SetConfig+0xacc>)
 8008f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	085b      	lsrs	r3, r3, #1
 8008f48:	441a      	add	r2, r3
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f56:	2b0f      	cmp	r3, #15
 8008f58:	d909      	bls.n	8008f6e <UART_SetConfig+0xa8e>
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f60:	d205      	bcs.n	8008f6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60da      	str	r2, [r3, #12]
 8008f6c:	e002      	b.n	8008f74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	2200      	movs	r2, #0
 8008f88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f90:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3748      	adds	r7, #72	@ 0x48
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f9e:	bf00      	nop
 8008fa0:	58024400 	.word	0x58024400
 8008fa4:	03d09000 	.word	0x03d09000
 8008fa8:	003d0900 	.word	0x003d0900
 8008fac:	0800efe0 	.word	0x0800efe0

08008fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fbc:	f003 0308 	and.w	r3, r3, #8
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00a      	beq.n	8008fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00a      	beq.n	8008ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00a      	beq.n	800901e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	430a      	orrs	r2, r1
 800901c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009044:	f003 0310 	and.w	r3, r3, #16
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00a      	beq.n	8009062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009066:	f003 0320 	and.w	r3, r3, #32
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01a      	beq.n	80090c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090ae:	d10a      	bne.n	80090c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	430a      	orrs	r2, r1
 80090c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	430a      	orrs	r2, r1
 80090e6:	605a      	str	r2, [r3, #4]
  }
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b098      	sub	sp, #96	@ 0x60
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009104:	f7f8 fb32 	bl	800176c <HAL_GetTick>
 8009108:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 0308 	and.w	r3, r3, #8
 8009114:	2b08      	cmp	r3, #8
 8009116:	d12f      	bne.n	8009178 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009118:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009120:	2200      	movs	r2, #0
 8009122:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f88e 	bl	8009248 <UART_WaitOnFlagUntilTimeout>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d022      	beq.n	8009178 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009146:	653b      	str	r3, [r7, #80]	@ 0x50
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	461a      	mov	r2, r3
 800914e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009150:	647b      	str	r3, [r7, #68]	@ 0x44
 8009152:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009154:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009158:	e841 2300 	strex	r3, r2, [r1]
 800915c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800915e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e6      	bne.n	8009132 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2220      	movs	r2, #32
 8009168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e063      	b.n	8009240 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0304 	and.w	r3, r3, #4
 8009182:	2b04      	cmp	r3, #4
 8009184:	d149      	bne.n	800921a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009186:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800918e:	2200      	movs	r2, #0
 8009190:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f857 	bl	8009248 <UART_WaitOnFlagUntilTimeout>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d03c      	beq.n	800921a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	623b      	str	r3, [r7, #32]
   return(result);
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091be:	633b      	str	r3, [r7, #48]	@ 0x30
 80091c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e6      	bne.n	80091a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3308      	adds	r3, #8
 80091d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	e853 3f00 	ldrex	r3, [r3]
 80091e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f023 0301 	bic.w	r3, r3, #1
 80091e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3308      	adds	r3, #8
 80091f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091f2:	61fa      	str	r2, [r7, #28]
 80091f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	69b9      	ldr	r1, [r7, #24]
 80091f8:	69fa      	ldr	r2, [r7, #28]
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e5      	bne.n	80091d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009216:	2303      	movs	r3, #3
 8009218:	e012      	b.n	8009240 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2220      	movs	r2, #32
 8009226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3758      	adds	r7, #88	@ 0x58
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	4613      	mov	r3, r2
 8009256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009258:	e04f      	b.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009260:	d04b      	beq.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009262:	f7f8 fa83 	bl	800176c <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	69ba      	ldr	r2, [r7, #24]
 800926e:	429a      	cmp	r2, r3
 8009270:	d302      	bcc.n	8009278 <UART_WaitOnFlagUntilTimeout+0x30>
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e04e      	b.n	800931a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0304 	and.w	r3, r3, #4
 8009286:	2b00      	cmp	r3, #0
 8009288:	d037      	beq.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b80      	cmp	r3, #128	@ 0x80
 800928e:	d034      	beq.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2b40      	cmp	r3, #64	@ 0x40
 8009294:	d031      	beq.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	f003 0308 	and.w	r3, r3, #8
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	d110      	bne.n	80092c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2208      	movs	r2, #8
 80092aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 f839 	bl	8009324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2208      	movs	r2, #8
 80092b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e029      	b.n	800931a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092d4:	d111      	bne.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 f81f 	bl	8009324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2220      	movs	r2, #32
 80092ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e00f      	b.n	800931a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69da      	ldr	r2, [r3, #28]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	4013      	ands	r3, r2
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	429a      	cmp	r2, r3
 8009308:	bf0c      	ite	eq
 800930a:	2301      	moveq	r3, #1
 800930c:	2300      	movne	r3, #0
 800930e:	b2db      	uxtb	r3, r3
 8009310:	461a      	mov	r2, r3
 8009312:	79fb      	ldrb	r3, [r7, #7]
 8009314:	429a      	cmp	r2, r3
 8009316:	d0a0      	beq.n	800925a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009324:	b480      	push	{r7}
 8009326:	b095      	sub	sp, #84	@ 0x54
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009340:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800934a:	643b      	str	r3, [r7, #64]	@ 0x40
 800934c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009350:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e6      	bne.n	800932c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3308      	adds	r3, #8
 8009364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	e853 3f00 	ldrex	r3, [r3]
 800936c:	61fb      	str	r3, [r7, #28]
   return(result);
 800936e:	69fa      	ldr	r2, [r7, #28]
 8009370:	4b1e      	ldr	r3, [pc, #120]	@ (80093ec <UART_EndRxTransfer+0xc8>)
 8009372:	4013      	ands	r3, r2
 8009374:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3308      	adds	r3, #8
 800937c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800937e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009380:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009382:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e5      	bne.n	800935e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009396:	2b01      	cmp	r3, #1
 8009398:	d118      	bne.n	80093cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f023 0310 	bic.w	r3, r3, #16
 80093ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093b8:	61bb      	str	r3, [r7, #24]
 80093ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6979      	ldr	r1, [r7, #20]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	613b      	str	r3, [r7, #16]
   return(result);
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e6      	bne.n	800939a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80093e0:	bf00      	nop
 80093e2:	3754      	adds	r7, #84	@ 0x54
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	effffffe 	.word	0xeffffffe

080093f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f7ff f854 	bl	80084b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800940c:	bf00      	nop
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b088      	sub	sp, #32
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	60bb      	str	r3, [r7, #8]
   return(result);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009430:	61fb      	str	r3, [r7, #28]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	61bb      	str	r3, [r7, #24]
 800943c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943e:	6979      	ldr	r1, [r7, #20]
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	e841 2300 	strex	r3, r2, [r1]
 8009446:	613b      	str	r3, [r7, #16]
   return(result);
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e6      	bne.n	800941c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2220      	movs	r2, #32
 8009452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff f81f 	bl	80084a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009462:	bf00      	nop
 8009464:	3720      	adds	r7, #32
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800946a:	b480      	push	{r7}
 800946c:	b083      	sub	sp, #12
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009472:	bf00      	nop
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b085      	sub	sp, #20
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d101      	bne.n	80094bc <HAL_UARTEx_DisableFifoMode+0x16>
 80094b8:	2302      	movs	r3, #2
 80094ba:	e027      	b.n	800950c <HAL_UARTEx_DisableFifoMode+0x66>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2224      	movs	r2, #36	@ 0x24
 80094c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0201 	bic.w	r2, r2, #1
 80094e2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80094ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009528:	2b01      	cmp	r3, #1
 800952a:	d101      	bne.n	8009530 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800952c:	2302      	movs	r3, #2
 800952e:	e02d      	b.n	800958c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2224      	movs	r2, #36	@ 0x24
 800953c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 0201 	bic.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	430a      	orrs	r2, r1
 800956a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f84f 	bl	8009610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2220      	movs	r2, #32
 800957e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d101      	bne.n	80095ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095a8:	2302      	movs	r3, #2
 80095aa:	e02d      	b.n	8009608 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2224      	movs	r2, #36	@ 0x24
 80095b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f022 0201 	bic.w	r2, r2, #1
 80095d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f811 	bl	8009610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2220      	movs	r2, #32
 80095fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800961c:	2b00      	cmp	r3, #0
 800961e:	d108      	bne.n	8009632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009630:	e031      	b.n	8009696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009632:	2310      	movs	r3, #16
 8009634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009636:	2310      	movs	r3, #16
 8009638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	0e5b      	lsrs	r3, r3, #25
 8009642:	b2db      	uxtb	r3, r3
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	0f5b      	lsrs	r3, r3, #29
 8009652:	b2db      	uxtb	r3, r3
 8009654:	f003 0307 	and.w	r3, r3, #7
 8009658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	7b3a      	ldrb	r2, [r7, #12]
 800965e:	4911      	ldr	r1, [pc, #68]	@ (80096a4 <UARTEx_SetNbDataToProcess+0x94>)
 8009660:	5c8a      	ldrb	r2, [r1, r2]
 8009662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009666:	7b3a      	ldrb	r2, [r7, #12]
 8009668:	490f      	ldr	r1, [pc, #60]	@ (80096a8 <UARTEx_SetNbDataToProcess+0x98>)
 800966a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800966c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009670:	b29a      	uxth	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	7b7a      	ldrb	r2, [r7, #13]
 800967c:	4909      	ldr	r1, [pc, #36]	@ (80096a4 <UARTEx_SetNbDataToProcess+0x94>)
 800967e:	5c8a      	ldrb	r2, [r1, r2]
 8009680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009684:	7b7a      	ldrb	r2, [r7, #13]
 8009686:	4908      	ldr	r1, [pc, #32]	@ (80096a8 <UARTEx_SetNbDataToProcess+0x98>)
 8009688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800968a:	fb93 f3f2 	sdiv	r3, r3, r2
 800968e:	b29a      	uxth	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009696:	bf00      	nop
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	0800eff8 	.word	0x0800eff8
 80096a8:	0800f000 	.word	0x0800f000

080096ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096ac:	b084      	sub	sp, #16
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	f107 001c 	add.w	r0, r7, #28
 80096ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d121      	bne.n	800970a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	4b2c      	ldr	r3, [pc, #176]	@ (8009788 <USB_CoreInit+0xdc>)
 80096d8:	4013      	ands	r3, r2
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80096ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d105      	bne.n	80096fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 fafa 	bl	800acf8 <USB_CoreReset>
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]
 8009708:	e01b      	b.n	8009742 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 faee 	bl	800acf8 <USB_CoreReset>
 800971c:	4603      	mov	r3, r0
 800971e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009720:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009724:	2b00      	cmp	r3, #0
 8009726:	d106      	bne.n	8009736 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800972c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	639a      	str	r2, [r3, #56]	@ 0x38
 8009734:	e005      	b.n	8009742 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009742:	7fbb      	ldrb	r3, [r7, #30]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d116      	bne.n	8009776 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800974c:	b29a      	uxth	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009756:	4b0d      	ldr	r3, [pc, #52]	@ (800978c <USB_CoreInit+0xe0>)
 8009758:	4313      	orrs	r3, r2
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	f043 0206 	orr.w	r2, r3, #6
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f043 0220 	orr.w	r2, r3, #32
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009776:	7bfb      	ldrb	r3, [r7, #15]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009782:	b004      	add	sp, #16
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	ffbdffbf 	.word	0xffbdffbf
 800978c:	03ee0000 	.word	0x03ee0000

08009790 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	4613      	mov	r3, r2
 800979c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d165      	bne.n	8009870 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	4a41      	ldr	r2, [pc, #260]	@ (80098ac <USB_SetTurnaroundTime+0x11c>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d906      	bls.n	80097ba <USB_SetTurnaroundTime+0x2a>
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4a40      	ldr	r2, [pc, #256]	@ (80098b0 <USB_SetTurnaroundTime+0x120>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d202      	bcs.n	80097ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80097b4:	230f      	movs	r3, #15
 80097b6:	617b      	str	r3, [r7, #20]
 80097b8:	e062      	b.n	8009880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	4a3c      	ldr	r2, [pc, #240]	@ (80098b0 <USB_SetTurnaroundTime+0x120>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d306      	bcc.n	80097d0 <USB_SetTurnaroundTime+0x40>
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	4a3b      	ldr	r2, [pc, #236]	@ (80098b4 <USB_SetTurnaroundTime+0x124>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d202      	bcs.n	80097d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80097ca:	230e      	movs	r3, #14
 80097cc:	617b      	str	r3, [r7, #20]
 80097ce:	e057      	b.n	8009880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	4a38      	ldr	r2, [pc, #224]	@ (80098b4 <USB_SetTurnaroundTime+0x124>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d306      	bcc.n	80097e6 <USB_SetTurnaroundTime+0x56>
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	4a37      	ldr	r2, [pc, #220]	@ (80098b8 <USB_SetTurnaroundTime+0x128>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d202      	bcs.n	80097e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80097e0:	230d      	movs	r3, #13
 80097e2:	617b      	str	r3, [r7, #20]
 80097e4:	e04c      	b.n	8009880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	4a33      	ldr	r2, [pc, #204]	@ (80098b8 <USB_SetTurnaroundTime+0x128>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d306      	bcc.n	80097fc <USB_SetTurnaroundTime+0x6c>
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	4a32      	ldr	r2, [pc, #200]	@ (80098bc <USB_SetTurnaroundTime+0x12c>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d802      	bhi.n	80097fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80097f6:	230c      	movs	r3, #12
 80097f8:	617b      	str	r3, [r7, #20]
 80097fa:	e041      	b.n	8009880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	4a2f      	ldr	r2, [pc, #188]	@ (80098bc <USB_SetTurnaroundTime+0x12c>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d906      	bls.n	8009812 <USB_SetTurnaroundTime+0x82>
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	4a2e      	ldr	r2, [pc, #184]	@ (80098c0 <USB_SetTurnaroundTime+0x130>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d802      	bhi.n	8009812 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800980c:	230b      	movs	r3, #11
 800980e:	617b      	str	r3, [r7, #20]
 8009810:	e036      	b.n	8009880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	4a2a      	ldr	r2, [pc, #168]	@ (80098c0 <USB_SetTurnaroundTime+0x130>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d906      	bls.n	8009828 <USB_SetTurnaroundTime+0x98>
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	4a29      	ldr	r2, [pc, #164]	@ (80098c4 <USB_SetTurnaroundTime+0x134>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d802      	bhi.n	8009828 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009822:	230a      	movs	r3, #10
 8009824:	617b      	str	r3, [r7, #20]
 8009826:	e02b      	b.n	8009880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	4a26      	ldr	r2, [pc, #152]	@ (80098c4 <USB_SetTurnaroundTime+0x134>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d906      	bls.n	800983e <USB_SetTurnaroundTime+0xae>
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4a25      	ldr	r2, [pc, #148]	@ (80098c8 <USB_SetTurnaroundTime+0x138>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d202      	bcs.n	800983e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009838:	2309      	movs	r3, #9
 800983a:	617b      	str	r3, [r7, #20]
 800983c:	e020      	b.n	8009880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	4a21      	ldr	r2, [pc, #132]	@ (80098c8 <USB_SetTurnaroundTime+0x138>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d306      	bcc.n	8009854 <USB_SetTurnaroundTime+0xc4>
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	4a20      	ldr	r2, [pc, #128]	@ (80098cc <USB_SetTurnaroundTime+0x13c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d802      	bhi.n	8009854 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800984e:	2308      	movs	r3, #8
 8009850:	617b      	str	r3, [r7, #20]
 8009852:	e015      	b.n	8009880 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	4a1d      	ldr	r2, [pc, #116]	@ (80098cc <USB_SetTurnaroundTime+0x13c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d906      	bls.n	800986a <USB_SetTurnaroundTime+0xda>
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4a1c      	ldr	r2, [pc, #112]	@ (80098d0 <USB_SetTurnaroundTime+0x140>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d202      	bcs.n	800986a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009864:	2307      	movs	r3, #7
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	e00a      	b.n	8009880 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800986a:	2306      	movs	r3, #6
 800986c:	617b      	str	r3, [r7, #20]
 800986e:	e007      	b.n	8009880 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d102      	bne.n	800987c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009876:	2309      	movs	r3, #9
 8009878:	617b      	str	r3, [r7, #20]
 800987a:	e001      	b.n	8009880 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800987c:	2309      	movs	r3, #9
 800987e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	68da      	ldr	r2, [r3, #12]
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	029b      	lsls	r3, r3, #10
 8009894:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009898:	431a      	orrs	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	00d8acbf 	.word	0x00d8acbf
 80098b0:	00e4e1c0 	.word	0x00e4e1c0
 80098b4:	00f42400 	.word	0x00f42400
 80098b8:	01067380 	.word	0x01067380
 80098bc:	011a499f 	.word	0x011a499f
 80098c0:	01312cff 	.word	0x01312cff
 80098c4:	014ca43f 	.word	0x014ca43f
 80098c8:	016e3600 	.word	0x016e3600
 80098cc:	01a6ab1f 	.word	0x01a6ab1f
 80098d0:	01e84800 	.word	0x01e84800

080098d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f043 0201 	orr.w	r2, r3, #1
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b083      	sub	sp, #12
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f023 0201 	bic.w	r2, r3, #1
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009924:	2300      	movs	r3, #0
 8009926:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d115      	bne.n	8009966 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009946:	200a      	movs	r0, #10
 8009948:	f7f7 ff1c 	bl	8001784 <HAL_Delay>
      ms += 10U;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	330a      	adds	r3, #10
 8009950:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f001 f93f 	bl	800abd6 <USB_GetMode>
 8009958:	4603      	mov	r3, r0
 800995a:	2b01      	cmp	r3, #1
 800995c:	d01e      	beq.n	800999c <USB_SetCurrentMode+0x84>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2bc7      	cmp	r3, #199	@ 0xc7
 8009962:	d9f0      	bls.n	8009946 <USB_SetCurrentMode+0x2e>
 8009964:	e01a      	b.n	800999c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009966:	78fb      	ldrb	r3, [r7, #3]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d115      	bne.n	8009998 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009978:	200a      	movs	r0, #10
 800997a:	f7f7 ff03 	bl	8001784 <HAL_Delay>
      ms += 10U;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	330a      	adds	r3, #10
 8009982:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f001 f926 	bl	800abd6 <USB_GetMode>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d005      	beq.n	800999c <USB_SetCurrentMode+0x84>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2bc7      	cmp	r3, #199	@ 0xc7
 8009994:	d9f0      	bls.n	8009978 <USB_SetCurrentMode+0x60>
 8009996:	e001      	b.n	800999c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e005      	b.n	80099a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2bc8      	cmp	r3, #200	@ 0xc8
 80099a0:	d101      	bne.n	80099a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e000      	b.n	80099a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099b0:	b084      	sub	sp, #16
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b086      	sub	sp, #24
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80099be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80099ca:	2300      	movs	r3, #0
 80099cc:	613b      	str	r3, [r7, #16]
 80099ce:	e009      	b.n	80099e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	3340      	adds	r3, #64	@ 0x40
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	2200      	movs	r2, #0
 80099dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	3301      	adds	r3, #1
 80099e2:	613b      	str	r3, [r7, #16]
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	2b0e      	cmp	r3, #14
 80099e8:	d9f2      	bls.n	80099d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80099ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d11c      	bne.n	8009a2c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a00:	f043 0302 	orr.w	r3, r3, #2
 8009a04:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a0a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	e005      	b.n	8009a38 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a30:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a3e:	461a      	mov	r2, r3
 8009a40:	2300      	movs	r3, #0
 8009a42:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a44:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d10d      	bne.n	8009a68 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d104      	bne.n	8009a5e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a54:	2100      	movs	r1, #0
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f968 	bl	8009d2c <USB_SetDevSpeed>
 8009a5c:	e008      	b.n	8009a70 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a5e:	2101      	movs	r1, #1
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f963 	bl	8009d2c <USB_SetDevSpeed>
 8009a66:	e003      	b.n	8009a70 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a68:	2103      	movs	r1, #3
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f95e 	bl	8009d2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a70:	2110      	movs	r1, #16
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f8fa 	bl	8009c6c <USB_FlushTxFifo>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f924 	bl	8009cd0 <USB_FlushRxFifo>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a98:	461a      	mov	r2, r3
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	613b      	str	r3, [r7, #16]
 8009aba:	e043      	b.n	8009b44 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	015a      	lsls	r2, r3, #5
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ace:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ad2:	d118      	bne.n	8009b06 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10a      	bne.n	8009af0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	e013      	b.n	8009b18 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009afc:	461a      	mov	r2, r3
 8009afe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009b02:	6013      	str	r3, [r2, #0]
 8009b04:	e008      	b.n	8009b18 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b12:	461a      	mov	r2, r3
 8009b14:	2300      	movs	r3, #0
 8009b16:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b24:	461a      	mov	r2, r3
 8009b26:	2300      	movs	r3, #0
 8009b28:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b36:	461a      	mov	r2, r3
 8009b38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	3301      	adds	r3, #1
 8009b42:	613b      	str	r3, [r7, #16]
 8009b44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009b48:	461a      	mov	r2, r3
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d3b5      	bcc.n	8009abc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b50:	2300      	movs	r3, #0
 8009b52:	613b      	str	r3, [r7, #16]
 8009b54:	e043      	b.n	8009bde <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b6c:	d118      	bne.n	8009ba0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b80:	461a      	mov	r2, r3
 8009b82:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	e013      	b.n	8009bb2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b96:	461a      	mov	r2, r3
 8009b98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	e008      	b.n	8009bb2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bac:	461a      	mov	r2, r3
 8009bae:	2300      	movs	r3, #0
 8009bb0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	015a      	lsls	r2, r3, #5
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	4413      	add	r3, r2
 8009bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	015a      	lsls	r2, r3, #5
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009bd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	613b      	str	r3, [r7, #16]
 8009bde:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009be2:	461a      	mov	r2, r3
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d3b5      	bcc.n	8009b56 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bfc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009c0a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d105      	bne.n	8009c20 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	f043 0210 	orr.w	r2, r3, #16
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	699a      	ldr	r2, [r3, #24]
 8009c24:	4b0f      	ldr	r3, [pc, #60]	@ (8009c64 <USB_DevInit+0x2b4>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009c2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d005      	beq.n	8009c40 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	f043 0208 	orr.w	r2, r3, #8
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009c40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d105      	bne.n	8009c54 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	699a      	ldr	r2, [r3, #24]
 8009c4c:	4b06      	ldr	r3, [pc, #24]	@ (8009c68 <USB_DevInit+0x2b8>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c60:	b004      	add	sp, #16
 8009c62:	4770      	bx	lr
 8009c64:	803c3800 	.word	0x803c3800
 8009c68:	40000004 	.word	0x40000004

08009c6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c76:	2300      	movs	r3, #0
 8009c78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c86:	d901      	bls.n	8009c8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e01b      	b.n	8009cc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	daf2      	bge.n	8009c7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c94:	2300      	movs	r3, #0
 8009c96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	019b      	lsls	r3, r3, #6
 8009c9c:	f043 0220 	orr.w	r2, r3, #32
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cb0:	d901      	bls.n	8009cb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e006      	b.n	8009cc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	f003 0320 	and.w	r3, r3, #32
 8009cbe:	2b20      	cmp	r3, #32
 8009cc0:	d0f0      	beq.n	8009ca4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ce8:	d901      	bls.n	8009cee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009cea:	2303      	movs	r3, #3
 8009cec:	e018      	b.n	8009d20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	daf2      	bge.n	8009cdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2210      	movs	r2, #16
 8009cfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	3301      	adds	r3, #1
 8009d04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d0c:	d901      	bls.n	8009d12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e006      	b.n	8009d20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	f003 0310 	and.w	r3, r3, #16
 8009d1a:	2b10      	cmp	r3, #16
 8009d1c:	d0f0      	beq.n	8009d00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	78fb      	ldrb	r3, [r7, #3]
 8009d46:	68f9      	ldr	r1, [r7, #12]
 8009d48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b087      	sub	sp, #28
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f003 0306 	and.w	r3, r3, #6
 8009d76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	75fb      	strb	r3, [r7, #23]
 8009d82:	e00a      	b.n	8009d9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d002      	beq.n	8009d90 <USB_GetDevSpeed+0x32>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2b06      	cmp	r3, #6
 8009d8e:	d102      	bne.n	8009d96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009d90:	2302      	movs	r3, #2
 8009d92:	75fb      	strb	r3, [r7, #23]
 8009d94:	e001      	b.n	8009d9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009d96:	230f      	movs	r3, #15
 8009d98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	371c      	adds	r7, #28
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	785b      	ldrb	r3, [r3, #1]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d139      	bne.n	8009e38 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dca:	69da      	ldr	r2, [r3, #28]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	f003 030f 	and.w	r3, r3, #15
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	68f9      	ldr	r1, [r7, #12]
 8009dde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009de2:	4313      	orrs	r3, r2
 8009de4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d153      	bne.n	8009ea4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	791b      	ldrb	r3, [r3, #4]
 8009e16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	059b      	lsls	r3, r3, #22
 8009e1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e20:	431a      	orrs	r2, r3
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	0159      	lsls	r1, r3, #5
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	440b      	add	r3, r1
 8009e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4b20      	ldr	r3, [pc, #128]	@ (8009eb4 <USB_ActivateEndpoint+0x10c>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	600b      	str	r3, [r1, #0]
 8009e36:	e035      	b.n	8009ea4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e3e:	69da      	ldr	r2, [r3, #28]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	f003 030f 	and.w	r3, r3, #15
 8009e48:	2101      	movs	r1, #1
 8009e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4e:	041b      	lsls	r3, r3, #16
 8009e50:	68f9      	ldr	r1, [r7, #12]
 8009e52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e56:	4313      	orrs	r3, r2
 8009e58:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d119      	bne.n	8009ea4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	015a      	lsls	r2, r3, #5
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	4413      	add	r3, r2
 8009e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	791b      	ldrb	r3, [r3, #4]
 8009e8a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e8c:	430b      	orrs	r3, r1
 8009e8e:	431a      	orrs	r2, r3
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	0159      	lsls	r1, r3, #5
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	440b      	add	r3, r1
 8009e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	4b05      	ldr	r3, [pc, #20]	@ (8009eb4 <USB_ActivateEndpoint+0x10c>)
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	10008000 	.word	0x10008000

08009eb8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	785b      	ldrb	r3, [r3, #1]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d161      	bne.n	8009f98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009eea:	d11f      	bne.n	8009f2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	0151      	lsls	r1, r2, #5
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	440a      	add	r2, r1
 8009f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	0151      	lsls	r1, r2, #5
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	440a      	add	r2, r1
 8009f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	f003 030f 	and.w	r3, r3, #15
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	43db      	mvns	r3, r3
 8009f46:	68f9      	ldr	r1, [r7, #12]
 8009f48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f56:	69da      	ldr	r2, [r3, #28]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	f003 030f 	and.w	r3, r3, #15
 8009f60:	2101      	movs	r1, #1
 8009f62:	fa01 f303 	lsl.w	r3, r1, r3
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	43db      	mvns	r3, r3
 8009f6a:	68f9      	ldr	r1, [r7, #12]
 8009f6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f70:	4013      	ands	r3, r2
 8009f72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	0159      	lsls	r1, r3, #5
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	440b      	add	r3, r1
 8009f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4b35      	ldr	r3, [pc, #212]	@ (800a068 <USB_DeactivateEndpoint+0x1b0>)
 8009f92:	4013      	ands	r3, r2
 8009f94:	600b      	str	r3, [r1, #0]
 8009f96:	e060      	b.n	800a05a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009faa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fae:	d11f      	bne.n	8009ff0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	015a      	lsls	r2, r3, #5
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	0151      	lsls	r1, r2, #5
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	440a      	add	r2, r1
 8009fc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	0151      	lsls	r1, r2, #5
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	440a      	add	r2, r1
 8009fe6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009fee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	f003 030f 	and.w	r3, r3, #15
 800a000:	2101      	movs	r1, #1
 800a002:	fa01 f303 	lsl.w	r3, r1, r3
 800a006:	041b      	lsls	r3, r3, #16
 800a008:	43db      	mvns	r3, r3
 800a00a:	68f9      	ldr	r1, [r7, #12]
 800a00c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a010:	4013      	ands	r3, r2
 800a012:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a01a:	69da      	ldr	r2, [r3, #28]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	f003 030f 	and.w	r3, r3, #15
 800a024:	2101      	movs	r1, #1
 800a026:	fa01 f303 	lsl.w	r3, r1, r3
 800a02a:	041b      	lsls	r3, r3, #16
 800a02c:	43db      	mvns	r3, r3
 800a02e:	68f9      	ldr	r1, [r7, #12]
 800a030:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a034:	4013      	ands	r3, r2
 800a036:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	0159      	lsls	r1, r3, #5
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	440b      	add	r3, r1
 800a04e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a052:	4619      	mov	r1, r3
 800a054:	4b05      	ldr	r3, [pc, #20]	@ (800a06c <USB_DeactivateEndpoint+0x1b4>)
 800a056:	4013      	ands	r3, r2
 800a058:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	ec337800 	.word	0xec337800
 800a06c:	eff37800 	.word	0xeff37800

0800a070 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08a      	sub	sp, #40	@ 0x28
 800a074:	af02      	add	r7, sp, #8
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	4613      	mov	r3, r2
 800a07c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	785b      	ldrb	r3, [r3, #1]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	f040 8185 	bne.w	800a39c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d132      	bne.n	800a100 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0a6:	691a      	ldr	r2, [r3, #16]
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	0159      	lsls	r1, r3, #5
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	440b      	add	r3, r1
 800a0b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4ba7      	ldr	r3, [pc, #668]	@ (800a354 <USB_EPStartXfer+0x2e4>)
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	015a      	lsls	r2, r3, #5
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	0151      	lsls	r1, r2, #5
 800a0ce:	69fa      	ldr	r2, [r7, #28]
 800a0d0:	440a      	add	r2, r1
 800a0d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e8:	691a      	ldr	r2, [r3, #16]
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	0159      	lsls	r1, r3, #5
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	440b      	add	r3, r1
 800a0f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4b97      	ldr	r3, [pc, #604]	@ (800a358 <USB_EPStartXfer+0x2e8>)
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	610b      	str	r3, [r1, #16]
 800a0fe:	e097      	b.n	800a230 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	4413      	add	r3, r2
 800a108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a10c:	691a      	ldr	r2, [r3, #16]
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	0159      	lsls	r1, r3, #5
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	440b      	add	r3, r1
 800a116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a11a:	4619      	mov	r1, r3
 800a11c:	4b8e      	ldr	r3, [pc, #568]	@ (800a358 <USB_EPStartXfer+0x2e8>)
 800a11e:	4013      	ands	r3, r2
 800a120:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	015a      	lsls	r2, r3, #5
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	4413      	add	r3, r2
 800a12a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a12e:	691a      	ldr	r2, [r3, #16]
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	0159      	lsls	r1, r3, #5
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	440b      	add	r3, r1
 800a138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a13c:	4619      	mov	r1, r3
 800a13e:	4b85      	ldr	r3, [pc, #532]	@ (800a354 <USB_EPStartXfer+0x2e4>)
 800a140:	4013      	ands	r3, r2
 800a142:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d11a      	bne.n	800a180 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	691a      	ldr	r2, [r3, #16]
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	429a      	cmp	r2, r3
 800a154:	d903      	bls.n	800a15e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	689a      	ldr	r2, [r3, #8]
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	015a      	lsls	r2, r3, #5
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	4413      	add	r3, r2
 800a166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	69ba      	ldr	r2, [r7, #24]
 800a16e:	0151      	lsls	r1, r2, #5
 800a170:	69fa      	ldr	r2, [r7, #28]
 800a172:	440a      	add	r2, r1
 800a174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a178:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a17c:	6113      	str	r3, [r2, #16]
 800a17e:	e044      	b.n	800a20a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	691a      	ldr	r2, [r3, #16]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	4413      	add	r3, r2
 800a18a:	1e5a      	subs	r2, r3, #1
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	fbb2 f3f3 	udiv	r3, r2, r3
 800a194:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1a2:	691a      	ldr	r2, [r3, #16]
 800a1a4:	8afb      	ldrh	r3, [r7, #22]
 800a1a6:	04d9      	lsls	r1, r3, #19
 800a1a8:	4b6c      	ldr	r3, [pc, #432]	@ (800a35c <USB_EPStartXfer+0x2ec>)
 800a1aa:	400b      	ands	r3, r1
 800a1ac:	69b9      	ldr	r1, [r7, #24]
 800a1ae:	0148      	lsls	r0, r1, #5
 800a1b0:	69f9      	ldr	r1, [r7, #28]
 800a1b2:	4401      	add	r1, r0
 800a1b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	791b      	ldrb	r3, [r3, #4]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d122      	bne.n	800a20a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	69ba      	ldr	r2, [r7, #24]
 800a1d4:	0151      	lsls	r1, r2, #5
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	440a      	add	r2, r1
 800a1da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1de:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a1e2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f0:	691a      	ldr	r2, [r3, #16]
 800a1f2:	8afb      	ldrh	r3, [r7, #22]
 800a1f4:	075b      	lsls	r3, r3, #29
 800a1f6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a1fa:	69b9      	ldr	r1, [r7, #24]
 800a1fc:	0148      	lsls	r0, r1, #5
 800a1fe:	69f9      	ldr	r1, [r7, #28]
 800a200:	4401      	add	r1, r0
 800a202:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a206:	4313      	orrs	r3, r2
 800a208:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	4413      	add	r3, r2
 800a212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a216:	691a      	ldr	r2, [r3, #16]
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a220:	69b9      	ldr	r1, [r7, #24]
 800a222:	0148      	lsls	r0, r1, #5
 800a224:	69f9      	ldr	r1, [r7, #28]
 800a226:	4401      	add	r1, r0
 800a228:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a22c:	4313      	orrs	r3, r2
 800a22e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	2b01      	cmp	r3, #1
 800a234:	d14b      	bne.n	800a2ce <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d009      	beq.n	800a252 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a24a:	461a      	mov	r2, r3
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	69db      	ldr	r3, [r3, #28]
 800a250:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	791b      	ldrb	r3, [r3, #4]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d128      	bne.n	800a2ac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a266:	2b00      	cmp	r3, #0
 800a268:	d110      	bne.n	800a28c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	69ba      	ldr	r2, [r7, #24]
 800a27a:	0151      	lsls	r1, r2, #5
 800a27c:	69fa      	ldr	r2, [r7, #28]
 800a27e:	440a      	add	r2, r1
 800a280:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a284:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a288:	6013      	str	r3, [r2, #0]
 800a28a:	e00f      	b.n	800a2ac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69ba      	ldr	r2, [r7, #24]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2aa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	69ba      	ldr	r2, [r7, #24]
 800a2bc:	0151      	lsls	r1, r2, #5
 800a2be:	69fa      	ldr	r2, [r7, #28]
 800a2c0:	440a      	add	r2, r1
 800a2c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a2ca:	6013      	str	r3, [r2, #0]
 800a2cc:	e169      	b.n	800a5a2 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	015a      	lsls	r2, r3, #5
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	69ba      	ldr	r2, [r7, #24]
 800a2de:	0151      	lsls	r1, r2, #5
 800a2e0:	69fa      	ldr	r2, [r7, #28]
 800a2e2:	440a      	add	r2, r1
 800a2e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2e8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a2ec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	791b      	ldrb	r3, [r3, #4]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d015      	beq.n	800a322 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 8151 	beq.w	800a5a2 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	f003 030f 	and.w	r3, r3, #15
 800a310:	2101      	movs	r1, #1
 800a312:	fa01 f303 	lsl.w	r3, r1, r3
 800a316:	69f9      	ldr	r1, [r7, #28]
 800a318:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a31c:	4313      	orrs	r3, r2
 800a31e:	634b      	str	r3, [r1, #52]	@ 0x34
 800a320:	e13f      	b.n	800a5a2 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d116      	bne.n	800a360 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	015a      	lsls	r2, r3, #5
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	4413      	add	r3, r2
 800a33a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	0151      	lsls	r1, r2, #5
 800a344:	69fa      	ldr	r2, [r7, #28]
 800a346:	440a      	add	r2, r1
 800a348:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a34c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	e015      	b.n	800a380 <USB_EPStartXfer+0x310>
 800a354:	e007ffff 	.word	0xe007ffff
 800a358:	fff80000 	.word	0xfff80000
 800a35c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	4413      	add	r3, r2
 800a368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	69ba      	ldr	r2, [r7, #24]
 800a370:	0151      	lsls	r1, r2, #5
 800a372:	69fa      	ldr	r2, [r7, #28]
 800a374:	440a      	add	r2, r1
 800a376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a37a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a37e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	68d9      	ldr	r1, [r3, #12]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	781a      	ldrb	r2, [r3, #0]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	b298      	uxth	r0, r3
 800a38e:	79fb      	ldrb	r3, [r7, #7]
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	4603      	mov	r3, r0
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f000 f9b9 	bl	800a70c <USB_WritePacket>
 800a39a:	e102      	b.n	800a5a2 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a8:	691a      	ldr	r2, [r3, #16]
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	0159      	lsls	r1, r3, #5
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	440b      	add	r3, r1
 800a3b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	4b7c      	ldr	r3, [pc, #496]	@ (800a5ac <USB_EPStartXfer+0x53c>)
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	015a      	lsls	r2, r3, #5
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ca:	691a      	ldr	r2, [r3, #16]
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	0159      	lsls	r1, r3, #5
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	440b      	add	r3, r1
 800a3d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4b75      	ldr	r3, [pc, #468]	@ (800a5b0 <USB_EPStartXfer+0x540>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d12f      	bne.n	800a446 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	689a      	ldr	r2, [r3, #8]
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	015a      	lsls	r2, r3, #5
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	4413      	add	r3, r2
 800a406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a40a:	691a      	ldr	r2, [r3, #16]
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	6a1b      	ldr	r3, [r3, #32]
 800a410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a414:	69b9      	ldr	r1, [r7, #24]
 800a416:	0148      	lsls	r0, r1, #5
 800a418:	69f9      	ldr	r1, [r7, #28]
 800a41a:	4401      	add	r1, r0
 800a41c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a420:	4313      	orrs	r3, r2
 800a422:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	69ba      	ldr	r2, [r7, #24]
 800a434:	0151      	lsls	r1, r2, #5
 800a436:	69fa      	ldr	r2, [r7, #28]
 800a438:	440a      	add	r2, r1
 800a43a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a43e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a442:	6113      	str	r3, [r2, #16]
 800a444:	e05f      	b.n	800a506 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d123      	bne.n	800a496 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	015a      	lsls	r2, r3, #5
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	4413      	add	r3, r2
 800a456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a45a:	691a      	ldr	r2, [r3, #16]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a464:	69b9      	ldr	r1, [r7, #24]
 800a466:	0148      	lsls	r0, r1, #5
 800a468:	69f9      	ldr	r1, [r7, #28]
 800a46a:	4401      	add	r1, r0
 800a46c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a470:	4313      	orrs	r3, r2
 800a472:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	69ba      	ldr	r2, [r7, #24]
 800a484:	0151      	lsls	r1, r2, #5
 800a486:	69fa      	ldr	r2, [r7, #28]
 800a488:	440a      	add	r2, r1
 800a48a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a48e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a492:	6113      	str	r3, [r2, #16]
 800a494:	e037      	b.n	800a506 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	691a      	ldr	r2, [r3, #16]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	4413      	add	r3, r2
 800a4a0:	1e5a      	subs	r2, r3, #1
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4aa:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	8afa      	ldrh	r2, [r7, #22]
 800a4b2:	fb03 f202 	mul.w	r2, r3, r2
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	015a      	lsls	r2, r3, #5
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4c6:	691a      	ldr	r2, [r3, #16]
 800a4c8:	8afb      	ldrh	r3, [r7, #22]
 800a4ca:	04d9      	lsls	r1, r3, #19
 800a4cc:	4b39      	ldr	r3, [pc, #228]	@ (800a5b4 <USB_EPStartXfer+0x544>)
 800a4ce:	400b      	ands	r3, r1
 800a4d0:	69b9      	ldr	r1, [r7, #24]
 800a4d2:	0148      	lsls	r0, r1, #5
 800a4d4:	69f9      	ldr	r1, [r7, #28]
 800a4d6:	4401      	add	r1, r0
 800a4d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ec:	691a      	ldr	r2, [r3, #16]
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	6a1b      	ldr	r3, [r3, #32]
 800a4f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4f6:	69b9      	ldr	r1, [r7, #24]
 800a4f8:	0148      	lsls	r0, r1, #5
 800a4fa:	69f9      	ldr	r1, [r7, #28]
 800a4fc:	4401      	add	r1, r0
 800a4fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a502:	4313      	orrs	r3, r2
 800a504:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a506:	79fb      	ldrb	r3, [r7, #7]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d10d      	bne.n	800a528 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d009      	beq.n	800a528 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	68d9      	ldr	r1, [r3, #12]
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a524:	460a      	mov	r2, r1
 800a526:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	791b      	ldrb	r3, [r3, #4]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d128      	bne.n	800a582 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d110      	bne.n	800a562 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	69ba      	ldr	r2, [r7, #24]
 800a550:	0151      	lsls	r1, r2, #5
 800a552:	69fa      	ldr	r2, [r7, #28]
 800a554:	440a      	add	r2, r1
 800a556:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a55a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	e00f      	b.n	800a582 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	69ba      	ldr	r2, [r7, #24]
 800a572:	0151      	lsls	r1, r2, #5
 800a574:	69fa      	ldr	r2, [r7, #28]
 800a576:	440a      	add	r2, r1
 800a578:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a57c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a580:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	69ba      	ldr	r2, [r7, #24]
 800a592:	0151      	lsls	r1, r2, #5
 800a594:	69fa      	ldr	r2, [r7, #28]
 800a596:	440a      	add	r2, r1
 800a598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a59c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a5a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3720      	adds	r7, #32
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	fff80000 	.word	0xfff80000
 800a5b0:	e007ffff 	.word	0xe007ffff
 800a5b4:	1ff80000 	.word	0x1ff80000

0800a5b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	785b      	ldrb	r3, [r3, #1]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d14a      	bne.n	800a66c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	015a      	lsls	r2, r3, #5
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	4413      	add	r3, r2
 800a5e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5ee:	f040 8086 	bne.w	800a6fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	7812      	ldrb	r2, [r2, #0]
 800a606:	0151      	lsls	r1, r2, #5
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	440a      	add	r2, r1
 800a60c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a610:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a614:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	015a      	lsls	r2, r3, #5
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	4413      	add	r3, r2
 800a620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	7812      	ldrb	r2, [r2, #0]
 800a62a:	0151      	lsls	r1, r2, #5
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	440a      	add	r2, r1
 800a630:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a634:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a638:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3301      	adds	r3, #1
 800a63e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a646:	4293      	cmp	r3, r2
 800a648:	d902      	bls.n	800a650 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	75fb      	strb	r3, [r7, #23]
          break;
 800a64e:	e056      	b.n	800a6fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	015a      	lsls	r2, r3, #5
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	4413      	add	r3, r2
 800a65a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a668:	d0e7      	beq.n	800a63a <USB_EPStopXfer+0x82>
 800a66a:	e048      	b.n	800a6fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	015a      	lsls	r2, r3, #5
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	4413      	add	r3, r2
 800a676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a680:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a684:	d13b      	bne.n	800a6fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	015a      	lsls	r2, r3, #5
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	4413      	add	r3, r2
 800a690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	7812      	ldrb	r2, [r2, #0]
 800a69a:	0151      	lsls	r1, r2, #5
 800a69c:	693a      	ldr	r2, [r7, #16]
 800a69e:	440a      	add	r2, r1
 800a6a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a6a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	7812      	ldrb	r2, [r2, #0]
 800a6be:	0151      	lsls	r1, r2, #5
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	440a      	add	r2, r1
 800a6c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d902      	bls.n	800a6e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	75fb      	strb	r3, [r7, #23]
          break;
 800a6e2:	e00c      	b.n	800a6fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	015a      	lsls	r2, r3, #5
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6fc:	d0e7      	beq.n	800a6ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a700:	4618      	mov	r0, r3
 800a702:	371c      	adds	r7, #28
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b089      	sub	sp, #36	@ 0x24
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	4611      	mov	r1, r2
 800a718:	461a      	mov	r2, r3
 800a71a:	460b      	mov	r3, r1
 800a71c:	71fb      	strb	r3, [r7, #7]
 800a71e:	4613      	mov	r3, r2
 800a720:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a72a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d123      	bne.n	800a77a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a732:	88bb      	ldrh	r3, [r7, #4]
 800a734:	3303      	adds	r3, #3
 800a736:	089b      	lsrs	r3, r3, #2
 800a738:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a73a:	2300      	movs	r3, #0
 800a73c:	61bb      	str	r3, [r7, #24]
 800a73e:	e018      	b.n	800a772 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	031a      	lsls	r2, r3, #12
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	4413      	add	r3, r2
 800a748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a74c:	461a      	mov	r2, r3
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	3301      	adds	r3, #1
 800a758:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	3301      	adds	r3, #1
 800a75e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	3301      	adds	r3, #1
 800a764:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	3301      	adds	r3, #1
 800a76a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	3301      	adds	r3, #1
 800a770:	61bb      	str	r3, [r7, #24]
 800a772:	69ba      	ldr	r2, [r7, #24]
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	429a      	cmp	r2, r3
 800a778:	d3e2      	bcc.n	800a740 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3724      	adds	r7, #36	@ 0x24
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a788:	b480      	push	{r7}
 800a78a:	b08b      	sub	sp, #44	@ 0x2c
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	4613      	mov	r3, r2
 800a794:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a79e:	88fb      	ldrh	r3, [r7, #6]
 800a7a0:	089b      	lsrs	r3, r3, #2
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a7a6:	88fb      	ldrh	r3, [r7, #6]
 800a7a8:	f003 0303 	and.w	r3, r3, #3
 800a7ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	623b      	str	r3, [r7, #32]
 800a7b2:	e014      	b.n	800a7de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7be:	601a      	str	r2, [r3, #0]
    pDest++;
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	623b      	str	r3, [r7, #32]
 800a7de:	6a3a      	ldr	r2, [r7, #32]
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d3e6      	bcc.n	800a7b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a7e6:	8bfb      	ldrh	r3, [r7, #30]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d01e      	beq.n	800a82a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	f107 0310 	add.w	r3, r7, #16
 800a7fc:	6812      	ldr	r2, [r2, #0]
 800a7fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a800:	693a      	ldr	r2, [r7, #16]
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	b2db      	uxtb	r3, r3
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	fa22 f303 	lsr.w	r3, r2, r3
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a810:	701a      	strb	r2, [r3, #0]
      i++;
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	3301      	adds	r3, #1
 800a816:	623b      	str	r3, [r7, #32]
      pDest++;
 800a818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81a:	3301      	adds	r3, #1
 800a81c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a81e:	8bfb      	ldrh	r3, [r7, #30]
 800a820:	3b01      	subs	r3, #1
 800a822:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a824:	8bfb      	ldrh	r3, [r7, #30]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1ea      	bne.n	800a800 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	372c      	adds	r7, #44	@ 0x2c
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	785b      	ldrb	r3, [r3, #1]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d12c      	bne.n	800a8ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	db12      	blt.n	800a88c <USB_EPSetStall+0x54>
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00f      	beq.n	800a88c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	015a      	lsls	r2, r3, #5
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4413      	add	r3, r2
 800a874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	0151      	lsls	r1, r2, #5
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	440a      	add	r2, r1
 800a882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a886:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a88a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	4413      	add	r3, r2
 800a894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	0151      	lsls	r1, r2, #5
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	440a      	add	r2, r1
 800a8a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a8aa:	6013      	str	r3, [r2, #0]
 800a8ac:	e02b      	b.n	800a906 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	015a      	lsls	r2, r3, #5
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	db12      	blt.n	800a8e6 <USB_EPSetStall+0xae>
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00f      	beq.n	800a8e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	0151      	lsls	r1, r2, #5
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	440a      	add	r2, r1
 800a8dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a8e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	015a      	lsls	r2, r3, #5
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	0151      	lsls	r1, r2, #5
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	440a      	add	r2, r1
 800a8fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a900:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a904:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	785b      	ldrb	r3, [r3, #1]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d128      	bne.n	800a982 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	015a      	lsls	r2, r3, #5
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4413      	add	r3, r2
 800a938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	0151      	lsls	r1, r2, #5
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	440a      	add	r2, r1
 800a946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a94a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a94e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	791b      	ldrb	r3, [r3, #4]
 800a954:	2b03      	cmp	r3, #3
 800a956:	d003      	beq.n	800a960 <USB_EPClearStall+0x4c>
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	791b      	ldrb	r3, [r3, #4]
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d138      	bne.n	800a9d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	015a      	lsls	r2, r3, #5
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	4413      	add	r3, r2
 800a968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	0151      	lsls	r1, r2, #5
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	440a      	add	r2, r1
 800a976:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a97a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	e027      	b.n	800a9d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	015a      	lsls	r2, r3, #5
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4413      	add	r3, r2
 800a98a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	0151      	lsls	r1, r2, #5
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	440a      	add	r2, r1
 800a998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a99c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a9a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	791b      	ldrb	r3, [r3, #4]
 800a9a6:	2b03      	cmp	r3, #3
 800a9a8:	d003      	beq.n	800a9b2 <USB_EPClearStall+0x9e>
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	791b      	ldrb	r3, [r3, #4]
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d10f      	bne.n	800a9d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	015a      	lsls	r2, r3, #5
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	0151      	lsls	r1, r2, #5
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	440a      	add	r2, r1
 800a9c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800aa02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	78fb      	ldrb	r3, [r7, #3]
 800aa0e:	011b      	lsls	r3, r3, #4
 800aa10:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800aa14:	68f9      	ldr	r1, [r7, #12]
 800aa16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3714      	adds	r7, #20
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa46:	f023 0303 	bic.w	r3, r3, #3
 800aa4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa5a:	f023 0302 	bic.w	r3, r3, #2
 800aa5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3714      	adds	r7, #20
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa6e:	b480      	push	{r7}
 800aa70:	b085      	sub	sp, #20
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa88:	f023 0303 	bic.w	r3, r3, #3
 800aa8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa9c:	f043 0302 	orr.w	r3, r3, #2
 800aaa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3714      	adds	r7, #20
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	4013      	ands	r3, r2
 800aac6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aac8:	68fb      	ldr	r3, [r7, #12]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b085      	sub	sp, #20
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	0c1b      	lsrs	r3, r3, #16
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b085      	sub	sp, #20
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	b29b      	uxth	r3, r3
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b085      	sub	sp, #20
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	460b      	mov	r3, r1
 800ab48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ab4e:	78fb      	ldrb	r3, [r7, #3]
 800ab50:	015a      	lsls	r2, r3, #5
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4413      	add	r3, r2
 800ab56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	4013      	ands	r3, r2
 800ab6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab6c:	68bb      	ldr	r3, [r7, #8]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b087      	sub	sp, #28
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	460b      	mov	r3, r1
 800ab84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ab9e:	78fb      	ldrb	r3, [r7, #3]
 800aba0:	f003 030f 	and.w	r3, r3, #15
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	fa22 f303 	lsr.w	r3, r2, r3
 800abaa:	01db      	lsls	r3, r3, #7
 800abac:	b2db      	uxtb	r3, r3
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800abb4:	78fb      	ldrb	r3, [r7, #3]
 800abb6:	015a      	lsls	r2, r3, #5
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	4413      	add	r3, r2
 800abbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	693a      	ldr	r2, [r7, #16]
 800abc4:	4013      	ands	r3, r2
 800abc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800abc8:	68bb      	ldr	r3, [r7, #8]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	371c      	adds	r7, #28
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800abd6:	b480      	push	{r7}
 800abd8:	b083      	sub	sp, #12
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	695b      	ldr	r3, [r3, #20]
 800abe2:	f003 0301 	and.w	r3, r3, #1
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
	...

0800abf4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4b09      	ldr	r3, [pc, #36]	@ (800ac38 <USB_ActivateSetup+0x44>)
 800ac12:	4013      	ands	r3, r2
 800ac14:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr
 800ac38:	fffff800 	.word	0xfffff800

0800ac3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b087      	sub	sp, #28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	460b      	mov	r3, r1
 800ac46:	607a      	str	r2, [r7, #4]
 800ac48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	333c      	adds	r3, #60	@ 0x3c
 800ac52:	3304      	adds	r3, #4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	4a26      	ldr	r2, [pc, #152]	@ (800acf4 <USB_EP0_OutStart+0xb8>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d90a      	bls.n	800ac76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac70:	d101      	bne.n	800ac76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	e037      	b.n	800ace6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	2300      	movs	r3, #0
 800ac80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	697a      	ldr	r2, [r7, #20]
 800aca0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aca4:	f043 0318 	orr.w	r3, r3, #24
 800aca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acb8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800acbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800acbe:	7afb      	ldrb	r3, [r7, #11]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d10f      	bne.n	800ace4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acca:	461a      	mov	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acde:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ace2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	371c      	adds	r7, #28
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	4f54300a 	.word	0x4f54300a

0800acf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad00:	2300      	movs	r3, #0
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	3301      	adds	r3, #1
 800ad08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad10:	d901      	bls.n	800ad16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad12:	2303      	movs	r3, #3
 800ad14:	e01b      	b.n	800ad4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	daf2      	bge.n	800ad04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	f043 0201 	orr.w	r2, r3, #1
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3301      	adds	r3, #1
 800ad32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad3a:	d901      	bls.n	800ad40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e006      	b.n	800ad4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d0f0      	beq.n	800ad2e <USB_CoreReset+0x36>

  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
	...

0800ad5c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	460b      	mov	r3, r1
 800ad66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800ad68:	f241 0074 	movw	r0, #4212	@ 0x1074
 800ad6c:	f004 f892 	bl	800ee94 <USBD_static_malloc>
 800ad70:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d109      	bne.n	800ad8c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	32b0      	adds	r2, #176	@ 0xb0
 800ad82:	2100      	movs	r1, #0
 800ad84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ad88:	2302      	movs	r3, #2
 800ad8a:	e06e      	b.n	800ae6a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	32b0      	adds	r2, #176	@ 0xb0
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	32b0      	adds	r2, #176	@ 0xb0
 800ada6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	7c1b      	ldrb	r3, [r3, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d12b      	bne.n	800ae10 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800adb8:	4b2e      	ldr	r3, [pc, #184]	@ (800ae74 <USBD_MSC_Init+0x118>)
 800adba:	7819      	ldrb	r1, [r3, #0]
 800adbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adc0:	2202      	movs	r2, #2
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f003 ff23 	bl	800ec0e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800adc8:	4b2a      	ldr	r3, [pc, #168]	@ (800ae74 <USBD_MSC_Init+0x118>)
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	f003 020f 	and.w	r2, r3, #15
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	4613      	mov	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	440b      	add	r3, r1
 800addc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ade0:	2201      	movs	r2, #1
 800ade2:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ade4:	4b24      	ldr	r3, [pc, #144]	@ (800ae78 <USBD_MSC_Init+0x11c>)
 800ade6:	7819      	ldrb	r1, [r3, #0]
 800ade8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adec:	2202      	movs	r2, #2
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f003 ff0d 	bl	800ec0e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800adf4:	4b20      	ldr	r3, [pc, #128]	@ (800ae78 <USBD_MSC_Init+0x11c>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	f003 020f 	and.w	r2, r3, #15
 800adfc:	6879      	ldr	r1, [r7, #4]
 800adfe:	4613      	mov	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	440b      	add	r3, r1
 800ae08:	3324      	adds	r3, #36	@ 0x24
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	801a      	strh	r2, [r3, #0]
 800ae0e:	e028      	b.n	800ae62 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ae10:	4b18      	ldr	r3, [pc, #96]	@ (800ae74 <USBD_MSC_Init+0x118>)
 800ae12:	7819      	ldrb	r1, [r3, #0]
 800ae14:	2340      	movs	r3, #64	@ 0x40
 800ae16:	2202      	movs	r2, #2
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f003 fef8 	bl	800ec0e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800ae1e:	4b15      	ldr	r3, [pc, #84]	@ (800ae74 <USBD_MSC_Init+0x118>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	f003 020f 	and.w	r2, r3, #15
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	440b      	add	r3, r1
 800ae32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae36:	2201      	movs	r2, #1
 800ae38:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ae3a:	4b0f      	ldr	r3, [pc, #60]	@ (800ae78 <USBD_MSC_Init+0x11c>)
 800ae3c:	7819      	ldrb	r1, [r3, #0]
 800ae3e:	2340      	movs	r3, #64	@ 0x40
 800ae40:	2202      	movs	r2, #2
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f003 fee3 	bl	800ec0e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800ae48:	4b0b      	ldr	r3, [pc, #44]	@ (800ae78 <USBD_MSC_Init+0x11c>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	f003 020f 	and.w	r2, r3, #15
 800ae50:	6879      	ldr	r1, [r7, #4]
 800ae52:	4613      	mov	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	440b      	add	r3, r1
 800ae5c:	3324      	adds	r3, #36	@ 0x24
 800ae5e:	2201      	movs	r2, #1
 800ae60:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fa2c 	bl	800b2c0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	24000167 	.word	0x24000167
 800ae78:	24000166 	.word	0x24000166

0800ae7c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	460b      	mov	r3, r1
 800ae86:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800ae88:	4b26      	ldr	r3, [pc, #152]	@ (800af24 <USBD_MSC_DeInit+0xa8>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f003 fee3 	bl	800ec5a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800ae94:	4b23      	ldr	r3, [pc, #140]	@ (800af24 <USBD_MSC_DeInit+0xa8>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	f003 020f 	and.w	r2, r3, #15
 800ae9c:	6879      	ldr	r1, [r7, #4]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	4413      	add	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	440b      	add	r3, r1
 800aea8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aeac:	2200      	movs	r2, #0
 800aeae:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800aeb0:	4b1d      	ldr	r3, [pc, #116]	@ (800af28 <USBD_MSC_DeInit+0xac>)
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f003 fecf 	bl	800ec5a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800aebc:	4b1a      	ldr	r3, [pc, #104]	@ (800af28 <USBD_MSC_DeInit+0xac>)
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	f003 020f 	and.w	r2, r3, #15
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	4613      	mov	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	440b      	add	r3, r1
 800aed0:	3324      	adds	r3, #36	@ 0x24
 800aed2:	2200      	movs	r2, #0
 800aed4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	32b0      	adds	r2, #176	@ 0xb0
 800aee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d018      	beq.n	800af1a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fa6f 	bl	800b3cc <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	32b0      	adds	r2, #176	@ 0xb0
 800aef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f003 ffd7 	bl	800eeb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	32b0      	adds	r2, #176	@ 0xb0
 800af0c:	2100      	movs	r1, #0
 800af0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	24000167 	.word	0x24000167
 800af28:	24000166 	.word	0x24000166

0800af2c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	32b0      	adds	r2, #176	@ 0xb0
 800af40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af44:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800af54:	2303      	movs	r3, #3
 800af56:	e0e1      	b.n	800b11c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af60:	2b00      	cmp	r3, #0
 800af62:	d053      	beq.n	800b00c <USBD_MSC_Setup+0xe0>
 800af64:	2b20      	cmp	r3, #32
 800af66:	f040 80d1 	bne.w	800b10c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	2bfe      	cmp	r3, #254	@ 0xfe
 800af70:	d002      	beq.n	800af78 <USBD_MSC_Setup+0x4c>
 800af72:	2bff      	cmp	r3, #255	@ 0xff
 800af74:	d02a      	beq.n	800afcc <USBD_MSC_Setup+0xa0>
 800af76:	e041      	b.n	800affc <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	885b      	ldrh	r3, [r3, #2]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d11e      	bne.n	800afbe <USBD_MSC_Setup+0x92>
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	88db      	ldrh	r3, [r3, #6]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d11a      	bne.n	800afbe <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800af8e:	2b00      	cmp	r3, #0
 800af90:	da15      	bge.n	800afbe <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	33b0      	adds	r3, #176	@ 0xb0
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	699b      	ldr	r3, [r3, #24]
 800afa4:	4798      	blx	r3
 800afa6:	4603      	mov	r3, r0
 800afa8:	461a      	mov	r2, r3
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2201      	movs	r2, #1
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f003 fa41 	bl	800e43c <USBD_CtlSendData>
 800afba:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afbc:	e025      	b.n	800b00a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f003 f9be 	bl	800e342 <USBD_CtlError>
            ret = USBD_FAIL;
 800afc6:	2303      	movs	r3, #3
 800afc8:	75fb      	strb	r3, [r7, #23]
          break;
 800afca:	e01e      	b.n	800b00a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	885b      	ldrh	r3, [r3, #2]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10c      	bne.n	800afee <USBD_MSC_Setup+0xc2>
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	88db      	ldrh	r3, [r3, #6]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d108      	bne.n	800afee <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	db03      	blt.n	800afee <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f9bc 	bl	800b364 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afec:	e00d      	b.n	800b00a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800afee:	6839      	ldr	r1, [r7, #0]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f003 f9a6 	bl	800e342 <USBD_CtlError>
            ret = USBD_FAIL;
 800aff6:	2303      	movs	r3, #3
 800aff8:	75fb      	strb	r3, [r7, #23]
          break;
 800affa:	e006      	b.n	800b00a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f003 f99f 	bl	800e342 <USBD_CtlError>
          ret = USBD_FAIL;
 800b004:	2303      	movs	r3, #3
 800b006:	75fb      	strb	r3, [r7, #23]
          break;
 800b008:	bf00      	nop
      }
      break;
 800b00a:	e086      	b.n	800b11a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	785b      	ldrb	r3, [r3, #1]
 800b010:	2b0b      	cmp	r3, #11
 800b012:	d872      	bhi.n	800b0fa <USBD_MSC_Setup+0x1ce>
 800b014:	a201      	add	r2, pc, #4	@ (adr r2, 800b01c <USBD_MSC_Setup+0xf0>)
 800b016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01a:	bf00      	nop
 800b01c:	0800b04d 	.word	0x0800b04d
 800b020:	0800b0c9 	.word	0x0800b0c9
 800b024:	0800b0fb 	.word	0x0800b0fb
 800b028:	0800b0fb 	.word	0x0800b0fb
 800b02c:	0800b0fb 	.word	0x0800b0fb
 800b030:	0800b0fb 	.word	0x0800b0fb
 800b034:	0800b0fb 	.word	0x0800b0fb
 800b038:	0800b0fb 	.word	0x0800b0fb
 800b03c:	0800b0fb 	.word	0x0800b0fb
 800b040:	0800b0fb 	.word	0x0800b0fb
 800b044:	0800b077 	.word	0x0800b077
 800b048:	0800b0a1 	.word	0x0800b0a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b03      	cmp	r3, #3
 800b056:	d107      	bne.n	800b068 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b058:	f107 030e 	add.w	r3, r7, #14
 800b05c:	2202      	movs	r2, #2
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f003 f9eb 	bl	800e43c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b066:	e050      	b.n	800b10a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f003 f969 	bl	800e342 <USBD_CtlError>
            ret = USBD_FAIL;
 800b070:	2303      	movs	r3, #3
 800b072:	75fb      	strb	r3, [r7, #23]
          break;
 800b074:	e049      	b.n	800b10a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b03      	cmp	r3, #3
 800b080:	d107      	bne.n	800b092 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	3304      	adds	r3, #4
 800b086:	2201      	movs	r2, #1
 800b088:	4619      	mov	r1, r3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f003 f9d6 	bl	800e43c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b090:	e03b      	b.n	800b10a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f003 f954 	bl	800e342 <USBD_CtlError>
            ret = USBD_FAIL;
 800b09a:	2303      	movs	r3, #3
 800b09c:	75fb      	strb	r3, [r7, #23]
          break;
 800b09e:	e034      	b.n	800b10a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b03      	cmp	r3, #3
 800b0aa:	d106      	bne.n	800b0ba <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	885b      	ldrh	r3, [r3, #2]
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0b8:	e027      	b.n	800b10a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f003 f940 	bl	800e342 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	75fb      	strb	r3, [r7, #23]
          break;
 800b0c6:	e020      	b.n	800b10a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d119      	bne.n	800b108 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	885b      	ldrh	r3, [r3, #2]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d115      	bne.n	800b108 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	889b      	ldrh	r3, [r3, #4]
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f003 fdd7 	bl	800ec98 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	889b      	ldrh	r3, [r3, #4]
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fb54 	bl	800b7a0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800b0f8:	e006      	b.n	800b108 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f003 f920 	bl	800e342 <USBD_CtlError>
          ret = USBD_FAIL;
 800b102:	2303      	movs	r3, #3
 800b104:	75fb      	strb	r3, [r7, #23]
          break;
 800b106:	e000      	b.n	800b10a <USBD_MSC_Setup+0x1de>
          break;
 800b108:	bf00      	nop
      }
      break;
 800b10a:	e006      	b.n	800b11a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f003 f917 	bl	800e342 <USBD_CtlError>
      ret = USBD_FAIL;
 800b114:	2303      	movs	r3, #3
 800b116:	75fb      	strb	r3, [r7, #23]
      break;
 800b118:	bf00      	nop
  }

  return (uint8_t)ret;
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3718      	adds	r7, #24
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800b130:	78fb      	ldrb	r3, [r7, #3]
 800b132:	4619      	mov	r1, r3
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 f961 	bl	800b3fc <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f98d 	bl	800b474 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b16c:	2181      	movs	r1, #129	@ 0x81
 800b16e:	4812      	ldr	r0, [pc, #72]	@ (800b1b8 <USBD_MSC_GetHSCfgDesc+0x54>)
 800b170:	f002 fa86 	bl	800d680 <USBD_GetEpDesc>
 800b174:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b176:	2101      	movs	r1, #1
 800b178:	480f      	ldr	r0, [pc, #60]	@ (800b1b8 <USBD_MSC_GetHSCfgDesc+0x54>)
 800b17a:	f002 fa81 	bl	800d680 <USBD_GetEpDesc>
 800b17e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d006      	beq.n	800b194 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	711a      	strb	r2, [r3, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f042 0202 	orr.w	r2, r2, #2
 800b192:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d006      	beq.n	800b1a8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	2200      	movs	r2, #0
 800b19e:	711a      	strb	r2, [r3, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f042 0202 	orr.w	r2, r2, #2
 800b1a6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2220      	movs	r2, #32
 800b1ac:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b1ae:	4b02      	ldr	r3, [pc, #8]	@ (800b1b8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	2400013c 	.word	0x2400013c

0800b1bc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b1c4:	2181      	movs	r1, #129	@ 0x81
 800b1c6:	4812      	ldr	r0, [pc, #72]	@ (800b210 <USBD_MSC_GetFSCfgDesc+0x54>)
 800b1c8:	f002 fa5a 	bl	800d680 <USBD_GetEpDesc>
 800b1cc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b1ce:	2101      	movs	r1, #1
 800b1d0:	480f      	ldr	r0, [pc, #60]	@ (800b210 <USBD_MSC_GetFSCfgDesc+0x54>)
 800b1d2:	f002 fa55 	bl	800d680 <USBD_GetEpDesc>
 800b1d6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d006      	beq.n	800b1ec <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1e6:	711a      	strb	r2, [r3, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d006      	beq.n	800b200 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1fa:	711a      	strb	r2, [r3, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2220      	movs	r2, #32
 800b204:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b206:	4b02      	ldr	r3, [pc, #8]	@ (800b210 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	2400013c 	.word	0x2400013c

0800b214 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b21c:	2181      	movs	r1, #129	@ 0x81
 800b21e:	4812      	ldr	r0, [pc, #72]	@ (800b268 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800b220:	f002 fa2e 	bl	800d680 <USBD_GetEpDesc>
 800b224:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b226:	2101      	movs	r1, #1
 800b228:	480f      	ldr	r0, [pc, #60]	@ (800b268 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800b22a:	f002 fa29 	bl	800d680 <USBD_GetEpDesc>
 800b22e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d006      	beq.n	800b244 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b23e:	711a      	strb	r2, [r3, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d006      	beq.n	800b258 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b252:	711a      	strb	r2, [r3, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2220      	movs	r2, #32
 800b25c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b25e:	4b02      	ldr	r3, [pc, #8]	@ (800b268 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	2400013c 	.word	0x2400013c

0800b26c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	220a      	movs	r2, #10
 800b278:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800b27a:	4b03      	ldr	r3, [pc, #12]	@ (800b288 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	2400015c 	.word	0x2400015c

0800b28c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e009      	b.n	800b2b4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	33b0      	adds	r3, #176	@ 0xb0
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	32b0      	adds	r2, #176	@ 0xb0
 800b2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d039      	beq.n	800b352 <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  hmsc->scsi_sense_head = 0U;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	33b0      	adds	r3, #176	@ 0xb0
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	4413      	add	r3, r2
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2000      	movs	r0, #0
 800b322:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800b324:	4b0d      	ldr	r3, [pc, #52]	@ (800b35c <MSC_BOT_Init+0x9c>)
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f003 fcb4 	bl	800ec98 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800b330:	4b0b      	ldr	r3, [pc, #44]	@ (800b360 <MSC_BOT_Init+0xa0>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f003 fcae 	bl	800ec98 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b33c:	4b07      	ldr	r3, [pc, #28]	@ (800b35c <MSC_BOT_Init+0x9c>)
 800b33e:	7819      	ldrb	r1, [r3, #0]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f241 0210 	movw	r2, #4112	@ 0x1010
 800b346:	441a      	add	r2, r3
 800b348:	231f      	movs	r3, #31
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f003 fd6d 	bl	800ee2a <USBD_LL_PrepareReceive>
 800b350:	e000      	b.n	800b354 <MSC_BOT_Init+0x94>
    return;
 800b352:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	24000167 	.word	0x24000167
 800b360:	24000166 	.word	0x24000166

0800b364 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	32b0      	adds	r2, #176	@ 0xb0
 800b376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b37a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d01c      	beq.n	800b3bc <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2201      	movs	r2, #1
 800b38c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800b38e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c4 <MSC_BOT_Reset+0x60>)
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	4619      	mov	r1, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f003 fcbd 	bl	800ed14 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800b39a:	4b0b      	ldr	r3, [pc, #44]	@ (800b3c8 <MSC_BOT_Reset+0x64>)
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f003 fcb7 	bl	800ed14 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b3a6:	4b08      	ldr	r3, [pc, #32]	@ (800b3c8 <MSC_BOT_Reset+0x64>)
 800b3a8:	7819      	ldrb	r1, [r3, #0]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f241 0210 	movw	r2, #4112	@ 0x1010
 800b3b0:	441a      	add	r2, r3
 800b3b2:	231f      	movs	r3, #31
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f003 fd38 	bl	800ee2a <USBD_LL_PrepareReceive>
 800b3ba:	e000      	b.n	800b3be <MSC_BOT_Reset+0x5a>
    return;
 800b3bc:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	24000166 	.word	0x24000166
 800b3c8:	24000167 	.word	0x24000167

0800b3cc <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	32b0      	adds	r2, #176	@ 0xb0
 800b3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d002      	beq.n	800b3f0 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	721a      	strb	r2, [r3, #8]
  }
}
 800b3f0:	bf00      	nop
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	32b0      	adds	r2, #176	@ 0xb0
 800b412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b416:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d022      	beq.n	800b464 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	7a1b      	ldrb	r3, [r3, #8]
 800b422:	2b02      	cmp	r3, #2
 800b424:	d005      	beq.n	800b432 <MSC_BOT_DataIn+0x36>
 800b426:	2b02      	cmp	r3, #2
 800b428:	db1e      	blt.n	800b468 <MSC_BOT_DataIn+0x6c>
 800b42a:	3b03      	subs	r3, #3
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d81b      	bhi.n	800b468 <MSC_BOT_DataIn+0x6c>
 800b430:	e013      	b.n	800b45a <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b438:	7f59      	ldrb	r1, [r3, #29]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	f241 031f 	movw	r3, #4127	@ 0x101f
 800b440:	4413      	add	r3, r2
 800b442:	461a      	mov	r2, r3
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 f9e5 	bl	800b814 <SCSI_ProcessCmd>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	da0d      	bge.n	800b46c <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b450:	2101      	movs	r1, #1
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f920 	bl	800b698 <MSC_BOT_SendCSW>
      }
      break;
 800b458:	e008      	b.n	800b46c <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b45a:	2100      	movs	r1, #0
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f91b 	bl	800b698 <MSC_BOT_SendCSW>
      break;
 800b462:	e004      	b.n	800b46e <MSC_BOT_DataIn+0x72>
    return;
 800b464:	bf00      	nop
 800b466:	e002      	b.n	800b46e <MSC_BOT_DataIn+0x72>

    default:
      break;
 800b468:	bf00      	nop
 800b46a:	e000      	b.n	800b46e <MSC_BOT_DataIn+0x72>
      break;
 800b46c:	bf00      	nop
  }
}
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	460b      	mov	r3, r1
 800b47e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	32b0      	adds	r2, #176	@ 0xb0
 800b48a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d01e      	beq.n	800b4d4 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	7a1b      	ldrb	r3, [r3, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d002      	beq.n	800b4a4 <MSC_BOT_DataOut+0x30>
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d004      	beq.n	800b4ac <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800b4a2:	e01a      	b.n	800b4da <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f81b 	bl	800b4e0 <MSC_BOT_CBW_Decode>
      break;
 800b4aa:	e016      	b.n	800b4da <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4b2:	7f59      	ldrb	r1, [r3, #29]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	f241 031f 	movw	r3, #4127	@ 0x101f
 800b4ba:	4413      	add	r3, r2
 800b4bc:	461a      	mov	r2, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f9a8 	bl	800b814 <SCSI_ProcessCmd>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	da06      	bge.n	800b4d8 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b4ca:	2101      	movs	r1, #1
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f8e3 	bl	800b698 <MSC_BOT_SendCSW>
      break;
 800b4d2:	e001      	b.n	800b4d8 <MSC_BOT_DataOut+0x64>
    return;
 800b4d4:	bf00      	nop
 800b4d6:	e000      	b.n	800b4da <MSC_BOT_DataOut+0x66>
      break;
 800b4d8:	bf00      	nop
  }
}
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	32b0      	adds	r2, #176	@ 0xb0
 800b4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 8085 	beq.w	800b60a <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b506:	695b      	ldr	r3, [r3, #20]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b50e:	6353      	str	r3, [r2, #52]	@ 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b516:	699b      	ldr	r3, [r3, #24]
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b51e:	6393      	str	r3, [r2, #56]	@ 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800b520:	4b3d      	ldr	r3, [pc, #244]	@ (800b618 <MSC_BOT_CBW_Decode+0x138>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	4619      	mov	r1, r3
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f003 fca0 	bl	800ee6c <USBD_LL_GetRxDataSize>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b1f      	cmp	r3, #31
 800b530:	d118      	bne.n	800b564 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b538:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800b53a:	4a38      	ldr	r2, [pc, #224]	@ (800b61c <MSC_BOT_CBW_Decode+0x13c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d111      	bne.n	800b564 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b546:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d80b      	bhi.n	800b564 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b552:	7f9b      	ldrb	r3, [r3, #30]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d005      	beq.n	800b564 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b55e:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b560:	2b10      	cmp	r3, #16
 800b562:	d90f      	bls.n	800b584 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b56a:	7f59      	ldrb	r1, [r3, #29]
 800b56c:	2320      	movs	r3, #32
 800b56e:	2205      	movs	r2, #5
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fea7 	bl	800c2c4 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2202      	movs	r2, #2
 800b57a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f8cb 	bl	800b718 <MSC_BOT_Abort>
 800b582:	e045      	b.n	800b610 <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b58a:	7f59      	ldrb	r1, [r3, #29]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	f241 031f 	movw	r3, #4127	@ 0x101f
 800b592:	4413      	add	r3, r2
 800b594:	461a      	mov	r2, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f93c 	bl	800b814 <SCSI_ProcessCmd>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	da0c      	bge.n	800b5bc <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	7a1b      	ldrb	r3, [r3, #8]
 800b5a6:	2b05      	cmp	r3, #5
 800b5a8:	d104      	bne.n	800b5b4 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f873 	bl	800b698 <MSC_BOT_SendCSW>
 800b5b2:	e02d      	b.n	800b610 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f8af 	bl	800b718 <MSC_BOT_Abort>
 800b5ba:	e029      	b.n	800b610 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	7a1b      	ldrb	r3, [r3, #8]
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	d024      	beq.n	800b60e <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d020      	beq.n	800b60e <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d01c      	beq.n	800b60e <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d009      	beq.n	800b5f0 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f103 0110 	add.w	r1, r3, #16
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f819 	bl	800b620 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800b5ee:	e00f      	b.n	800b610 <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d104      	bne.n	800b602 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f84c 	bl	800b698 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800b600:	e006      	b.n	800b610 <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f888 	bl	800b718 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800b608:	e002      	b.n	800b610 <MSC_BOT_CBW_Decode+0x130>
    return;
 800b60a:	bf00      	nop
 800b60c:	e000      	b.n	800b610 <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 800b60e:	bf00      	nop
    }
  }
}
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	24000167 	.word	0x24000167
 800b61c:	43425355 	.word	0x43425355

0800b620 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b086      	sub	sp, #24
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	32b0      	adds	r2, #176	@ 0xb0
 800b636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d023      	beq.n	800b68a <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	4293      	cmp	r3, r2
 800b64e:	bf28      	it	cs
 800b650:	4613      	movcs	r3, r2
 800b652:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b65a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b666:	6393      	str	r3, [r2, #56]	@ 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b66e:	2200      	movs	r2, #0
 800b670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2204      	movs	r2, #4
 800b678:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800b67a:	4b06      	ldr	r3, [pc, #24]	@ (800b694 <MSC_BOT_SendData+0x74>)
 800b67c:	7819      	ldrb	r1, [r3, #0]
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f003 fbb0 	bl	800ede8 <USBD_LL_Transmit>
 800b688:	e000      	b.n	800b68c <MSC_BOT_SendData+0x6c>
    return;
 800b68a:	bf00      	nop
}
 800b68c:	3718      	adds	r7, #24
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	24000166 	.word	0x24000166

0800b698 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	32b0      	adds	r2, #176	@ 0xb0
 800b6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d024      	beq.n	800b704 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4b12      	ldr	r3, [pc, #72]	@ (800b70c <MSC_BOT_SendCSW+0x74>)
 800b6c4:	6313      	str	r3, [r2, #48]	@ 0x30
  hmsc->csw.bStatus = CSW_Status;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	78fb      	ldrb	r3, [r7, #3]
 800b6d0:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b6da:	4b0d      	ldr	r3, [pc, #52]	@ (800b710 <MSC_BOT_SendCSW+0x78>)
 800b6dc:	7819      	ldrb	r1, [r3, #0]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f241 0230 	movw	r2, #4144	@ 0x1030
 800b6e4:	441a      	add	r2, r3
 800b6e6:	230d      	movs	r3, #13
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f003 fb7d 	bl	800ede8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b6ee:	4b09      	ldr	r3, [pc, #36]	@ (800b714 <MSC_BOT_SendCSW+0x7c>)
 800b6f0:	7819      	ldrb	r1, [r3, #0]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f241 0210 	movw	r2, #4112	@ 0x1010
 800b6f8:	441a      	add	r2, r3
 800b6fa:	231f      	movs	r3, #31
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f003 fb94 	bl	800ee2a <USBD_LL_PrepareReceive>
 800b702:	e000      	b.n	800b706 <MSC_BOT_SendCSW+0x6e>
    return;
 800b704:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	53425355 	.word	0x53425355
 800b710:	24000166 	.word	0x24000166
 800b714:	24000167 	.word	0x24000167

0800b718 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	32b0      	adds	r2, #176	@ 0xb0
 800b72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b72e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d02c      	beq.n	800b790 <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b73c:	7f1b      	ldrb	r3, [r3, #28]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10f      	bne.n	800b762 <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b748:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d009      	beq.n	800b762 <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800b752:	2b00      	cmp	r3, #0
 800b754:	d105      	bne.n	800b762 <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b756:	4b10      	ldr	r3, [pc, #64]	@ (800b798 <MSC_BOT_Abort+0x80>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	4619      	mov	r1, r3
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f003 faba 	bl	800ecd6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b762:	4b0e      	ldr	r3, [pc, #56]	@ (800b79c <MSC_BOT_Abort+0x84>)
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	4619      	mov	r1, r3
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f003 fab4 	bl	800ecd6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	7a5b      	ldrb	r3, [r3, #9]
 800b772:	2b02      	cmp	r3, #2
 800b774:	d10d      	bne.n	800b792 <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b776:	4b09      	ldr	r3, [pc, #36]	@ (800b79c <MSC_BOT_Abort+0x84>)
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	4619      	mov	r1, r3
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f003 faaa 	bl	800ecd6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b782:	4b05      	ldr	r3, [pc, #20]	@ (800b798 <MSC_BOT_Abort+0x80>)
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	4619      	mov	r1, r3
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f003 faa4 	bl	800ecd6 <USBD_LL_StallEP>
 800b78e:	e000      	b.n	800b792 <MSC_BOT_Abort+0x7a>
    return;
 800b790:	bf00      	nop
  }
}
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	24000167 	.word	0x24000167
 800b79c:	24000166 	.word	0x24000166

0800b7a0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	32b0      	adds	r2, #176	@ 0xb0
 800b7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d01d      	beq.n	800b7fe <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	7a5b      	ldrb	r3, [r3, #9]
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	d10c      	bne.n	800b7e4 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b7ca:	4b10      	ldr	r3, [pc, #64]	@ (800b80c <MSC_BOT_CplClrFeature+0x6c>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f003 fa80 	bl	800ecd6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b7d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b810 <MSC_BOT_CplClrFeature+0x70>)
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f003 fa7a 	bl	800ecd6 <USBD_LL_StallEP>
 800b7e2:	e00f      	b.n	800b804 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800b7e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	da0a      	bge.n	800b802 <MSC_BOT_CplClrFeature+0x62>
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	7a5b      	ldrb	r3, [r3, #9]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d006      	beq.n	800b802 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff ff4e 	bl	800b698 <MSC_BOT_SendCSW>
 800b7fc:	e002      	b.n	800b804 <MSC_BOT_CplClrFeature+0x64>
    return;
 800b7fe:	bf00      	nop
 800b800:	e000      	b.n	800b804 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800b802:	bf00      	nop
  }
}
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	24000166 	.word	0x24000166
 800b810:	24000167 	.word	0x24000167

0800b814 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	460b      	mov	r3, r1
 800b81e:	607a      	str	r2, [r7, #4]
 800b820:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	32b0      	adds	r2, #176	@ 0xb0
 800b82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b830:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d102      	bne.n	800b83e <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800b838:	f04f 33ff 	mov.w	r3, #4294967295
 800b83c:	e168      	b.n	800bb10 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	2baa      	cmp	r3, #170	@ 0xaa
 800b844:	f000 8144 	beq.w	800bad0 <SCSI_ProcessCmd+0x2bc>
 800b848:	2baa      	cmp	r3, #170	@ 0xaa
 800b84a:	f300 8153 	bgt.w	800baf4 <SCSI_ProcessCmd+0x2e0>
 800b84e:	2ba8      	cmp	r3, #168	@ 0xa8
 800b850:	f000 812c 	beq.w	800baac <SCSI_ProcessCmd+0x298>
 800b854:	2ba8      	cmp	r3, #168	@ 0xa8
 800b856:	f300 814d 	bgt.w	800baf4 <SCSI_ProcessCmd+0x2e0>
 800b85a:	2b5a      	cmp	r3, #90	@ 0x5a
 800b85c:	f300 80c0 	bgt.w	800b9e0 <SCSI_ProcessCmd+0x1cc>
 800b860:	2b00      	cmp	r3, #0
 800b862:	f2c0 8147 	blt.w	800baf4 <SCSI_ProcessCmd+0x2e0>
 800b866:	2b5a      	cmp	r3, #90	@ 0x5a
 800b868:	f200 8144 	bhi.w	800baf4 <SCSI_ProcessCmd+0x2e0>
 800b86c:	a201      	add	r2, pc, #4	@ (adr r2, 800b874 <SCSI_ProcessCmd+0x60>)
 800b86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b872:	bf00      	nop
 800b874:	0800b9e7 	.word	0x0800b9e7
 800b878:	0800baf5 	.word	0x0800baf5
 800b87c:	0800baf5 	.word	0x0800baf5
 800b880:	0800b9f9 	.word	0x0800b9f9
 800b884:	0800baf5 	.word	0x0800baf5
 800b888:	0800baf5 	.word	0x0800baf5
 800b88c:	0800baf5 	.word	0x0800baf5
 800b890:	0800baf5 	.word	0x0800baf5
 800b894:	0800baf5 	.word	0x0800baf5
 800b898:	0800baf5 	.word	0x0800baf5
 800b89c:	0800baf5 	.word	0x0800baf5
 800b8a0:	0800baf5 	.word	0x0800baf5
 800b8a4:	0800baf5 	.word	0x0800baf5
 800b8a8:	0800baf5 	.word	0x0800baf5
 800b8ac:	0800baf5 	.word	0x0800baf5
 800b8b0:	0800baf5 	.word	0x0800baf5
 800b8b4:	0800baf5 	.word	0x0800baf5
 800b8b8:	0800baf5 	.word	0x0800baf5
 800b8bc:	0800ba0b 	.word	0x0800ba0b
 800b8c0:	0800baf5 	.word	0x0800baf5
 800b8c4:	0800baf5 	.word	0x0800baf5
 800b8c8:	0800baf5 	.word	0x0800baf5
 800b8cc:	0800baf5 	.word	0x0800baf5
 800b8d0:	0800baf5 	.word	0x0800baf5
 800b8d4:	0800baf5 	.word	0x0800baf5
 800b8d8:	0800baf5 	.word	0x0800baf5
 800b8dc:	0800ba41 	.word	0x0800ba41
 800b8e0:	0800ba1d 	.word	0x0800ba1d
 800b8e4:	0800baf5 	.word	0x0800baf5
 800b8e8:	0800baf5 	.word	0x0800baf5
 800b8ec:	0800ba2f 	.word	0x0800ba2f
 800b8f0:	0800baf5 	.word	0x0800baf5
 800b8f4:	0800baf5 	.word	0x0800baf5
 800b8f8:	0800baf5 	.word	0x0800baf5
 800b8fc:	0800baf5 	.word	0x0800baf5
 800b900:	0800ba65 	.word	0x0800ba65
 800b904:	0800baf5 	.word	0x0800baf5
 800b908:	0800ba77 	.word	0x0800ba77
 800b90c:	0800baf5 	.word	0x0800baf5
 800b910:	0800baf5 	.word	0x0800baf5
 800b914:	0800ba9b 	.word	0x0800ba9b
 800b918:	0800baf5 	.word	0x0800baf5
 800b91c:	0800babf 	.word	0x0800babf
 800b920:	0800baf5 	.word	0x0800baf5
 800b924:	0800baf5 	.word	0x0800baf5
 800b928:	0800baf5 	.word	0x0800baf5
 800b92c:	0800baf5 	.word	0x0800baf5
 800b930:	0800bae3 	.word	0x0800bae3
 800b934:	0800baf5 	.word	0x0800baf5
 800b938:	0800baf5 	.word	0x0800baf5
 800b93c:	0800baf5 	.word	0x0800baf5
 800b940:	0800baf5 	.word	0x0800baf5
 800b944:	0800baf5 	.word	0x0800baf5
 800b948:	0800baf5 	.word	0x0800baf5
 800b94c:	0800baf5 	.word	0x0800baf5
 800b950:	0800baf5 	.word	0x0800baf5
 800b954:	0800baf5 	.word	0x0800baf5
 800b958:	0800baf5 	.word	0x0800baf5
 800b95c:	0800baf5 	.word	0x0800baf5
 800b960:	0800baf5 	.word	0x0800baf5
 800b964:	0800baf5 	.word	0x0800baf5
 800b968:	0800baf5 	.word	0x0800baf5
 800b96c:	0800baf5 	.word	0x0800baf5
 800b970:	0800baf5 	.word	0x0800baf5
 800b974:	0800baf5 	.word	0x0800baf5
 800b978:	0800baf5 	.word	0x0800baf5
 800b97c:	0800baf5 	.word	0x0800baf5
 800b980:	0800baf5 	.word	0x0800baf5
 800b984:	0800baf5 	.word	0x0800baf5
 800b988:	0800baf5 	.word	0x0800baf5
 800b98c:	0800baf5 	.word	0x0800baf5
 800b990:	0800baf5 	.word	0x0800baf5
 800b994:	0800baf5 	.word	0x0800baf5
 800b998:	0800baf5 	.word	0x0800baf5
 800b99c:	0800baf5 	.word	0x0800baf5
 800b9a0:	0800baf5 	.word	0x0800baf5
 800b9a4:	0800baf5 	.word	0x0800baf5
 800b9a8:	0800baf5 	.word	0x0800baf5
 800b9ac:	0800baf5 	.word	0x0800baf5
 800b9b0:	0800baf5 	.word	0x0800baf5
 800b9b4:	0800baf5 	.word	0x0800baf5
 800b9b8:	0800baf5 	.word	0x0800baf5
 800b9bc:	0800baf5 	.word	0x0800baf5
 800b9c0:	0800baf5 	.word	0x0800baf5
 800b9c4:	0800baf5 	.word	0x0800baf5
 800b9c8:	0800baf5 	.word	0x0800baf5
 800b9cc:	0800baf5 	.word	0x0800baf5
 800b9d0:	0800baf5 	.word	0x0800baf5
 800b9d4:	0800baf5 	.word	0x0800baf5
 800b9d8:	0800baf5 	.word	0x0800baf5
 800b9dc:	0800ba53 	.word	0x0800ba53
 800b9e0:	2b9e      	cmp	r3, #158	@ 0x9e
 800b9e2:	d051      	beq.n	800ba88 <SCSI_ProcessCmd+0x274>
 800b9e4:	e086      	b.n	800baf4 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800b9e6:	7afb      	ldrb	r3, [r7, #11]
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 f893 	bl	800bb18 <SCSI_TestUnitReady>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9f6:	e089      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800b9f8:	7afb      	ldrb	r3, [r7, #11]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 fbc6 	bl	800c190 <SCSI_RequestSense>
 800ba04:	4603      	mov	r3, r0
 800ba06:	75fb      	strb	r3, [r7, #23]
      break;
 800ba08:	e080      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800ba0a:	7afb      	ldrb	r3, [r7, #11]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	4619      	mov	r1, r3
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 f8df 	bl	800bbd4 <SCSI_Inquiry>
 800ba16:	4603      	mov	r3, r0
 800ba18:	75fb      	strb	r3, [r7, #23]
      break;
 800ba1a:	e077      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800ba1c:	7afb      	ldrb	r3, [r7, #11]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	4619      	mov	r1, r3
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f000 fcaa 	bl	800c37c <SCSI_StartStopUnit>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba2c:	e06e      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800ba2e:	7afb      	ldrb	r3, [r7, #11]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	4619      	mov	r1, r3
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 fcfe 	bl	800c436 <SCSI_AllowPreventRemovable>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba3e:	e065      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800ba40:	7afb      	ldrb	r3, [r7, #11]
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	4619      	mov	r1, r3
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f000 fb16 	bl	800c078 <SCSI_ModeSense6>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba50:	e05c      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800ba52:	7afb      	ldrb	r3, [r7, #11]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	4619      	mov	r1, r3
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f000 fb53 	bl	800c104 <SCSI_ModeSense10>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	75fb      	strb	r3, [r7, #23]
      break;
 800ba62:	e053      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800ba64:	7afb      	ldrb	r3, [r7, #11]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f000 fa86 	bl	800bf7c <SCSI_ReadFormatCapacity>
 800ba70:	4603      	mov	r3, r0
 800ba72:	75fb      	strb	r3, [r7, #23]
      break;
 800ba74:	e04a      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800ba76:	7afb      	ldrb	r3, [r7, #11]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f000 f929 	bl	800bcd4 <SCSI_ReadCapacity10>
 800ba82:	4603      	mov	r3, r0
 800ba84:	75fb      	strb	r3, [r7, #23]
      break;
 800ba86:	e041      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800ba88:	7afb      	ldrb	r3, [r7, #11]
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f000 f9af 	bl	800bdf2 <SCSI_ReadCapacity16>
 800ba94:	4603      	mov	r3, r0
 800ba96:	75fb      	strb	r3, [r7, #23]
      break;
 800ba98:	e038      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800ba9a:	7afb      	ldrb	r3, [r7, #11]
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 fcf9 	bl	800c498 <SCSI_Read10>
 800baa6:	4603      	mov	r3, r0
 800baa8:	75fb      	strb	r3, [r7, #23]
      break;
 800baaa:	e02f      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800baac:	7afb      	ldrb	r3, [r7, #11]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	4619      	mov	r1, r3
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f000 fda7 	bl	800c606 <SCSI_Read12>
 800bab8:	4603      	mov	r3, r0
 800baba:	75fb      	strb	r3, [r7, #23]
      break;
 800babc:	e026      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800babe:	7afb      	ldrb	r3, [r7, #11]
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	4619      	mov	r1, r3
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f000 fe5f 	bl	800c788 <SCSI_Write10>
 800baca:	4603      	mov	r3, r0
 800bacc:	75fb      	strb	r3, [r7, #23]
      break;
 800bace:	e01d      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800bad0:	7afb      	ldrb	r3, [r7, #11]
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	4619      	mov	r1, r3
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f000 ff3a 	bl	800c950 <SCSI_Write12>
 800badc:	4603      	mov	r3, r0
 800bade:	75fb      	strb	r3, [r7, #23]
      break;
 800bae0:	e014      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800bae2:	7afb      	ldrb	r3, [r7, #11]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	4619      	mov	r1, r3
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f001 f825 	bl	800cb38 <SCSI_Verify10>
 800baee:	4603      	mov	r3, r0
 800baf0:	75fb      	strb	r3, [r7, #23]
      break;
 800baf2:	e00b      	b.n	800bb0c <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800baf4:	7af9      	ldrb	r1, [r7, #11]
 800baf6:	2320      	movs	r3, #32
 800baf8:	2205      	movs	r2, #5
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	f000 fbe2 	bl	800c2c4 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	2202      	movs	r2, #2
 800bb04:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800bb06:	23ff      	movs	r3, #255	@ 0xff
 800bb08:	75fb      	strb	r3, [r7, #23]
      break;
 800bb0a:	bf00      	nop
  }

  return ret;
 800bb0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3718      	adds	r7, #24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b086      	sub	sp, #24
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	460b      	mov	r3, r1
 800bb22:	607a      	str	r2, [r7, #4]
 800bb24:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	32b0      	adds	r2, #176	@ 0xb0
 800bb30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb34:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d102      	bne.n	800bb42 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800bb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb40:	e043      	b.n	800bbca <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb48:	699b      	ldr	r3, [r3, #24]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00b      	beq.n	800bb66 <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb54:	7f59      	ldrb	r1, [r3, #29]
 800bb56:	2320      	movs	r3, #32
 800bb58:	2205      	movs	r2, #5
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f000 fbb2 	bl	800c2c4 <SCSI_SenseCode>

    return -1;
 800bb60:	f04f 33ff 	mov.w	r3, #4294967295
 800bb64:	e031      	b.n	800bbca <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bb6c:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d10b      	bne.n	800bb8c <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bb74:	7af9      	ldrb	r1, [r7, #11]
 800bb76:	233a      	movs	r3, #58	@ 0x3a
 800bb78:	2202      	movs	r2, #2
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f000 fba2 	bl	800c2c4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	2205      	movs	r2, #5
 800bb84:	721a      	strb	r2, [r3, #8]
    return -1;
 800bb86:	f04f 33ff 	mov.w	r3, #4294967295
 800bb8a:	e01e      	b.n	800bbca <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	33b0      	adds	r3, #176	@ 0xb0
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	7afa      	ldrb	r2, [r7, #11]
 800bba0:	4610      	mov	r0, r2
 800bba2:	4798      	blx	r3
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00b      	beq.n	800bbc2 <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bbaa:	7af9      	ldrb	r1, [r7, #11]
 800bbac:	233a      	movs	r3, #58	@ 0x3a
 800bbae:	2202      	movs	r2, #2
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f000 fb87 	bl	800c2c4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	2205      	movs	r2, #5
 800bbba:	721a      	strb	r2, [r3, #8]

    return -1;
 800bbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc0:	e003      	b.n	800bbca <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	60da      	str	r2, [r3, #12]

  return 0;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3718      	adds	r7, #24
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	460b      	mov	r3, r1
 800bbde:	607a      	str	r2, [r7, #4]
 800bbe0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	32b0      	adds	r2, #176	@ 0xb0
 800bbec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d102      	bne.n	800bbfe <SCSI_Inquiry+0x2a>
  {
    return -1;
 800bbf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbfc:	e061      	b.n	800bcc2 <SCSI_Inquiry+0xee>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc04:	699b      	ldr	r3, [r3, #24]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10b      	bne.n	800bc22 <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc10:	7f59      	ldrb	r1, [r3, #29]
 800bc12:	2320      	movs	r3, #32
 800bc14:	2205      	movs	r2, #5
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f000 fb54 	bl	800c2c4 <SCSI_SenseCode>
    return -1;
 800bc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc20:	e04f      	b.n	800bcc2 <SCSI_Inquiry+0xee>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	3301      	adds	r3, #1
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d021      	beq.n	800bc74 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3302      	adds	r3, #2
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d105      	bne.n	800bc46 <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800bc3a:	2206      	movs	r2, #6
 800bc3c:	4923      	ldr	r1, [pc, #140]	@ (800bccc <SCSI_Inquiry+0xf8>)
 800bc3e:	69b8      	ldr	r0, [r7, #24]
 800bc40:	f001 f926 	bl	800ce90 <SCSI_UpdateBotData>
 800bc44:	e03c      	b.n	800bcc0 <SCSI_Inquiry+0xec>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	3302      	adds	r3, #2
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b80      	cmp	r3, #128	@ 0x80
 800bc4e:	d105      	bne.n	800bc5c <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800bc50:	2208      	movs	r2, #8
 800bc52:	491f      	ldr	r1, [pc, #124]	@ (800bcd0 <SCSI_Inquiry+0xfc>)
 800bc54:	69b8      	ldr	r0, [r7, #24]
 800bc56:	f001 f91b 	bl	800ce90 <SCSI_UpdateBotData>
 800bc5a:	e031      	b.n	800bcc0 <SCSI_Inquiry+0xec>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc62:	7f59      	ldrb	r1, [r3, #29]
 800bc64:	2324      	movs	r3, #36	@ 0x24
 800bc66:	2205      	movs	r2, #5
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f000 fb2b 	bl	800c2c4 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800bc6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc72:	e026      	b.n	800bcc2 <SCSI_Inquiry+0xee>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	33b0      	adds	r3, #176	@ 0xb0
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4413      	add	r3, r2
 800bc82:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800bc84:	69d9      	ldr	r1, [r3, #28]
 800bc86:	7afa      	ldrb	r2, [r7, #11]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	00db      	lsls	r3, r3, #3
 800bc8c:	4413      	add	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800bc90:	440b      	add	r3, r1
 800bc92:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	3304      	adds	r3, #4
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	3305      	adds	r3, #5
 800bc9c:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	3304      	adds	r3, #4
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	461a      	mov	r2, r3
 800bca6:	8bfb      	ldrh	r3, [r7, #30]
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d303      	bcc.n	800bcb4 <SCSI_Inquiry+0xe0>
    {
      len = params[4];
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800bcb4:	8bfb      	ldrh	r3, [r7, #30]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	6979      	ldr	r1, [r7, #20]
 800bcba:	69b8      	ldr	r0, [r7, #24]
 800bcbc:	f001 f8e8 	bl	800ce90 <SCSI_UpdateBotData>
  }

  return 0;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3720      	adds	r7, #32
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	24000168 	.word	0x24000168
 800bcd0:	24000170 	.word	0x24000170

0800bcd4 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bcd4:	b590      	push	{r4, r7, lr}
 800bcd6:	b087      	sub	sp, #28
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	32b0      	adds	r2, #176	@ 0xb0
 800bcec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d102      	bne.n	800bcfe <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800bcf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcfc:	e075      	b.n	800bdea <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	33b0      	adds	r3, #176	@ 0xb0
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4413      	add	r3, r2
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	685c      	ldr	r4, [r3, #4]
 800bd10:	697a      	ldr	r2, [r7, #20]
 800bd12:	f241 0368 	movw	r3, #4200	@ 0x1068
 800bd16:	4413      	add	r3, r2
 800bd18:	6979      	ldr	r1, [r7, #20]
 800bd1a:	f241 0264 	movw	r2, #4196	@ 0x1064
 800bd1e:	440a      	add	r2, r1
 800bd20:	7af8      	ldrb	r0, [r7, #11]
 800bd22:	4619      	mov	r1, r3
 800bd24:	47a0      	blx	r4
 800bd26:	4603      	mov	r3, r0
 800bd28:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800bd2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d106      	bne.n	800bd40 <SCSI_ReadCapacity10+0x6c>
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd38:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d108      	bne.n	800bd52 <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bd40:	7af9      	ldrb	r1, [r7, #11]
 800bd42:	233a      	movs	r3, #58	@ 0x3a
 800bd44:	2202      	movs	r2, #2
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f000 fabc 	bl	800c2c4 <SCSI_SenseCode>
    return -1;
 800bd4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd50:	e04b      	b.n	800bdea <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	0e1b      	lsrs	r3, r3, #24
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	0c1b      	lsrs	r3, r3, #16
 800bd70:	b2da      	uxtb	r2, r3
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	0a1b      	lsrs	r3, r3, #8
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	3b01      	subs	r3, #1
 800bd94:	b2da      	uxtb	r2, r3
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bda0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bda4:	161b      	asrs	r3, r3, #24
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bdb6:	141b      	asrs	r3, r3, #16
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdc4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bdc8:	0a1b      	lsrs	r3, r3, #8
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	b2da      	uxtb	r2, r3
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdd8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bddc:	b2da      	uxtb	r2, r3
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2208      	movs	r2, #8
 800bde6:	60da      	str	r2, [r3, #12]

  return 0;
 800bde8:	2300      	movs	r3, #0

}
 800bdea:	4618      	mov	r0, r3
 800bdec:	371c      	adds	r7, #28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd90      	pop	{r4, r7, pc}

0800bdf2 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bdf2:	b590      	push	{r4, r7, lr}
 800bdf4:	b089      	sub	sp, #36	@ 0x24
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	60f8      	str	r0, [r7, #12]
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	607a      	str	r2, [r7, #4]
 800bdfe:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	32b0      	adds	r2, #176	@ 0xb0
 800be0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be0e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d102      	bne.n	800be1c <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800be16:	f04f 33ff 	mov.w	r3, #4294967295
 800be1a:	e0ab      	b.n	800bf74 <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	33b0      	adds	r3, #176	@ 0xb0
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	685c      	ldr	r4, [r3, #4]
 800be2e:	69ba      	ldr	r2, [r7, #24]
 800be30:	f241 0368 	movw	r3, #4200	@ 0x1068
 800be34:	4413      	add	r3, r2
 800be36:	69b9      	ldr	r1, [r7, #24]
 800be38:	f241 0264 	movw	r2, #4196	@ 0x1064
 800be3c:	440a      	add	r2, r1
 800be3e:	7af8      	ldrb	r0, [r7, #11]
 800be40:	4619      	mov	r1, r3
 800be42:	47a0      	blx	r4
 800be44:	4603      	mov	r3, r0
 800be46:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800be48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d106      	bne.n	800be5e <SCSI_ReadCapacity16+0x6c>
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be56:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d108      	bne.n	800be70 <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800be5e:	7af9      	ldrb	r1, [r7, #11]
 800be60:	233a      	movs	r3, #58	@ 0x3a
 800be62:	2202      	movs	r2, #2
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f000 fa2d 	bl	800c2c4 <SCSI_SenseCode>
    return -1;
 800be6a:	f04f 33ff 	mov.w	r3, #4294967295
 800be6e:	e081      	b.n	800bf74 <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	330a      	adds	r3, #10
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	330b      	adds	r3, #11
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800be80:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	330c      	adds	r3, #12
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800be8a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	320d      	adds	r2, #13
 800be90:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800be92:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800be98:	2300      	movs	r3, #0
 800be9a:	61fb      	str	r3, [r7, #28]
 800be9c:	e008      	b.n	800beb0 <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 800be9e:	69ba      	ldr	r2, [r7, #24]
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	4413      	add	r3, r2
 800bea4:	3310      	adds	r3, #16
 800bea6:	2200      	movs	r2, #0
 800bea8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	3301      	adds	r3, #1
 800beae:	61fb      	str	r3, [r7, #28]
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	69fa      	ldr	r2, [r7, #28]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d3f1      	bcc.n	800be9e <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bec2:	3b01      	subs	r3, #1
 800bec4:	0e1b      	lsrs	r3, r3, #24
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bed2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bed4:	3b01      	subs	r3, #1
 800bed6:	0c1b      	lsrs	r3, r3, #16
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bee4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bee6:	3b01      	subs	r3, #1
 800bee8:	0a1b      	lsrs	r3, r3, #8
 800beea:	b2da      	uxtb	r2, r3
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bef6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	3b01      	subs	r3, #1
 800befc:	b2da      	uxtb	r2, r3
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf08:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bf0c:	161b      	asrs	r3, r3, #24
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bf1e:	141b      	asrs	r3, r3, #16
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bf30:	0a1b      	lsrs	r3, r3, #8
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	b2da      	uxtb	r2, r3
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	330a      	adds	r3, #10
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	330b      	adds	r3, #11
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bf5a:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	330c      	adds	r3, #12
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800bf64:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	320d      	adds	r2, #13
 800bf6a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800bf6c:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	60da      	str	r2, [r3, #12]

  return 0;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3724      	adds	r7, #36	@ 0x24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd90      	pop	{r4, r7, pc}

0800bf7c <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	460b      	mov	r3, r1
 800bf86:	607a      	str	r2, [r7, #4]
 800bf88:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	32b0      	adds	r2, #176	@ 0xb0
 800bf94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf98:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d102      	bne.n	800bfa6 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800bfa0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa4:	e063      	b.n	800c06e <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	33b0      	adds	r3, #176	@ 0xb0
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	f107 0214 	add.w	r2, r7, #20
 800bfbc:	f107 0110 	add.w	r1, r7, #16
 800bfc0:	7af8      	ldrb	r0, [r7, #11]
 800bfc2:	4798      	blx	r3
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800bfc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d106      	bne.n	800bfde <SCSI_ReadFormatCapacity+0x62>
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfd6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d108      	bne.n	800bff0 <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bfde:	7af9      	ldrb	r1, [r7, #11]
 800bfe0:	233a      	movs	r3, #58	@ 0x3a
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f000 f96d 	bl	800c2c4 <SCSI_SenseCode>
    return -1;
 800bfea:	f04f 33ff 	mov.w	r3, #4294967295
 800bfee:	e03e      	b.n	800c06e <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800bff0:	2300      	movs	r3, #0
 800bff2:	83fb      	strh	r3, [r7, #30]
 800bff4:	e007      	b.n	800c006 <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 800bff6:	8bfb      	ldrh	r3, [r7, #30]
 800bff8:	69ba      	ldr	r2, [r7, #24]
 800bffa:	4413      	add	r3, r2
 800bffc:	2200      	movs	r2, #0
 800bffe:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800c000:	8bfb      	ldrh	r3, [r7, #30]
 800c002:	3301      	adds	r3, #1
 800c004:	83fb      	strh	r3, [r7, #30]
 800c006:	8bfb      	ldrh	r3, [r7, #30]
 800c008:	2b0b      	cmp	r3, #11
 800c00a:	d9f4      	bls.n	800bff6 <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	2208      	movs	r2, #8
 800c010:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	3b01      	subs	r3, #1
 800c016:	0e1b      	lsrs	r3, r3, #24
 800c018:	b2da      	uxtb	r2, r3
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	3b01      	subs	r3, #1
 800c022:	0c1b      	lsrs	r3, r3, #16
 800c024:	b2da      	uxtb	r2, r3
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	0a1b      	lsrs	r3, r3, #8
 800c030:	b2da      	uxtb	r2, r3
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	3b01      	subs	r3, #1
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	2202      	movs	r2, #2
 800c046:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800c048:	8abb      	ldrh	r3, [r7, #20]
 800c04a:	141b      	asrs	r3, r3, #16
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800c052:	8abb      	ldrh	r3, [r7, #20]
 800c054:	0a1b      	lsrs	r3, r3, #8
 800c056:	b29b      	uxth	r3, r3
 800c058:	b2da      	uxtb	r2, r3
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800c05e:	8abb      	ldrh	r3, [r7, #20]
 800c060:	b2da      	uxtb	r2, r3
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	220c      	movs	r2, #12
 800c06a:	60da      	str	r2, [r3, #12]

  return 0;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3720      	adds	r7, #32
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
	...

0800c078 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	460b      	mov	r3, r1
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	32b0      	adds	r2, #176	@ 0xb0
 800c090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c094:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800c096:	2304      	movs	r3, #4
 800c098:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d102      	bne.n	800c0a6 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800c0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a4:	e027      	b.n	800c0f6 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	33b0      	adds	r3, #176	@ 0xb0
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	68db      	ldr	r3, [r3, #12]
 800c0b8:	7afa      	ldrb	r2, [r7, #11]
 800c0ba:	4610      	mov	r0, r2
 800c0bc:	4798      	blx	r3
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d006      	beq.n	800c0d2 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800c0c4:	4b0e      	ldr	r3, [pc, #56]	@ (800c100 <SCSI_ModeSense6+0x88>)
 800c0c6:	789b      	ldrb	r3, [r3, #2]
 800c0c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c0cc:	b2da      	uxtb	r2, r3
 800c0ce:	4b0c      	ldr	r3, [pc, #48]	@ (800c100 <SCSI_ModeSense6+0x88>)
 800c0d0:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	8afb      	ldrh	r3, [r7, #22]
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d303      	bcc.n	800c0e8 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800c0e8:	8afb      	ldrh	r3, [r7, #22]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	4904      	ldr	r1, [pc, #16]	@ (800c100 <SCSI_ModeSense6+0x88>)
 800c0ee:	6938      	ldr	r0, [r7, #16]
 800c0f0:	f000 fece 	bl	800ce90 <SCSI_UpdateBotData>

  return 0;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3718      	adds	r7, #24
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	24000178 	.word	0x24000178

0800c104 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	460b      	mov	r3, r1
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	32b0      	adds	r2, #176	@ 0xb0
 800c11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c120:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800c122:	2308      	movs	r3, #8
 800c124:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d102      	bne.n	800c132 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800c12c:	f04f 33ff 	mov.w	r3, #4294967295
 800c130:	e027      	b.n	800c182 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c138:	68fa      	ldr	r2, [r7, #12]
 800c13a:	33b0      	adds	r3, #176	@ 0xb0
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	4413      	add	r3, r2
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	7afa      	ldrb	r2, [r7, #11]
 800c146:	4610      	mov	r0, r2
 800c148:	4798      	blx	r3
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d006      	beq.n	800c15e <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800c150:	4b0e      	ldr	r3, [pc, #56]	@ (800c18c <SCSI_ModeSense10+0x88>)
 800c152:	78db      	ldrb	r3, [r3, #3]
 800c154:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	4b0c      	ldr	r3, [pc, #48]	@ (800c18c <SCSI_ModeSense10+0x88>)
 800c15c:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3308      	adds	r3, #8
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	461a      	mov	r2, r3
 800c166:	8afb      	ldrh	r3, [r7, #22]
 800c168:	4293      	cmp	r3, r2
 800c16a:	d303      	bcc.n	800c174 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	3308      	adds	r3, #8
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800c174:	8afb      	ldrh	r3, [r7, #22]
 800c176:	461a      	mov	r2, r3
 800c178:	4904      	ldr	r1, [pc, #16]	@ (800c18c <SCSI_ModeSense10+0x88>)
 800c17a:	6938      	ldr	r0, [r7, #16]
 800c17c:	f000 fe88 	bl	800ce90 <SCSI_UpdateBotData>

  return 0;
 800c180:	2300      	movs	r3, #0
}
 800c182:	4618      	mov	r0, r3
 800c184:	3718      	adds	r7, #24
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	2400017c 	.word	0x2400017c

0800c190 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	460b      	mov	r3, r1
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	32b0      	adds	r2, #176	@ 0xb0
 800c1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d102      	bne.n	800c1ba <SCSI_RequestSense+0x2a>
  {
    return -1;
 800c1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b8:	e080      	b.n	800c2bc <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1c0:	699b      	ldr	r3, [r3, #24]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10b      	bne.n	800c1de <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1cc:	7f59      	ldrb	r1, [r3, #29]
 800c1ce:	2320      	movs	r3, #32
 800c1d0:	2205      	movs	r2, #5
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f000 f876 	bl	800c2c4 <SCSI_SenseCode>
    return -1;
 800c1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1dc:	e06e      	b.n	800c2bc <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c1de:	2300      	movs	r3, #0
 800c1e0:	75fb      	strb	r3, [r7, #23]
 800c1e2:	e007      	b.n	800c1f4 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800c1e4:	7dfb      	ldrb	r3, [r7, #23]
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c1ee:	7dfb      	ldrb	r3, [r7, #23]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	75fb      	strb	r3, [r7, #23]
 800c1f4:	7dfb      	ldrb	r3, [r7, #23]
 800c1f6:	2b11      	cmp	r3, #17
 800c1f8:	d9f4      	bls.n	800c1e4 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	2270      	movs	r2, #112	@ 0x70
 800c1fe:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	220c      	movs	r2, #12
 800c204:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c20c:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c216:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d03f      	beq.n	800c29e <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c224:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800c228:	461a      	mov	r2, r3
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	f502 7202 	add.w	r2, r2, #520	@ 0x208
 800c230:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c23e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800c248:	00db      	lsls	r3, r3, #3
 800c24a:	4413      	add	r3, r2
 800c24c:	791a      	ldrb	r2, [r3, #4]
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c258:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	4413      	add	r3, r2
 800c266:	795a      	ldrb	r2, [r3, #5]
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c272:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800c276:	3301      	adds	r3, #1
 800c278:	b2da      	uxtb	r2, r3
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c280:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c28a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800c28e:	2b04      	cmp	r3, #4
 800c290:	d105      	bne.n	800c29e <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c298:	2200      	movs	r2, #0
 800c29a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	2212      	movs	r2, #18
 800c2a2:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	2b12      	cmp	r3, #18
 800c2ac:	d805      	bhi.n	800c2ba <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3718      	adds	r7, #24
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	4611      	mov	r1, r2
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	70fb      	strb	r3, [r7, #3]
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	70bb      	strb	r3, [r7, #2]
 800c2da:	4613      	mov	r3, r2
 800c2dc:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	32b0      	adds	r2, #176	@ 0xb0
 800c2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ec:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d03d      	beq.n	800c370 <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c2fa:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800c2fe:	461a      	mov	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f502 7202 	add.w	r2, r2, #520	@ 0x208
 800c306:	78b9      	ldrb	r1, [r7, #2]
 800c308:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c312:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800c31c:	00db      	lsls	r3, r3, #3
 800c31e:	4413      	add	r3, r2
 800c320:	787a      	ldrb	r2, [r7, #1]
 800c322:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c32a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800c334:	00db      	lsls	r3, r3, #3
 800c336:	4413      	add	r3, r2
 800c338:	2200      	movs	r2, #0
 800c33a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c342:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800c346:	3301      	adds	r3, #1
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c350:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c35a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800c35e:	2b04      	cmp	r3, #4
 800c360:	d107      	bne.n	800c372 <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 800c36e:	e000      	b.n	800c372 <SCSI_SenseCode+0xae>
    return;
 800c370:	bf00      	nop
  }
}
 800c372:	3714      	adds	r7, #20
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	460b      	mov	r3, r1
 800c386:	607a      	str	r2, [r7, #4]
 800c388:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	32b0      	adds	r2, #176	@ 0xb0
 800c394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c398:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d102      	bne.n	800c3a6 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800c3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a4:	e043      	b.n	800c42e <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3ac:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d10f      	bne.n	800c3d4 <SCSI_StartStopUnit+0x58>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3304      	adds	r3, #4
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	f003 0303 	and.w	r3, r3, #3
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d108      	bne.n	800c3d4 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800c3c2:	7af9      	ldrb	r1, [r7, #11]
 800c3c4:	2324      	movs	r3, #36	@ 0x24
 800c3c6:	2205      	movs	r2, #5
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f7ff ff7b 	bl	800c2c4 <SCSI_SenseCode>

    return -1;
 800c3ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c3d2:	e02c      	b.n	800c42e <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	f003 0303 	and.w	r3, r3, #3
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d106      	bne.n	800c3f0 <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 800c3ee:	e01a      	b.n	800c426 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	f003 0303 	and.w	r3, r3, #3
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d106      	bne.n	800c40c <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c404:	2202      	movs	r2, #2
 800c406:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 800c40a:	e00c      	b.n	800c426 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3304      	adds	r3, #4
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	f003 0303 	and.w	r3, r3, #3
 800c416:	2b03      	cmp	r3, #3
 800c418:	d105      	bne.n	800c426 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c420:	2200      	movs	r2, #0
 800c422:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	2200      	movs	r2, #0
 800c42a:	60da      	str	r2, [r3, #12]

  return 0;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3718      	adds	r7, #24
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c436:	b480      	push	{r7}
 800c438:	b087      	sub	sp, #28
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	60f8      	str	r0, [r7, #12]
 800c43e:	460b      	mov	r3, r1
 800c440:	607a      	str	r2, [r7, #4]
 800c442:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	32b0      	adds	r2, #176	@ 0xb0
 800c44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c452:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d102      	bne.n	800c460 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800c45a:	f04f 33ff 	mov.w	r3, #4294967295
 800c45e:	e015      	b.n	800c48c <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3304      	adds	r3, #4
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d106      	bne.n	800c478 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c470:	2200      	movs	r2, #0
 800c472:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 800c476:	e005      	b.n	800c484 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  }

  hmsc->bot_data_length = 0U;
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	2200      	movs	r2, #0
 800c488:	60da      	str	r2, [r3, #12]

  return 0;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	371c      	adds	r7, #28
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b086      	sub	sp, #24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	607a      	str	r2, [r7, #4]
 800c4a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	32b0      	adds	r2, #176	@ 0xb0
 800c4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d102      	bne.n	800c4c2 <SCSI_Read10+0x2a>
  {
    return -1;
 800c4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c4c0:	e09d      	b.n	800c5fe <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	7a1b      	ldrb	r3, [r3, #8]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f040 808f 	bne.w	800c5ea <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c4d2:	7f1b      	ldrb	r3, [r3, #28]
 800c4d4:	b25b      	sxtb	r3, r3
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	db0b      	blt.n	800c4f2 <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c4e0:	7f59      	ldrb	r1, [r3, #29]
 800c4e2:	2320      	movs	r3, #32
 800c4e4:	2205      	movs	r2, #5
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f7ff feec 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f0:	e085      	b.n	800c5fe <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c4f8:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d108      	bne.n	800c512 <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c500:	7af9      	ldrb	r1, [r7, #11]
 800c502:	233a      	movs	r3, #58	@ 0x3a
 800c504:	2202      	movs	r2, #2
 800c506:	68f8      	ldr	r0, [r7, #12]
 800c508:	f7ff fedc 	bl	800c2c4 <SCSI_SenseCode>

      return -1;
 800c50c:	f04f 33ff 	mov.w	r3, #4294967295
 800c510:	e075      	b.n	800c5fe <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	33b0      	adds	r3, #176	@ 0xb0
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	7afa      	ldrb	r2, [r7, #11]
 800c526:	4610      	mov	r0, r2
 800c528:	4798      	blx	r3
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d008      	beq.n	800c542 <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c530:	7af9      	ldrb	r1, [r7, #11]
 800c532:	233a      	movs	r3, #58	@ 0x3a
 800c534:	2202      	movs	r2, #2
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f7ff fec4 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c53c:	f04f 33ff 	mov.w	r3, #4294967295
 800c540:	e05d      	b.n	800c5fe <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3302      	adds	r3, #2
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	3303      	adds	r3, #3
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c552:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	3304      	adds	r3, #4
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c55c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	3205      	adds	r2, #5
 800c562:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c564:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c566:	697a      	ldr	r2, [r7, #20]
 800c568:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c56c:	66d3      	str	r3, [r2, #108]	@ 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	3307      	adds	r3, #7
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	021b      	lsls	r3, r3, #8
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	3208      	adds	r2, #8
 800c57a:	7812      	ldrb	r2, [r2, #0]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	697a      	ldr	r2, [r7, #20]
 800c580:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c584:	6713      	str	r3, [r2, #112]	@ 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c58c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c596:	7af9      	ldrb	r1, [r7, #11]
 800c598:	68f8      	ldr	r0, [r7, #12]
 800c59a:	f000 fb0c 	bl	800cbb6 <SCSI_CheckAddressRange>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	da02      	bge.n	800c5aa <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a8:	e029      	b.n	800c5fe <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5b0:	699a      	ldr	r2, [r3, #24]
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5ba:	6979      	ldr	r1, [r7, #20]
 800c5bc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800c5c0:	f8b1 1064 	ldrh.w	r1, [r1, #100]	@ 0x64
 800c5c4:	fb01 f303 	mul.w	r3, r1, r3
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d00b      	beq.n	800c5e4 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5d2:	7f59      	ldrb	r1, [r3, #29]
 800c5d4:	2320      	movs	r3, #32
 800c5d6:	2205      	movs	r2, #5
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f7ff fe73 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c5de:	f04f 33ff 	mov.w	r3, #4294967295
 800c5e2:	e00c      	b.n	800c5fe <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	2202      	movs	r2, #2
 800c5e8:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c5f0:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c5f2:	7afb      	ldrb	r3, [r7, #11]
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f000 fb0a 	bl	800cc10 <SCSI_ProcessRead>
 800c5fc:	4603      	mov	r3, r0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3718      	adds	r7, #24
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b086      	sub	sp, #24
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	60f8      	str	r0, [r7, #12]
 800c60e:	460b      	mov	r3, r1
 800c610:	607a      	str	r2, [r7, #4]
 800c612:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	32b0      	adds	r2, #176	@ 0xb0
 800c61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c622:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d102      	bne.n	800c630 <SCSI_Read12+0x2a>
  {
    return -1;
 800c62a:	f04f 33ff 	mov.w	r3, #4294967295
 800c62e:	e0a7      	b.n	800c780 <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	7a1b      	ldrb	r3, [r3, #8]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f040 8099 	bne.w	800c76c <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c640:	7f1b      	ldrb	r3, [r3, #28]
 800c642:	b25b      	sxtb	r3, r3
 800c644:	2b00      	cmp	r3, #0
 800c646:	db0b      	blt.n	800c660 <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c64e:	7f59      	ldrb	r1, [r3, #29]
 800c650:	2320      	movs	r3, #32
 800c652:	2205      	movs	r2, #5
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f7ff fe35 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c65a:	f04f 33ff 	mov.w	r3, #4294967295
 800c65e:	e08f      	b.n	800c780 <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c666:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d108      	bne.n	800c680 <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c66e:	7af9      	ldrb	r1, [r7, #11]
 800c670:	233a      	movs	r3, #58	@ 0x3a
 800c672:	2202      	movs	r2, #2
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f7ff fe25 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c67a:	f04f 33ff 	mov.w	r3, #4294967295
 800c67e:	e07f      	b.n	800c780 <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	33b0      	adds	r3, #176	@ 0xb0
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4413      	add	r3, r2
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	7afa      	ldrb	r2, [r7, #11]
 800c694:	4610      	mov	r0, r2
 800c696:	4798      	blx	r3
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d008      	beq.n	800c6b0 <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c69e:	7af9      	ldrb	r1, [r7, #11]
 800c6a0:	233a      	movs	r3, #58	@ 0x3a
 800c6a2:	2202      	movs	r2, #2
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7ff fe0d 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ae:	e067      	b.n	800c780 <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	3302      	adds	r3, #2
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	3303      	adds	r3, #3
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c6c0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c6ca:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	3205      	adds	r2, #5
 800c6d0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c6d2:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c6da:	66d3      	str	r3, [r2, #108]	@ 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	3306      	adds	r3, #6
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	3307      	adds	r3, #7
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c6ec:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	3308      	adds	r3, #8
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800c6f6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	3209      	adds	r2, #9
 800c6fc:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800c6fe:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c700:	697a      	ldr	r2, [r7, #20]
 800c702:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c706:	6713      	str	r3, [r2, #112]	@ 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c70e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c718:	7af9      	ldrb	r1, [r7, #11]
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f000 fa4b 	bl	800cbb6 <SCSI_CheckAddressRange>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	da02      	bge.n	800c72c <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c726:	f04f 33ff 	mov.w	r3, #4294967295
 800c72a:	e029      	b.n	800c780 <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c732:	699a      	ldr	r2, [r3, #24]
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c73a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c73c:	6979      	ldr	r1, [r7, #20]
 800c73e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800c742:	f8b1 1064 	ldrh.w	r1, [r1, #100]	@ 0x64
 800c746:	fb01 f303 	mul.w	r3, r1, r3
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d00b      	beq.n	800c766 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c754:	7f59      	ldrb	r1, [r3, #29]
 800c756:	2320      	movs	r3, #32
 800c758:	2205      	movs	r2, #5
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f7ff fdb2 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c760:	f04f 33ff 	mov.w	r3, #4294967295
 800c764:	e00c      	b.n	800c780 <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	2202      	movs	r2, #2
 800c76a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c772:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c774:	7afb      	ldrb	r3, [r7, #11]
 800c776:	4619      	mov	r1, r3
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f000 fa49 	bl	800cc10 <SCSI_ProcessRead>
 800c77e:	4603      	mov	r3, r0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3718      	adds	r7, #24
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b086      	sub	sp, #24
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	460b      	mov	r3, r1
 800c792:	607a      	str	r2, [r7, #4]
 800c794:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	32b0      	adds	r2, #176	@ 0xb0
 800c7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7a4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d102      	bne.n	800c7b2 <SCSI_Write10+0x2a>
  {
    return -1;
 800c7ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b0:	e0c7      	b.n	800c942 <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	7a1b      	ldrb	r3, [r3, #8]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	f040 80bd 	bne.w	800c936 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10b      	bne.n	800c7e0 <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7ce:	7f59      	ldrb	r1, [r3, #29]
 800c7d0:	2320      	movs	r3, #32
 800c7d2:	2205      	movs	r2, #5
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f7ff fd75 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c7da:	f04f 33ff 	mov.w	r3, #4294967295
 800c7de:	e0b0      	b.n	800c942 <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7e6:	7f1b      	ldrb	r3, [r3, #28]
 800c7e8:	b25b      	sxtb	r3, r3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	da0b      	bge.n	800c806 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7f4:	7f59      	ldrb	r1, [r3, #29]
 800c7f6:	2320      	movs	r3, #32
 800c7f8:	2205      	movs	r2, #5
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f7ff fd62 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c800:	f04f 33ff 	mov.w	r3, #4294967295
 800c804:	e09d      	b.n	800c942 <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	33b0      	adds	r3, #176	@ 0xb0
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	4413      	add	r3, r2
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	7afa      	ldrb	r2, [r7, #11]
 800c81a:	4610      	mov	r0, r2
 800c81c:	4798      	blx	r3
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d008      	beq.n	800c836 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c824:	7af9      	ldrb	r1, [r7, #11]
 800c826:	233a      	movs	r3, #58	@ 0x3a
 800c828:	2202      	movs	r2, #2
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f7ff fd4a 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c830:	f04f 33ff 	mov.w	r3, #4294967295
 800c834:	e085      	b.n	800c942 <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	33b0      	adds	r3, #176	@ 0xb0
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4413      	add	r3, r2
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	7afa      	ldrb	r2, [r7, #11]
 800c84a:	4610      	mov	r0, r2
 800c84c:	4798      	blx	r3
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d008      	beq.n	800c866 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c854:	7af9      	ldrb	r1, [r7, #11]
 800c856:	2327      	movs	r3, #39	@ 0x27
 800c858:	2202      	movs	r2, #2
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f7ff fd32 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c860:	f04f 33ff 	mov.w	r3, #4294967295
 800c864:	e06d      	b.n	800c942 <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	3302      	adds	r3, #2
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	3303      	adds	r3, #3
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c876:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	3304      	adds	r3, #4
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c880:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	3205      	adds	r2, #5
 800c886:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800c888:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c88a:	697a      	ldr	r2, [r7, #20]
 800c88c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c890:	66d3      	str	r3, [r2, #108]	@ 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	3307      	adds	r3, #7
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	3208      	adds	r2, #8
 800c89e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c8a8:	6713      	str	r3, [r2, #112]	@ 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8b0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8ba:	7af9      	ldrb	r1, [r7, #11]
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f000 f97a 	bl	800cbb6 <SCSI_CheckAddressRange>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	da02      	bge.n	800c8ce <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8cc:	e039      	b.n	800c942 <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c8dc:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
 800c8e0:	fb02 f303 	mul.w	r3, r2, r3
 800c8e4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8ec:	699b      	ldr	r3, [r3, #24]
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d00b      	beq.n	800c90c <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8fa:	7f59      	ldrb	r1, [r3, #29]
 800c8fc:	2320      	movs	r3, #32
 800c8fe:	2205      	movs	r2, #5
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f7ff fcdf 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c906:	f04f 33ff 	mov.w	r3, #4294967295
 800c90a:	e01a      	b.n	800c942 <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c912:	bf28      	it	cs
 800c914:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 800c918:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2201      	movs	r2, #1
 800c91e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800c920:	4b0a      	ldr	r3, [pc, #40]	@ (800c94c <SCSI_Write10+0x1c4>)
 800c922:	7819      	ldrb	r1, [r3, #0]
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	f103 0210 	add.w	r2, r3, #16
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f002 fa7c 	bl	800ee2a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800c932:	2300      	movs	r3, #0
 800c934:	e005      	b.n	800c942 <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800c936:	7afb      	ldrb	r3, [r7, #11]
 800c938:	4619      	mov	r1, r3
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	f000 f9fe 	bl	800cd3c <SCSI_ProcessWrite>
 800c940:	4603      	mov	r3, r0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	24000167 	.word	0x24000167

0800c950 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	460b      	mov	r3, r1
 800c95a:	607a      	str	r2, [r7, #4]
 800c95c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	32b0      	adds	r2, #176	@ 0xb0
 800c968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c96c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d102      	bne.n	800c97a <SCSI_Write12+0x2a>
  {
    return -1;
 800c974:	f04f 33ff 	mov.w	r3, #4294967295
 800c978:	e0d7      	b.n	800cb2a <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	7a1b      	ldrb	r3, [r3, #8]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f040 80cd 	bne.w	800cb1e <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c98a:	699b      	ldr	r3, [r3, #24]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10b      	bne.n	800c9a8 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c996:	7f59      	ldrb	r1, [r3, #29]
 800c998:	2320      	movs	r3, #32
 800c99a:	2205      	movs	r2, #5
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f7ff fc91 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a6:	e0c0      	b.n	800cb2a <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9ae:	7f1b      	ldrb	r3, [r3, #28]
 800c9b0:	b25b      	sxtb	r3, r3
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	da0b      	bge.n	800c9ce <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c9bc:	7f59      	ldrb	r1, [r3, #29]
 800c9be:	2320      	movs	r3, #32
 800c9c0:	2205      	movs	r2, #5
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f7ff fc7e 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800c9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9cc:	e0ad      	b.n	800cb2a <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	33b0      	adds	r3, #176	@ 0xb0
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	4413      	add	r3, r2
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	7afa      	ldrb	r2, [r7, #11]
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	4798      	blx	r3
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00b      	beq.n	800ca04 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c9ec:	7af9      	ldrb	r1, [r7, #11]
 800c9ee:	233a      	movs	r3, #58	@ 0x3a
 800c9f0:	2202      	movs	r2, #2
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f7ff fc66 	bl	800c2c4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	2205      	movs	r2, #5
 800c9fc:	721a      	strb	r2, [r3, #8]
      return -1;
 800c9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800ca02:	e092      	b.n	800cb2a <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	33b0      	adds	r3, #176	@ 0xb0
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	4413      	add	r3, r2
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	7afa      	ldrb	r2, [r7, #11]
 800ca18:	4610      	mov	r0, r2
 800ca1a:	4798      	blx	r3
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00b      	beq.n	800ca3a <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ca22:	7af9      	ldrb	r1, [r7, #11]
 800ca24:	2327      	movs	r3, #39	@ 0x27
 800ca26:	2202      	movs	r2, #2
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f7ff fc4b 	bl	800c2c4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	2205      	movs	r2, #5
 800ca32:	721a      	strb	r2, [r3, #8]
      return -1;
 800ca34:	f04f 33ff 	mov.w	r3, #4294967295
 800ca38:	e077      	b.n	800cb2a <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	3302      	adds	r3, #2
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	3303      	adds	r3, #3
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ca4a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ca54:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	3205      	adds	r2, #5
 800ca5a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ca5c:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ca64:	66d3      	str	r3, [r2, #108]	@ 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	3306      	adds	r3, #6
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	3307      	adds	r3, #7
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ca76:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	3308      	adds	r3, #8
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ca80:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	3209      	adds	r2, #9
 800ca86:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ca88:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ca8a:	697a      	ldr	r2, [r7, #20]
 800ca8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ca90:	6713      	str	r3, [r2, #112]	@ 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ca98:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800caa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800caa2:	7af9      	ldrb	r1, [r7, #11]
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	f000 f886 	bl	800cbb6 <SCSI_CheckAddressRange>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	da02      	bge.n	800cab6 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800cab0:	f04f 33ff 	mov.w	r3, #4294967295
 800cab4:	e039      	b.n	800cb2a <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cabc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cabe:	697a      	ldr	r2, [r7, #20]
 800cac0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cac4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
 800cac8:	fb02 f303 	mul.w	r3, r2, r3
 800cacc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	693a      	ldr	r2, [r7, #16]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d00b      	beq.n	800caf4 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cae2:	7f59      	ldrb	r1, [r3, #29]
 800cae4:	2320      	movs	r3, #32
 800cae6:	2205      	movs	r2, #5
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f7ff fbeb 	bl	800c2c4 <SCSI_SenseCode>
      return -1;
 800caee:	f04f 33ff 	mov.w	r3, #4294967295
 800caf2:	e01a      	b.n	800cb2a <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cafa:	bf28      	it	cs
 800cafc:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 800cb00:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	2201      	movs	r2, #1
 800cb06:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800cb08:	4b0a      	ldr	r3, [pc, #40]	@ (800cb34 <SCSI_Write12+0x1e4>)
 800cb0a:	7819      	ldrb	r1, [r3, #0]
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	f103 0210 	add.w	r2, r3, #16
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f002 f988 	bl	800ee2a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e005      	b.n	800cb2a <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800cb1e:	7afb      	ldrb	r3, [r7, #11]
 800cb20:	4619      	mov	r1, r3
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f000 f90a 	bl	800cd3c <SCSI_ProcessWrite>
 800cb28:	4603      	mov	r3, r0
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3718      	adds	r7, #24
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	24000167 	.word	0x24000167

0800cb38 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	460b      	mov	r3, r1
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	32b0      	adds	r2, #176	@ 0xb0
 800cb50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb54:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d102      	bne.n	800cb62 <SCSI_Verify10+0x2a>
  {
    return -1;
 800cb5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb60:	e025      	b.n	800cbae <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	3301      	adds	r3, #1
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	f003 0302 	and.w	r3, r3, #2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d008      	beq.n	800cb82 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800cb70:	7af9      	ldrb	r1, [r7, #11]
 800cb72:	2324      	movs	r3, #36	@ 0x24
 800cb74:	2205      	movs	r2, #5
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	f7ff fba4 	bl	800c2c4 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800cb7c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb80:	e015      	b.n	800cbae <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb88:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb92:	7af9      	ldrb	r1, [r7, #11]
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f000 f80e 	bl	800cbb6 <SCSI_CheckAddressRange>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	da02      	bge.n	800cba6 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800cba0:	f04f 33ff 	mov.w	r3, #4294967295
 800cba4:	e003      	b.n	800cbae <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	60da      	str	r2, [r3, #12]

  return 0;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b086      	sub	sp, #24
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	60f8      	str	r0, [r7, #12]
 800cbbe:	607a      	str	r2, [r7, #4]
 800cbc0:	603b      	str	r3, [r7, #0]
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	32b0      	adds	r2, #176	@ 0xb0
 800cbd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800cbdc:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe0:	e012      	b.n	800cc08 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	441a      	add	r2, r3
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cbee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d908      	bls.n	800cc06 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800cbf4:	7af9      	ldrb	r1, [r7, #11]
 800cbf6:	2321      	movs	r3, #33	@ 0x21
 800cbf8:	2205      	movs	r2, #5
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f7ff fb62 	bl	800c2c4 <SCSI_SenseCode>
    return -1;
 800cc00:	f04f 33ff 	mov.w	r3, #4294967295
 800cc04:	e000      	b.n	800cc08 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3718      	adds	r7, #24
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800cc10:	b590      	push	{r4, r7, lr}
 800cc12:	b085      	sub	sp, #20
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	32b0      	adds	r2, #176	@ 0xb0
 800cc26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc2a:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d102      	bne.n	800cc38 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800cc32:	f04f 33ff 	mov.w	r3, #4294967295
 800cc36:	e07b      	b.n	800cd30 <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cc46:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
 800cc4a:	fb02 f303 	mul.w	r3, r2, r3
 800cc4e:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc56:	bf28      	it	cs
 800cc58:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 800cc5c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	33b0      	adds	r3, #176	@ 0xb0
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	4413      	add	r3, r2
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	691c      	ldr	r4, [r3, #16]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f103 0110 	add.w	r1, r3, #16
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc7c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cc84:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cc88:	4618      	mov	r0, r3
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	78f8      	ldrb	r0, [r7, #3]
 800cc94:	47a0      	blx	r4
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	da08      	bge.n	800ccae <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800cc9c:	78f9      	ldrb	r1, [r7, #3]
 800cc9e:	2311      	movs	r3, #17
 800cca0:	2204      	movs	r2, #4
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7ff fb0e 	bl	800c2c4 <SCSI_SenseCode>
    return -1;
 800cca8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccac:	e040      	b.n	800cd30 <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800ccae:	4b22      	ldr	r3, [pc, #136]	@ (800cd38 <SCSI_ProcessRead+0x128>)
 800ccb0:	7819      	ldrb	r1, [r3, #0]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f103 0210 	add.w	r2, r3, #16
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f002 f894 	bl	800ede8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccc6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	fbb3 f3f1 	udiv	r3, r3, r1
 800ccda:	4413      	add	r3, r2
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cce2:	66d3      	str	r3, [r2, #108]	@ 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ccf2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	fbb3 f3f1 	udiv	r3, r3, r1
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cd06:	6713      	str	r3, [r2, #112]	@ 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cd1a:	6393      	str	r3, [r2, #56]	@ 0x38

  if (hmsc->scsi_blk_len == 0U)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d102      	bne.n	800cd2e <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2203      	movs	r2, #3
 800cd2c:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd90      	pop	{r4, r7, pc}
 800cd38:	24000166 	.word	0x24000166

0800cd3c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800cd3c:	b590      	push	{r4, r7, lr}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	460b      	mov	r3, r1
 800cd46:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	32b0      	adds	r2, #176	@ 0xb0
 800cd52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd56:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d102      	bne.n	800cd64 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800cd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd62:	e08e      	b.n	800ce82 <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cd72:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
 800cd76:	fb02 f303 	mul.w	r3, r2, r3
 800cd7a:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd82:	bf28      	it	cs
 800cd84:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 800cd88:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	33b0      	adds	r3, #176	@ 0xb0
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4413      	add	r3, r2
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	695c      	ldr	r4, [r3, #20]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f103 0110 	add.w	r1, r3, #16
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cda8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cdb0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	78f8      	ldrb	r0, [r7, #3]
 800cdc0:	47a0      	blx	r4
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	da08      	bge.n	800cdda <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800cdc8:	78f9      	ldrb	r1, [r7, #3]
 800cdca:	2303      	movs	r3, #3
 800cdcc:	2204      	movs	r2, #4
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7ff fa78 	bl	800c2c4 <SCSI_SenseCode>
    return -1;
 800cdd4:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd8:	e053      	b.n	800ce82 <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cde0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cde8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cdec:	4619      	mov	r1, r3
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	fbb3 f3f1 	udiv	r3, r3, r1
 800cdf4:	4413      	add	r3, r2
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800cdfc:	66d3      	str	r3, [r2, #108]	@ 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ce10:	4619      	mov	r1, r3
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ce20:	6713      	str	r3, [r2, #112]	@ 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ce34:	6393      	str	r3, [r2, #56]	@ 0x38

  if (hmsc->scsi_blk_len == 0U)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d104      	bne.n	800ce4c <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ce42:	2100      	movs	r1, #0
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f7fe fc27 	bl	800b698 <MSC_BOT_SendCSW>
 800ce4a:	e019      	b.n	800ce80 <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ce52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ce5a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
 800ce5e:	fb02 f303 	mul.w	r3, r2, r3
 800ce62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce66:	bf28      	it	cs
 800ce68:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 800ce6c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ce6e:	4b07      	ldr	r3, [pc, #28]	@ (800ce8c <SCSI_ProcessWrite+0x150>)
 800ce70:	7819      	ldrb	r1, [r3, #0]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f103 0210 	add.w	r2, r3, #16
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f001 ffd5 	bl	800ee2a <USBD_LL_PrepareReceive>
  }

  return 0;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3714      	adds	r7, #20
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd90      	pop	{r4, r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	24000167 	.word	0x24000167

0800ce90 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b087      	sub	sp, #28
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800ce9e:	88fb      	ldrh	r3, [r7, #6]
 800cea0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d102      	bne.n	800ceae <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800cea8:	f04f 33ff 	mov.w	r3, #4294967295
 800ceac:	e013      	b.n	800ced6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800ceae:	8afa      	ldrh	r2, [r7, #22]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800ceb4:	e00b      	b.n	800cece <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800ceb6:	8afb      	ldrh	r3, [r7, #22]
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800cebc:	8afb      	ldrh	r3, [r7, #22]
 800cebe:	68ba      	ldr	r2, [r7, #8]
 800cec0:	441a      	add	r2, r3
 800cec2:	8afb      	ldrh	r3, [r7, #22]
 800cec4:	7811      	ldrb	r1, [r2, #0]
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	4413      	add	r3, r2
 800ceca:	460a      	mov	r2, r1
 800cecc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800cece:	8afb      	ldrh	r3, [r7, #22]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1f0      	bne.n	800ceb6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	371c      	adds	r7, #28
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b086      	sub	sp, #24
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	60f8      	str	r0, [r7, #12]
 800ceea:	60b9      	str	r1, [r7, #8]
 800ceec:	4613      	mov	r3, r2
 800ceee:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d101      	bne.n	800cefa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cef6:	2303      	movs	r3, #3
 800cef8:	e01f      	b.n	800cf3a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2200      	movs	r2, #0
 800cf06:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d003      	beq.n	800cf20 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	68ba      	ldr	r2, [r7, #8]
 800cf1c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	79fa      	ldrb	r2, [r7, #7]
 800cf2c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f001 fe02 	bl	800eb38 <USBD_LL_Init>
 800cf34:	4603      	mov	r3, r0
 800cf36:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cf38:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3718      	adds	r7, #24
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b084      	sub	sp, #16
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
 800cf4a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d101      	bne.n	800cf5a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cf56:	2303      	movs	r3, #3
 800cf58:	e025      	b.n	800cfa6 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	32ae      	adds	r2, #174	@ 0xae
 800cf6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00f      	beq.n	800cf96 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	32ae      	adds	r2, #174	@ 0xae
 800cf80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf86:	f107 020e 	add.w	r2, r7, #14
 800cf8a:	4610      	mov	r0, r2
 800cf8c:	4798      	blx	r3
 800cf8e:	4602      	mov	r2, r0
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cf9c:	1c5a      	adds	r2, r3, #1
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3710      	adds	r7, #16
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b082      	sub	sp, #8
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f001 fe0e 	bl	800ebd8 <USBD_LL_Start>
 800cfbc:	4603      	mov	r3, r0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cfc6:	b480      	push	{r7}
 800cfc8:	b083      	sub	sp, #12
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cfce:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d009      	beq.n	800d00a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	78fa      	ldrb	r2, [r7, #3]
 800d000:	4611      	mov	r1, r2
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	4798      	blx	r3
 800d006:	4603      	mov	r3, r0
 800d008:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	460b      	mov	r3, r1
 800d01e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d020:	2300      	movs	r3, #0
 800d022:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	78fa      	ldrb	r2, [r7, #3]
 800d02e:	4611      	mov	r1, r2
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	4798      	blx	r3
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d001      	beq.n	800d03e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d03a:	2303      	movs	r3, #3
 800d03c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	4618      	mov	r0, r3
 800d05c:	f001 f937 	bl	800e2ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d06e:	461a      	mov	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d07c:	f003 031f 	and.w	r3, r3, #31
 800d080:	2b02      	cmp	r3, #2
 800d082:	d01a      	beq.n	800d0ba <USBD_LL_SetupStage+0x72>
 800d084:	2b02      	cmp	r3, #2
 800d086:	d822      	bhi.n	800d0ce <USBD_LL_SetupStage+0x86>
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <USBD_LL_SetupStage+0x4a>
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d00a      	beq.n	800d0a6 <USBD_LL_SetupStage+0x5e>
 800d090:	e01d      	b.n	800d0ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d098:	4619      	mov	r1, r3
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 fb64 	bl	800d768 <USBD_StdDevReq>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d0a4:	e020      	b.n	800d0e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 fbcc 	bl	800d84c <USBD_StdItfReq>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	73fb      	strb	r3, [r7, #15]
      break;
 800d0b8:	e016      	b.n	800d0e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 fc2e 	bl	800d924 <USBD_StdEPReq>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d0cc:	e00c      	b.n	800d0e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d0d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	4619      	mov	r1, r3
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f001 fdfa 	bl	800ecd6 <USBD_LL_StallEP>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	73fb      	strb	r3, [r7, #15]
      break;
 800d0e6:	bf00      	nop
  }

  return ret;
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b086      	sub	sp, #24
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	60f8      	str	r0, [r7, #12]
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	607a      	str	r2, [r7, #4]
 800d0fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d100:	2300      	movs	r3, #0
 800d102:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d104:	7afb      	ldrb	r3, [r7, #11]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d16e      	bne.n	800d1e8 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d110:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d118:	2b03      	cmp	r3, #3
 800d11a:	f040 8098 	bne.w	800d24e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	689a      	ldr	r2, [r3, #8]
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	429a      	cmp	r2, r3
 800d128:	d913      	bls.n	800d152 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	689a      	ldr	r2, [r3, #8]
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	1ad2      	subs	r2, r2, r3
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	68da      	ldr	r2, [r3, #12]
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	4293      	cmp	r3, r2
 800d142:	bf28      	it	cs
 800d144:	4613      	movcs	r3, r2
 800d146:	461a      	mov	r2, r3
 800d148:	6879      	ldr	r1, [r7, #4]
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f001 f9a2 	bl	800e494 <USBD_CtlContinueRx>
 800d150:	e07d      	b.n	800d24e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d158:	f003 031f 	and.w	r3, r3, #31
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d014      	beq.n	800d18a <USBD_LL_DataOutStage+0x98>
 800d160:	2b02      	cmp	r3, #2
 800d162:	d81d      	bhi.n	800d1a0 <USBD_LL_DataOutStage+0xae>
 800d164:	2b00      	cmp	r3, #0
 800d166:	d002      	beq.n	800d16e <USBD_LL_DataOutStage+0x7c>
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d003      	beq.n	800d174 <USBD_LL_DataOutStage+0x82>
 800d16c:	e018      	b.n	800d1a0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d16e:	2300      	movs	r3, #0
 800d170:	75bb      	strb	r3, [r7, #22]
            break;
 800d172:	e018      	b.n	800d1a6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	4619      	mov	r1, r3
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f000 fa64 	bl	800d64c <USBD_CoreFindIF>
 800d184:	4603      	mov	r3, r0
 800d186:	75bb      	strb	r3, [r7, #22]
            break;
 800d188:	e00d      	b.n	800d1a6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d190:	b2db      	uxtb	r3, r3
 800d192:	4619      	mov	r1, r3
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f000 fa66 	bl	800d666 <USBD_CoreFindEP>
 800d19a:	4603      	mov	r3, r0
 800d19c:	75bb      	strb	r3, [r7, #22]
            break;
 800d19e:	e002      	b.n	800d1a6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	75bb      	strb	r3, [r7, #22]
            break;
 800d1a4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d1a6:	7dbb      	ldrb	r3, [r7, #22]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d119      	bne.n	800d1e0 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b03      	cmp	r3, #3
 800d1b6:	d113      	bne.n	800d1e0 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d1b8:	7dba      	ldrb	r2, [r7, #22]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	32ae      	adds	r2, #174	@ 0xae
 800d1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00b      	beq.n	800d1e0 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d1c8:	7dba      	ldrb	r2, [r7, #22]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d1d0:	7dba      	ldrb	r2, [r7, #22]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	32ae      	adds	r2, #174	@ 0xae
 800d1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f001 f968 	bl	800e4b6 <USBD_CtlSendStatus>
 800d1e6:	e032      	b.n	800d24e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d1e8:	7afb      	ldrb	r3, [r7, #11]
 800d1ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	68f8      	ldr	r0, [r7, #12]
 800d1f4:	f000 fa37 	bl	800d666 <USBD_CoreFindEP>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1fc:	7dbb      	ldrb	r3, [r7, #22]
 800d1fe:	2bff      	cmp	r3, #255	@ 0xff
 800d200:	d025      	beq.n	800d24e <USBD_LL_DataOutStage+0x15c>
 800d202:	7dbb      	ldrb	r3, [r7, #22]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d122      	bne.n	800d24e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	2b03      	cmp	r3, #3
 800d212:	d117      	bne.n	800d244 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d214:	7dba      	ldrb	r2, [r7, #22]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	32ae      	adds	r2, #174	@ 0xae
 800d21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d21e:	699b      	ldr	r3, [r3, #24]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00f      	beq.n	800d244 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d224:	7dba      	ldrb	r2, [r7, #22]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d22c:	7dba      	ldrb	r2, [r7, #22]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	32ae      	adds	r2, #174	@ 0xae
 800d232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d236:	699b      	ldr	r3, [r3, #24]
 800d238:	7afa      	ldrb	r2, [r7, #11]
 800d23a:	4611      	mov	r1, r2
 800d23c:	68f8      	ldr	r0, [r7, #12]
 800d23e:	4798      	blx	r3
 800d240:	4603      	mov	r3, r0
 800d242:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d244:	7dfb      	ldrb	r3, [r7, #23]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d24a:	7dfb      	ldrb	r3, [r7, #23]
 800d24c:	e000      	b.n	800d250 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3718      	adds	r7, #24
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b086      	sub	sp, #24
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	460b      	mov	r3, r1
 800d262:	607a      	str	r2, [r7, #4]
 800d264:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d266:	7afb      	ldrb	r3, [r7, #11]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d16f      	bne.n	800d34c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	3314      	adds	r3, #20
 800d270:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d278:	2b02      	cmp	r3, #2
 800d27a:	d15a      	bne.n	800d332 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	689a      	ldr	r2, [r3, #8]
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	429a      	cmp	r2, r3
 800d286:	d914      	bls.n	800d2b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	689a      	ldr	r2, [r3, #8]
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	68db      	ldr	r3, [r3, #12]
 800d290:	1ad2      	subs	r2, r2, r3
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	461a      	mov	r2, r3
 800d29c:	6879      	ldr	r1, [r7, #4]
 800d29e:	68f8      	ldr	r0, [r7, #12]
 800d2a0:	f001 f8e7 	bl	800e472 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	68f8      	ldr	r0, [r7, #12]
 800d2ac:	f001 fdbd 	bl	800ee2a <USBD_LL_PrepareReceive>
 800d2b0:	e03f      	b.n	800d332 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	68da      	ldr	r2, [r3, #12]
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d11c      	bne.n	800d2f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	685a      	ldr	r2, [r3, #4]
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d316      	bcc.n	800d2f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	685a      	ldr	r2, [r3, #4]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d20f      	bcs.n	800d2f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d2d8:	2200      	movs	r2, #0
 800d2da:	2100      	movs	r1, #0
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f001 f8c8 	bl	800e472 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f001 fd9a 	bl	800ee2a <USBD_LL_PrepareReceive>
 800d2f6:	e01c      	b.n	800d332 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	2b03      	cmp	r3, #3
 800d302:	d10f      	bne.n	800d324 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d009      	beq.n	800d324 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2200      	movs	r2, #0
 800d314:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d324:	2180      	movs	r1, #128	@ 0x80
 800d326:	68f8      	ldr	r0, [r7, #12]
 800d328:	f001 fcd5 	bl	800ecd6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f001 f8d5 	bl	800e4dc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d03a      	beq.n	800d3b2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f7ff fe42 	bl	800cfc6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2200      	movs	r2, #0
 800d346:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d34a:	e032      	b.n	800d3b2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d34c:	7afb      	ldrb	r3, [r7, #11]
 800d34e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d352:	b2db      	uxtb	r3, r3
 800d354:	4619      	mov	r1, r3
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f000 f985 	bl	800d666 <USBD_CoreFindEP>
 800d35c:	4603      	mov	r3, r0
 800d35e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d360:	7dfb      	ldrb	r3, [r7, #23]
 800d362:	2bff      	cmp	r3, #255	@ 0xff
 800d364:	d025      	beq.n	800d3b2 <USBD_LL_DataInStage+0x15a>
 800d366:	7dfb      	ldrb	r3, [r7, #23]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d122      	bne.n	800d3b2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d372:	b2db      	uxtb	r3, r3
 800d374:	2b03      	cmp	r3, #3
 800d376:	d11c      	bne.n	800d3b2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d378:	7dfa      	ldrb	r2, [r7, #23]
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	32ae      	adds	r2, #174	@ 0xae
 800d37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d382:	695b      	ldr	r3, [r3, #20]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d014      	beq.n	800d3b2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d388:	7dfa      	ldrb	r2, [r7, #23]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d390:	7dfa      	ldrb	r2, [r7, #23]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	32ae      	adds	r2, #174	@ 0xae
 800d396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d39a:	695b      	ldr	r3, [r3, #20]
 800d39c:	7afa      	ldrb	r2, [r7, #11]
 800d39e:	4611      	mov	r1, r2
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	4798      	blx	r3
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d3a8:	7dbb      	ldrb	r3, [r7, #22]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d001      	beq.n	800d3b2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d3ae:	7dbb      	ldrb	r3, [r7, #22]
 800d3b0:	e000      	b.n	800d3b4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3718      	adds	r7, #24
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d014      	beq.n	800d422 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00e      	beq.n	800d422 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	687a      	ldr	r2, [r7, #4]
 800d40e:	6852      	ldr	r2, [r2, #4]
 800d410:	b2d2      	uxtb	r2, r2
 800d412:	4611      	mov	r1, r2
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	4798      	blx	r3
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d001      	beq.n	800d422 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d41e:	2303      	movs	r3, #3
 800d420:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d422:	2340      	movs	r3, #64	@ 0x40
 800d424:	2200      	movs	r2, #0
 800d426:	2100      	movs	r1, #0
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f001 fbf0 	bl	800ec0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2201      	movs	r2, #1
 800d432:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2240      	movs	r2, #64	@ 0x40
 800d43a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d43e:	2340      	movs	r3, #64	@ 0x40
 800d440:	2200      	movs	r2, #0
 800d442:	2180      	movs	r1, #128	@ 0x80
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f001 fbe2 	bl	800ec0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2201      	movs	r2, #1
 800d44e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2240      	movs	r2, #64	@ 0x40
 800d454:	621a      	str	r2, [r3, #32]

  return ret;
 800d456:	7bfb      	ldrb	r3, [r7, #15]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	460b      	mov	r3, r1
 800d46a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	78fa      	ldrb	r2, [r7, #3]
 800d470:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d472:	2300      	movs	r3, #0
}
 800d474:	4618      	mov	r0, r3
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	2b04      	cmp	r3, #4
 800d492:	d006      	beq.n	800d4a2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d49a:	b2da      	uxtb	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2204      	movs	r2, #4
 800d4a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d4aa:	2300      	movs	r3, #0
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	2b04      	cmp	r3, #4
 800d4ca:	d106      	bne.n	800d4da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d4d2:	b2da      	uxtb	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	370c      	adds	r7, #12
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	2b03      	cmp	r3, #3
 800d4fa:	d110      	bne.n	800d51e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00b      	beq.n	800d51e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d50c:	69db      	ldr	r3, [r3, #28]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d005      	beq.n	800d51e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d518:	69db      	ldr	r3, [r3, #28]
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d51e:	2300      	movs	r3, #0
}
 800d520:	4618      	mov	r0, r3
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	460b      	mov	r3, r1
 800d532:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	32ae      	adds	r2, #174	@ 0xae
 800d53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d101      	bne.n	800d54a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d546:	2303      	movs	r3, #3
 800d548:	e01c      	b.n	800d584 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b03      	cmp	r3, #3
 800d554:	d115      	bne.n	800d582 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	32ae      	adds	r2, #174	@ 0xae
 800d560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d564:	6a1b      	ldr	r3, [r3, #32]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00b      	beq.n	800d582 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	32ae      	adds	r2, #174	@ 0xae
 800d574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d578:	6a1b      	ldr	r3, [r3, #32]
 800d57a:	78fa      	ldrb	r2, [r7, #3]
 800d57c:	4611      	mov	r1, r2
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	460b      	mov	r3, r1
 800d596:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	32ae      	adds	r2, #174	@ 0xae
 800d5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d5aa:	2303      	movs	r3, #3
 800d5ac:	e01c      	b.n	800d5e8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	2b03      	cmp	r3, #3
 800d5b8:	d115      	bne.n	800d5e6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	32ae      	adds	r2, #174	@ 0xae
 800d5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00b      	beq.n	800d5e6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	32ae      	adds	r2, #174	@ 0xae
 800d5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5de:	78fa      	ldrb	r2, [r7, #3]
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d5e6:	2300      	movs	r3, #0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	370c      	adds	r7, #12
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b084      	sub	sp, #16
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d60e:	2300      	movs	r3, #0
 800d610:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2201      	movs	r2, #1
 800d616:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00e      	beq.n	800d642 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	6852      	ldr	r2, [r2, #4]
 800d630:	b2d2      	uxtb	r2, r2
 800d632:	4611      	mov	r1, r2
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	4798      	blx	r3
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d001      	beq.n	800d642 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d63e:	2303      	movs	r3, #3
 800d640:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d642:	7bfb      	ldrb	r3, [r7, #15]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	460b      	mov	r3, r1
 800d656:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d658:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d666:	b480      	push	{r7}
 800d668:	b083      	sub	sp, #12
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	460b      	mov	r3, r1
 800d670:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d672:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d674:	4618      	mov	r0, r3
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b086      	sub	sp, #24
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	460b      	mov	r3, r1
 800d68a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d694:	2300      	movs	r3, #0
 800d696:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	885b      	ldrh	r3, [r3, #2]
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	7812      	ldrb	r2, [r2, #0]
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d91f      	bls.n	800d6e6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d6ac:	e013      	b.n	800d6d6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d6ae:	f107 030a 	add.w	r3, r7, #10
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	6978      	ldr	r0, [r7, #20]
 800d6b6:	f000 f81b 	bl	800d6f0 <USBD_GetNextDesc>
 800d6ba:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	785b      	ldrb	r3, [r3, #1]
 800d6c0:	2b05      	cmp	r3, #5
 800d6c2:	d108      	bne.n	800d6d6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	789b      	ldrb	r3, [r3, #2]
 800d6cc:	78fa      	ldrb	r2, [r7, #3]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d008      	beq.n	800d6e4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	885b      	ldrh	r3, [r3, #2]
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	897b      	ldrh	r3, [r7, #10]
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d8e5      	bhi.n	800d6ae <USBD_GetEpDesc+0x2e>
 800d6e2:	e000      	b.n	800d6e6 <USBD_GetEpDesc+0x66>
          break;
 800d6e4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d6e6:	693b      	ldr	r3, [r7, #16]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3718      	adds	r7, #24
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	881b      	ldrh	r3, [r3, #0]
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	7812      	ldrb	r2, [r2, #0]
 800d706:	4413      	add	r3, r2
 800d708:	b29a      	uxth	r2, r3
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	461a      	mov	r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4413      	add	r3, r2
 800d718:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d71a:	68fb      	ldr	r3, [r7, #12]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3714      	adds	r7, #20
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d728:	b480      	push	{r7}
 800d72a:	b087      	sub	sp, #28
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	3301      	adds	r3, #1
 800d73e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d746:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d74a:	021b      	lsls	r3, r3, #8
 800d74c:	b21a      	sxth	r2, r3
 800d74e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d752:	4313      	orrs	r3, r2
 800d754:	b21b      	sxth	r3, r3
 800d756:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d758:	89fb      	ldrh	r3, [r7, #14]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	371c      	adds	r7, #28
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
	...

0800d768 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d77e:	2b40      	cmp	r3, #64	@ 0x40
 800d780:	d005      	beq.n	800d78e <USBD_StdDevReq+0x26>
 800d782:	2b40      	cmp	r3, #64	@ 0x40
 800d784:	d857      	bhi.n	800d836 <USBD_StdDevReq+0xce>
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00f      	beq.n	800d7aa <USBD_StdDevReq+0x42>
 800d78a:	2b20      	cmp	r3, #32
 800d78c:	d153      	bne.n	800d836 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	32ae      	adds	r2, #174	@ 0xae
 800d798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	6839      	ldr	r1, [r7, #0]
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	4798      	blx	r3
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800d7a8:	e04a      	b.n	800d840 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	785b      	ldrb	r3, [r3, #1]
 800d7ae:	2b09      	cmp	r3, #9
 800d7b0:	d83b      	bhi.n	800d82a <USBD_StdDevReq+0xc2>
 800d7b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d7b8 <USBD_StdDevReq+0x50>)
 800d7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b8:	0800d80d 	.word	0x0800d80d
 800d7bc:	0800d821 	.word	0x0800d821
 800d7c0:	0800d82b 	.word	0x0800d82b
 800d7c4:	0800d817 	.word	0x0800d817
 800d7c8:	0800d82b 	.word	0x0800d82b
 800d7cc:	0800d7eb 	.word	0x0800d7eb
 800d7d0:	0800d7e1 	.word	0x0800d7e1
 800d7d4:	0800d82b 	.word	0x0800d82b
 800d7d8:	0800d803 	.word	0x0800d803
 800d7dc:	0800d7f5 	.word	0x0800d7f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d7e0:	6839      	ldr	r1, [r7, #0]
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 fa3c 	bl	800dc60 <USBD_GetDescriptor>
          break;
 800d7e8:	e024      	b.n	800d834 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d7ea:	6839      	ldr	r1, [r7, #0]
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 fbcb 	bl	800df88 <USBD_SetAddress>
          break;
 800d7f2:	e01f      	b.n	800d834 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d7f4:	6839      	ldr	r1, [r7, #0]
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 fc0a 	bl	800e010 <USBD_SetConfig>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	73fb      	strb	r3, [r7, #15]
          break;
 800d800:	e018      	b.n	800d834 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d802:	6839      	ldr	r1, [r7, #0]
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 fcad 	bl	800e164 <USBD_GetConfig>
          break;
 800d80a:	e013      	b.n	800d834 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fcde 	bl	800e1d0 <USBD_GetStatus>
          break;
 800d814:	e00e      	b.n	800d834 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d816:	6839      	ldr	r1, [r7, #0]
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fd0d 	bl	800e238 <USBD_SetFeature>
          break;
 800d81e:	e009      	b.n	800d834 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d820:	6839      	ldr	r1, [r7, #0]
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 fd31 	bl	800e28a <USBD_ClrFeature>
          break;
 800d828:	e004      	b.n	800d834 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d82a:	6839      	ldr	r1, [r7, #0]
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 fd88 	bl	800e342 <USBD_CtlError>
          break;
 800d832:	bf00      	nop
      }
      break;
 800d834:	e004      	b.n	800d840 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d836:	6839      	ldr	r1, [r7, #0]
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 fd82 	bl	800e342 <USBD_CtlError>
      break;
 800d83e:	bf00      	nop
  }

  return ret;
 800d840:	7bfb      	ldrb	r3, [r7, #15]
}
 800d842:	4618      	mov	r0, r3
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop

0800d84c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d856:	2300      	movs	r3, #0
 800d858:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d862:	2b40      	cmp	r3, #64	@ 0x40
 800d864:	d005      	beq.n	800d872 <USBD_StdItfReq+0x26>
 800d866:	2b40      	cmp	r3, #64	@ 0x40
 800d868:	d852      	bhi.n	800d910 <USBD_StdItfReq+0xc4>
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d001      	beq.n	800d872 <USBD_StdItfReq+0x26>
 800d86e:	2b20      	cmp	r3, #32
 800d870:	d14e      	bne.n	800d910 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	3b01      	subs	r3, #1
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	d840      	bhi.n	800d902 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	889b      	ldrh	r3, [r3, #4]
 800d884:	b2db      	uxtb	r3, r3
 800d886:	2b01      	cmp	r3, #1
 800d888:	d836      	bhi.n	800d8f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	889b      	ldrh	r3, [r3, #4]
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	4619      	mov	r1, r3
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f7ff feda 	bl	800d64c <USBD_CoreFindIF>
 800d898:	4603      	mov	r3, r0
 800d89a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d89c:	7bbb      	ldrb	r3, [r7, #14]
 800d89e:	2bff      	cmp	r3, #255	@ 0xff
 800d8a0:	d01d      	beq.n	800d8de <USBD_StdItfReq+0x92>
 800d8a2:	7bbb      	ldrb	r3, [r7, #14]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d11a      	bne.n	800d8de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d8a8:	7bba      	ldrb	r2, [r7, #14]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	32ae      	adds	r2, #174	@ 0xae
 800d8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00f      	beq.n	800d8d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d8b8:	7bba      	ldrb	r2, [r7, #14]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d8c0:	7bba      	ldrb	r2, [r7, #14]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	32ae      	adds	r2, #174	@ 0xae
 800d8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ca:	689b      	ldr	r3, [r3, #8]
 800d8cc:	6839      	ldr	r1, [r7, #0]
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	4798      	blx	r3
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d8d6:	e004      	b.n	800d8e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d8dc:	e001      	b.n	800d8e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	88db      	ldrh	r3, [r3, #6]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d110      	bne.n	800d90c <USBD_StdItfReq+0xc0>
 800d8ea:	7bfb      	ldrb	r3, [r7, #15]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10d      	bne.n	800d90c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 fde0 	bl	800e4b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d8f6:	e009      	b.n	800d90c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fd21 	bl	800e342 <USBD_CtlError>
          break;
 800d900:	e004      	b.n	800d90c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d902:	6839      	ldr	r1, [r7, #0]
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 fd1c 	bl	800e342 <USBD_CtlError>
          break;
 800d90a:	e000      	b.n	800d90e <USBD_StdItfReq+0xc2>
          break;
 800d90c:	bf00      	nop
      }
      break;
 800d90e:	e004      	b.n	800d91a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d910:	6839      	ldr	r1, [r7, #0]
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 fd15 	bl	800e342 <USBD_CtlError>
      break;
 800d918:	bf00      	nop
  }

  return ret;
 800d91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d92e:	2300      	movs	r3, #0
 800d930:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	889b      	ldrh	r3, [r3, #4]
 800d936:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d940:	2b40      	cmp	r3, #64	@ 0x40
 800d942:	d007      	beq.n	800d954 <USBD_StdEPReq+0x30>
 800d944:	2b40      	cmp	r3, #64	@ 0x40
 800d946:	f200 817f 	bhi.w	800dc48 <USBD_StdEPReq+0x324>
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d02a      	beq.n	800d9a4 <USBD_StdEPReq+0x80>
 800d94e:	2b20      	cmp	r3, #32
 800d950:	f040 817a 	bne.w	800dc48 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d954:	7bbb      	ldrb	r3, [r7, #14]
 800d956:	4619      	mov	r1, r3
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7ff fe84 	bl	800d666 <USBD_CoreFindEP>
 800d95e:	4603      	mov	r3, r0
 800d960:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d962:	7b7b      	ldrb	r3, [r7, #13]
 800d964:	2bff      	cmp	r3, #255	@ 0xff
 800d966:	f000 8174 	beq.w	800dc52 <USBD_StdEPReq+0x32e>
 800d96a:	7b7b      	ldrb	r3, [r7, #13]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f040 8170 	bne.w	800dc52 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d972:	7b7a      	ldrb	r2, [r7, #13]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d97a:	7b7a      	ldrb	r2, [r7, #13]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	32ae      	adds	r2, #174	@ 0xae
 800d980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	2b00      	cmp	r3, #0
 800d988:	f000 8163 	beq.w	800dc52 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d98c:	7b7a      	ldrb	r2, [r7, #13]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	32ae      	adds	r2, #174	@ 0xae
 800d992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d996:	689b      	ldr	r3, [r3, #8]
 800d998:	6839      	ldr	r1, [r7, #0]
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	4798      	blx	r3
 800d99e:	4603      	mov	r3, r0
 800d9a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d9a2:	e156      	b.n	800dc52 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	785b      	ldrb	r3, [r3, #1]
 800d9a8:	2b03      	cmp	r3, #3
 800d9aa:	d008      	beq.n	800d9be <USBD_StdEPReq+0x9a>
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	f300 8145 	bgt.w	800dc3c <USBD_StdEPReq+0x318>
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	f000 809b 	beq.w	800daee <USBD_StdEPReq+0x1ca>
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d03c      	beq.n	800da36 <USBD_StdEPReq+0x112>
 800d9bc:	e13e      	b.n	800dc3c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	d002      	beq.n	800d9d0 <USBD_StdEPReq+0xac>
 800d9ca:	2b03      	cmp	r3, #3
 800d9cc:	d016      	beq.n	800d9fc <USBD_StdEPReq+0xd8>
 800d9ce:	e02c      	b.n	800da2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9d0:	7bbb      	ldrb	r3, [r7, #14]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00d      	beq.n	800d9f2 <USBD_StdEPReq+0xce>
 800d9d6:	7bbb      	ldrb	r3, [r7, #14]
 800d9d8:	2b80      	cmp	r3, #128	@ 0x80
 800d9da:	d00a      	beq.n	800d9f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9dc:	7bbb      	ldrb	r3, [r7, #14]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f001 f978 	bl	800ecd6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9e6:	2180      	movs	r1, #128	@ 0x80
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f001 f974 	bl	800ecd6 <USBD_LL_StallEP>
 800d9ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d9f0:	e020      	b.n	800da34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d9f2:	6839      	ldr	r1, [r7, #0]
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 fca4 	bl	800e342 <USBD_CtlError>
              break;
 800d9fa:	e01b      	b.n	800da34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	885b      	ldrh	r3, [r3, #2]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d10e      	bne.n	800da22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800da04:	7bbb      	ldrb	r3, [r7, #14]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00b      	beq.n	800da22 <USBD_StdEPReq+0xfe>
 800da0a:	7bbb      	ldrb	r3, [r7, #14]
 800da0c:	2b80      	cmp	r3, #128	@ 0x80
 800da0e:	d008      	beq.n	800da22 <USBD_StdEPReq+0xfe>
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	88db      	ldrh	r3, [r3, #6]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d104      	bne.n	800da22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800da18:	7bbb      	ldrb	r3, [r7, #14]
 800da1a:	4619      	mov	r1, r3
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f001 f95a 	bl	800ecd6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 fd47 	bl	800e4b6 <USBD_CtlSendStatus>

              break;
 800da28:	e004      	b.n	800da34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800da2a:	6839      	ldr	r1, [r7, #0]
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 fc88 	bl	800e342 <USBD_CtlError>
              break;
 800da32:	bf00      	nop
          }
          break;
 800da34:	e107      	b.n	800dc46 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	2b02      	cmp	r3, #2
 800da40:	d002      	beq.n	800da48 <USBD_StdEPReq+0x124>
 800da42:	2b03      	cmp	r3, #3
 800da44:	d016      	beq.n	800da74 <USBD_StdEPReq+0x150>
 800da46:	e04b      	b.n	800dae0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da48:	7bbb      	ldrb	r3, [r7, #14]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d00d      	beq.n	800da6a <USBD_StdEPReq+0x146>
 800da4e:	7bbb      	ldrb	r3, [r7, #14]
 800da50:	2b80      	cmp	r3, #128	@ 0x80
 800da52:	d00a      	beq.n	800da6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da54:	7bbb      	ldrb	r3, [r7, #14]
 800da56:	4619      	mov	r1, r3
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f001 f93c 	bl	800ecd6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da5e:	2180      	movs	r1, #128	@ 0x80
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f001 f938 	bl	800ecd6 <USBD_LL_StallEP>
 800da66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da68:	e040      	b.n	800daec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800da6a:	6839      	ldr	r1, [r7, #0]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 fc68 	bl	800e342 <USBD_CtlError>
              break;
 800da72:	e03b      	b.n	800daec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	885b      	ldrh	r3, [r3, #2]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d136      	bne.n	800daea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800da7c:	7bbb      	ldrb	r3, [r7, #14]
 800da7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da82:	2b00      	cmp	r3, #0
 800da84:	d004      	beq.n	800da90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800da86:	7bbb      	ldrb	r3, [r7, #14]
 800da88:	4619      	mov	r1, r3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f001 f942 	bl	800ed14 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 fd10 	bl	800e4b6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800da96:	7bbb      	ldrb	r3, [r7, #14]
 800da98:	4619      	mov	r1, r3
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7ff fde3 	bl	800d666 <USBD_CoreFindEP>
 800daa0:	4603      	mov	r3, r0
 800daa2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800daa4:	7b7b      	ldrb	r3, [r7, #13]
 800daa6:	2bff      	cmp	r3, #255	@ 0xff
 800daa8:	d01f      	beq.n	800daea <USBD_StdEPReq+0x1c6>
 800daaa:	7b7b      	ldrb	r3, [r7, #13]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d11c      	bne.n	800daea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dab0:	7b7a      	ldrb	r2, [r7, #13]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dab8:	7b7a      	ldrb	r2, [r7, #13]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	32ae      	adds	r2, #174	@ 0xae
 800dabe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d010      	beq.n	800daea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dac8:	7b7a      	ldrb	r2, [r7, #13]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	32ae      	adds	r2, #174	@ 0xae
 800dace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad2:	689b      	ldr	r3, [r3, #8]
 800dad4:	6839      	ldr	r1, [r7, #0]
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	4798      	blx	r3
 800dada:	4603      	mov	r3, r0
 800dadc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dade:	e004      	b.n	800daea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dae0:	6839      	ldr	r1, [r7, #0]
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 fc2d 	bl	800e342 <USBD_CtlError>
              break;
 800dae8:	e000      	b.n	800daec <USBD_StdEPReq+0x1c8>
              break;
 800daea:	bf00      	nop
          }
          break;
 800daec:	e0ab      	b.n	800dc46 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	d002      	beq.n	800db00 <USBD_StdEPReq+0x1dc>
 800dafa:	2b03      	cmp	r3, #3
 800dafc:	d032      	beq.n	800db64 <USBD_StdEPReq+0x240>
 800dafe:	e097      	b.n	800dc30 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db00:	7bbb      	ldrb	r3, [r7, #14]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d007      	beq.n	800db16 <USBD_StdEPReq+0x1f2>
 800db06:	7bbb      	ldrb	r3, [r7, #14]
 800db08:	2b80      	cmp	r3, #128	@ 0x80
 800db0a:	d004      	beq.n	800db16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800db0c:	6839      	ldr	r1, [r7, #0]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 fc17 	bl	800e342 <USBD_CtlError>
                break;
 800db14:	e091      	b.n	800dc3a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	da0b      	bge.n	800db36 <USBD_StdEPReq+0x212>
 800db1e:	7bbb      	ldrb	r3, [r7, #14]
 800db20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db24:	4613      	mov	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4413      	add	r3, r2
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	3310      	adds	r3, #16
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	4413      	add	r3, r2
 800db32:	3304      	adds	r3, #4
 800db34:	e00b      	b.n	800db4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db36:	7bbb      	ldrb	r3, [r7, #14]
 800db38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db3c:	4613      	mov	r3, r2
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	4413      	add	r3, r2
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	4413      	add	r3, r2
 800db4c:	3304      	adds	r3, #4
 800db4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	2200      	movs	r2, #0
 800db54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	2202      	movs	r2, #2
 800db5a:	4619      	mov	r1, r3
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fc6d 	bl	800e43c <USBD_CtlSendData>
              break;
 800db62:	e06a      	b.n	800dc3a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800db64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	da11      	bge.n	800db90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800db6c:	7bbb      	ldrb	r3, [r7, #14]
 800db6e:	f003 020f 	and.w	r2, r3, #15
 800db72:	6879      	ldr	r1, [r7, #4]
 800db74:	4613      	mov	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	4413      	add	r3, r2
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	440b      	add	r3, r1
 800db7e:	3324      	adds	r3, #36	@ 0x24
 800db80:	881b      	ldrh	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d117      	bne.n	800dbb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800db86:	6839      	ldr	r1, [r7, #0]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 fbda 	bl	800e342 <USBD_CtlError>
                  break;
 800db8e:	e054      	b.n	800dc3a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800db90:	7bbb      	ldrb	r3, [r7, #14]
 800db92:	f003 020f 	and.w	r2, r3, #15
 800db96:	6879      	ldr	r1, [r7, #4]
 800db98:	4613      	mov	r3, r2
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	4413      	add	r3, r2
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	440b      	add	r3, r1
 800dba2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dba6:	881b      	ldrh	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d104      	bne.n	800dbb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dbac:	6839      	ldr	r1, [r7, #0]
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 fbc7 	bl	800e342 <USBD_CtlError>
                  break;
 800dbb4:	e041      	b.n	800dc3a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	da0b      	bge.n	800dbd6 <USBD_StdEPReq+0x2b2>
 800dbbe:	7bbb      	ldrb	r3, [r7, #14]
 800dbc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	4413      	add	r3, r2
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	3310      	adds	r3, #16
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	e00b      	b.n	800dbee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dbd6:	7bbb      	ldrb	r3, [r7, #14]
 800dbd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dbdc:	4613      	mov	r3, r2
 800dbde:	009b      	lsls	r3, r3, #2
 800dbe0:	4413      	add	r3, r2
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	4413      	add	r3, r2
 800dbec:	3304      	adds	r3, #4
 800dbee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dbf0:	7bbb      	ldrb	r3, [r7, #14]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d002      	beq.n	800dbfc <USBD_StdEPReq+0x2d8>
 800dbf6:	7bbb      	ldrb	r3, [r7, #14]
 800dbf8:	2b80      	cmp	r3, #128	@ 0x80
 800dbfa:	d103      	bne.n	800dc04 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	e00e      	b.n	800dc22 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dc04:	7bbb      	ldrb	r3, [r7, #14]
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f001 f8a2 	bl	800ed52 <USBD_LL_IsStallEP>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d003      	beq.n	800dc1c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	2201      	movs	r2, #1
 800dc18:	601a      	str	r2, [r3, #0]
 800dc1a:	e002      	b.n	800dc22 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2202      	movs	r2, #2
 800dc26:	4619      	mov	r1, r3
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 fc07 	bl	800e43c <USBD_CtlSendData>
              break;
 800dc2e:	e004      	b.n	800dc3a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dc30:	6839      	ldr	r1, [r7, #0]
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 fb85 	bl	800e342 <USBD_CtlError>
              break;
 800dc38:	bf00      	nop
          }
          break;
 800dc3a:	e004      	b.n	800dc46 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dc3c:	6839      	ldr	r1, [r7, #0]
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 fb7f 	bl	800e342 <USBD_CtlError>
          break;
 800dc44:	bf00      	nop
      }
      break;
 800dc46:	e005      	b.n	800dc54 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dc48:	6839      	ldr	r1, [r7, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fb79 	bl	800e342 <USBD_CtlError>
      break;
 800dc50:	e000      	b.n	800dc54 <USBD_StdEPReq+0x330>
      break;
 800dc52:	bf00      	nop
  }

  return ret;
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
	...

0800dc60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dc72:	2300      	movs	r3, #0
 800dc74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	885b      	ldrh	r3, [r3, #2]
 800dc7a:	0a1b      	lsrs	r3, r3, #8
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	3b01      	subs	r3, #1
 800dc80:	2b0e      	cmp	r3, #14
 800dc82:	f200 8152 	bhi.w	800df2a <USBD_GetDescriptor+0x2ca>
 800dc86:	a201      	add	r2, pc, #4	@ (adr r2, 800dc8c <USBD_GetDescriptor+0x2c>)
 800dc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc8c:	0800dcfd 	.word	0x0800dcfd
 800dc90:	0800dd15 	.word	0x0800dd15
 800dc94:	0800dd55 	.word	0x0800dd55
 800dc98:	0800df2b 	.word	0x0800df2b
 800dc9c:	0800df2b 	.word	0x0800df2b
 800dca0:	0800decb 	.word	0x0800decb
 800dca4:	0800def7 	.word	0x0800def7
 800dca8:	0800df2b 	.word	0x0800df2b
 800dcac:	0800df2b 	.word	0x0800df2b
 800dcb0:	0800df2b 	.word	0x0800df2b
 800dcb4:	0800df2b 	.word	0x0800df2b
 800dcb8:	0800df2b 	.word	0x0800df2b
 800dcbc:	0800df2b 	.word	0x0800df2b
 800dcc0:	0800df2b 	.word	0x0800df2b
 800dcc4:	0800dcc9 	.word	0x0800dcc9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dcce:	69db      	ldr	r3, [r3, #28]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d00b      	beq.n	800dcec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dcda:	69db      	ldr	r3, [r3, #28]
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	7c12      	ldrb	r2, [r2, #16]
 800dce0:	f107 0108 	add.w	r1, r7, #8
 800dce4:	4610      	mov	r0, r2
 800dce6:	4798      	blx	r3
 800dce8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dcea:	e126      	b.n	800df3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dcec:	6839      	ldr	r1, [r7, #0]
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 fb27 	bl	800e342 <USBD_CtlError>
        err++;
 800dcf4:	7afb      	ldrb	r3, [r7, #11]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	72fb      	strb	r3, [r7, #11]
      break;
 800dcfa:	e11e      	b.n	800df3a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	7c12      	ldrb	r2, [r2, #16]
 800dd08:	f107 0108 	add.w	r1, r7, #8
 800dd0c:	4610      	mov	r0, r2
 800dd0e:	4798      	blx	r3
 800dd10:	60f8      	str	r0, [r7, #12]
      break;
 800dd12:	e112      	b.n	800df3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	7c1b      	ldrb	r3, [r3, #16]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d10d      	bne.n	800dd38 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd24:	f107 0208 	add.w	r2, r7, #8
 800dd28:	4610      	mov	r0, r2
 800dd2a:	4798      	blx	r3
 800dd2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	3301      	adds	r3, #1
 800dd32:	2202      	movs	r2, #2
 800dd34:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dd36:	e100      	b.n	800df3a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd40:	f107 0208 	add.w	r2, r7, #8
 800dd44:	4610      	mov	r0, r2
 800dd46:	4798      	blx	r3
 800dd48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	2202      	movs	r2, #2
 800dd50:	701a      	strb	r2, [r3, #0]
      break;
 800dd52:	e0f2      	b.n	800df3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	885b      	ldrh	r3, [r3, #2]
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	2b05      	cmp	r3, #5
 800dd5c:	f200 80ac 	bhi.w	800deb8 <USBD_GetDescriptor+0x258>
 800dd60:	a201      	add	r2, pc, #4	@ (adr r2, 800dd68 <USBD_GetDescriptor+0x108>)
 800dd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd66:	bf00      	nop
 800dd68:	0800dd81 	.word	0x0800dd81
 800dd6c:	0800ddb5 	.word	0x0800ddb5
 800dd70:	0800dde9 	.word	0x0800dde9
 800dd74:	0800de1d 	.word	0x0800de1d
 800dd78:	0800de51 	.word	0x0800de51
 800dd7c:	0800de85 	.word	0x0800de85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00b      	beq.n	800dda4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	7c12      	ldrb	r2, [r2, #16]
 800dd98:	f107 0108 	add.w	r1, r7, #8
 800dd9c:	4610      	mov	r0, r2
 800dd9e:	4798      	blx	r3
 800dda0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dda2:	e091      	b.n	800dec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dda4:	6839      	ldr	r1, [r7, #0]
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 facb 	bl	800e342 <USBD_CtlError>
            err++;
 800ddac:	7afb      	ldrb	r3, [r7, #11]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	72fb      	strb	r3, [r7, #11]
          break;
 800ddb2:	e089      	b.n	800dec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d00b      	beq.n	800ddd8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	7c12      	ldrb	r2, [r2, #16]
 800ddcc:	f107 0108 	add.w	r1, r7, #8
 800ddd0:	4610      	mov	r0, r2
 800ddd2:	4798      	blx	r3
 800ddd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddd6:	e077      	b.n	800dec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ddd8:	6839      	ldr	r1, [r7, #0]
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 fab1 	bl	800e342 <USBD_CtlError>
            err++;
 800dde0:	7afb      	ldrb	r3, [r7, #11]
 800dde2:	3301      	adds	r3, #1
 800dde4:	72fb      	strb	r3, [r7, #11]
          break;
 800dde6:	e06f      	b.n	800dec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d00b      	beq.n	800de0c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	7c12      	ldrb	r2, [r2, #16]
 800de00:	f107 0108 	add.w	r1, r7, #8
 800de04:	4610      	mov	r0, r2
 800de06:	4798      	blx	r3
 800de08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de0a:	e05d      	b.n	800dec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de0c:	6839      	ldr	r1, [r7, #0]
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fa97 	bl	800e342 <USBD_CtlError>
            err++;
 800de14:	7afb      	ldrb	r3, [r7, #11]
 800de16:	3301      	adds	r3, #1
 800de18:	72fb      	strb	r3, [r7, #11]
          break;
 800de1a:	e055      	b.n	800dec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de22:	691b      	ldr	r3, [r3, #16]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00b      	beq.n	800de40 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de2e:	691b      	ldr	r3, [r3, #16]
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	7c12      	ldrb	r2, [r2, #16]
 800de34:	f107 0108 	add.w	r1, r7, #8
 800de38:	4610      	mov	r0, r2
 800de3a:	4798      	blx	r3
 800de3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de3e:	e043      	b.n	800dec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de40:	6839      	ldr	r1, [r7, #0]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fa7d 	bl	800e342 <USBD_CtlError>
            err++;
 800de48:	7afb      	ldrb	r3, [r7, #11]
 800de4a:	3301      	adds	r3, #1
 800de4c:	72fb      	strb	r3, [r7, #11]
          break;
 800de4e:	e03b      	b.n	800dec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de56:	695b      	ldr	r3, [r3, #20]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00b      	beq.n	800de74 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de62:	695b      	ldr	r3, [r3, #20]
 800de64:	687a      	ldr	r2, [r7, #4]
 800de66:	7c12      	ldrb	r2, [r2, #16]
 800de68:	f107 0108 	add.w	r1, r7, #8
 800de6c:	4610      	mov	r0, r2
 800de6e:	4798      	blx	r3
 800de70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de72:	e029      	b.n	800dec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de74:	6839      	ldr	r1, [r7, #0]
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 fa63 	bl	800e342 <USBD_CtlError>
            err++;
 800de7c:	7afb      	ldrb	r3, [r7, #11]
 800de7e:	3301      	adds	r3, #1
 800de80:	72fb      	strb	r3, [r7, #11]
          break;
 800de82:	e021      	b.n	800dec8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d00b      	beq.n	800dea8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de96:	699b      	ldr	r3, [r3, #24]
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	7c12      	ldrb	r2, [r2, #16]
 800de9c:	f107 0108 	add.w	r1, r7, #8
 800dea0:	4610      	mov	r0, r2
 800dea2:	4798      	blx	r3
 800dea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dea6:	e00f      	b.n	800dec8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dea8:	6839      	ldr	r1, [r7, #0]
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fa49 	bl	800e342 <USBD_CtlError>
            err++;
 800deb0:	7afb      	ldrb	r3, [r7, #11]
 800deb2:	3301      	adds	r3, #1
 800deb4:	72fb      	strb	r3, [r7, #11]
          break;
 800deb6:	e007      	b.n	800dec8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800deb8:	6839      	ldr	r1, [r7, #0]
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f000 fa41 	bl	800e342 <USBD_CtlError>
          err++;
 800dec0:	7afb      	ldrb	r3, [r7, #11]
 800dec2:	3301      	adds	r3, #1
 800dec4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dec6:	bf00      	nop
      }
      break;
 800dec8:	e037      	b.n	800df3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	7c1b      	ldrb	r3, [r3, #16]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d109      	bne.n	800dee6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ded8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deda:	f107 0208 	add.w	r2, r7, #8
 800dede:	4610      	mov	r0, r2
 800dee0:	4798      	blx	r3
 800dee2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dee4:	e029      	b.n	800df3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dee6:	6839      	ldr	r1, [r7, #0]
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fa2a 	bl	800e342 <USBD_CtlError>
        err++;
 800deee:	7afb      	ldrb	r3, [r7, #11]
 800def0:	3301      	adds	r3, #1
 800def2:	72fb      	strb	r3, [r7, #11]
      break;
 800def4:	e021      	b.n	800df3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	7c1b      	ldrb	r3, [r3, #16]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d10d      	bne.n	800df1a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df06:	f107 0208 	add.w	r2, r7, #8
 800df0a:	4610      	mov	r0, r2
 800df0c:	4798      	blx	r3
 800df0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	3301      	adds	r3, #1
 800df14:	2207      	movs	r2, #7
 800df16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df18:	e00f      	b.n	800df3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fa10 	bl	800e342 <USBD_CtlError>
        err++;
 800df22:	7afb      	ldrb	r3, [r7, #11]
 800df24:	3301      	adds	r3, #1
 800df26:	72fb      	strb	r3, [r7, #11]
      break;
 800df28:	e007      	b.n	800df3a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800df2a:	6839      	ldr	r1, [r7, #0]
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 fa08 	bl	800e342 <USBD_CtlError>
      err++;
 800df32:	7afb      	ldrb	r3, [r7, #11]
 800df34:	3301      	adds	r3, #1
 800df36:	72fb      	strb	r3, [r7, #11]
      break;
 800df38:	bf00      	nop
  }

  if (err != 0U)
 800df3a:	7afb      	ldrb	r3, [r7, #11]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d11e      	bne.n	800df7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	88db      	ldrh	r3, [r3, #6]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d016      	beq.n	800df76 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800df48:	893b      	ldrh	r3, [r7, #8]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d00e      	beq.n	800df6c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	88da      	ldrh	r2, [r3, #6]
 800df52:	893b      	ldrh	r3, [r7, #8]
 800df54:	4293      	cmp	r3, r2
 800df56:	bf28      	it	cs
 800df58:	4613      	movcs	r3, r2
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800df5e:	893b      	ldrh	r3, [r7, #8]
 800df60:	461a      	mov	r2, r3
 800df62:	68f9      	ldr	r1, [r7, #12]
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f000 fa69 	bl	800e43c <USBD_CtlSendData>
 800df6a:	e009      	b.n	800df80 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800df6c:	6839      	ldr	r1, [r7, #0]
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 f9e7 	bl	800e342 <USBD_CtlError>
 800df74:	e004      	b.n	800df80 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 fa9d 	bl	800e4b6 <USBD_CtlSendStatus>
 800df7c:	e000      	b.n	800df80 <USBD_GetDescriptor+0x320>
    return;
 800df7e:	bf00      	nop
  }
}
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop

0800df88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	889b      	ldrh	r3, [r3, #4]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d131      	bne.n	800dffe <USBD_SetAddress+0x76>
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	88db      	ldrh	r3, [r3, #6]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d12d      	bne.n	800dffe <USBD_SetAddress+0x76>
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	885b      	ldrh	r3, [r3, #2]
 800dfa6:	2b7f      	cmp	r3, #127	@ 0x7f
 800dfa8:	d829      	bhi.n	800dffe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	885b      	ldrh	r3, [r3, #2]
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	2b03      	cmp	r3, #3
 800dfc0:	d104      	bne.n	800dfcc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dfc2:	6839      	ldr	r1, [r7, #0]
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 f9bc 	bl	800e342 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfca:	e01d      	b.n	800e008 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	7bfa      	ldrb	r2, [r7, #15]
 800dfd0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dfd4:	7bfb      	ldrb	r3, [r7, #15]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 fee6 	bl	800edaa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 fa69 	bl	800e4b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dfe4:	7bfb      	ldrb	r3, [r7, #15]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d004      	beq.n	800dff4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2202      	movs	r2, #2
 800dfee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dff2:	e009      	b.n	800e008 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dffc:	e004      	b.n	800e008 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dffe:	6839      	ldr	r1, [r7, #0]
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f000 f99e 	bl	800e342 <USBD_CtlError>
  }
}
 800e006:	bf00      	nop
 800e008:	bf00      	nop
 800e00a:	3710      	adds	r7, #16
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e01a:	2300      	movs	r3, #0
 800e01c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	885b      	ldrh	r3, [r3, #2]
 800e022:	b2da      	uxtb	r2, r3
 800e024:	4b4e      	ldr	r3, [pc, #312]	@ (800e160 <USBD_SetConfig+0x150>)
 800e026:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e028:	4b4d      	ldr	r3, [pc, #308]	@ (800e160 <USBD_SetConfig+0x150>)
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d905      	bls.n	800e03c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e030:	6839      	ldr	r1, [r7, #0]
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 f985 	bl	800e342 <USBD_CtlError>
    return USBD_FAIL;
 800e038:	2303      	movs	r3, #3
 800e03a:	e08c      	b.n	800e156 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e042:	b2db      	uxtb	r3, r3
 800e044:	2b02      	cmp	r3, #2
 800e046:	d002      	beq.n	800e04e <USBD_SetConfig+0x3e>
 800e048:	2b03      	cmp	r3, #3
 800e04a:	d029      	beq.n	800e0a0 <USBD_SetConfig+0x90>
 800e04c:	e075      	b.n	800e13a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e04e:	4b44      	ldr	r3, [pc, #272]	@ (800e160 <USBD_SetConfig+0x150>)
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d020      	beq.n	800e098 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e056:	4b42      	ldr	r3, [pc, #264]	@ (800e160 <USBD_SetConfig+0x150>)
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	461a      	mov	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e060:	4b3f      	ldr	r3, [pc, #252]	@ (800e160 <USBD_SetConfig+0x150>)
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	4619      	mov	r1, r3
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7fe ffb8 	bl	800cfdc <USBD_SetClassConfig>
 800e06c:	4603      	mov	r3, r0
 800e06e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e070:	7bfb      	ldrb	r3, [r7, #15]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d008      	beq.n	800e088 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e076:	6839      	ldr	r1, [r7, #0]
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 f962 	bl	800e342 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2202      	movs	r2, #2
 800e082:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e086:	e065      	b.n	800e154 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 fa14 	bl	800e4b6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2203      	movs	r2, #3
 800e092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e096:	e05d      	b.n	800e154 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 fa0c 	bl	800e4b6 <USBD_CtlSendStatus>
      break;
 800e09e:	e059      	b.n	800e154 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e0a0:	4b2f      	ldr	r3, [pc, #188]	@ (800e160 <USBD_SetConfig+0x150>)
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d112      	bne.n	800e0ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2202      	movs	r2, #2
 800e0ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e0b0:	4b2b      	ldr	r3, [pc, #172]	@ (800e160 <USBD_SetConfig+0x150>)
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e0ba:	4b29      	ldr	r3, [pc, #164]	@ (800e160 <USBD_SetConfig+0x150>)
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7fe ffa7 	bl	800d014 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f9f5 	bl	800e4b6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e0cc:	e042      	b.n	800e154 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e0ce:	4b24      	ldr	r3, [pc, #144]	@ (800e160 <USBD_SetConfig+0x150>)
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d02a      	beq.n	800e132 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f7fe ff95 	bl	800d014 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e0ea:	4b1d      	ldr	r3, [pc, #116]	@ (800e160 <USBD_SetConfig+0x150>)
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e0f4:	4b1a      	ldr	r3, [pc, #104]	@ (800e160 <USBD_SetConfig+0x150>)
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f7fe ff6e 	bl	800cfdc <USBD_SetClassConfig>
 800e100:	4603      	mov	r3, r0
 800e102:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e104:	7bfb      	ldrb	r3, [r7, #15]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d00f      	beq.n	800e12a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e10a:	6839      	ldr	r1, [r7, #0]
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f000 f918 	bl	800e342 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	b2db      	uxtb	r3, r3
 800e118:	4619      	mov	r1, r3
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7fe ff7a 	bl	800d014 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2202      	movs	r2, #2
 800e124:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e128:	e014      	b.n	800e154 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 f9c3 	bl	800e4b6 <USBD_CtlSendStatus>
      break;
 800e130:	e010      	b.n	800e154 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f9bf 	bl	800e4b6 <USBD_CtlSendStatus>
      break;
 800e138:	e00c      	b.n	800e154 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 f900 	bl	800e342 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e142:	4b07      	ldr	r3, [pc, #28]	@ (800e160 <USBD_SetConfig+0x150>)
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	4619      	mov	r1, r3
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7fe ff63 	bl	800d014 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e14e:	2303      	movs	r3, #3
 800e150:	73fb      	strb	r3, [r7, #15]
      break;
 800e152:	bf00      	nop
  }

  return ret;
 800e154:	7bfb      	ldrb	r3, [r7, #15]
}
 800e156:	4618      	mov	r0, r3
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	bf00      	nop
 800e160:	24000544 	.word	0x24000544

0800e164 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	88db      	ldrh	r3, [r3, #6]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d004      	beq.n	800e180 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e176:	6839      	ldr	r1, [r7, #0]
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f000 f8e2 	bl	800e342 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e17e:	e023      	b.n	800e1c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e186:	b2db      	uxtb	r3, r3
 800e188:	2b02      	cmp	r3, #2
 800e18a:	dc02      	bgt.n	800e192 <USBD_GetConfig+0x2e>
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	dc03      	bgt.n	800e198 <USBD_GetConfig+0x34>
 800e190:	e015      	b.n	800e1be <USBD_GetConfig+0x5a>
 800e192:	2b03      	cmp	r3, #3
 800e194:	d00b      	beq.n	800e1ae <USBD_GetConfig+0x4a>
 800e196:	e012      	b.n	800e1be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	3308      	adds	r3, #8
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 f948 	bl	800e43c <USBD_CtlSendData>
        break;
 800e1ac:	e00c      	b.n	800e1c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	3304      	adds	r3, #4
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 f940 	bl	800e43c <USBD_CtlSendData>
        break;
 800e1bc:	e004      	b.n	800e1c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e1be:	6839      	ldr	r1, [r7, #0]
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 f8be 	bl	800e342 <USBD_CtlError>
        break;
 800e1c6:	bf00      	nop
}
 800e1c8:	bf00      	nop
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	2b02      	cmp	r3, #2
 800e1e6:	d81e      	bhi.n	800e226 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	88db      	ldrh	r3, [r3, #6]
 800e1ec:	2b02      	cmp	r3, #2
 800e1ee:	d004      	beq.n	800e1fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e1f0:	6839      	ldr	r1, [r7, #0]
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 f8a5 	bl	800e342 <USBD_CtlError>
        break;
 800e1f8:	e01a      	b.n	800e230 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e206:	2b00      	cmp	r3, #0
 800e208:	d005      	beq.n	800e216 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	f043 0202 	orr.w	r2, r3, #2
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	330c      	adds	r3, #12
 800e21a:	2202      	movs	r2, #2
 800e21c:	4619      	mov	r1, r3
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 f90c 	bl	800e43c <USBD_CtlSendData>
      break;
 800e224:	e004      	b.n	800e230 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e226:	6839      	ldr	r1, [r7, #0]
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 f88a 	bl	800e342 <USBD_CtlError>
      break;
 800e22e:	bf00      	nop
  }
}
 800e230:	bf00      	nop
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	885b      	ldrh	r3, [r3, #2]
 800e246:	2b01      	cmp	r3, #1
 800e248:	d107      	bne.n	800e25a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2201      	movs	r2, #1
 800e24e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 f92f 	bl	800e4b6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e258:	e013      	b.n	800e282 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	885b      	ldrh	r3, [r3, #2]
 800e25e:	2b02      	cmp	r3, #2
 800e260:	d10b      	bne.n	800e27a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	889b      	ldrh	r3, [r3, #4]
 800e266:	0a1b      	lsrs	r3, r3, #8
 800e268:	b29b      	uxth	r3, r3
 800e26a:	b2da      	uxtb	r2, r3
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 f91f 	bl	800e4b6 <USBD_CtlSendStatus>
}
 800e278:	e003      	b.n	800e282 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e27a:	6839      	ldr	r1, [r7, #0]
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 f860 	bl	800e342 <USBD_CtlError>
}
 800e282:	bf00      	nop
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b082      	sub	sp, #8
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
 800e292:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	3b01      	subs	r3, #1
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	d80b      	bhi.n	800e2ba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	885b      	ldrh	r3, [r3, #2]
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d10c      	bne.n	800e2c4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 f8ff 	bl	800e4b6 <USBD_CtlSendStatus>
      }
      break;
 800e2b8:	e004      	b.n	800e2c4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 f840 	bl	800e342 <USBD_CtlError>
      break;
 800e2c2:	e000      	b.n	800e2c6 <USBD_ClrFeature+0x3c>
      break;
 800e2c4:	bf00      	nop
  }
}
 800e2c6:	bf00      	nop
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b084      	sub	sp, #16
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
 800e2d6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	781a      	ldrb	r2, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	781a      	ldrb	r2, [r3, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f7ff fa15 	bl	800d728 <SWAPBYTE>
 800e2fe:	4603      	mov	r3, r0
 800e300:	461a      	mov	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	3301      	adds	r3, #1
 800e30a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	3301      	adds	r3, #1
 800e310:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f7ff fa08 	bl	800d728 <SWAPBYTE>
 800e318:	4603      	mov	r3, r0
 800e31a:	461a      	mov	r2, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	3301      	adds	r3, #1
 800e324:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	3301      	adds	r3, #1
 800e32a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e32c:	68f8      	ldr	r0, [r7, #12]
 800e32e:	f7ff f9fb 	bl	800d728 <SWAPBYTE>
 800e332:	4603      	mov	r3, r0
 800e334:	461a      	mov	r2, r3
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	80da      	strh	r2, [r3, #6]
}
 800e33a:	bf00      	nop
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b082      	sub	sp, #8
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e34c:	2180      	movs	r1, #128	@ 0x80
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 fcc1 	bl	800ecd6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e354:	2100      	movs	r1, #0
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 fcbd 	bl	800ecd6 <USBD_LL_StallEP>
}
 800e35c:	bf00      	nop
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b086      	sub	sp, #24
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e370:	2300      	movs	r3, #0
 800e372:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d042      	beq.n	800e400 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e37e:	6938      	ldr	r0, [r7, #16]
 800e380:	f000 f842 	bl	800e408 <USBD_GetLen>
 800e384:	4603      	mov	r3, r0
 800e386:	3301      	adds	r3, #1
 800e388:	005b      	lsls	r3, r3, #1
 800e38a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e38e:	d808      	bhi.n	800e3a2 <USBD_GetString+0x3e>
 800e390:	6938      	ldr	r0, [r7, #16]
 800e392:	f000 f839 	bl	800e408 <USBD_GetLen>
 800e396:	4603      	mov	r3, r0
 800e398:	3301      	adds	r3, #1
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	005b      	lsls	r3, r3, #1
 800e39e:	b29a      	uxth	r2, r3
 800e3a0:	e001      	b.n	800e3a6 <USBD_GetString+0x42>
 800e3a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e3aa:	7dfb      	ldrb	r3, [r7, #23]
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	4413      	add	r3, r2
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	7812      	ldrb	r2, [r2, #0]
 800e3b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e3b6:	7dfb      	ldrb	r3, [r7, #23]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e3bc:	7dfb      	ldrb	r3, [r7, #23]
 800e3be:	68ba      	ldr	r2, [r7, #8]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	2203      	movs	r2, #3
 800e3c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e3c6:	7dfb      	ldrb	r3, [r7, #23]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e3cc:	e013      	b.n	800e3f6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e3ce:	7dfb      	ldrb	r3, [r7, #23]
 800e3d0:	68ba      	ldr	r2, [r7, #8]
 800e3d2:	4413      	add	r3, r2
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	7812      	ldrb	r2, [r2, #0]
 800e3d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	613b      	str	r3, [r7, #16]
    idx++;
 800e3e0:	7dfb      	ldrb	r3, [r7, #23]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e3e6:	7dfb      	ldrb	r3, [r7, #23]
 800e3e8:	68ba      	ldr	r2, [r7, #8]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	701a      	strb	r2, [r3, #0]
    idx++;
 800e3f0:	7dfb      	ldrb	r3, [r7, #23]
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d1e7      	bne.n	800e3ce <USBD_GetString+0x6a>
 800e3fe:	e000      	b.n	800e402 <USBD_GetString+0x9e>
    return;
 800e400:	bf00      	nop
  }
}
 800e402:	3718      	adds	r7, #24
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e410:	2300      	movs	r3, #0
 800e412:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e418:	e005      	b.n	800e426 <USBD_GetLen+0x1e>
  {
    len++;
 800e41a:	7bfb      	ldrb	r3, [r7, #15]
 800e41c:	3301      	adds	r3, #1
 800e41e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	3301      	adds	r3, #1
 800e424:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d1f5      	bne.n	800e41a <USBD_GetLen+0x12>
  }

  return len;
 800e42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e430:	4618      	mov	r0, r3
 800e432:	3714      	adds	r7, #20
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2202      	movs	r2, #2
 800e44c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	2100      	movs	r1, #0
 800e462:	68f8      	ldr	r0, [r7, #12]
 800e464:	f000 fcc0 	bl	800ede8 <USBD_LL_Transmit>

  return USBD_OK;
 800e468:	2300      	movs	r3, #0
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3710      	adds	r7, #16
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}

0800e472 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e472:	b580      	push	{r7, lr}
 800e474:	b084      	sub	sp, #16
 800e476:	af00      	add	r7, sp, #0
 800e478:	60f8      	str	r0, [r7, #12]
 800e47a:	60b9      	str	r1, [r7, #8]
 800e47c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	68ba      	ldr	r2, [r7, #8]
 800e482:	2100      	movs	r1, #0
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f000 fcaf 	bl	800ede8 <USBD_LL_Transmit>

  return USBD_OK;
 800e48a:	2300      	movs	r3, #0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	68ba      	ldr	r2, [r7, #8]
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f000 fcbf 	bl	800ee2a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b082      	sub	sp, #8
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2204      	movs	r2, #4
 800e4c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	2100      	movs	r1, #0
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fc8b 	bl	800ede8 <USBD_LL_Transmit>

  return USBD_OK;
 800e4d2:	2300      	movs	r3, #0
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3708      	adds	r7, #8
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2205      	movs	r2, #5
 800e4e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 fc99 	bl	800ee2a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e4f8:	2300      	movs	r3, #0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3708      	adds	r7, #8
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
	...

0800e504 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e508:	2200      	movs	r2, #0
 800e50a:	4913      	ldr	r1, [pc, #76]	@ (800e558 <MX_USB_DEVICE_Init+0x54>)
 800e50c:	4813      	ldr	r0, [pc, #76]	@ (800e55c <MX_USB_DEVICE_Init+0x58>)
 800e50e:	f7fe fce8 	bl	800cee2 <USBD_Init>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d001      	beq.n	800e51c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e518:	f7f2 fa8c 	bl	8000a34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800e51c:	4910      	ldr	r1, [pc, #64]	@ (800e560 <MX_USB_DEVICE_Init+0x5c>)
 800e51e:	480f      	ldr	r0, [pc, #60]	@ (800e55c <MX_USB_DEVICE_Init+0x58>)
 800e520:	f7fe fd0f 	bl	800cf42 <USBD_RegisterClass>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d001      	beq.n	800e52e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e52a:	f7f2 fa83 	bl	8000a34 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800e52e:	490d      	ldr	r1, [pc, #52]	@ (800e564 <MX_USB_DEVICE_Init+0x60>)
 800e530:	480a      	ldr	r0, [pc, #40]	@ (800e55c <MX_USB_DEVICE_Init+0x58>)
 800e532:	f7fc feab 	bl	800b28c <USBD_MSC_RegisterStorage>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e53c:	f7f2 fa7a 	bl	8000a34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e540:	4806      	ldr	r0, [pc, #24]	@ (800e55c <MX_USB_DEVICE_Init+0x58>)
 800e542:	f7fe fd34 	bl	800cfae <USBD_Start>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e54c:	f7f2 fa72 	bl	8000a34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800e550:	f7f5 fe0e 	bl	8004170 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e554:	bf00      	nop
 800e556:	bd80      	pop	{r7, pc}
 800e558:	24000184 	.word	0x24000184
 800e55c:	24000548 	.word	0x24000548
 800e560:	24000104 	.word	0x24000104
 800e564:	240001d8 	.word	0x240001d8

0800e568 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	4603      	mov	r3, r0
 800e570:	6039      	str	r1, [r7, #0]
 800e572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2212      	movs	r2, #18
 800e578:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e57a:	4b03      	ldr	r3, [pc, #12]	@ (800e588 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	370c      	adds	r7, #12
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr
 800e588:	240001a4 	.word	0x240001a4

0800e58c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
 800e592:	4603      	mov	r3, r0
 800e594:	6039      	str	r1, [r7, #0]
 800e596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	2204      	movs	r2, #4
 800e59c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e59e:	4b03      	ldr	r3, [pc, #12]	@ (800e5ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr
 800e5ac:	240001b8 	.word	0x240001b8

0800e5b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	6039      	str	r1, [r7, #0]
 800e5ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e5bc:	79fb      	ldrb	r3, [r7, #7]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d105      	bne.n	800e5ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5c2:	683a      	ldr	r2, [r7, #0]
 800e5c4:	4907      	ldr	r1, [pc, #28]	@ (800e5e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e5c6:	4808      	ldr	r0, [pc, #32]	@ (800e5e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e5c8:	f7ff fecc 	bl	800e364 <USBD_GetString>
 800e5cc:	e004      	b.n	800e5d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5ce:	683a      	ldr	r2, [r7, #0]
 800e5d0:	4904      	ldr	r1, [pc, #16]	@ (800e5e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e5d2:	4805      	ldr	r0, [pc, #20]	@ (800e5e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e5d4:	f7ff fec6 	bl	800e364 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5d8:	4b02      	ldr	r3, [pc, #8]	@ (800e5e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3708      	adds	r7, #8
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	24000824 	.word	0x24000824
 800e5e8:	0800ef8c 	.word	0x0800ef8c

0800e5ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	6039      	str	r1, [r7, #0]
 800e5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	4904      	ldr	r1, [pc, #16]	@ (800e60c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e5fc:	4804      	ldr	r0, [pc, #16]	@ (800e610 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e5fe:	f7ff feb1 	bl	800e364 <USBD_GetString>
  return USBD_StrDesc;
 800e602:	4b02      	ldr	r3, [pc, #8]	@ (800e60c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e604:	4618      	mov	r0, r3
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	24000824 	.word	0x24000824
 800e610:	0800efa0 	.word	0x0800efa0

0800e614 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	4603      	mov	r3, r0
 800e61c:	6039      	str	r1, [r7, #0]
 800e61e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	221a      	movs	r2, #26
 800e624:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e626:	f000 f843 	bl	800e6b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e62a:	4b02      	ldr	r3, [pc, #8]	@ (800e634 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}
 800e634:	240001bc 	.word	0x240001bc

0800e638 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	4603      	mov	r3, r0
 800e640:	6039      	str	r1, [r7, #0]
 800e642:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e644:	79fb      	ldrb	r3, [r7, #7]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d105      	bne.n	800e656 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e64a:	683a      	ldr	r2, [r7, #0]
 800e64c:	4907      	ldr	r1, [pc, #28]	@ (800e66c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e64e:	4808      	ldr	r0, [pc, #32]	@ (800e670 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e650:	f7ff fe88 	bl	800e364 <USBD_GetString>
 800e654:	e004      	b.n	800e660 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e656:	683a      	ldr	r2, [r7, #0]
 800e658:	4904      	ldr	r1, [pc, #16]	@ (800e66c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e65a:	4805      	ldr	r0, [pc, #20]	@ (800e670 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e65c:	f7ff fe82 	bl	800e364 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e660:	4b02      	ldr	r3, [pc, #8]	@ (800e66c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e662:	4618      	mov	r0, r3
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	24000824 	.word	0x24000824
 800e670:	0800efb4 	.word	0x0800efb4

0800e674 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	4603      	mov	r3, r0
 800e67c:	6039      	str	r1, [r7, #0]
 800e67e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e680:	79fb      	ldrb	r3, [r7, #7]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d105      	bne.n	800e692 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e686:	683a      	ldr	r2, [r7, #0]
 800e688:	4907      	ldr	r1, [pc, #28]	@ (800e6a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e68a:	4808      	ldr	r0, [pc, #32]	@ (800e6ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e68c:	f7ff fe6a 	bl	800e364 <USBD_GetString>
 800e690:	e004      	b.n	800e69c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e692:	683a      	ldr	r2, [r7, #0]
 800e694:	4904      	ldr	r1, [pc, #16]	@ (800e6a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e696:	4805      	ldr	r0, [pc, #20]	@ (800e6ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e698:	f7ff fe64 	bl	800e364 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e69c:	4b02      	ldr	r3, [pc, #8]	@ (800e6a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3708      	adds	r7, #8
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	24000824 	.word	0x24000824
 800e6ac:	0800efc0 	.word	0x0800efc0

0800e6b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e6b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e6f4 <Get_SerialNum+0x44>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e6bc:	4b0e      	ldr	r3, [pc, #56]	@ (800e6f8 <Get_SerialNum+0x48>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e6c2:	4b0e      	ldr	r3, [pc, #56]	@ (800e6fc <Get_SerialNum+0x4c>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d009      	beq.n	800e6ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e6d6:	2208      	movs	r2, #8
 800e6d8:	4909      	ldr	r1, [pc, #36]	@ (800e700 <Get_SerialNum+0x50>)
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f000 f814 	bl	800e708 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e6e0:	2204      	movs	r2, #4
 800e6e2:	4908      	ldr	r1, [pc, #32]	@ (800e704 <Get_SerialNum+0x54>)
 800e6e4:	68b8      	ldr	r0, [r7, #8]
 800e6e6:	f000 f80f 	bl	800e708 <IntToUnicode>
  }
}
 800e6ea:	bf00      	nop
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	1ff1e800 	.word	0x1ff1e800
 800e6f8:	1ff1e804 	.word	0x1ff1e804
 800e6fc:	1ff1e808 	.word	0x1ff1e808
 800e700:	240001be 	.word	0x240001be
 800e704:	240001ce 	.word	0x240001ce

0800e708 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e708:	b480      	push	{r7}
 800e70a:	b087      	sub	sp, #28
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	60b9      	str	r1, [r7, #8]
 800e712:	4613      	mov	r3, r2
 800e714:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e716:	2300      	movs	r3, #0
 800e718:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e71a:	2300      	movs	r3, #0
 800e71c:	75fb      	strb	r3, [r7, #23]
 800e71e:	e027      	b.n	800e770 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	0f1b      	lsrs	r3, r3, #28
 800e724:	2b09      	cmp	r3, #9
 800e726:	d80b      	bhi.n	800e740 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	0f1b      	lsrs	r3, r3, #28
 800e72c:	b2da      	uxtb	r2, r3
 800e72e:	7dfb      	ldrb	r3, [r7, #23]
 800e730:	005b      	lsls	r3, r3, #1
 800e732:	4619      	mov	r1, r3
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	440b      	add	r3, r1
 800e738:	3230      	adds	r2, #48	@ 0x30
 800e73a:	b2d2      	uxtb	r2, r2
 800e73c:	701a      	strb	r2, [r3, #0]
 800e73e:	e00a      	b.n	800e756 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	0f1b      	lsrs	r3, r3, #28
 800e744:	b2da      	uxtb	r2, r3
 800e746:	7dfb      	ldrb	r3, [r7, #23]
 800e748:	005b      	lsls	r3, r3, #1
 800e74a:	4619      	mov	r1, r3
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	440b      	add	r3, r1
 800e750:	3237      	adds	r2, #55	@ 0x37
 800e752:	b2d2      	uxtb	r2, r2
 800e754:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	011b      	lsls	r3, r3, #4
 800e75a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e75c:	7dfb      	ldrb	r3, [r7, #23]
 800e75e:	005b      	lsls	r3, r3, #1
 800e760:	3301      	adds	r3, #1
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	4413      	add	r3, r2
 800e766:	2200      	movs	r2, #0
 800e768:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e76a:	7dfb      	ldrb	r3, [r7, #23]
 800e76c:	3301      	adds	r3, #1
 800e76e:	75fb      	strb	r3, [r7, #23]
 800e770:	7dfa      	ldrb	r2, [r7, #23]
 800e772:	79fb      	ldrb	r3, [r7, #7]
 800e774:	429a      	cmp	r2, r3
 800e776:	d3d3      	bcc.n	800e720 <IntToUnicode+0x18>
  }
}
 800e778:	bf00      	nop
 800e77a:	bf00      	nop
 800e77c:	371c      	adds	r7, #28
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr

0800e786 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800e786:	b480      	push	{r7}
 800e788:	b083      	sub	sp, #12
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	4603      	mov	r3, r0
 800e78e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800e790:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800e792:	4618      	mov	r0, r3
 800e794:	370c      	adds	r7, #12
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr

0800e79e <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800e79e:	b480      	push	{r7}
 800e7a0:	b085      	sub	sp, #20
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	60b9      	str	r1, [r7, #8]
 800e7a8:	607a      	str	r2, [r7, #4]
 800e7aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e7b2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e7ba:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800e7bc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3714      	adds	r7, #20
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr

0800e7ca <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800e7ca:	b480      	push	{r7}
 800e7cc:	b083      	sub	sp, #12
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800e7d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	370c      	adds	r7, #12
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800e7e2:	b480      	push	{r7}
 800e7e4:	b083      	sub	sp, #12
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800e7ec:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	370c      	adds	r7, #12
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f8:	4770      	bx	lr

0800e7fa <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e7fa:	b480      	push	{r7}
 800e7fc:	b085      	sub	sp, #20
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	60b9      	str	r1, [r7, #8]
 800e802:	607a      	str	r2, [r7, #4]
 800e804:	461a      	mov	r2, r3
 800e806:	4603      	mov	r3, r0
 800e808:	73fb      	strb	r3, [r7, #15]
 800e80a:	4613      	mov	r3, r2
 800e80c:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800e80e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e810:	4618      	mov	r0, r3
 800e812:	3714      	adds	r7, #20
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b085      	sub	sp, #20
 800e820:	af00      	add	r7, sp, #0
 800e822:	60b9      	str	r1, [r7, #8]
 800e824:	607a      	str	r2, [r7, #4]
 800e826:	461a      	mov	r2, r3
 800e828:	4603      	mov	r3, r0
 800e82a:	73fb      	strb	r3, [r7, #15]
 800e82c:	4613      	mov	r3, r2
 800e82e:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800e830:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800e832:	4618      	mov	r0, r3
 800e834:	3714      	adds	r7, #20
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr

0800e83e <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800e83e:	b480      	push	{r7}
 800e840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800e842:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e844:	4618      	mov	r0, r3
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr
	...

0800e850 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b0ba      	sub	sp, #232	@ 0xe8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e858:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e85c:	2200      	movs	r2, #0
 800e85e:	601a      	str	r2, [r3, #0]
 800e860:	605a      	str	r2, [r3, #4]
 800e862:	609a      	str	r2, [r3, #8]
 800e864:	60da      	str	r2, [r3, #12]
 800e866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e868:	f107 0310 	add.w	r3, r7, #16
 800e86c:	22c0      	movs	r2, #192	@ 0xc0
 800e86e:	2100      	movs	r1, #0
 800e870:	4618      	mov	r0, r3
 800e872:	f000 fb53 	bl	800ef1c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a33      	ldr	r2, [pc, #204]	@ (800e948 <HAL_PCD_MspInit+0xf8>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d15f      	bne.n	800e940 <HAL_PCD_MspInit+0xf0>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e880:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e884:	f04f 0300 	mov.w	r3, #0
 800e888:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 800e88c:	2319      	movs	r3, #25
 800e88e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800e890:	23c0      	movs	r3, #192	@ 0xc0
 800e892:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800e894:	2302      	movs	r3, #2
 800e896:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800e898:	2304      	movs	r3, #4
 800e89a:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800e89c:	2302      	movs	r3, #2
 800e89e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800e8a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e8ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e8b0:	f107 0310 	add.w	r3, r7, #16
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7f7 f8c5 	bl	8005a44 <HAL_RCCEx_PeriphCLKConfig>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d001      	beq.n	800e8c4 <HAL_PCD_MspInit+0x74>
    {
      Error_Handler();
 800e8c0:	f7f2 f8b8 	bl	8000a34 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e8c4:	f7f5 fc54 	bl	8004170 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8c8:	4b20      	ldr	r3, [pc, #128]	@ (800e94c <HAL_PCD_MspInit+0xfc>)
 800e8ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e8ce:	4a1f      	ldr	r2, [pc, #124]	@ (800e94c <HAL_PCD_MspInit+0xfc>)
 800e8d0:	f043 0301 	orr.w	r3, r3, #1
 800e8d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e8d8:	4b1c      	ldr	r3, [pc, #112]	@ (800e94c <HAL_PCD_MspInit+0xfc>)
 800e8da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e8de:	f003 0301 	and.w	r3, r3, #1
 800e8e2:	60fb      	str	r3, [r7, #12]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e8e6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e8ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8ee:	2302      	movs	r3, #2
 800e8f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e900:	230a      	movs	r3, #10
 800e902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e906:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e90a:	4619      	mov	r1, r3
 800e90c:	4810      	ldr	r0, [pc, #64]	@ (800e950 <HAL_PCD_MspInit+0x100>)
 800e90e:	f7f3 fe55 	bl	80025bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e912:	4b0e      	ldr	r3, [pc, #56]	@ (800e94c <HAL_PCD_MspInit+0xfc>)
 800e914:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e918:	4a0c      	ldr	r2, [pc, #48]	@ (800e94c <HAL_PCD_MspInit+0xfc>)
 800e91a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e91e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e922:	4b0a      	ldr	r3, [pc, #40]	@ (800e94c <HAL_PCD_MspInit+0xfc>)
 800e924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e92c:	60bb      	str	r3, [r7, #8]
 800e92e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e930:	2200      	movs	r2, #0
 800e932:	2100      	movs	r1, #0
 800e934:	2065      	movs	r0, #101	@ 0x65
 800e936:	f7f3 f830 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e93a:	2065      	movs	r0, #101	@ 0x65
 800e93c:	f7f3 f847 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e940:	bf00      	nop
 800e942:	37e8      	adds	r7, #232	@ 0xe8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	40080000 	.word	0x40080000
 800e94c:	58024400 	.word	0x58024400
 800e950:	58020000 	.word	0x58020000

0800e954 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e968:	4619      	mov	r1, r3
 800e96a:	4610      	mov	r0, r2
 800e96c:	f7fe fb6c 	bl	800d048 <USBD_LL_SetupStage>
}
 800e970:	bf00      	nop
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	460b      	mov	r3, r1
 800e982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e98a:	78fa      	ldrb	r2, [r7, #3]
 800e98c:	6879      	ldr	r1, [r7, #4]
 800e98e:	4613      	mov	r3, r2
 800e990:	00db      	lsls	r3, r3, #3
 800e992:	4413      	add	r3, r2
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	440b      	add	r3, r1
 800e998:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	78fb      	ldrb	r3, [r7, #3]
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	f7fe fba6 	bl	800d0f2 <USBD_LL_DataOutStage>
}
 800e9a6:	bf00      	nop
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b082      	sub	sp, #8
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e9c0:	78fa      	ldrb	r2, [r7, #3]
 800e9c2:	6879      	ldr	r1, [r7, #4]
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	00db      	lsls	r3, r3, #3
 800e9c8:	4413      	add	r3, r2
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	440b      	add	r3, r1
 800e9ce:	3320      	adds	r3, #32
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	78fb      	ldrb	r3, [r7, #3]
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	f7fe fc3f 	bl	800d258 <USBD_LL_DataInStage>
}
 800e9da:	bf00      	nop
 800e9dc:	3708      	adds	r7, #8
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b082      	sub	sp, #8
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fe fd79 	bl	800d4e8 <USBD_LL_SOF>
}
 800e9f6:	bf00      	nop
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}

0800e9fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9fe:	b580      	push	{r7, lr}
 800ea00:	b084      	sub	sp, #16
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea06:	2301      	movs	r3, #1
 800ea08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	79db      	ldrb	r3, [r3, #7]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d102      	bne.n	800ea18 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ea12:	2300      	movs	r3, #0
 800ea14:	73fb      	strb	r3, [r7, #15]
 800ea16:	e008      	b.n	800ea2a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	79db      	ldrb	r3, [r3, #7]
 800ea1c:	2b02      	cmp	r3, #2
 800ea1e:	d102      	bne.n	800ea26 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ea20:	2301      	movs	r3, #1
 800ea22:	73fb      	strb	r3, [r7, #15]
 800ea24:	e001      	b.n	800ea2a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ea26:	f7f2 f805 	bl	8000a34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea30:	7bfa      	ldrb	r2, [r7, #15]
 800ea32:	4611      	mov	r1, r2
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fe fd13 	bl	800d460 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fe fcbb 	bl	800d3bc <USBD_LL_Reset>
}
 800ea46:	bf00      	nop
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
	...

0800ea50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7fe fd0e 	bl	800d480 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	6812      	ldr	r2, [r2, #0]
 800ea72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ea76:	f043 0301 	orr.w	r3, r3, #1
 800ea7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	7adb      	ldrb	r3, [r3, #11]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d005      	beq.n	800ea90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea84:	4b04      	ldr	r3, [pc, #16]	@ (800ea98 <HAL_PCD_SuspendCallback+0x48>)
 800ea86:	691b      	ldr	r3, [r3, #16]
 800ea88:	4a03      	ldr	r2, [pc, #12]	@ (800ea98 <HAL_PCD_SuspendCallback+0x48>)
 800ea8a:	f043 0306 	orr.w	r3, r3, #6
 800ea8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ea90:	bf00      	nop
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	e000ed00 	.word	0xe000ed00

0800ea9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fe fd04 	bl	800d4b8 <USBD_LL_Resume>
}
 800eab0:	bf00      	nop
 800eab2:	3708      	adds	r7, #8
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	460b      	mov	r3, r1
 800eac2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eaca:	78fa      	ldrb	r2, [r7, #3]
 800eacc:	4611      	mov	r1, r2
 800eace:	4618      	mov	r0, r3
 800ead0:	f7fe fd5c 	bl	800d58c <USBD_LL_IsoOUTIncomplete>
}
 800ead4:	bf00      	nop
 800ead6:	3708      	adds	r7, #8
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	460b      	mov	r3, r1
 800eae6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eaee:	78fa      	ldrb	r2, [r7, #3]
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fe fd18 	bl	800d528 <USBD_LL_IsoINIncomplete>
}
 800eaf8:	bf00      	nop
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fe fd6e 	bl	800d5f0 <USBD_LL_DevConnected>
}
 800eb14:	bf00      	nop
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7fe fd6b 	bl	800d606 <USBD_LL_DevDisconnected>
}
 800eb30:	bf00      	nop
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d13e      	bne.n	800ebc6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eb48:	4a21      	ldr	r2, [pc, #132]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	4a1f      	ldr	r2, [pc, #124]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb54:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb58:	4b1d      	ldr	r3, [pc, #116]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb5a:	4a1e      	ldr	r2, [pc, #120]	@ (800ebd4 <USBD_LL_Init+0x9c>)
 800eb5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800eb5e:	4b1c      	ldr	r3, [pc, #112]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb60:	2209      	movs	r2, #9
 800eb62:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eb64:	4b1a      	ldr	r3, [pc, #104]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb66:	2202      	movs	r2, #2
 800eb68:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb6a:	4b19      	ldr	r3, [pc, #100]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb70:	4b17      	ldr	r3, [pc, #92]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb72:	2202      	movs	r2, #2
 800eb74:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eb76:	4b16      	ldr	r3, [pc, #88]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb78:	2200      	movs	r2, #0
 800eb7a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eb7c:	4b14      	ldr	r3, [pc, #80]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb7e:	2200      	movs	r2, #0
 800eb80:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eb82:	4b13      	ldr	r3, [pc, #76]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb84:	2200      	movs	r2, #0
 800eb86:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800eb88:	4b11      	ldr	r3, [pc, #68]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eb8e:	4b10      	ldr	r3, [pc, #64]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb90:	2200      	movs	r2, #0
 800eb92:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eb94:	4b0e      	ldr	r3, [pc, #56]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb96:	2200      	movs	r2, #0
 800eb98:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eb9a:	480d      	ldr	r0, [pc, #52]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800eb9c:	f7f3 ffe1 	bl	8002b62 <HAL_PCD_Init>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d001      	beq.n	800ebaa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800eba6:	f7f1 ff45 	bl	8000a34 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ebaa:	2180      	movs	r1, #128	@ 0x80
 800ebac:	4808      	ldr	r0, [pc, #32]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800ebae:	f7f5 fa64 	bl	800407a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ebb2:	2240      	movs	r2, #64	@ 0x40
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	4806      	ldr	r0, [pc, #24]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800ebb8:	f7f5 fa18 	bl	8003fec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ebbc:	2280      	movs	r2, #128	@ 0x80
 800ebbe:	2101      	movs	r1, #1
 800ebc0:	4803      	ldr	r0, [pc, #12]	@ (800ebd0 <USBD_LL_Init+0x98>)
 800ebc2:	f7f5 fa13 	bl	8003fec <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	24000a24 	.word	0x24000a24
 800ebd4:	40080000 	.word	0x40080000

0800ebd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7f4 f8c3 	bl	8002d7a <HAL_PCD_Start>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebf8:	7bfb      	ldrb	r3, [r7, #15]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f000 f962 	bl	800eec4 <USBD_Get_USB_Status>
 800ec00:	4603      	mov	r3, r0
 800ec02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b084      	sub	sp, #16
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
 800ec16:	4608      	mov	r0, r1
 800ec18:	4611      	mov	r1, r2
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	70fb      	strb	r3, [r7, #3]
 800ec20:	460b      	mov	r3, r1
 800ec22:	70bb      	strb	r3, [r7, #2]
 800ec24:	4613      	mov	r3, r2
 800ec26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ec36:	78bb      	ldrb	r3, [r7, #2]
 800ec38:	883a      	ldrh	r2, [r7, #0]
 800ec3a:	78f9      	ldrb	r1, [r7, #3]
 800ec3c:	f7f4 fdc4 	bl	80037c8 <HAL_PCD_EP_Open>
 800ec40:	4603      	mov	r3, r0
 800ec42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec44:	7bfb      	ldrb	r3, [r7, #15]
 800ec46:	4618      	mov	r0, r3
 800ec48:	f000 f93c 	bl	800eec4 <USBD_Get_USB_Status>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b084      	sub	sp, #16
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
 800ec62:	460b      	mov	r3, r1
 800ec64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec66:	2300      	movs	r3, #0
 800ec68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec74:	78fa      	ldrb	r2, [r7, #3]
 800ec76:	4611      	mov	r1, r2
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7f4 fe0f 	bl	800389c <HAL_PCD_EP_Close>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec82:	7bfb      	ldrb	r3, [r7, #15]
 800ec84:	4618      	mov	r0, r3
 800ec86:	f000 f91d 	bl	800eec4 <USBD_Get_USB_Status>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3710      	adds	r7, #16
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	460b      	mov	r3, r1
 800eca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eca4:	2300      	movs	r3, #0
 800eca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ecb2:	78fa      	ldrb	r2, [r7, #3]
 800ecb4:	4611      	mov	r1, r2
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7f4 ffb1 	bl	8003c1e <HAL_PCD_EP_Flush>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecc0:	7bfb      	ldrb	r3, [r7, #15]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f000 f8fe 	bl	800eec4 <USBD_Get_USB_Status>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eccc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b084      	sub	sp, #16
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
 800ecde:	460b      	mov	r3, r1
 800ece0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ece2:	2300      	movs	r3, #0
 800ece4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ece6:	2300      	movs	r3, #0
 800ece8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ecf0:	78fa      	ldrb	r2, [r7, #3]
 800ecf2:	4611      	mov	r1, r2
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7f4 fea8 	bl	8003a4a <HAL_PCD_EP_SetStall>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecfe:	7bfb      	ldrb	r3, [r7, #15]
 800ed00:	4618      	mov	r0, r3
 800ed02:	f000 f8df 	bl	800eec4 <USBD_Get_USB_Status>
 800ed06:	4603      	mov	r3, r0
 800ed08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed20:	2300      	movs	r3, #0
 800ed22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed24:	2300      	movs	r3, #0
 800ed26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed2e:	78fa      	ldrb	r2, [r7, #3]
 800ed30:	4611      	mov	r1, r2
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7f4 feec 	bl	8003b10 <HAL_PCD_EP_ClrStall>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed3c:	7bfb      	ldrb	r3, [r7, #15]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f000 f8c0 	bl	800eec4 <USBD_Get_USB_Status>
 800ed44:	4603      	mov	r3, r0
 800ed46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}

0800ed52 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed52:	b480      	push	{r7}
 800ed54:	b085      	sub	sp, #20
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed64:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	da0b      	bge.n	800ed86 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed6e:	78fb      	ldrb	r3, [r7, #3]
 800ed70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed74:	68f9      	ldr	r1, [r7, #12]
 800ed76:	4613      	mov	r3, r2
 800ed78:	00db      	lsls	r3, r3, #3
 800ed7a:	4413      	add	r3, r2
 800ed7c:	009b      	lsls	r3, r3, #2
 800ed7e:	440b      	add	r3, r1
 800ed80:	3316      	adds	r3, #22
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	e00b      	b.n	800ed9e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed86:	78fb      	ldrb	r3, [r7, #3]
 800ed88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed8c:	68f9      	ldr	r1, [r7, #12]
 800ed8e:	4613      	mov	r3, r2
 800ed90:	00db      	lsls	r3, r3, #3
 800ed92:	4413      	add	r3, r2
 800ed94:	009b      	lsls	r3, r3, #2
 800ed96:	440b      	add	r3, r1
 800ed98:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ed9c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3714      	adds	r7, #20
 800eda2:	46bd      	mov	sp, r7
 800eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda8:	4770      	bx	lr

0800edaa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b084      	sub	sp, #16
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
 800edb2:	460b      	mov	r3, r1
 800edb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edb6:	2300      	movs	r3, #0
 800edb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edba:	2300      	movs	r3, #0
 800edbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800edc4:	78fa      	ldrb	r2, [r7, #3]
 800edc6:	4611      	mov	r1, r2
 800edc8:	4618      	mov	r0, r3
 800edca:	f7f4 fcd9 	bl	8003780 <HAL_PCD_SetAddress>
 800edce:	4603      	mov	r3, r0
 800edd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edd2:	7bfb      	ldrb	r3, [r7, #15]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 f875 	bl	800eec4 <USBD_Get_USB_Status>
 800edda:	4603      	mov	r3, r0
 800eddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edde:	7bbb      	ldrb	r3, [r7, #14]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b086      	sub	sp, #24
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	607a      	str	r2, [r7, #4]
 800edf2:	603b      	str	r3, [r7, #0]
 800edf4:	460b      	mov	r3, r1
 800edf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edf8:	2300      	movs	r3, #0
 800edfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edfc:	2300      	movs	r3, #0
 800edfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ee06:	7af9      	ldrb	r1, [r7, #11]
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	f7f4 fde3 	bl	80039d6 <HAL_PCD_EP_Transmit>
 800ee10:	4603      	mov	r3, r0
 800ee12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee14:	7dfb      	ldrb	r3, [r7, #23]
 800ee16:	4618      	mov	r0, r3
 800ee18:	f000 f854 	bl	800eec4 <USBD_Get_USB_Status>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee20:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3718      	adds	r7, #24
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b086      	sub	sp, #24
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	60f8      	str	r0, [r7, #12]
 800ee32:	607a      	str	r2, [r7, #4]
 800ee34:	603b      	str	r3, [r7, #0]
 800ee36:	460b      	mov	r3, r1
 800ee38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ee48:	7af9      	ldrb	r1, [r7, #11]
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	f7f4 fd6f 	bl	8003930 <HAL_PCD_EP_Receive>
 800ee52:	4603      	mov	r3, r0
 800ee54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee56:	7dfb      	ldrb	r3, [r7, #23]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f000 f833 	bl	800eec4 <USBD_Get_USB_Status>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee62:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3718      	adds	r7, #24
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	460b      	mov	r3, r1
 800ee76:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee7e:	78fa      	ldrb	r2, [r7, #3]
 800ee80:	4611      	mov	r1, r2
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7f4 fd8f 	bl	80039a6 <HAL_PCD_EP_GetRxCount>
 800ee88:	4603      	mov	r3, r0
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3708      	adds	r7, #8
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
	...

0800ee94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee9c:	4b03      	ldr	r3, [pc, #12]	@ (800eeac <USBD_static_malloc+0x18>)
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	370c      	adds	r7, #12
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop
 800eeac:	24000f08 	.word	0x24000f08

0800eeb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b083      	sub	sp, #12
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800eeb8:	bf00      	nop
 800eeba:	370c      	adds	r7, #12
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr

0800eec4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b085      	sub	sp, #20
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	4603      	mov	r3, r0
 800eecc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eece:	2300      	movs	r3, #0
 800eed0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eed2:	79fb      	ldrb	r3, [r7, #7]
 800eed4:	2b03      	cmp	r3, #3
 800eed6:	d817      	bhi.n	800ef08 <USBD_Get_USB_Status+0x44>
 800eed8:	a201      	add	r2, pc, #4	@ (adr r2, 800eee0 <USBD_Get_USB_Status+0x1c>)
 800eeda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eede:	bf00      	nop
 800eee0:	0800eef1 	.word	0x0800eef1
 800eee4:	0800eef7 	.word	0x0800eef7
 800eee8:	0800eefd 	.word	0x0800eefd
 800eeec:	0800ef03 	.word	0x0800ef03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eef0:	2300      	movs	r3, #0
 800eef2:	73fb      	strb	r3, [r7, #15]
    break;
 800eef4:	e00b      	b.n	800ef0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eef6:	2303      	movs	r3, #3
 800eef8:	73fb      	strb	r3, [r7, #15]
    break;
 800eefa:	e008      	b.n	800ef0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eefc:	2301      	movs	r3, #1
 800eefe:	73fb      	strb	r3, [r7, #15]
    break;
 800ef00:	e005      	b.n	800ef0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef02:	2303      	movs	r3, #3
 800ef04:	73fb      	strb	r3, [r7, #15]
    break;
 800ef06:	e002      	b.n	800ef0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ef08:	2303      	movs	r3, #3
 800ef0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef0c:	bf00      	nop
  }
  return usb_status;
 800ef0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3714      	adds	r7, #20
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <memset>:
 800ef1c:	4402      	add	r2, r0
 800ef1e:	4603      	mov	r3, r0
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d100      	bne.n	800ef26 <memset+0xa>
 800ef24:	4770      	bx	lr
 800ef26:	f803 1b01 	strb.w	r1, [r3], #1
 800ef2a:	e7f9      	b.n	800ef20 <memset+0x4>

0800ef2c <__libc_init_array>:
 800ef2c:	b570      	push	{r4, r5, r6, lr}
 800ef2e:	4d0d      	ldr	r5, [pc, #52]	@ (800ef64 <__libc_init_array+0x38>)
 800ef30:	4c0d      	ldr	r4, [pc, #52]	@ (800ef68 <__libc_init_array+0x3c>)
 800ef32:	1b64      	subs	r4, r4, r5
 800ef34:	10a4      	asrs	r4, r4, #2
 800ef36:	2600      	movs	r6, #0
 800ef38:	42a6      	cmp	r6, r4
 800ef3a:	d109      	bne.n	800ef50 <__libc_init_array+0x24>
 800ef3c:	4d0b      	ldr	r5, [pc, #44]	@ (800ef6c <__libc_init_array+0x40>)
 800ef3e:	4c0c      	ldr	r4, [pc, #48]	@ (800ef70 <__libc_init_array+0x44>)
 800ef40:	f000 f818 	bl	800ef74 <_init>
 800ef44:	1b64      	subs	r4, r4, r5
 800ef46:	10a4      	asrs	r4, r4, #2
 800ef48:	2600      	movs	r6, #0
 800ef4a:	42a6      	cmp	r6, r4
 800ef4c:	d105      	bne.n	800ef5a <__libc_init_array+0x2e>
 800ef4e:	bd70      	pop	{r4, r5, r6, pc}
 800ef50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef54:	4798      	blx	r3
 800ef56:	3601      	adds	r6, #1
 800ef58:	e7ee      	b.n	800ef38 <__libc_init_array+0xc>
 800ef5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef5e:	4798      	blx	r3
 800ef60:	3601      	adds	r6, #1
 800ef62:	e7f2      	b.n	800ef4a <__libc_init_array+0x1e>
 800ef64:	0800f034 	.word	0x0800f034
 800ef68:	0800f034 	.word	0x0800f034
 800ef6c:	0800f034 	.word	0x0800f034
 800ef70:	0800f038 	.word	0x0800f038

0800ef74 <_init>:
 800ef74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef76:	bf00      	nop
 800ef78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef7a:	bc08      	pop	{r3}
 800ef7c:	469e      	mov	lr, r3
 800ef7e:	4770      	bx	lr

0800ef80 <_fini>:
 800ef80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef82:	bf00      	nop
 800ef84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef86:	bc08      	pop	{r3}
 800ef88:	469e      	mov	lr, r3
 800ef8a:	4770      	bx	lr
