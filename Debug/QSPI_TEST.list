
QSPI_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7c4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800ea5c  0800ea5c  0000fa5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800eafc  0800eafc  0000fafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800eb04  0800eb04  0000fb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800eb08  0800eb08  0000fb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000100  24000000  0800eb0c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00024b94  24000100  0800ec0c  00010100  2**2
                  ALLOC
  8 ._user_heap_stack 0000c004  24024c94  0800ec0c  00010c94  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010100  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024dc2  00000000  00000000  0001012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004c70  00000000  00000000  00034ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ad8  00000000  00000000  00039b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014ba  00000000  00000000  0003b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c102  00000000  00000000  0003caf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026f48  00000000  00000000  00078bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016ac61  00000000  00000000  0009fb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020a79d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007198  00000000  00000000  0020a7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  00211978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000100 	.word	0x24000100
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ea44 	.word	0x0800ea44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000104 	.word	0x24000104
 80002d4:	0800ea44 	.word	0x0800ea44

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000608:	f000 f9c8 	bl	800099c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fe80 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f80c 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f932 	bl	800087c <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000618:	f000 f882 	bl	8000720 <MX_QUADSPI_Init>
  MX_TIM7_Init();
 800061c:	f000 f8ac 	bl	8000778 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8000620:	f000 f8e0 	bl	80007e4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000624:	f00d fc72 	bl	800df0c <MX_USB_DEVICE_Init>
if (CSP_QSPI_Read(aRxBuffer, 0, sizeof(aTxBuffer)) != HAL_OK) Error_Handler();*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x24>

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09c      	sub	sp, #112	@ 0x70
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000636:	224c      	movs	r2, #76	@ 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f00e f9c8 	bl	800e9d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2220      	movs	r2, #32
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f00e f9c2 	bl	800e9d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800064c:	2002      	movs	r0, #2
 800064e:	f003 faa3 	bl	8003b98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <SystemClock_Config+0xec>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	4a2f      	ldr	r2, [pc, #188]	@ (8000718 <SystemClock_Config+0xec>)
 800065c:	f023 0301 	bic.w	r3, r3, #1
 8000660:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000662:	4b2d      	ldr	r3, [pc, #180]	@ (8000718 <SystemClock_Config+0xec>)
 8000664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b2b      	ldr	r3, [pc, #172]	@ (800071c <SystemClock_Config+0xf0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a2a      	ldr	r2, [pc, #168]	@ (800071c <SystemClock_Config+0xf0>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xf0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000684:	bf00      	nop
 8000686:	4b25      	ldr	r3, [pc, #148]	@ (800071c <SystemClock_Config+0xf0>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000692:	d1f8      	bne.n	8000686 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006a6:	2305      	movs	r3, #5
 80006a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006aa:	23a0      	movs	r3, #160	@ 0xa0
 80006ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006ba:	2308      	movs	r3, #8
 80006bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006be:	2300      	movs	r3, #0
 80006c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 ff02 	bl	80044d4 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006d6:	f000 f98d 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	233f      	movs	r3, #63	@ 0x3f
 80006dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006e6:	2308      	movs	r3, #8
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006ea:	2340      	movs	r3, #64	@ 0x40
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ee:	2340      	movs	r3, #64	@ 0x40
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006f8:	2340      	movs	r3, #64	@ 0x40
 80006fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2102      	movs	r1, #2
 8000700:	4618      	mov	r0, r3
 8000702:	f004 fb41 	bl	8004d88 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800070c:	f000 f972 	bl	80009f4 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3770      	adds	r7, #112	@ 0x70
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	58000400 	.word	0x58000400
 800071c:	58024800 	.word	0x58024800

08000720 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_QUADSPI_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <MX_QUADSPI_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_QUADSPI_Init+0x50>)
 800072c:	2202      	movs	r2, #2
 800072e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_QUADSPI_Init+0x50>)
 8000732:	2204      	movs	r2, #4
 8000734:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_QUADSPI_Init+0x50>)
 8000738:	2210      	movs	r2, #16
 800073a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_QUADSPI_Init+0x50>)
 800073e:	2216      	movs	r2, #22
 8000740:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <MX_QUADSPI_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_QUADSPI_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <MX_QUADSPI_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_QUADSPI_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_QUADSPI_Init+0x50>)
 800075c:	f003 fa66 	bl	8003c2c <HAL_QSPI_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 f945 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	24000124 	.word	0x24000124
 8000774:	52005000 	.word	0x52005000

08000778 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_TIM7_Init+0x64>)
 800078a:	4a15      	ldr	r2, [pc, #84]	@ (80007e0 <MX_TIM7_Init+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 199;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_TIM7_Init+0x64>)
 8000790:	22c7      	movs	r2, #199	@ 0xc7
 8000792:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_TIM7_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_TIM7_Init+0x64>)
 800079c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007a0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_TIM7_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <MX_TIM7_Init+0x64>)
 80007aa:	f006 fca5 	bl	80070f8 <HAL_TIM_Base_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80007b4:	f000 f91e 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_TIM7_Init+0x64>)
 80007c6:	f006 fec7 	bl	8007558 <HAL_TIMEx_MasterConfigSynchronization>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80007d0:	f000 f910 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	24000170 	.word	0x24000170
 80007e0:	40001400 	.word	0x40001400

080007e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e8:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 80007ea:	4a23      	ldr	r2, [pc, #140]	@ (8000878 <MX_USART1_UART_Init+0x94>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ee:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000802:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082c:	4811      	ldr	r0, [pc, #68]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 800082e:	f006 ff3f 	bl	80076b0 <HAL_UART_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000838:	f000 f8dc 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083c:	2100      	movs	r1, #0
 800083e:	480d      	ldr	r0, [pc, #52]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 8000840:	f008 fb98 	bl	8008f74 <HAL_UARTEx_SetTxFifoThreshold>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800084a:	f000 f8d3 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 8000852:	f008 fbcd 	bl	8008ff0 <HAL_UARTEx_SetRxFifoThreshold>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800085c:	f000 f8ca 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_USART1_UART_Init+0x90>)
 8000862:	f008 fb4e 	bl	8008f02 <HAL_UARTEx_DisableFifoMode>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800086c:	f000 f8c2 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	240001bc 	.word	0x240001bc
 8000878:	40011000 	.word	0x40011000

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	@ 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000892:	4b3f      	ldr	r3, [pc, #252]	@ (8000990 <MX_GPIO_Init+0x114>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000898:	4a3d      	ldr	r2, [pc, #244]	@ (8000990 <MX_GPIO_Init+0x114>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000990 <MX_GPIO_Init+0x114>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b0:	4b37      	ldr	r3, [pc, #220]	@ (8000990 <MX_GPIO_Init+0x114>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b6:	4a36      	ldr	r2, [pc, #216]	@ (8000990 <MX_GPIO_Init+0x114>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c0:	4b33      	ldr	r3, [pc, #204]	@ (8000990 <MX_GPIO_Init+0x114>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <MX_GPIO_Init+0x114>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000990 <MX_GPIO_Init+0x114>)
 80008d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008de:	4b2c      	ldr	r3, [pc, #176]	@ (8000990 <MX_GPIO_Init+0x114>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <MX_GPIO_Init+0x114>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a27      	ldr	r2, [pc, #156]	@ (8000990 <MX_GPIO_Init+0x114>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b24      	ldr	r3, [pc, #144]	@ (8000990 <MX_GPIO_Init+0x114>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_GPIO_Init+0x114>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000910:	4a1f      	ldr	r2, [pc, #124]	@ (8000990 <MX_GPIO_Init+0x114>)
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091a:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_GPIO_Init+0x114>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_GPIO_Init+0x114>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092e:	4a18      	ldr	r2, [pc, #96]	@ (8000990 <MX_GPIO_Init+0x114>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_GPIO_Init+0x114>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	4812      	ldr	r0, [pc, #72]	@ (8000994 <MX_GPIO_Init+0x118>)
 800094c:	f001 fe3e 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000950:	2308      	movs	r3, #8
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	480b      	ldr	r0, [pc, #44]	@ (8000994 <MX_GPIO_Init+0x118>)
 8000968:	f001 fc80 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_BUTTON_Pin */
  GPIO_InitStruct.Pin = EXT_BUTTON_Pin;
 800096c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000976:	2302      	movs	r3, #2
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(EXT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_GPIO_Init+0x11c>)
 8000982:	f001 fc73 	bl	800226c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	@ 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	58024400 	.word	0x58024400
 8000994:	58021000 	.word	0x58021000
 8000998:	58020800 	.word	0x58020800

0800099c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009ae:	f000 fe81 	bl	80016b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009be:	231f      	movs	r3, #31
 80009c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009c2:	2387      	movs	r3, #135	@ 0x87
 80009c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009ca:	2300      	movs	r3, #0
 80009cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009ce:	2301      	movs	r3, #1
 80009d0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009d2:	2301      	movs	r3, #1
 80009d4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009de:	463b      	mov	r3, r7
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fe9f 	bl	8001724 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009e6:	2004      	movs	r0, #4
 80009e8:	f000 fe7c 	bl	80016e4 <HAL_MPU_Enable>

}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <QSPI_AutoPollingMemReady>:

	return HAL_OK;

}

uint8_t QSPI_AutoPollingMemReady(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b096      	sub	sp, #88	@ 0x58
 8000a04:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2238      	movs	r2, #56	@ 0x38
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00d ffde 	bl	800e9d0 <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
 8000a22:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a28:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000a36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a3a:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a44:	2300      	movs	r3, #0
 8000a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	653b      	str	r3, [r7, #80]	@ 0x50

	sConfig.Match = 0x00;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x01;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000a60:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a64:	61bb      	str	r3, [r7, #24]
	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000a66:	1d3a      	adds	r2, r7, #4
 8000a68:	f107 011c 	add.w	r1, r7, #28
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a70:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <QSPI_AutoPollingMemReady+0x94>)
 8000a72:	f003 fadc 	bl	800402e <HAL_QSPI_AutoPolling>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000a7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <QSPI_AutoPollingMemReady+0x8a>
			HAL_MAX_DELAY)) != HAL_OK) {
		return ret;
 8000a84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000a88:	e000      	b.n	8000a8c <QSPI_AutoPollingMemReady+0x8c>
	}
	return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3758      	adds	r7, #88	@ 0x58
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	24000124 	.word	0x24000124

08000a98 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b096      	sub	sp, #88	@ 0x58
 8000a9c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	2238      	movs	r2, #56	@ 0x38
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f00d ff92 	bl	800e9d0 <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000abc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ac0:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DataMode = QSPI_DATA_NONE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DummyCycles = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ada:	2300      	movs	r3, #0
 8000adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	653b      	str	r3, [r7, #80]	@ 0x50

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000aea:	4619      	mov	r1, r3
 8000aec:	481a      	ldr	r0, [pc, #104]	@ (8000b58 <QSPI_WriteEnable+0xc0>)
 8000aee:	f003 f911 	bl	8003d14 <HAL_QSPI_Command>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000af8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <QSPI_WriteEnable+0x6e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000b00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000b04:	e024      	b.n	8000b50 <QSPI_WriteEnable+0xb8>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8000b06:	2302      	movs	r3, #2
 8000b08:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x02;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 8000b12:	2301      	movs	r3, #1
 8000b14:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 8000b16:	2310      	movs	r3, #16
 8000b18:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000b1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b1e:	61bb      	str	r3, [r7, #24]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000b20:	2305      	movs	r3, #5
 8000b22:	61fb      	str	r3, [r7, #28]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000b24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b28:	643b      	str	r3, [r7, #64]	@ 0x40

	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000b2a:	1d3a      	adds	r2, r7, #4
 8000b2c:	f107 011c 	add.w	r1, r7, #28
 8000b30:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b34:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <QSPI_WriteEnable+0xc0>)
 8000b36:	f003 fa7a 	bl	800402e <HAL_QSPI_AutoPolling>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <QSPI_WriteEnable+0xb6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000b48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000b4c:	e000      	b.n	8000b50 <QSPI_WriteEnable+0xb8>
	}
	return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3758      	adds	r7, #88	@ 0x58
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	24000124 	.word	0x24000124

08000b5c <CSP_QSPI_EraseSector>:
		return ret;
	}
	return HAL_OK;
}

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b090      	sub	sp, #64	@ 0x40
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

	QSPI_CommandTypeDef sCommand;

	EraseStartAddress = EraseStartAddress- (EraseStartAddress % MEMORY_SECTOR_SIZE);
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <CSP_QSPI_EraseSector+0x88>)
 8000b68:	4013      	ands	r3, r2
 8000b6a:	607b      	str	r3, [r7, #4]

	/* Erasing Sequence -------------------------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b70:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = SECTOR_ERASE_CMD;
 8000b72:	2320      	movs	r3, #32
 8000b74:	60bb      	str	r3, [r7, #8]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8000b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b80:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	63fb      	str	r3, [r7, #60]	@ 0x3c

	sCommand.DataMode = QSPI_DATA_NONE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.DummyCycles = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]


		sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000ba0:	60fb      	str	r3, [r7, #12]

		if (QSPI_WriteEnable() != HAL_OK) {
 8000ba2:	f7ff ff79 	bl	8000a98 <QSPI_WriteEnable>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <CSP_QSPI_EraseSector+0x54>
			return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e014      	b.n	8000bda <CSP_QSPI_EraseSector+0x7e>
		}

		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480b      	ldr	r0, [pc, #44]	@ (8000be8 <CSP_QSPI_EraseSector+0x8c>)
 8000bbc:	f003 f8aa 	bl	8003d14 <HAL_QSPI_Command>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <CSP_QSPI_EraseSector+0x6e>
				!= HAL_OK) {
			return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e007      	b.n	8000bda <CSP_QSPI_EraseSector+0x7e>
		}


		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000bca:	f7ff ff19 	bl	8000a00 <QSPI_AutoPollingMemReady>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <CSP_QSPI_EraseSector+0x7c>
			return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e000      	b.n	8000bda <CSP_QSPI_EraseSector+0x7e>
		}


	return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3740      	adds	r7, #64	@ 0x40
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	fffff000 	.word	0xfffff000
 8000be8:	24000124 	.word	0x24000124

08000bec <CSP_QSPI_WriteMemory>:

uint8_t CSP_QSPI_WriteMemory(uint8_t *buffer, uint32_t address,
		uint32_t buffer_size) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b096      	sub	sp, #88	@ 0x58
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]

	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	653b      	str	r3, [r7, #80]	@ 0x50

	//
	while (current_addr <= address) {
 8000bfc:	e003      	b.n	8000c06 <CSP_QSPI_WriteMemory+0x1a>
		current_addr += MEMORY_PAGE_SIZE;
 8000bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000c00:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c04:	653b      	str	r3, [r7, #80]	@ 0x50
	while (current_addr <= address) {
 8000c06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d9f7      	bls.n	8000bfe <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
 8000c0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	657b      	str	r3, [r7, #84]	@ 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
 8000c16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d901      	bls.n	8000c22 <CSP_QSPI_WriteMemory+0x36>
		current_size = buffer_size;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	657b      	str	r3, [r7, #84]	@ 0x54
	}

	/* Initialize the adress variables */
	current_addr = address;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	653b      	str	r3, [r7, #80]	@ 0x50
	end_addr = address + buffer_size;
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 8000c34:	2332      	movs	r3, #50	@ 0x32
 8000c36:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8000c38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3c:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000c3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c42:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c50:	2300      	movs	r3, #0
 8000c52:	64bb      	str	r3, [r7, #72]	@ 0x48
	sCommand.DataMode = QSPI_DATA_4_LINES;
 8000c54:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000c58:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.NbData = buffer_size;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.Address = address;
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
 8000c66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000c68:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
 8000c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if (current_size == 0) {
 8000c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <CSP_QSPI_WriteMemory+0x8c>
			return HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	e03f      	b.n	8000cf8 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
 8000c78:	f7ff ff0e 	bl	8000a98 <QSPI_WriteEnable>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <CSP_QSPI_WriteMemory+0x9a>
			return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e038      	b.n	8000cf8 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481b      	ldr	r0, [pc, #108]	@ (8000d00 <CSP_QSPI_WriteMemory+0x114>)
 8000c92:	f003 f83f 	bl	8003d14 <HAL_QSPI_Command>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <CSP_QSPI_WriteMemory+0xb4>
				!= HAL_OK) {

			return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e02b      	b.n	8000cf8 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ca4:	68f9      	ldr	r1, [r7, #12]
 8000ca6:	4816      	ldr	r0, [pc, #88]	@ (8000d00 <CSP_QSPI_WriteMemory+0x114>)
 8000ca8:	f003 f892 	bl	8003dd0 <HAL_QSPI_Transmit>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <CSP_QSPI_WriteMemory+0xca>
				!= HAL_OK) {

			return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e020      	b.n	8000cf8 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000cb6:	f7ff fea3 	bl	8000a00 <QSPI_AutoPollingMemReady>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <CSP_QSPI_WriteMemory+0xd8>
			return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e019      	b.n	8000cf8 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 8000cc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cc8:	4413      	add	r3, r2
 8000cca:	653b      	str	r3, [r7, #80]	@ 0x50
		buffer += current_size;
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cd0:	4413      	add	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 8000cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000cd6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 8000cda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d203      	bcs.n	8000ce8 <CSP_QSPI_WriteMemory+0xfc>
 8000ce0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	e001      	b.n	8000cec <CSP_QSPI_WriteMemory+0x100>
 8000ce8:	f44f 7380 	mov.w	r3, #256	@ 0x100
		current_size =
 8000cec:	657b      	str	r3, [r7, #84]	@ 0x54
	} while (current_addr <= end_addr);
 8000cee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d9b7      	bls.n	8000c66 <CSP_QSPI_WriteMemory+0x7a>

	return HAL_OK;
 8000cf6:	2300      	movs	r3, #0

}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3758      	adds	r7, #88	@ 0x58
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	24000124 	.word	0x24000124

08000d04 <CSP_QSPI_Read>:
	}

	return HAL_OK;
}

uint8_t CSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b092      	sub	sp, #72	@ 0x48
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the read command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
	s_command.Instruction = QUAD_IN_OUT_FAST_READ_CMD;
 8000d16:	23eb      	movs	r3, #235	@ 0xeb
 8000d18:	613b      	str	r3, [r7, #16]
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8000d1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000d20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d24:	61fb      	str	r3, [r7, #28]
	s_command.Address = ReadAddr;
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	@ 0x30
	s_command.DataMode = QSPI_DATA_4_LINES;
 8000d2e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000d32:	637b      	str	r3, [r7, #52]	@ 0x34
	s_command.DummyCycles = 6U;
 8000d34:	2306      	movs	r3, #6
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
	s_command.NbData = Size;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d40:	2300      	movs	r3, #0
 8000d42:	643b      	str	r3, [r7, #64]	@ 0x40
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d44:	2300      	movs	r3, #0
 8000d46:	647b      	str	r3, [r7, #68]	@ 0x44

	/* Configure the command */
	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d50:	4619      	mov	r1, r3
 8000d52:	4816      	ldr	r0, [pc, #88]	@ (8000dac <CSP_QSPI_Read+0xa8>)
 8000d54:	f002 ffde 	bl	8003d14 <HAL_QSPI_Command>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <CSP_QSPI_Read+0x5e>
			!= HAL_OK) {
		return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e01f      	b.n	8000da2 <CSP_QSPI_Read+0x9e>
	}

	/* Set S# timing for Read command */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <CSP_QSPI_Read+0xa8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <CSP_QSPI_Read+0xa8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d74:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_5_CYCLE);

	/* Reception of the data */
	if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d7a:	68f9      	ldr	r1, [r7, #12]
 8000d7c:	480b      	ldr	r0, [pc, #44]	@ (8000dac <CSP_QSPI_Read+0xa8>)
 8000d7e:	f003 f8b9 	bl	8003ef4 <HAL_QSPI_Receive>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <CSP_QSPI_Read+0x88>
			!= HAL_OK) {
		return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e00a      	b.n	8000da2 <CSP_QSPI_Read+0x9e>
	}

	/* Restore S# timing for nonRead commands */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <CSP_QSPI_Read+0xa8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000d96:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <CSP_QSPI_Read+0xa8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f442 62a0 	orr.w	r2, r2, #1280	@ 0x500
 8000d9e:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3748      	adds	r7, #72	@ 0x48
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000124 	.word	0x24000124

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <HAL_MspInit+0x30>)
 8000db8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dbc:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_MspInit+0x30>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_MspInit+0x30>)
 8000dc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	58024400 	.word	0x58024400

08000de4 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0bc      	sub	sp, #240	@ 0xf0
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	22c0      	movs	r2, #192	@ 0xc0
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f00d fde3 	bl	800e9d0 <memset>
  if(hqspi->Instance==QUADSPI)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a55      	ldr	r2, [pc, #340]	@ (8000f64 <HAL_QSPI_MspInit+0x180>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	f040 80a3 	bne.w	8000f5c <HAL_QSPI_MspInit+0x178>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000e16:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e1a:	f04f 0300 	mov.w	r3, #0
 8000e1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e26:	f107 0318 	add.w	r3, r7, #24
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 fb38 	bl	80054a0 <HAL_RCCEx_PeriphCLKConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8000e36:	f7ff fddd 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e3a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f68 <HAL_QSPI_MspInit+0x184>)
 8000e3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e40:	4a49      	ldr	r2, [pc, #292]	@ (8000f68 <HAL_QSPI_MspInit+0x184>)
 8000e42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e46:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000e4a:	4b47      	ldr	r3, [pc, #284]	@ (8000f68 <HAL_QSPI_MspInit+0x184>)
 8000e4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e58:	4b43      	ldr	r3, [pc, #268]	@ (8000f68 <HAL_QSPI_MspInit+0x184>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5e:	4a42      	ldr	r2, [pc, #264]	@ (8000f68 <HAL_QSPI_MspInit+0x184>)
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e68:	4b3f      	ldr	r3, [pc, #252]	@ (8000f68 <HAL_QSPI_MspInit+0x184>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b3c      	ldr	r3, [pc, #240]	@ (8000f68 <HAL_QSPI_MspInit+0x184>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7c:	4a3a      	ldr	r2, [pc, #232]	@ (8000f68 <HAL_QSPI_MspInit+0x184>)
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e86:	4b38      	ldr	r3, [pc, #224]	@ (8000f68 <HAL_QSPI_MspInit+0x184>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e94:	4b34      	ldr	r3, [pc, #208]	@ (8000f68 <HAL_QSPI_MspInit+0x184>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9a:	4a33      	ldr	r2, [pc, #204]	@ (8000f68 <HAL_QSPI_MspInit+0x184>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea4:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <HAL_QSPI_MspInit+0x184>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000eca:	2309      	movs	r3, #9
 8000ecc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4825      	ldr	r0, [pc, #148]	@ (8000f6c <HAL_QSPI_MspInit+0x188>)
 8000ed8:	f001 f9c8 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000edc:	2304      	movs	r3, #4
 8000ede:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ef4:	2309      	movs	r3, #9
 8000ef6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000efe:	4619      	mov	r1, r3
 8000f00:	481b      	ldr	r0, [pc, #108]	@ (8000f70 <HAL_QSPI_MspInit+0x18c>)
 8000f02:	f001 f9b3 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000f06:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f20:	2309      	movs	r3, #9
 8000f22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f26:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4811      	ldr	r0, [pc, #68]	@ (8000f74 <HAL_QSPI_MspInit+0x190>)
 8000f2e:	f001 f99d 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f32:	2340      	movs	r3, #64	@ 0x40
 8000f34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	@ (8000f70 <HAL_QSPI_MspInit+0x18c>)
 8000f58:	f001 f988 	bl	800226c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000f5c:	bf00      	nop
 8000f5e:	37f0      	adds	r7, #240	@ 0xf0
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	52005000 	.word	0x52005000
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	58021000 	.word	0x58021000
 8000f70:	58020400 	.word	0x58020400
 8000f74:	58020c00 	.word	0x58020c00

08000f78 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc0 <HAL_TIM_Base_MspInit+0x48>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d116      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f90:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f92:	f043 0320 	orr.w	r3, r3, #32
 8000f96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_TIM_Base_MspInit+0x4c>)
 8000f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fa0:	f003 0320 	and.w	r3, r3, #32
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	2037      	movs	r0, #55	@ 0x37
 8000fae:	f000 fb4c 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000fb2:	2037      	movs	r0, #55	@ 0x37
 8000fb4:	f000 fb63 	bl	800167e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40001400 	.word	0x40001400
 8000fc4:	58024400 	.word	0x58024400

08000fc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b0ba      	sub	sp, #232	@ 0xe8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	22c0      	movs	r2, #192	@ 0xc0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f00d fcf1 	bl	800e9d0 <memset>
  if(huart->Instance==USART1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80010a0 <HAL_UART_MspInit+0xd8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d14e      	bne.n	8001096 <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ff8:	f04f 0201 	mov.w	r2, #1
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4618      	mov	r0, r3
 8001010:	f004 fa46 	bl	80054a0 <HAL_RCCEx_PeriphCLKConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800101a:	f7ff fceb 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <HAL_UART_MspInit+0xdc>)
 8001020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001024:	4a1f      	ldr	r2, [pc, #124]	@ (80010a4 <HAL_UART_MspInit+0xdc>)
 8001026:	f043 0310 	orr.w	r3, r3, #16
 800102a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800102e:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <HAL_UART_MspInit+0xdc>)
 8001030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001034:	f003 0310 	and.w	r3, r3, #16
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <HAL_UART_MspInit+0xdc>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001042:	4a18      	ldr	r2, [pc, #96]	@ (80010a4 <HAL_UART_MspInit+0xdc>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <HAL_UART_MspInit+0xdc>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800105a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800105e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001074:	2307      	movs	r3, #7
 8001076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800107e:	4619      	mov	r1, r3
 8001080:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <HAL_UART_MspInit+0xe0>)
 8001082:	f001 f8f3 	bl	800226c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2025      	movs	r0, #37	@ 0x25
 800108c:	f000 fadd 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001090:	2025      	movs	r0, #37	@ 0x25
 8001092:	f000 faf4 	bl	800167e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001096:	bf00      	nop
 8001098:	37e8      	adds	r7, #232	@ 0xe8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40011000 	.word	0x40011000
 80010a4:	58024400 	.word	0x58024400
 80010a8:	58020000 	.word	0x58020000

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <NMI_Handler+0x4>

080010b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <MemManage_Handler+0x4>

080010c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001102:	f000 f977 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <USART1_IRQHandler+0x10>)
 8001112:	f006 fb1d 	bl	8007750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	240001bc 	.word	0x240001bc

08001120 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <TIM7_IRQHandler+0x10>)
 8001126:	f006 f83e 	bl	80071a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	24000170 	.word	0x24000170

08001134 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <OTG_FS_IRQHandler+0x10>)
 800113a:	f001 fba1 	bl	8002880 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	24023738 	.word	0x24023738

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800114c:	4b43      	ldr	r3, [pc, #268]	@ (800125c <SystemInit+0x114>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001152:	4a42      	ldr	r2, [pc, #264]	@ (800125c <SystemInit+0x114>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800115c:	4b40      	ldr	r3, [pc, #256]	@ (8001260 <SystemInit+0x118>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	2b06      	cmp	r3, #6
 8001166:	d807      	bhi.n	8001178 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001168:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <SystemInit+0x118>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f023 030f 	bic.w	r3, r3, #15
 8001170:	4a3b      	ldr	r2, [pc, #236]	@ (8001260 <SystemInit+0x118>)
 8001172:	f043 0307 	orr.w	r3, r3, #7
 8001176:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001178:	4b3a      	ldr	r3, [pc, #232]	@ (8001264 <SystemInit+0x11c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a39      	ldr	r2, [pc, #228]	@ (8001264 <SystemInit+0x11c>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001184:	4b37      	ldr	r3, [pc, #220]	@ (8001264 <SystemInit+0x11c>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800118a:	4b36      	ldr	r3, [pc, #216]	@ (8001264 <SystemInit+0x11c>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4935      	ldr	r1, [pc, #212]	@ (8001264 <SystemInit+0x11c>)
 8001190:	4b35      	ldr	r3, [pc, #212]	@ (8001268 <SystemInit+0x120>)
 8001192:	4013      	ands	r3, r2
 8001194:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001196:	4b32      	ldr	r3, [pc, #200]	@ (8001260 <SystemInit+0x118>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d007      	beq.n	80011b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <SystemInit+0x118>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 030f 	bic.w	r3, r3, #15
 80011aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001260 <SystemInit+0x118>)
 80011ac:	f043 0307 	orr.w	r3, r3, #7
 80011b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001264 <SystemInit+0x11c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001264 <SystemInit+0x11c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011be:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <SystemInit+0x11c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <SystemInit+0x11c>)
 80011c6:	4a29      	ldr	r2, [pc, #164]	@ (800126c <SystemInit+0x124>)
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <SystemInit+0x11c>)
 80011cc:	4a28      	ldr	r2, [pc, #160]	@ (8001270 <SystemInit+0x128>)
 80011ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011d0:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <SystemInit+0x11c>)
 80011d2:	4a28      	ldr	r2, [pc, #160]	@ (8001274 <SystemInit+0x12c>)
 80011d4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011d6:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <SystemInit+0x11c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011dc:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <SystemInit+0x11c>)
 80011de:	4a25      	ldr	r2, [pc, #148]	@ (8001274 <SystemInit+0x12c>)
 80011e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011e2:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <SystemInit+0x11c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <SystemInit+0x11c>)
 80011ea:	4a22      	ldr	r2, [pc, #136]	@ (8001274 <SystemInit+0x12c>)
 80011ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <SystemInit+0x11c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <SystemInit+0x11c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001264 <SystemInit+0x11c>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001200:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <SystemInit+0x11c>)
 8001202:	2200      	movs	r2, #0
 8001204:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001206:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <SystemInit+0x130>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <SystemInit+0x134>)
 800120c:	4013      	ands	r3, r2
 800120e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001212:	d202      	bcs.n	800121a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <SystemInit+0x138>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800121a:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <SystemInit+0x11c>)
 800121c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001220:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d113      	bne.n	8001250 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <SystemInit+0x11c>)
 800122a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800122e:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <SystemInit+0x11c>)
 8001230:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001234:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <SystemInit+0x13c>)
 800123a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800123e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <SystemInit+0x11c>)
 8001242:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001246:	4a07      	ldr	r2, [pc, #28]	@ (8001264 <SystemInit+0x11c>)
 8001248:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800124c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00
 8001260:	52002000 	.word	0x52002000
 8001264:	58024400 	.word	0x58024400
 8001268:	eaf6ed7f 	.word	0xeaf6ed7f
 800126c:	02020200 	.word	0x02020200
 8001270:	01ff0000 	.word	0x01ff0000
 8001274:	01010280 	.word	0x01010280
 8001278:	5c001000 	.word	0x5c001000
 800127c:	ffff0000 	.word	0xffff0000
 8001280:	51008108 	.word	0x51008108
 8001284:	52004000 	.word	0x52004000

08001288 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <ExitRun0Mode+0x2c>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <ExitRun0Mode+0x2c>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001298:	bf00      	nop
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <ExitRun0Mode+0x2c>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f9      	beq.n	800129a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	58024800 	.word	0x58024800

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012b8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80012f4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80012bc:	f7ff ffe4 	bl	8001288 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012c0:	f7ff ff42 	bl	8001148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c6:	490d      	ldr	r1, [pc, #52]	@ (80012fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001308 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ea:	f00d fb79 	bl	800e9e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ee:	f7ff f989 	bl	8000604 <main>
  bx  lr
 80012f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012fc:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8001300:	0800eb0c 	.word	0x0800eb0c
  ldr r2, =_sbss
 8001304:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8001308:	24024c94 	.word	0x24024c94

0800130c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC3_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001316:	2003      	movs	r0, #3
 8001318:	f000 f98c 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800131c:	f003 feea 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 8001320:	4602      	mov	r2, r0
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <HAL_Init+0x68>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	4913      	ldr	r1, [pc, #76]	@ (800137c <HAL_Init+0x6c>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <HAL_Init+0x68>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	4a0e      	ldr	r2, [pc, #56]	@ (800137c <HAL_Init+0x6c>)
 8001344:	5cd3      	ldrb	r3, [r2, r3]
 8001346:	f003 031f 	and.w	r3, r3, #31
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	fa22 f303 	lsr.w	r3, r2, r3
 8001350:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <HAL_Init+0x70>)
 8001352:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001354:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <HAL_Init+0x74>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135a:	200f      	movs	r0, #15
 800135c:	f000 f814 	bl	8001388 <HAL_InitTick>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e002      	b.n	8001370 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800136a:	f7ff fd21 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	58024400 	.word	0x58024400
 800137c:	0800eaa0 	.word	0x0800eaa0
 8001380:	24000004 	.word	0x24000004
 8001384:	24000000 	.word	0x24000000

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <HAL_InitTick+0x60>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e021      	b.n	80013e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800139c:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <HAL_InitTick+0x64>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <HAL_InitTick+0x60>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f971 	bl	800169a <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f93b 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	@ (80013f0 <HAL_InitTick+0x68>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2400000c 	.word	0x2400000c
 80013ec:	24000000 	.word	0x24000000
 80013f0:	24000008 	.word	0x24000008

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	2400000c 	.word	0x2400000c
 8001418:	24000250 	.word	0x24000250

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	@ (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	24000250 	.word	0x24000250

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffde 	bl	800141c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2400000c 	.word	0x2400000c

0800147c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <HAL_GetREVID+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0c1b      	lsrs	r3, r3, #16
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	5c001000 	.word	0x5c001000

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <__NVIC_SetPriorityGrouping+0x40>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c2:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <__NVIC_SetPriorityGrouping+0x40>)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	60d3      	str	r3, [r2, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00
 80014d8:	05fa0000 	.word	0x05fa0000

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	@ (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	@ (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	@ (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	@ 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	@ 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	@ (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff29 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001658:	f7ff ff40 	bl	80014dc <__NVIC_GetPriorityGrouping>
 800165c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	6978      	ldr	r0, [r7, #20]
 8001664:	f7ff ff90 	bl	8001588 <NVIC_EncodePriority>
 8001668:	4602      	mov	r2, r0
 800166a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff5f 	bl	8001534 <__NVIC_SetPriority>
}
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff33 	bl	80014f8 <__NVIC_EnableIRQ>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ffa4 	bl	80015f0 <SysTick_Config>
 80016a8:	4603      	mov	r3, r0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016b8:	f3bf 8f5f 	dmb	sy
}
 80016bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <HAL_MPU_Disable+0x28>)
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	4a06      	ldr	r2, [pc, #24]	@ (80016dc <HAL_MPU_Disable+0x28>)
 80016c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016ca:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_MPU_Disable+0x2c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00
 80016e0:	e000ed90 	.word	0xe000ed90

080016e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016ec:	4a0b      	ldr	r2, [pc, #44]	@ (800171c <HAL_MPU_Enable+0x38>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_MPU_Enable+0x3c>)
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <HAL_MPU_Enable+0x3c>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001700:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001702:	f3bf 8f4f 	dsb	sy
}
 8001706:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001708:	f3bf 8f6f 	isb	sy
}
 800170c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed90 	.word	0xe000ed90
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	785a      	ldrb	r2, [r3, #1]
 8001730:	4b1b      	ldr	r3, [pc, #108]	@ (80017a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001732:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	4a19      	ldr	r2, [pc, #100]	@ (80017a0 <HAL_MPU_ConfigRegion+0x7c>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001740:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <HAL_MPU_ConfigRegion+0x7c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7b1b      	ldrb	r3, [r3, #12]
 800174c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7adb      	ldrb	r3, [r3, #11]
 8001752:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001754:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7a9b      	ldrb	r3, [r3, #10]
 800175a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800175c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7b5b      	ldrb	r3, [r3, #13]
 8001762:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7b9b      	ldrb	r3, [r3, #14]
 800176a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800176c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7bdb      	ldrb	r3, [r3, #15]
 8001772:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7a5b      	ldrb	r3, [r3, #9]
 800177a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800177c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7a1b      	ldrb	r3, [r3, #8]
 8001782:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001784:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800178e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001790:	6113      	str	r3, [r2, #16]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed90 	.word	0xe000ed90

080017a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff fe36 	bl	800141c <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e2dc      	b.n	8001d76 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d008      	beq.n	80017da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2280      	movs	r2, #128	@ 0x80
 80017cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e2cd      	b.n	8001d76 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a76      	ldr	r2, [pc, #472]	@ (80019b8 <HAL_DMA_Abort+0x214>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d04a      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a74      	ldr	r2, [pc, #464]	@ (80019bc <HAL_DMA_Abort+0x218>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d045      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a73      	ldr	r2, [pc, #460]	@ (80019c0 <HAL_DMA_Abort+0x21c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d040      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a71      	ldr	r2, [pc, #452]	@ (80019c4 <HAL_DMA_Abort+0x220>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d03b      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a70      	ldr	r2, [pc, #448]	@ (80019c8 <HAL_DMA_Abort+0x224>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d036      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a6e      	ldr	r2, [pc, #440]	@ (80019cc <HAL_DMA_Abort+0x228>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d031      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a6d      	ldr	r2, [pc, #436]	@ (80019d0 <HAL_DMA_Abort+0x22c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d02c      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a6b      	ldr	r2, [pc, #428]	@ (80019d4 <HAL_DMA_Abort+0x230>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d027      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6a      	ldr	r2, [pc, #424]	@ (80019d8 <HAL_DMA_Abort+0x234>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d022      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a68      	ldr	r2, [pc, #416]	@ (80019dc <HAL_DMA_Abort+0x238>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01d      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a67      	ldr	r2, [pc, #412]	@ (80019e0 <HAL_DMA_Abort+0x23c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d018      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a65      	ldr	r2, [pc, #404]	@ (80019e4 <HAL_DMA_Abort+0x240>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a64      	ldr	r2, [pc, #400]	@ (80019e8 <HAL_DMA_Abort+0x244>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d00e      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a62      	ldr	r2, [pc, #392]	@ (80019ec <HAL_DMA_Abort+0x248>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d009      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a61      	ldr	r2, [pc, #388]	@ (80019f0 <HAL_DMA_Abort+0x24c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d004      	beq.n	800187a <HAL_DMA_Abort+0xd6>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a5f      	ldr	r2, [pc, #380]	@ (80019f4 <HAL_DMA_Abort+0x250>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_DMA_Abort+0xda>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_DMA_Abort+0xdc>
 800187e:	2300      	movs	r3, #0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 021e 	bic.w	r2, r2, #30
 8001892:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e00a      	b.n	80018c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 020e 	bic.w	r2, r2, #14
 80018ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a3c      	ldr	r2, [pc, #240]	@ (80019b8 <HAL_DMA_Abort+0x214>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d072      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a3a      	ldr	r2, [pc, #232]	@ (80019bc <HAL_DMA_Abort+0x218>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d06d      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a39      	ldr	r2, [pc, #228]	@ (80019c0 <HAL_DMA_Abort+0x21c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d068      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a37      	ldr	r2, [pc, #220]	@ (80019c4 <HAL_DMA_Abort+0x220>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d063      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a36      	ldr	r2, [pc, #216]	@ (80019c8 <HAL_DMA_Abort+0x224>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d05e      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a34      	ldr	r2, [pc, #208]	@ (80019cc <HAL_DMA_Abort+0x228>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d059      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a33      	ldr	r2, [pc, #204]	@ (80019d0 <HAL_DMA_Abort+0x22c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d054      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a31      	ldr	r2, [pc, #196]	@ (80019d4 <HAL_DMA_Abort+0x230>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d04f      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a30      	ldr	r2, [pc, #192]	@ (80019d8 <HAL_DMA_Abort+0x234>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d04a      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2e      	ldr	r2, [pc, #184]	@ (80019dc <HAL_DMA_Abort+0x238>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d045      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a2d      	ldr	r2, [pc, #180]	@ (80019e0 <HAL_DMA_Abort+0x23c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d040      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a2b      	ldr	r2, [pc, #172]	@ (80019e4 <HAL_DMA_Abort+0x240>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d03b      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a2a      	ldr	r2, [pc, #168]	@ (80019e8 <HAL_DMA_Abort+0x244>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d036      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a28      	ldr	r2, [pc, #160]	@ (80019ec <HAL_DMA_Abort+0x248>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d031      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a27      	ldr	r2, [pc, #156]	@ (80019f0 <HAL_DMA_Abort+0x24c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d02c      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a25      	ldr	r2, [pc, #148]	@ (80019f4 <HAL_DMA_Abort+0x250>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d027      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a24      	ldr	r2, [pc, #144]	@ (80019f8 <HAL_DMA_Abort+0x254>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d022      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a22      	ldr	r2, [pc, #136]	@ (80019fc <HAL_DMA_Abort+0x258>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d01d      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a21      	ldr	r2, [pc, #132]	@ (8001a00 <HAL_DMA_Abort+0x25c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d018      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1f      	ldr	r2, [pc, #124]	@ (8001a04 <HAL_DMA_Abort+0x260>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a08 <HAL_DMA_Abort+0x264>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00e      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a1c      	ldr	r2, [pc, #112]	@ (8001a0c <HAL_DMA_Abort+0x268>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d009      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a10 <HAL_DMA_Abort+0x26c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d004      	beq.n	80019b2 <HAL_DMA_Abort+0x20e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a19      	ldr	r2, [pc, #100]	@ (8001a14 <HAL_DMA_Abort+0x270>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d132      	bne.n	8001a18 <HAL_DMA_Abort+0x274>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e031      	b.n	8001a1a <HAL_DMA_Abort+0x276>
 80019b6:	bf00      	nop
 80019b8:	40020010 	.word	0x40020010
 80019bc:	40020028 	.word	0x40020028
 80019c0:	40020040 	.word	0x40020040
 80019c4:	40020058 	.word	0x40020058
 80019c8:	40020070 	.word	0x40020070
 80019cc:	40020088 	.word	0x40020088
 80019d0:	400200a0 	.word	0x400200a0
 80019d4:	400200b8 	.word	0x400200b8
 80019d8:	40020410 	.word	0x40020410
 80019dc:	40020428 	.word	0x40020428
 80019e0:	40020440 	.word	0x40020440
 80019e4:	40020458 	.word	0x40020458
 80019e8:	40020470 	.word	0x40020470
 80019ec:	40020488 	.word	0x40020488
 80019f0:	400204a0 	.word	0x400204a0
 80019f4:	400204b8 	.word	0x400204b8
 80019f8:	58025408 	.word	0x58025408
 80019fc:	5802541c 	.word	0x5802541c
 8001a00:	58025430 	.word	0x58025430
 8001a04:	58025444 	.word	0x58025444
 8001a08:	58025458 	.word	0x58025458
 8001a0c:	5802546c 	.word	0x5802546c
 8001a10:	58025480 	.word	0x58025480
 8001a14:	58025494 	.word	0x58025494
 8001a18:	2300      	movs	r3, #0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6d      	ldr	r2, [pc, #436]	@ (8001be8 <HAL_DMA_Abort+0x444>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d04a      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a6b      	ldr	r2, [pc, #428]	@ (8001bec <HAL_DMA_Abort+0x448>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d045      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a6a      	ldr	r2, [pc, #424]	@ (8001bf0 <HAL_DMA_Abort+0x44c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d040      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a68      	ldr	r2, [pc, #416]	@ (8001bf4 <HAL_DMA_Abort+0x450>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d03b      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a67      	ldr	r2, [pc, #412]	@ (8001bf8 <HAL_DMA_Abort+0x454>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d036      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a65      	ldr	r2, [pc, #404]	@ (8001bfc <HAL_DMA_Abort+0x458>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d031      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a64      	ldr	r2, [pc, #400]	@ (8001c00 <HAL_DMA_Abort+0x45c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d02c      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a62      	ldr	r2, [pc, #392]	@ (8001c04 <HAL_DMA_Abort+0x460>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d027      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a61      	ldr	r2, [pc, #388]	@ (8001c08 <HAL_DMA_Abort+0x464>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d022      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a5f      	ldr	r2, [pc, #380]	@ (8001c0c <HAL_DMA_Abort+0x468>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01d      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a5e      	ldr	r2, [pc, #376]	@ (8001c10 <HAL_DMA_Abort+0x46c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d018      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a5c      	ldr	r2, [pc, #368]	@ (8001c14 <HAL_DMA_Abort+0x470>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a5b      	ldr	r2, [pc, #364]	@ (8001c18 <HAL_DMA_Abort+0x474>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d00e      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a59      	ldr	r2, [pc, #356]	@ (8001c1c <HAL_DMA_Abort+0x478>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d009      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a58      	ldr	r2, [pc, #352]	@ (8001c20 <HAL_DMA_Abort+0x47c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d004      	beq.n	8001ace <HAL_DMA_Abort+0x32a>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a56      	ldr	r2, [pc, #344]	@ (8001c24 <HAL_DMA_Abort+0x480>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d108      	bne.n	8001ae0 <HAL_DMA_Abort+0x33c>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0201 	bic.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e007      	b.n	8001af0 <HAL_DMA_Abort+0x34c>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0201 	bic.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001af0:	e013      	b.n	8001b1a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001af2:	f7ff fc93 	bl	800141c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b05      	cmp	r3, #5
 8001afe:	d90c      	bls.n	8001b1a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2203      	movs	r2, #3
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e12d      	b.n	8001d76 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1e5      	bne.n	8001af2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001be8 <HAL_DMA_Abort+0x444>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d04a      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2d      	ldr	r2, [pc, #180]	@ (8001bec <HAL_DMA_Abort+0x448>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d045      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8001bf0 <HAL_DMA_Abort+0x44c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d040      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a2a      	ldr	r2, [pc, #168]	@ (8001bf4 <HAL_DMA_Abort+0x450>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d03b      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a29      	ldr	r2, [pc, #164]	@ (8001bf8 <HAL_DMA_Abort+0x454>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d036      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a27      	ldr	r2, [pc, #156]	@ (8001bfc <HAL_DMA_Abort+0x458>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d031      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a26      	ldr	r2, [pc, #152]	@ (8001c00 <HAL_DMA_Abort+0x45c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d02c      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a24      	ldr	r2, [pc, #144]	@ (8001c04 <HAL_DMA_Abort+0x460>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d027      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a23      	ldr	r2, [pc, #140]	@ (8001c08 <HAL_DMA_Abort+0x464>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d022      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a21      	ldr	r2, [pc, #132]	@ (8001c0c <HAL_DMA_Abort+0x468>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d01d      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a20      	ldr	r2, [pc, #128]	@ (8001c10 <HAL_DMA_Abort+0x46c>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d018      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1e      	ldr	r2, [pc, #120]	@ (8001c14 <HAL_DMA_Abort+0x470>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c18 <HAL_DMA_Abort+0x474>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d00e      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1b      	ldr	r2, [pc, #108]	@ (8001c1c <HAL_DMA_Abort+0x478>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d009      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c20 <HAL_DMA_Abort+0x47c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d004      	beq.n	8001bc6 <HAL_DMA_Abort+0x422>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a18      	ldr	r2, [pc, #96]	@ (8001c24 <HAL_DMA_Abort+0x480>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_DMA_Abort+0x426>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_DMA_Abort+0x428>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d02b      	beq.n	8001c28 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	223f      	movs	r2, #63	@ 0x3f
 8001be0:	409a      	lsls	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	e02a      	b.n	8001c3e <HAL_DMA_Abort+0x49a>
 8001be8:	40020010 	.word	0x40020010
 8001bec:	40020028 	.word	0x40020028
 8001bf0:	40020040 	.word	0x40020040
 8001bf4:	40020058 	.word	0x40020058
 8001bf8:	40020070 	.word	0x40020070
 8001bfc:	40020088 	.word	0x40020088
 8001c00:	400200a0 	.word	0x400200a0
 8001c04:	400200b8 	.word	0x400200b8
 8001c08:	40020410 	.word	0x40020410
 8001c0c:	40020428 	.word	0x40020428
 8001c10:	40020440 	.word	0x40020440
 8001c14:	40020458 	.word	0x40020458
 8001c18:	40020470 	.word	0x40020470
 8001c1c:	40020488 	.word	0x40020488
 8001c20:	400204a0 	.word	0x400204a0
 8001c24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	2201      	movs	r2, #1
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a4f      	ldr	r2, [pc, #316]	@ (8001d80 <HAL_DMA_Abort+0x5dc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d072      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001d84 <HAL_DMA_Abort+0x5e0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d06d      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a4c      	ldr	r2, [pc, #304]	@ (8001d88 <HAL_DMA_Abort+0x5e4>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d068      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a4a      	ldr	r2, [pc, #296]	@ (8001d8c <HAL_DMA_Abort+0x5e8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d063      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a49      	ldr	r2, [pc, #292]	@ (8001d90 <HAL_DMA_Abort+0x5ec>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d05e      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a47      	ldr	r2, [pc, #284]	@ (8001d94 <HAL_DMA_Abort+0x5f0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d059      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a46      	ldr	r2, [pc, #280]	@ (8001d98 <HAL_DMA_Abort+0x5f4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d054      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a44      	ldr	r2, [pc, #272]	@ (8001d9c <HAL_DMA_Abort+0x5f8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d04f      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a43      	ldr	r2, [pc, #268]	@ (8001da0 <HAL_DMA_Abort+0x5fc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d04a      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a41      	ldr	r2, [pc, #260]	@ (8001da4 <HAL_DMA_Abort+0x600>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d045      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a40      	ldr	r2, [pc, #256]	@ (8001da8 <HAL_DMA_Abort+0x604>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d040      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a3e      	ldr	r2, [pc, #248]	@ (8001dac <HAL_DMA_Abort+0x608>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d03b      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a3d      	ldr	r2, [pc, #244]	@ (8001db0 <HAL_DMA_Abort+0x60c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d036      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8001db4 <HAL_DMA_Abort+0x610>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d031      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a3a      	ldr	r2, [pc, #232]	@ (8001db8 <HAL_DMA_Abort+0x614>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d02c      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a38      	ldr	r2, [pc, #224]	@ (8001dbc <HAL_DMA_Abort+0x618>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d027      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a37      	ldr	r2, [pc, #220]	@ (8001dc0 <HAL_DMA_Abort+0x61c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d022      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a35      	ldr	r2, [pc, #212]	@ (8001dc4 <HAL_DMA_Abort+0x620>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01d      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a34      	ldr	r2, [pc, #208]	@ (8001dc8 <HAL_DMA_Abort+0x624>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d018      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a32      	ldr	r2, [pc, #200]	@ (8001dcc <HAL_DMA_Abort+0x628>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d013      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a31      	ldr	r2, [pc, #196]	@ (8001dd0 <HAL_DMA_Abort+0x62c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00e      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd4 <HAL_DMA_Abort+0x630>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d009      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2e      	ldr	r2, [pc, #184]	@ (8001dd8 <HAL_DMA_Abort+0x634>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d004      	beq.n	8001d2e <HAL_DMA_Abort+0x58a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a2c      	ldr	r2, [pc, #176]	@ (8001ddc <HAL_DMA_Abort+0x638>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d101      	bne.n	8001d32 <HAL_DMA_Abort+0x58e>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_DMA_Abort+0x590>
 8001d32:	2300      	movs	r3, #0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d015      	beq.n	8001d64 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d40:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00c      	beq.n	8001d64 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d58:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d62:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40020010 	.word	0x40020010
 8001d84:	40020028 	.word	0x40020028
 8001d88:	40020040 	.word	0x40020040
 8001d8c:	40020058 	.word	0x40020058
 8001d90:	40020070 	.word	0x40020070
 8001d94:	40020088 	.word	0x40020088
 8001d98:	400200a0 	.word	0x400200a0
 8001d9c:	400200b8 	.word	0x400200b8
 8001da0:	40020410 	.word	0x40020410
 8001da4:	40020428 	.word	0x40020428
 8001da8:	40020440 	.word	0x40020440
 8001dac:	40020458 	.word	0x40020458
 8001db0:	40020470 	.word	0x40020470
 8001db4:	40020488 	.word	0x40020488
 8001db8:	400204a0 	.word	0x400204a0
 8001dbc:	400204b8 	.word	0x400204b8
 8001dc0:	58025408 	.word	0x58025408
 8001dc4:	5802541c 	.word	0x5802541c
 8001dc8:	58025430 	.word	0x58025430
 8001dcc:	58025444 	.word	0x58025444
 8001dd0:	58025458 	.word	0x58025458
 8001dd4:	5802546c 	.word	0x5802546c
 8001dd8:	58025480 	.word	0x58025480
 8001ddc:	58025494 	.word	0x58025494

08001de0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e237      	b.n	8002262 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d004      	beq.n	8001e08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2280      	movs	r2, #128	@ 0x80
 8001e02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e22c      	b.n	8002262 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a5c      	ldr	r2, [pc, #368]	@ (8001f80 <HAL_DMA_Abort_IT+0x1a0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d04a      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a5b      	ldr	r2, [pc, #364]	@ (8001f84 <HAL_DMA_Abort_IT+0x1a4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d045      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a59      	ldr	r2, [pc, #356]	@ (8001f88 <HAL_DMA_Abort_IT+0x1a8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d040      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a58      	ldr	r2, [pc, #352]	@ (8001f8c <HAL_DMA_Abort_IT+0x1ac>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d03b      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a56      	ldr	r2, [pc, #344]	@ (8001f90 <HAL_DMA_Abort_IT+0x1b0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d036      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a55      	ldr	r2, [pc, #340]	@ (8001f94 <HAL_DMA_Abort_IT+0x1b4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d031      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a53      	ldr	r2, [pc, #332]	@ (8001f98 <HAL_DMA_Abort_IT+0x1b8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d02c      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a52      	ldr	r2, [pc, #328]	@ (8001f9c <HAL_DMA_Abort_IT+0x1bc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d027      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a50      	ldr	r2, [pc, #320]	@ (8001fa0 <HAL_DMA_Abort_IT+0x1c0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d022      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa4 <HAL_DMA_Abort_IT+0x1c4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d01d      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a4d      	ldr	r2, [pc, #308]	@ (8001fa8 <HAL_DMA_Abort_IT+0x1c8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d018      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a4c      	ldr	r2, [pc, #304]	@ (8001fac <HAL_DMA_Abort_IT+0x1cc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d013      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb0 <HAL_DMA_Abort_IT+0x1d0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00e      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a49      	ldr	r2, [pc, #292]	@ (8001fb4 <HAL_DMA_Abort_IT+0x1d4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d009      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a47      	ldr	r2, [pc, #284]	@ (8001fb8 <HAL_DMA_Abort_IT+0x1d8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d004      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0xc8>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a46      	ldr	r2, [pc, #280]	@ (8001fbc <HAL_DMA_Abort_IT+0x1dc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d101      	bne.n	8001eac <HAL_DMA_Abort_IT+0xcc>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_DMA_Abort_IT+0xce>
 8001eac:	2300      	movs	r3, #0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8086 	beq.w	8001fc0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8001f80 <HAL_DMA_Abort_IT+0x1a0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d04a      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a2e      	ldr	r2, [pc, #184]	@ (8001f84 <HAL_DMA_Abort_IT+0x1a4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d045      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8001f88 <HAL_DMA_Abort_IT+0x1a8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d040      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2b      	ldr	r2, [pc, #172]	@ (8001f8c <HAL_DMA_Abort_IT+0x1ac>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d03b      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a29      	ldr	r2, [pc, #164]	@ (8001f90 <HAL_DMA_Abort_IT+0x1b0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d036      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a28      	ldr	r2, [pc, #160]	@ (8001f94 <HAL_DMA_Abort_IT+0x1b4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d031      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a26      	ldr	r2, [pc, #152]	@ (8001f98 <HAL_DMA_Abort_IT+0x1b8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d02c      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a25      	ldr	r2, [pc, #148]	@ (8001f9c <HAL_DMA_Abort_IT+0x1bc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d027      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a23      	ldr	r2, [pc, #140]	@ (8001fa0 <HAL_DMA_Abort_IT+0x1c0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d022      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a22      	ldr	r2, [pc, #136]	@ (8001fa4 <HAL_DMA_Abort_IT+0x1c4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d01d      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a20      	ldr	r2, [pc, #128]	@ (8001fa8 <HAL_DMA_Abort_IT+0x1c8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d018      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fac <HAL_DMA_Abort_IT+0x1cc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb0 <HAL_DMA_Abort_IT+0x1d0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00e      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb4 <HAL_DMA_Abort_IT+0x1d4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d009      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb8 <HAL_DMA_Abort_IT+0x1d8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d004      	beq.n	8001f5c <HAL_DMA_Abort_IT+0x17c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a19      	ldr	r2, [pc, #100]	@ (8001fbc <HAL_DMA_Abort_IT+0x1dc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d108      	bne.n	8001f6e <HAL_DMA_Abort_IT+0x18e>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e178      	b.n	8002260 <HAL_DMA_Abort_IT+0x480>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e16f      	b.n	8002260 <HAL_DMA_Abort_IT+0x480>
 8001f80:	40020010 	.word	0x40020010
 8001f84:	40020028 	.word	0x40020028
 8001f88:	40020040 	.word	0x40020040
 8001f8c:	40020058 	.word	0x40020058
 8001f90:	40020070 	.word	0x40020070
 8001f94:	40020088 	.word	0x40020088
 8001f98:	400200a0 	.word	0x400200a0
 8001f9c:	400200b8 	.word	0x400200b8
 8001fa0:	40020410 	.word	0x40020410
 8001fa4:	40020428 	.word	0x40020428
 8001fa8:	40020440 	.word	0x40020440
 8001fac:	40020458 	.word	0x40020458
 8001fb0:	40020470 	.word	0x40020470
 8001fb4:	40020488 	.word	0x40020488
 8001fb8:	400204a0 	.word	0x400204a0
 8001fbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 020e 	bic.w	r2, r2, #14
 8001fce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a6c      	ldr	r2, [pc, #432]	@ (8002188 <HAL_DMA_Abort_IT+0x3a8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d04a      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6b      	ldr	r2, [pc, #428]	@ (800218c <HAL_DMA_Abort_IT+0x3ac>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d045      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a69      	ldr	r2, [pc, #420]	@ (8002190 <HAL_DMA_Abort_IT+0x3b0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d040      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a68      	ldr	r2, [pc, #416]	@ (8002194 <HAL_DMA_Abort_IT+0x3b4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d03b      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a66      	ldr	r2, [pc, #408]	@ (8002198 <HAL_DMA_Abort_IT+0x3b8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d036      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a65      	ldr	r2, [pc, #404]	@ (800219c <HAL_DMA_Abort_IT+0x3bc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d031      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a63      	ldr	r2, [pc, #396]	@ (80021a0 <HAL_DMA_Abort_IT+0x3c0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d02c      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a62      	ldr	r2, [pc, #392]	@ (80021a4 <HAL_DMA_Abort_IT+0x3c4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d027      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a60      	ldr	r2, [pc, #384]	@ (80021a8 <HAL_DMA_Abort_IT+0x3c8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d022      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a5f      	ldr	r2, [pc, #380]	@ (80021ac <HAL_DMA_Abort_IT+0x3cc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d01d      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a5d      	ldr	r2, [pc, #372]	@ (80021b0 <HAL_DMA_Abort_IT+0x3d0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d018      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a5c      	ldr	r2, [pc, #368]	@ (80021b4 <HAL_DMA_Abort_IT+0x3d4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a5a      	ldr	r2, [pc, #360]	@ (80021b8 <HAL_DMA_Abort_IT+0x3d8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00e      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a59      	ldr	r2, [pc, #356]	@ (80021bc <HAL_DMA_Abort_IT+0x3dc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d009      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a57      	ldr	r2, [pc, #348]	@ (80021c0 <HAL_DMA_Abort_IT+0x3e0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d004      	beq.n	8002070 <HAL_DMA_Abort_IT+0x290>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a56      	ldr	r2, [pc, #344]	@ (80021c4 <HAL_DMA_Abort_IT+0x3e4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d108      	bne.n	8002082 <HAL_DMA_Abort_IT+0x2a2>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	e007      	b.n	8002092 <HAL_DMA_Abort_IT+0x2b2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a3c      	ldr	r2, [pc, #240]	@ (8002188 <HAL_DMA_Abort_IT+0x3a8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d072      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a3a      	ldr	r2, [pc, #232]	@ (800218c <HAL_DMA_Abort_IT+0x3ac>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d06d      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a39      	ldr	r2, [pc, #228]	@ (8002190 <HAL_DMA_Abort_IT+0x3b0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d068      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a37      	ldr	r2, [pc, #220]	@ (8002194 <HAL_DMA_Abort_IT+0x3b4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d063      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a36      	ldr	r2, [pc, #216]	@ (8002198 <HAL_DMA_Abort_IT+0x3b8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d05e      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a34      	ldr	r2, [pc, #208]	@ (800219c <HAL_DMA_Abort_IT+0x3bc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d059      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a33      	ldr	r2, [pc, #204]	@ (80021a0 <HAL_DMA_Abort_IT+0x3c0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d054      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a31      	ldr	r2, [pc, #196]	@ (80021a4 <HAL_DMA_Abort_IT+0x3c4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d04f      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a30      	ldr	r2, [pc, #192]	@ (80021a8 <HAL_DMA_Abort_IT+0x3c8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d04a      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2e      	ldr	r2, [pc, #184]	@ (80021ac <HAL_DMA_Abort_IT+0x3cc>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d045      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a2d      	ldr	r2, [pc, #180]	@ (80021b0 <HAL_DMA_Abort_IT+0x3d0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d040      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2b      	ldr	r2, [pc, #172]	@ (80021b4 <HAL_DMA_Abort_IT+0x3d4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d03b      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2a      	ldr	r2, [pc, #168]	@ (80021b8 <HAL_DMA_Abort_IT+0x3d8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d036      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a28      	ldr	r2, [pc, #160]	@ (80021bc <HAL_DMA_Abort_IT+0x3dc>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d031      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a27      	ldr	r2, [pc, #156]	@ (80021c0 <HAL_DMA_Abort_IT+0x3e0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d02c      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a25      	ldr	r2, [pc, #148]	@ (80021c4 <HAL_DMA_Abort_IT+0x3e4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d027      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a24      	ldr	r2, [pc, #144]	@ (80021c8 <HAL_DMA_Abort_IT+0x3e8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d022      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a22      	ldr	r2, [pc, #136]	@ (80021cc <HAL_DMA_Abort_IT+0x3ec>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01d      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a21      	ldr	r2, [pc, #132]	@ (80021d0 <HAL_DMA_Abort_IT+0x3f0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d018      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1f      	ldr	r2, [pc, #124]	@ (80021d4 <HAL_DMA_Abort_IT+0x3f4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1e      	ldr	r2, [pc, #120]	@ (80021d8 <HAL_DMA_Abort_IT+0x3f8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <HAL_DMA_Abort_IT+0x3fc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1b      	ldr	r2, [pc, #108]	@ (80021e0 <HAL_DMA_Abort_IT+0x400>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_DMA_Abort_IT+0x3a2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a19      	ldr	r2, [pc, #100]	@ (80021e4 <HAL_DMA_Abort_IT+0x404>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d132      	bne.n	80021e8 <HAL_DMA_Abort_IT+0x408>
 8002182:	2301      	movs	r3, #1
 8002184:	e031      	b.n	80021ea <HAL_DMA_Abort_IT+0x40a>
 8002186:	bf00      	nop
 8002188:	40020010 	.word	0x40020010
 800218c:	40020028 	.word	0x40020028
 8002190:	40020040 	.word	0x40020040
 8002194:	40020058 	.word	0x40020058
 8002198:	40020070 	.word	0x40020070
 800219c:	40020088 	.word	0x40020088
 80021a0:	400200a0 	.word	0x400200a0
 80021a4:	400200b8 	.word	0x400200b8
 80021a8:	40020410 	.word	0x40020410
 80021ac:	40020428 	.word	0x40020428
 80021b0:	40020440 	.word	0x40020440
 80021b4:	40020458 	.word	0x40020458
 80021b8:	40020470 	.word	0x40020470
 80021bc:	40020488 	.word	0x40020488
 80021c0:	400204a0 	.word	0x400204a0
 80021c4:	400204b8 	.word	0x400204b8
 80021c8:	58025408 	.word	0x58025408
 80021cc:	5802541c 	.word	0x5802541c
 80021d0:	58025430 	.word	0x58025430
 80021d4:	58025444 	.word	0x58025444
 80021d8:	58025458 	.word	0x58025458
 80021dc:	5802546c 	.word	0x5802546c
 80021e0:	58025480 	.word	0x58025480
 80021e4:	58025494 	.word	0x58025494
 80021e8:	2300      	movs	r3, #0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d028      	beq.n	8002240 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002202:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	2201      	movs	r2, #1
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800221c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00c      	beq.n	8002240 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002230:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002234:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800223e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800227a:	4b89      	ldr	r3, [pc, #548]	@ (80024a0 <HAL_GPIO_Init+0x234>)
 800227c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800227e:	e194      	b.n	80025aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8186 	beq.w	80025a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d005      	beq.n	80022b0 <HAL_GPIO_Init+0x44>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d130      	bne.n	8002312 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022e6:	2201      	movs	r2, #1
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	f003 0201 	and.w	r2, r3, #1
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b03      	cmp	r3, #3
 800231c:	d017      	beq.n	800234e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2203      	movs	r2, #3
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d123      	bne.n	80023a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	08da      	lsrs	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3208      	adds	r2, #8
 8002362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	69b9      	ldr	r1, [r7, #24]
 800239e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0203 	and.w	r2, r3, #3
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80e0 	beq.w	80025a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e4:	4b2f      	ldr	r3, [pc, #188]	@ (80024a4 <HAL_GPIO_Init+0x238>)
 80023e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023ea:	4a2e      	ldr	r2, [pc, #184]	@ (80024a4 <HAL_GPIO_Init+0x238>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023f4:	4b2b      	ldr	r3, [pc, #172]	@ (80024a4 <HAL_GPIO_Init+0x238>)
 80023f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002402:	4a29      	ldr	r2, [pc, #164]	@ (80024a8 <HAL_GPIO_Init+0x23c>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a20      	ldr	r2, [pc, #128]	@ (80024ac <HAL_GPIO_Init+0x240>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d052      	beq.n	80024d4 <HAL_GPIO_Init+0x268>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a1f      	ldr	r2, [pc, #124]	@ (80024b0 <HAL_GPIO_Init+0x244>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d031      	beq.n	800249a <HAL_GPIO_Init+0x22e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a1e      	ldr	r2, [pc, #120]	@ (80024b4 <HAL_GPIO_Init+0x248>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02b      	beq.n	8002496 <HAL_GPIO_Init+0x22a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1d      	ldr	r2, [pc, #116]	@ (80024b8 <HAL_GPIO_Init+0x24c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d025      	beq.n	8002492 <HAL_GPIO_Init+0x226>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a1c      	ldr	r2, [pc, #112]	@ (80024bc <HAL_GPIO_Init+0x250>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01f      	beq.n	800248e <HAL_GPIO_Init+0x222>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a1b      	ldr	r2, [pc, #108]	@ (80024c0 <HAL_GPIO_Init+0x254>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_Init+0x21e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a1a      	ldr	r2, [pc, #104]	@ (80024c4 <HAL_GPIO_Init+0x258>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x21a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a19      	ldr	r2, [pc, #100]	@ (80024c8 <HAL_GPIO_Init+0x25c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x216>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a18      	ldr	r2, [pc, #96]	@ (80024cc <HAL_GPIO_Init+0x260>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x212>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a17      	ldr	r2, [pc, #92]	@ (80024d0 <HAL_GPIO_Init+0x264>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x20e>
 8002476:	2309      	movs	r3, #9
 8002478:	e02d      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 800247a:	230a      	movs	r3, #10
 800247c:	e02b      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 800247e:	2308      	movs	r3, #8
 8002480:	e029      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 8002482:	2307      	movs	r3, #7
 8002484:	e027      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 8002486:	2306      	movs	r3, #6
 8002488:	e025      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 800248a:	2305      	movs	r3, #5
 800248c:	e023      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 800248e:	2304      	movs	r3, #4
 8002490:	e021      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 8002492:	2303      	movs	r3, #3
 8002494:	e01f      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 8002496:	2302      	movs	r3, #2
 8002498:	e01d      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 800249a:	2301      	movs	r3, #1
 800249c:	e01b      	b.n	80024d6 <HAL_GPIO_Init+0x26a>
 800249e:	bf00      	nop
 80024a0:	58000080 	.word	0x58000080
 80024a4:	58024400 	.word	0x58024400
 80024a8:	58000400 	.word	0x58000400
 80024ac:	58020000 	.word	0x58020000
 80024b0:	58020400 	.word	0x58020400
 80024b4:	58020800 	.word	0x58020800
 80024b8:	58020c00 	.word	0x58020c00
 80024bc:	58021000 	.word	0x58021000
 80024c0:	58021400 	.word	0x58021400
 80024c4:	58021800 	.word	0x58021800
 80024c8:	58021c00 	.word	0x58021c00
 80024cc:	58022000 	.word	0x58022000
 80024d0:	58022400 	.word	0x58022400
 80024d4:	2300      	movs	r3, #0
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	f002 0203 	and.w	r2, r2, #3
 80024dc:	0092      	lsls	r2, r2, #2
 80024de:	4093      	lsls	r3, r2
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e6:	4938      	ldr	r1, [pc, #224]	@ (80025c8 <HAL_GPIO_Init+0x35c>)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800251a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002548:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	3301      	adds	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f47f ae63 	bne.w	8002280 <HAL_GPIO_Init+0x14>
  }
}
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	3724      	adds	r7, #36	@ 0x24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	58000400 	.word	0x58000400

080025cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
 80025d8:	4613      	mov	r3, r2
 80025da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025dc:	787b      	ldrb	r3, [r7, #1]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025e8:	e003      	b.n	80025f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	619a      	str	r2, [r3, #24]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af02      	add	r7, sp, #8
 8002604:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0fe      	b.n	800280e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d106      	bne.n	800262a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f00b fe6d 	bl	800e304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2203      	movs	r2, #3
 800262e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f006 fe8b 	bl	8009352 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	7c1a      	ldrb	r2, [r3, #16]
 8002644:	f88d 2000 	strb.w	r2, [sp]
 8002648:	3304      	adds	r3, #4
 800264a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800264c:	f006 fd5c 	bl	8009108 <USB_CoreInit>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2202      	movs	r2, #2
 800265a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0d5      	b.n	800280e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f006 fe83 	bl	8009374 <USB_SetCurrentMode>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0c6      	b.n	800280e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	e04a      	b.n	800271c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3315      	adds	r3, #21
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800269a:	7bfa      	ldrb	r2, [r7, #15]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	3314      	adds	r3, #20
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	b298      	uxth	r0, r3
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	332e      	adds	r3, #46	@ 0x2e
 80026c2:	4602      	mov	r2, r0
 80026c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3318      	adds	r3, #24
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	331c      	adds	r3, #28
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3320      	adds	r3, #32
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	3324      	adds	r3, #36	@ 0x24
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	3301      	adds	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	791b      	ldrb	r3, [r3, #4]
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	429a      	cmp	r2, r3
 8002724:	d3af      	bcc.n	8002686 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e044      	b.n	80027b6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	3301      	adds	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	791b      	ldrb	r3, [r3, #4]
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3b5      	bcc.n	800272c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7c1a      	ldrb	r2, [r3, #16]
 80027c8:	f88d 2000 	strb.w	r2, [sp]
 80027cc:	3304      	adds	r3, #4
 80027ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d0:	f006 fe1c 	bl	800940c <USB_DevInit>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e013      	b.n	800280e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	7b1b      	ldrb	r3, [r3, #12]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d102      	bne.n	8002802 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f001 f99b 	bl	8003b38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f007 fe5f 	bl	800a4ca <USB_DevDisconnect>

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_PCD_Start+0x1c>
 800282e:	2302      	movs	r3, #2
 8002830:	e022      	b.n	8002878 <HAL_PCD_Start+0x62>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800284a:	2b01      	cmp	r3, #1
 800284c:	d105      	bne.n	800285a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002852:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f006 fd66 	bl	8009330 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f007 fe0d 	bl	800a488 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b08d      	sub	sp, #52	@ 0x34
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f007 fecb 	bl	800a632 <USB_GetMode>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 84b9 	bne.w	8003216 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f007 fe2f 	bl	800a50c <USB_ReadInterrupts>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 84af 	beq.w	8003214 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f007 fe1c 	bl	800a50c <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d107      	bne.n	80028ee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f002 0202 	and.w	r2, r2, #2
 80028ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f007 fe0a 	bl	800a50c <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d161      	bne.n	80029c6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699a      	ldr	r2, [r3, #24]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0210 	bic.w	r2, r2, #16
 8002910:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f003 020f 	and.w	r2, r3, #15
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002938:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800293c:	d124      	bne.n	8002988 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d035      	beq.n	80029b6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002958:	b29b      	uxth	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	6a38      	ldr	r0, [r7, #32]
 800295e:	f007 fc41 	bl	800a1e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800296e:	441a      	add	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002980:	441a      	add	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	615a      	str	r2, [r3, #20]
 8002986:	e016      	b.n	80029b6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800298e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002992:	d110      	bne.n	80029b6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800299a:	2208      	movs	r2, #8
 800299c:	4619      	mov	r1, r3
 800299e:	6a38      	ldr	r0, [r7, #32]
 80029a0:	f007 fc20 	bl	800a1e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b0:	441a      	add	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0210 	orr.w	r2, r2, #16
 80029c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f007 fd9e 	bl	800a50c <USB_ReadInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029da:	f040 80a7 	bne.w	8002b2c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f007 fda3 	bl	800a532 <USB_ReadDevAllOutEpInterrupt>
 80029ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80029ee:	e099      	b.n	8002b24 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 808e 	beq.w	8002b18 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f007 fdc7 	bl	800a59a <USB_ReadDevOutEPInterrupt>
 8002a0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00c      	beq.n	8002a32 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a24:	461a      	mov	r2, r3
 8002a26:	2301      	movs	r3, #1
 8002a28:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fefd 	bl	800382c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00c      	beq.n	8002a56 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 ffd3 	bl	80039fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2310      	movs	r3, #16
 8002a70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d030      	beq.n	8002ade <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a84:	2b80      	cmp	r3, #128	@ 0x80
 8002a86:	d109      	bne.n	8002a9c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a9a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	3304      	adds	r3, #4
 8002ab0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	78db      	ldrb	r3, [r3, #3]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d108      	bne.n	8002acc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2200      	movs	r2, #0
 8002abe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f00b fd50 	bl	800e56c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2302      	movs	r3, #2
 8002adc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002af4:	461a      	mov	r2, r3
 8002af6:	2320      	movs	r3, #32
 8002af8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d009      	beq.n	8002b18 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b10:	461a      	mov	r2, r3
 8002b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b16:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f47f af62 	bne.w	80029f0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f007 fceb 	bl	800a50c <USB_ReadInterrupts>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b40:	f040 80db 	bne.w	8002cfa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f007 fd0c 	bl	800a566 <USB_ReadDevAllInEpInterrupt>
 8002b4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b54:	e0cd      	b.n	8002cf2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80c2 	beq.w	8002ce6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f007 fd32 	bl	800a5d6 <USB_ReadDevInEPInterrupt>
 8002b72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d057      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	2201      	movs	r2, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69f9      	ldr	r1, [r7, #28]
 8002b9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	799b      	ldrb	r3, [r3, #6]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d132      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3320      	adds	r3, #32
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4403      	add	r3, r0
 8002bdc:	331c      	adds	r3, #28
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4419      	add	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4403      	add	r3, r0
 8002bf0:	3320      	adds	r3, #32
 8002bf2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d113      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x3a2>
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	3324      	adds	r3, #36	@ 0x24
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d108      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	f007 fd3b 	bl	800a698 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	4619      	mov	r1, r3
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f00b fc1a 	bl	800e462 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c44:	461a      	mov	r2, r3
 8002c46:	2308      	movs	r3, #8
 8002c48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c60:	461a      	mov	r2, r3
 8002c62:	2310      	movs	r3, #16
 8002c64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2340      	movs	r3, #64	@ 0x40
 8002c80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d023      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c8e:	6a38      	ldr	r0, [r7, #32]
 8002c90:	f006 fd1a 	bl	80096c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c96:	4613      	mov	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	3310      	adds	r3, #16
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	78db      	ldrb	r3, [r3, #3]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d108      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f00b fc67 	bl	800e590 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fd17 	bl	8003714 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	3301      	adds	r3, #1
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f af2e 	bne.w	8002b56 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f007 fc04 	bl	800a50c <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d0e:	d122      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d108      	bne.n	8002d40 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d36:	2100      	movs	r1, #0
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 ff21 	bl	8003b80 <HAL_PCDEx_LPM_Callback>
 8002d3e:	e002      	b.n	8002d46 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f00b fc05 	bl	800e550 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695a      	ldr	r2, [r3, #20]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f007 fbd6 	bl	800a50c <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d6a:	d112      	bne.n	8002d92 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d102      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f00b fbc1 	bl	800e504 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f007 fbb8 	bl	800a50c <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002da2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002da6:	d121      	bne.n	8002dec <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002db6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d111      	bne.n	8002de6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	f003 020f 	and.w	r2, r3, #15
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ddc:	2101      	movs	r1, #1
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fece 	bl	8003b80 <HAL_PCDEx_LPM_Callback>
 8002de4:	e002      	b.n	8002dec <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f00b fb8c 	bl	800e504 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f007 fb8b 	bl	800a50c <USB_ReadInterrupts>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e00:	f040 80b7 	bne.w	8002f72 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2110      	movs	r1, #16
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f006 fc52 	bl	80096c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e24:	2300      	movs	r3, #0
 8002e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e28:	e046      	b.n	8002eb8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e36:	461a      	mov	r2, r3
 8002e38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e4e:	0151      	lsls	r1, r2, #5
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	440a      	add	r2, r1
 8002e54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e82:	0151      	lsls	r1, r2, #5
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	440a      	add	r2, r1
 8002e88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ea2:	0151      	lsls	r1, r2, #5
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	440a      	add	r2, r1
 8002ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002eac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002eb0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	791b      	ldrb	r3, [r3, #4]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d3b2      	bcc.n	8002e2a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ed2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ed6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7bdb      	ldrb	r3, [r3, #15]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d016      	beq.n	8002f0e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ef0:	f043 030b 	orr.w	r3, r3, #11
 8002ef4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f06:	f043 030b 	orr.w	r3, r3, #11
 8002f0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f0c:	e015      	b.n	8002f3a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002f22:	4313      	orrs	r3, r2
 8002f24:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f34:	f043 030b 	orr.w	r3, r3, #11
 8002f38:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f48:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f4c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f007 fb9b 	bl	800a698 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f007 fac8 	bl	800a50c <USB_ReadInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f86:	d123      	bne.n	8002fd0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f007 fb5f 	bl	800a650 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f006 fc0f 	bl	80097ba <USB_GetDevSpeed>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681c      	ldr	r4, [r3, #0]
 8002fa8:	f002 fa1e 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 8002fac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f006 f919 	bl	80091ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f00b fa79 	bl	800e4b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f007 fa99 	bl	800a50c <USB_ReadInterrupts>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d10a      	bne.n	8002ffa <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f00b fa56 	bl	800e496 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f002 0208 	and.w	r2, r2, #8
 8002ff8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f007 fa84 	bl	800a50c <USB_ReadInterrupts>
 8003004:	4603      	mov	r3, r0
 8003006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300a:	2b80      	cmp	r3, #128	@ 0x80
 800300c:	d123      	bne.n	8003056 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800301a:	2301      	movs	r3, #1
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24
 800301e:	e014      	b.n	800304a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d105      	bne.n	8003044 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	b2db      	uxtb	r3, r3
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fb0a 	bl	8003658 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	3301      	adds	r3, #1
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	791b      	ldrb	r3, [r3, #4]
 800304e:	461a      	mov	r2, r3
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	4293      	cmp	r3, r2
 8003054:	d3e4      	bcc.n	8003020 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f007 fa56 	bl	800a50c <USB_ReadInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800306a:	d13c      	bne.n	80030e6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800306c:	2301      	movs	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003070:	e02b      	b.n	80030ca <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3318      	adds	r3, #24
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d115      	bne.n	80030c4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003098:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800309a:	2b00      	cmp	r3, #0
 800309c:	da12      	bge.n	80030c4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3317      	adds	r3, #23
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	4619      	mov	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 faca 	bl	8003658 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	3301      	adds	r3, #1
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	791b      	ldrb	r3, [r3, #4]
 80030ce:	461a      	mov	r2, r3
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d3cd      	bcc.n	8003072 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80030e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f007 fa0e 	bl	800a50c <USB_ReadInterrupts>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030fa:	d156      	bne.n	80031aa <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030fc:	2301      	movs	r3, #1
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003100:	e045      	b.n	800318e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d12e      	bne.n	8003188 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800312a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800312c:	2b00      	cmp	r3, #0
 800312e:	da2b      	bge.n	8003188 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	0c1a      	lsrs	r2, r3, #16
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800313a:	4053      	eors	r3, r2
 800313c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003140:	2b00      	cmp	r3, #0
 8003142:	d121      	bne.n	8003188 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003180:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003184:	6053      	str	r3, [r2, #4]
            break;
 8003186:	e008      	b.n	800319a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	3301      	adds	r3, #1
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	791b      	ldrb	r3, [r3, #4]
 8003192:	461a      	mov	r2, r3
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	4293      	cmp	r3, r2
 8003198:	d3b3      	bcc.n	8003102 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80031a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f007 f9ac 	bl	800a50c <USB_ReadInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031be:	d10a      	bne.n	80031d6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f00b f9f7 	bl	800e5b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80031d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f007 f996 	bl	800a50c <USB_ReadInterrupts>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d115      	bne.n	8003216 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f00b f9e7 	bl	800e5d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	e000      	b.n	8003216 <HAL_PCD_IRQHandler+0x996>
      return;
 8003214:	bf00      	nop
    }
  }
}
 8003216:	3734      	adds	r7, #52	@ 0x34
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}

0800321c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_PCD_SetAddress+0x1a>
 8003232:	2302      	movs	r3, #2
 8003234:	e012      	b.n	800325c <HAL_PCD_SetAddress+0x40>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f007 f8f5 	bl	800a43c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	461a      	mov	r2, r3
 8003272:	4603      	mov	r3, r0
 8003274:	70fb      	strb	r3, [r7, #3]
 8003276:	460b      	mov	r3, r1
 8003278:	803b      	strh	r3, [r7, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003286:	2b00      	cmp	r3, #0
 8003288:	da0f      	bge.n	80032aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 020f 	and.w	r2, r3, #15
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	3310      	adds	r3, #16
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	3304      	adds	r3, #4
 80032a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	705a      	strb	r2, [r3, #1]
 80032a8:	e00f      	b.n	80032ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 020f 	and.w	r2, r3, #15
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80032d6:	883b      	ldrh	r3, [r7, #0]
 80032d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	78ba      	ldrb	r2, [r7, #2]
 80032e4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	785b      	ldrb	r3, [r3, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d004      	beq.n	80032f8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032f8:	78bb      	ldrb	r3, [r7, #2]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d102      	bne.n	8003304 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_PCD_EP_Open+0xae>
 800330e:	2302      	movs	r3, #2
 8003310:	e00e      	b.n	8003330 <HAL_PCD_EP_Open+0xcc>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68f9      	ldr	r1, [r7, #12]
 8003320:	4618      	mov	r0, r3
 8003322:	f006 fa6f 	bl	8009804 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800332e:	7afb      	ldrb	r3, [r7, #11]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003348:	2b00      	cmp	r3, #0
 800334a:	da0f      	bge.n	800336c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	f003 020f 	and.w	r2, r3, #15
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	3310      	adds	r3, #16
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	3304      	adds	r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	705a      	strb	r2, [r3, #1]
 800336a:	e00f      	b.n	800338c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	f003 020f 	and.w	r2, r3, #15
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	3304      	adds	r3, #4
 8003384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_PCD_EP_Close+0x6e>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e00e      	b.n	80033c4 <HAL_PCD_EP_Close+0x8c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f006 faad 	bl	8009914 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	460b      	mov	r3, r1
 80033da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033dc:	7afb      	ldrb	r3, [r7, #11]
 80033de:	f003 020f 	and.w	r2, r3, #15
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4413      	add	r3, r2
 80033f2:	3304      	adds	r3, #4
 80033f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2200      	movs	r2, #0
 8003406:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2200      	movs	r2, #0
 800340c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800340e:	7afb      	ldrb	r3, [r7, #11]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	b2da      	uxtb	r2, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	799b      	ldrb	r3, [r3, #6]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d102      	bne.n	8003428 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	799b      	ldrb	r3, [r3, #6]
 8003430:	461a      	mov	r2, r3
 8003432:	6979      	ldr	r1, [r7, #20]
 8003434:	f006 fb4a 	bl	8009acc <USB_EPStartXfer>

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	f003 020f 	and.w	r2, r3, #15
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003464:	681b      	ldr	r3, [r3, #0]
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	460b      	mov	r3, r1
 8003480:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003482:	7afb      	ldrb	r3, [r7, #11]
 8003484:	f003 020f 	and.w	r2, r3, #15
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	3310      	adds	r3, #16
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	3304      	adds	r3, #4
 8003498:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2201      	movs	r2, #1
 80034b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b2:	7afb      	ldrb	r3, [r7, #11]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	799b      	ldrb	r3, [r3, #6]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	799b      	ldrb	r3, [r3, #6]
 80034d4:	461a      	mov	r2, r3
 80034d6:	6979      	ldr	r1, [r7, #20]
 80034d8:	f006 faf8 	bl	8009acc <USB_EPStartXfer>

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	7912      	ldrb	r2, [r2, #4]
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e04f      	b.n	80035a4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003508:	2b00      	cmp	r3, #0
 800350a:	da0f      	bge.n	800352c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	f003 020f 	and.w	r2, r3, #15
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	3310      	adds	r3, #16
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	3304      	adds	r3, #4
 8003522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	705a      	strb	r2, [r3, #1]
 800352a:	e00d      	b.n	8003548 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	3304      	adds	r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_PCD_EP_SetStall+0x82>
 8003564:	2302      	movs	r3, #2
 8003566:	e01d      	b.n	80035a4 <HAL_PCD_EP_SetStall+0xbe>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68f9      	ldr	r1, [r7, #12]
 8003576:	4618      	mov	r0, r3
 8003578:	f006 fe8c 	bl	800a294 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7999      	ldrb	r1, [r3, #6]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003594:	461a      	mov	r2, r3
 8003596:	f007 f87f 	bl	800a698 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	7912      	ldrb	r2, [r2, #4]
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e042      	b.n	8003650 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	da0f      	bge.n	80035f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	f003 020f 	and.w	r2, r3, #15
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	3310      	adds	r3, #16
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	3304      	adds	r3, #4
 80035e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	705a      	strb	r2, [r3, #1]
 80035f0:	e00f      	b.n	8003612 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	f003 020f 	and.w	r2, r3, #15
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	4413      	add	r3, r2
 8003608:	3304      	adds	r3, #4
 800360a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_PCD_EP_ClrStall+0x86>
 800362e:	2302      	movs	r3, #2
 8003630:	e00e      	b.n	8003650 <HAL_PCD_EP_ClrStall+0xa4>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	4618      	mov	r0, r3
 8003642:	f006 fe95 	bl	800a370 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003668:	2b00      	cmp	r3, #0
 800366a:	da0c      	bge.n	8003686 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	f003 020f 	and.w	r2, r3, #15
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	3310      	adds	r3, #16
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	3304      	adds	r3, #4
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e00c      	b.n	80036a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003686:	78fb      	ldrb	r3, [r7, #3]
 8003688:	f003 020f 	and.w	r2, r3, #15
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4413      	add	r3, r2
 800369c:	3304      	adds	r3, #4
 800369e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68f9      	ldr	r1, [r7, #12]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f006 fcb4 	bl	800a014 <USB_EPStopXfer>
 80036ac:	4603      	mov	r3, r0
 80036ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036b0:	7afb      	ldrb	r3, [r7, #11]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_PCD_EP_Flush+0x1a>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e01b      	b.n	800370c <HAL_PCD_EP_Flush+0x52>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80036dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	da09      	bge.n	80036f8 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f005 ffe9 	bl	80096c8 <USB_FlushTxFifo>
 80036f6:	e004      	b.n	8003702 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f006 f815 	bl	800972c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	@ 0x28
 8003718:	af02      	add	r7, sp, #8
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	3310      	adds	r3, #16
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4413      	add	r3, r2
 8003738:	3304      	adds	r3, #4
 800373a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	429a      	cmp	r2, r3
 8003746:	d901      	bls.n	800374c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e06b      	b.n	8003824 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	429a      	cmp	r2, r3
 8003760:	d902      	bls.n	8003768 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	3303      	adds	r3, #3
 800376c:	089b      	lsrs	r3, r3, #2
 800376e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003770:	e02a      	b.n	80037c8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	429a      	cmp	r2, r3
 8003786:	d902      	bls.n	800378e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3303      	adds	r3, #3
 8003792:	089b      	lsrs	r3, r3, #2
 8003794:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	68d9      	ldr	r1, [r3, #12]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	b2da      	uxtb	r2, r3
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	4603      	mov	r3, r0
 80037aa:	6978      	ldr	r0, [r7, #20]
 80037ac:	f006 fcdc 	bl	800a168 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	441a      	add	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	441a      	add	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d809      	bhi.n	80037f2 <PCD_WriteEmptyTxFifo+0xde>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d203      	bcs.n	80037f2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1bf      	bne.n	8003772 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d811      	bhi.n	8003822 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	2201      	movs	r2, #1
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	43db      	mvns	r3, r3
 8003818:	6939      	ldr	r1, [r7, #16]
 800381a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800381e:	4013      	ands	r3, r2
 8003820:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3720      	adds	r7, #32
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	333c      	adds	r3, #60	@ 0x3c
 8003844:	3304      	adds	r3, #4
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	799b      	ldrb	r3, [r3, #6]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d17b      	bne.n	800395a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d015      	beq.n	8003898 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	4a61      	ldr	r2, [pc, #388]	@ (80039f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	f240 80b9 	bls.w	80039e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80b3 	beq.w	80039e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800388e:	461a      	mov	r2, r3
 8003890:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003894:	6093      	str	r3, [r2, #8]
 8003896:	e0a7      	b.n	80039e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ae:	461a      	mov	r2, r3
 80038b0:	2320      	movs	r3, #32
 80038b2:	6093      	str	r3, [r2, #8]
 80038b4:	e098      	b.n	80039e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f040 8093 	bne.w	80039e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	4a4b      	ldr	r2, [pc, #300]	@ (80039f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d90f      	bls.n	80038ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e0:	461a      	mov	r2, r3
 80038e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038e6:	6093      	str	r3, [r2, #8]
 80038e8:	e07e      	b.n	80039e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	4413      	add	r3, r2
 80038fc:	3304      	adds	r3, #4
 80038fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	0159      	lsls	r1, r3, #5
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	440b      	add	r3, r1
 800390c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003916:	1ad2      	subs	r2, r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d114      	bne.n	800394c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003934:	461a      	mov	r2, r3
 8003936:	2101      	movs	r1, #1
 8003938:	f006 feae 	bl	800a698 <USB_EP0_OutStart>
 800393c:	e006      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	441a      	add	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f00a fd6a 	bl	800e42c <HAL_PCD_DataOutStageCallback>
 8003958:	e046      	b.n	80039e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4a26      	ldr	r2, [pc, #152]	@ (80039f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d124      	bne.n	80039ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003978:	461a      	mov	r2, r3
 800397a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800397e:	6093      	str	r3, [r2, #8]
 8003980:	e032      	b.n	80039e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003998:	461a      	mov	r2, r3
 800399a:	2320      	movs	r3, #32
 800399c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f00a fd41 	bl	800e42c <HAL_PCD_DataOutStageCallback>
 80039aa:	e01d      	b.n	80039e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d114      	bne.n	80039dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d108      	bne.n	80039dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039d4:	461a      	mov	r2, r3
 80039d6:	2100      	movs	r1, #0
 80039d8:	f006 fe5e 	bl	800a698 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f00a fd22 	bl	800e42c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3720      	adds	r7, #32
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	4f54300a 	.word	0x4f54300a
 80039f8:	4f54310a 	.word	0x4f54310a

080039fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	333c      	adds	r3, #60	@ 0x3c
 8003a14:	3304      	adds	r3, #4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4a15      	ldr	r2, [pc, #84]	@ (8003a84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d90e      	bls.n	8003a50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d009      	beq.n	8003a50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f00a fcd9 	bl	800e408 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a0a      	ldr	r2, [pc, #40]	@ (8003a84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d90c      	bls.n	8003a78 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	799b      	ldrb	r3, [r3, #6]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d108      	bne.n	8003a78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a70:	461a      	mov	r2, r3
 8003a72:	2101      	movs	r1, #1
 8003a74:	f006 fe10 	bl	800a698 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	4f54300a 	.word	0x4f54300a

08003a88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	70fb      	strb	r3, [r7, #3]
 8003a94:	4613      	mov	r3, r2
 8003a96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d107      	bne.n	8003ab6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003aa6:	883b      	ldrh	r3, [r7, #0]
 8003aa8:	0419      	lsls	r1, r3, #16
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ab4:	e028      	b.n	8003b08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]
 8003ac8:	e00d      	b.n	8003ae6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	3340      	adds	r3, #64	@ 0x40
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	4413      	add	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d3ec      	bcc.n	8003aca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003af0:	883b      	ldrh	r3, [r7, #0]
 8003af2:	0418      	lsls	r0, r3, #16
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6819      	ldr	r1, [r3, #0]
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	4302      	orrs	r2, r0
 8003b00:	3340      	adds	r3, #64	@ 0x40
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	887a      	ldrh	r2, [r7, #2]
 8003b28:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b66:	4b05      	ldr	r3, [pc, #20]	@ (8003b7c <HAL_PCDEx_ActivateLPM+0x44>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	10000003 	.word	0x10000003

08003b80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003ba0:	4b19      	ldr	r3, [pc, #100]	@ (8003c08 <HAL_PWREx_ConfigSupply+0x70>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d00a      	beq.n	8003bc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003bac:	4b16      	ldr	r3, [pc, #88]	@ (8003c08 <HAL_PWREx_ConfigSupply+0x70>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d001      	beq.n	8003bbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e01f      	b.n	8003bfe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e01d      	b.n	8003bfe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003bc2:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <HAL_PWREx_ConfigSupply+0x70>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f023 0207 	bic.w	r2, r3, #7
 8003bca:	490f      	ldr	r1, [pc, #60]	@ (8003c08 <HAL_PWREx_ConfigSupply+0x70>)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003bd2:	f7fd fc23 	bl	800141c <HAL_GetTick>
 8003bd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bd8:	e009      	b.n	8003bee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bda:	f7fd fc1f 	bl	800141c <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003be8:	d901      	bls.n	8003bee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e007      	b.n	8003bfe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bee:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <HAL_PWREx_ConfigSupply+0x70>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bfa:	d1ee      	bne.n	8003bda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	58024800 	.word	0x58024800

08003c0c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003c10:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a04      	ldr	r2, [pc, #16]	@ (8003c28 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003c16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c1a:	60d3      	str	r3, [r2, #12]
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	58024800 	.word	0x58024800

08003c2c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003c34:	f7fd fbf2 	bl	800141c <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e05f      	b.n	8003d04 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d107      	bne.n	8003c60 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7fd f8c7 	bl	8000de4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003c56:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fa5e 	bl	800411c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	021a      	lsls	r2, r3, #8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	2120      	movs	r1, #32
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa56 	bl	8004138 <QSPI_WaitFlagStateUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d135      	bne.n	8003d02 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d0c <HAL_QSPI_Init+0xe0>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6852      	ldr	r2, [r2, #4]
 8003ca4:	0611      	lsls	r1, r2, #24
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68d2      	ldr	r2, [r2, #12]
 8003caa:	4311      	orrs	r1, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	69d2      	ldr	r2, [r2, #28]
 8003cb0:	4311      	orrs	r1, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6a12      	ldr	r2, [r2, #32]
 8003cb6:	4311      	orrs	r1, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	4b12      	ldr	r3, [pc, #72]	@ (8003d10 <HAL_QSPI_Init+0xe4>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6912      	ldr	r2, [r2, #16]
 8003cce:	0411      	lsls	r1, r2, #16
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6952      	ldr	r2, [r2, #20]
 8003cd4:	4311      	orrs	r1, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6992      	ldr	r2, [r2, #24]
 8003cda:	4311      	orrs	r1, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003d02:	7afb      	ldrb	r3, [r7, #11]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	00ffff2f 	.word	0x00ffff2f
 8003d10:	ffe0f8fe 	.word	0xffe0f8fe

08003d14 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003d20:	f7fd fb7c 	bl	800141c <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_QSPI_Command+0x22>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e048      	b.n	8003dc8 <HAL_QSPI_Command+0xb4>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d137      	bne.n	8003dba <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2120      	movs	r1, #32
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f9e8 	bl	8004138 <QSPI_WaitFlagStateUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d125      	bne.n	8003dbe <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003d72:	2200      	movs	r2, #0
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fa15 	bl	80041a6 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d115      	bne.n	8003db0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f9d2 	bl	8004138 <QSPI_WaitFlagStateUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2202      	movs	r2, #2
 8003da4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003dae:	e006      	b.n	8003dbe <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003db8:	e001      	b.n	8003dbe <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	@ 0x28
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003de0:	f7fd fb1c 	bl	800141c <HAL_GetTick>
 8003de4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3320      	adds	r3, #32
 8003dec:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_QSPI_Transmit+0x2e>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e076      	b.n	8003eec <HAL_QSPI_Transmit+0x11c>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d165      	bne.n	8003ede <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d056      	beq.n	8003ecc <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2212      	movs	r2, #18
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003e52:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8003e54:	e01b      	b.n	8003e8e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	2104      	movs	r1, #4
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f969 	bl	8004138 <QSPI_WaitFlagStateUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003e6a:	7ffb      	ldrb	r3, [r7, #31]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d113      	bne.n	8003e98 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	781a      	ldrb	r2, [r3, #0]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e88:	1e5a      	subs	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1df      	bne.n	8003e56 <HAL_QSPI_Transmit+0x86>
 8003e96:	e000      	b.n	8003e9a <HAL_QSPI_Transmit+0xca>
          break;
 8003e98:	bf00      	nop
      }

      if (status == HAL_OK)
 8003e9a:	7ffb      	ldrb	r3, [r7, #31]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d110      	bne.n	8003ec2 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f944 	bl	8004138 <QSPI_WaitFlagStateUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003eb4:	7ffb      	ldrb	r3, [r7, #31]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003eca:	e00a      	b.n	8003ee2 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed0:	f043 0208 	orr.w	r2, r3, #8
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e001      	b.n	8003ee2 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8003eea:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3720      	adds	r7, #32
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	@ 0x28
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8003f04:	f7fd fa8a 	bl	800141c <HAL_GetTick>
 8003f08:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3320      	adds	r3, #32
 8003f18:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_QSPI_Receive+0x36>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e07d      	b.n	8004026 <HAL_QSPI_Receive+0x132>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d16c      	bne.n	8004018 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d05d      	beq.n	8004006 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2222      	movs	r2, #34	@ 0x22
 8003f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003f82:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8003f8c:	e01c      	b.n	8003fc8 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2201      	movs	r2, #1
 8003f96:	2106      	movs	r1, #6
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f8cd 	bl	8004138 <QSPI_WaitFlagStateUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8003fa2:	7ffb      	ldrb	r3, [r7, #31]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d114      	bne.n	8003fd2 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1de      	bne.n	8003f8e <HAL_QSPI_Receive+0x9a>
 8003fd0:	e000      	b.n	8003fd4 <HAL_QSPI_Receive+0xe0>
          break;
 8003fd2:	bf00      	nop
      }

      if (status == HAL_OK)
 8003fd4:	7ffb      	ldrb	r3, [r7, #31]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d110      	bne.n	8003ffc <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f8a7 	bl	8004138 <QSPI_WaitFlagStateUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8003fee:	7ffb      	ldrb	r3, [r7, #31]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d103      	bne.n	8003ffc <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004004:	e00a      	b.n	800401c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400a:	f043 0208 	orr.w	r2, r3, #8
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	77fb      	strb	r3, [r7, #31]
 8004016:	e001      	b.n	800401c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004018:	2302      	movs	r3, #2
 800401a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8004024:	7ffb      	ldrb	r3, [r7, #31]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b088      	sub	sp, #32
 8004032:	af02      	add	r7, sp, #8
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7fd f9ee 	bl	800141c <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_QSPI_AutoPolling+0x24>
 800404e:	2302      	movs	r3, #2
 8004050:	e060      	b.n	8004114 <HAL_QSPI_AutoPolling+0xe6>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	d14f      	bne.n	8004106 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2242      	movs	r2, #66	@ 0x42
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2200      	movs	r2, #0
 800407c:	2120      	movs	r1, #32
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f85a 	bl	8004138 <QSPI_WaitFlagStateUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d13d      	bne.n	800410a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6852      	ldr	r2, [r2, #4]
 80040a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6892      	ldr	r2, [r2, #8]
 80040aa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80040c4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80040ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f866 	bl	80041a6 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2201      	movs	r2, #1
 80040e2:	2108      	movs	r1, #8
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f827 	bl	8004138 <QSPI_WaitFlagStateUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80040ee:	7dfb      	ldrb	r3, [r7, #23]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2208      	movs	r2, #8
 80040fa:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004104:	e001      	b.n	800410a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004106:	2302      	movs	r3, #2
 8004108:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8004112:	7dfb      	ldrb	r3, [r7, #23]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004148:	e01a      	b.n	8004180 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d016      	beq.n	8004180 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004152:	f7fd f963 	bl	800141c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	429a      	cmp	r2, r3
 8004160:	d302      	bcc.n	8004168 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2204      	movs	r2, #4
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004174:	f043 0201 	orr.w	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e00e      	b.n	800419e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf14      	ite	ne
 800418e:	2301      	movne	r3, #1
 8004190:	2300      	moveq	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	429a      	cmp	r2, r3
 800419a:	d1d6      	bne.n	800414a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <QSPI_Config+0x28>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80041c0:	d005      	beq.n	80041ce <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3a01      	subs	r2, #1
 80041cc:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 80c1 	beq.w	800435a <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d063      	beq.n	80042a8 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	6892      	ldr	r2, [r2, #8]
 80041e8:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d031      	beq.n	8004256 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004200:	431a      	orrs	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	431a      	orrs	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	049b      	lsls	r3, r3, #18
 800420e:	431a      	orrs	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	431a      	orrs	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	431a      	orrs	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	431a      	orrs	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	431a      	orrs	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	431a      	orrs	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	ea42 0103 	orr.w	r1, r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	430a      	orrs	r2, r1
 800423e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004246:	f000 813f 	beq.w	80044c8 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	6852      	ldr	r2, [r2, #4]
 8004252:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 8004254:	e138      	b.n	80044c8 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	431a      	orrs	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004264:	431a      	orrs	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	431a      	orrs	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	049b      	lsls	r3, r3, #18
 8004272:	431a      	orrs	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	431a      	orrs	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	431a      	orrs	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	431a      	orrs	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	431a      	orrs	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	ea42 0103 	orr.w	r1, r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	430a      	orrs	r2, r1
 800429c:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	619a      	str	r2, [r3, #24]
}
 80042a6:	e10f      	b.n	80044c8 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02e      	beq.n	800430e <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042be:	431a      	orrs	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	431a      	orrs	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	049b      	lsls	r3, r3, #18
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	431a      	orrs	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	431a      	orrs	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	431a      	orrs	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	ea42 0103 	orr.w	r1, r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80042fe:	f000 80e3 	beq.w	80044c8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	6852      	ldr	r2, [r2, #4]
 800430a:	619a      	str	r2, [r3, #24]
}
 800430c:	e0dc      	b.n	80044c8 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	431a      	orrs	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431c:	431a      	orrs	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	431a      	orrs	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	049b      	lsls	r3, r3, #18
 800432a:	431a      	orrs	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	431a      	orrs	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	431a      	orrs	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	431a      	orrs	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	ea42 0103 	orr.w	r1, r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	430a      	orrs	r2, r1
 800434e:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2200      	movs	r2, #0
 8004356:	619a      	str	r2, [r3, #24]
}
 8004358:	e0b6      	b.n	80044c8 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d05d      	beq.n	800441e <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	6892      	ldr	r2, [r2, #8]
 800436a:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d02e      	beq.n	80043d2 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437c:	431a      	orrs	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004382:	431a      	orrs	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	431a      	orrs	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	049b      	lsls	r3, r3, #18
 8004390:	431a      	orrs	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	431a      	orrs	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	431a      	orrs	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	ea42 0103 	orr.w	r1, r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80043c2:	f000 8081 	beq.w	80044c8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	6852      	ldr	r2, [r2, #4]
 80043ce:	619a      	str	r2, [r3, #24]
}
 80043d0:	e07a      	b.n	80044c8 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	431a      	orrs	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	431a      	orrs	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	049b      	lsls	r3, r3, #18
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	431a      	orrs	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	431a      	orrs	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	ea42 0103 	orr.w	r1, r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	430a      	orrs	r2, r1
 8004412:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2200      	movs	r2, #0
 800441a:	619a      	str	r2, [r3, #24]
}
 800441c:	e054      	b.n	80044c8 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02a      	beq.n	800447c <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442e:	431a      	orrs	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004434:	431a      	orrs	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	431a      	orrs	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	049b      	lsls	r3, r3, #18
 8004442:	431a      	orrs	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	431a      	orrs	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	431a      	orrs	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	431a      	orrs	r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	ea42 0103 	orr.w	r1, r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	430a      	orrs	r2, r1
 8004466:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800446e:	d02b      	beq.n	80044c8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	6852      	ldr	r2, [r2, #4]
 8004478:	619a      	str	r2, [r3, #24]
}
 800447a:	e025      	b.n	80044c8 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	2b00      	cmp	r3, #0
 8004482:	d021      	beq.n	80044c8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448c:	431a      	orrs	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004492:	431a      	orrs	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	431a      	orrs	r2, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	049b      	lsls	r3, r3, #18
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	ea42 0103 	orr.w	r1, r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	430a      	orrs	r2, r1
 80044be:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2200      	movs	r2, #0
 80044c6:	619a      	str	r2, [r3, #24]
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08c      	sub	sp, #48	@ 0x30
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f000 bc48 	b.w	8004d78 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8088 	beq.w	8004606 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044f6:	4b99      	ldr	r3, [pc, #612]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004500:	4b96      	ldr	r3, [pc, #600]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004504:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004508:	2b10      	cmp	r3, #16
 800450a:	d007      	beq.n	800451c <HAL_RCC_OscConfig+0x48>
 800450c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450e:	2b18      	cmp	r3, #24
 8004510:	d111      	bne.n	8004536 <HAL_RCC_OscConfig+0x62>
 8004512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d10c      	bne.n	8004536 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451c:	4b8f      	ldr	r3, [pc, #572]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d06d      	beq.n	8004604 <HAL_RCC_OscConfig+0x130>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d169      	bne.n	8004604 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	f000 bc21 	b.w	8004d78 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x7a>
 8004540:	4b86      	ldr	r3, [pc, #536]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a85      	ldr	r2, [pc, #532]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e02e      	b.n	80045ac <HAL_RCC_OscConfig+0xd8>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x9c>
 8004556:	4b81      	ldr	r3, [pc, #516]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a80      	ldr	r2, [pc, #512]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800455c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	4b7e      	ldr	r3, [pc, #504]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7d      	ldr	r2, [pc, #500]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004568:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	e01d      	b.n	80045ac <HAL_RCC_OscConfig+0xd8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004578:	d10c      	bne.n	8004594 <HAL_RCC_OscConfig+0xc0>
 800457a:	4b78      	ldr	r3, [pc, #480]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a77      	ldr	r2, [pc, #476]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	4b75      	ldr	r3, [pc, #468]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a74      	ldr	r2, [pc, #464]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800458c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	e00b      	b.n	80045ac <HAL_RCC_OscConfig+0xd8>
 8004594:	4b71      	ldr	r3, [pc, #452]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a70      	ldr	r2, [pc, #448]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800459a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	4b6e      	ldr	r3, [pc, #440]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a6d      	ldr	r2, [pc, #436]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80045a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d013      	beq.n	80045dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fc ff32 	bl	800141c <HAL_GetTick>
 80045b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fc ff2e 	bl	800141c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	@ 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e3d4      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ce:	4b63      	ldr	r3, [pc, #396]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0xe8>
 80045da:	e014      	b.n	8004606 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fc ff1e 	bl	800141c <HAL_GetTick>
 80045e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e4:	f7fc ff1a 	bl	800141c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	@ 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e3c0      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045f6:	4b59      	ldr	r3, [pc, #356]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x110>
 8004602:	e000      	b.n	8004606 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80ca 	beq.w	80047a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004614:	4b51      	ldr	r3, [pc, #324]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800461c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800461e:	4b4f      	ldr	r3, [pc, #316]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <HAL_RCC_OscConfig+0x166>
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	2b18      	cmp	r3, #24
 800462e:	d156      	bne.n	80046de <HAL_RCC_OscConfig+0x20a>
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d151      	bne.n	80046de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800463a:	4b48      	ldr	r3, [pc, #288]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_RCC_OscConfig+0x17e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e392      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004652:	4b42      	ldr	r3, [pc, #264]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 0219 	bic.w	r2, r3, #25
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	493f      	ldr	r1, [pc, #252]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fc feda 	bl	800141c <HAL_GetTick>
 8004668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466c:	f7fc fed6 	bl	800141c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e37c      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800467e:	4b37      	ldr	r3, [pc, #220]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468a:	f7fc fef7 	bl	800147c <HAL_GetREVID>
 800468e:	4603      	mov	r3, r0
 8004690:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004694:	4293      	cmp	r3, r2
 8004696:	d817      	bhi.n	80046c8 <HAL_RCC_OscConfig+0x1f4>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2b40      	cmp	r3, #64	@ 0x40
 800469e:	d108      	bne.n	80046b2 <HAL_RCC_OscConfig+0x1de>
 80046a0:	4b2e      	ldr	r3, [pc, #184]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80046a8:	4a2c      	ldr	r2, [pc, #176]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b0:	e07a      	b.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b2:	4b2a      	ldr	r3, [pc, #168]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	031b      	lsls	r3, r3, #12
 80046c0:	4926      	ldr	r1, [pc, #152]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c6:	e06f      	b.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c8:	4b24      	ldr	r3, [pc, #144]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	061b      	lsls	r3, r3, #24
 80046d6:	4921      	ldr	r1, [pc, #132]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046dc:	e064      	b.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d047      	beq.n	8004776 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046e6:	4b1d      	ldr	r3, [pc, #116]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 0219 	bic.w	r2, r3, #25
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	491a      	ldr	r1, [pc, #104]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fc fe90 	bl	800141c <HAL_GetTick>
 80046fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004700:	f7fc fe8c 	bl	800141c <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e332      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004712:	4b12      	ldr	r3, [pc, #72]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471e:	f7fc fead 	bl	800147c <HAL_GetREVID>
 8004722:	4603      	mov	r3, r0
 8004724:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004728:	4293      	cmp	r3, r2
 800472a:	d819      	bhi.n	8004760 <HAL_RCC_OscConfig+0x28c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b40      	cmp	r3, #64	@ 0x40
 8004732:	d108      	bne.n	8004746 <HAL_RCC_OscConfig+0x272>
 8004734:	4b09      	ldr	r3, [pc, #36]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800473c:	4a07      	ldr	r2, [pc, #28]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 800473e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004742:	6053      	str	r3, [r2, #4]
 8004744:	e030      	b.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
 8004746:	4b05      	ldr	r3, [pc, #20]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	031b      	lsls	r3, r3, #12
 8004754:	4901      	ldr	r1, [pc, #4]	@ (800475c <HAL_RCC_OscConfig+0x288>)
 8004756:	4313      	orrs	r3, r2
 8004758:	604b      	str	r3, [r1, #4]
 800475a:	e025      	b.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
 800475c:	58024400 	.word	0x58024400
 8004760:	4b9a      	ldr	r3, [pc, #616]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	4997      	ldr	r1, [pc, #604]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004770:	4313      	orrs	r3, r2
 8004772:	604b      	str	r3, [r1, #4]
 8004774:	e018      	b.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004776:	4b95      	ldr	r3, [pc, #596]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a94      	ldr	r2, [pc, #592]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004782:	f7fc fe4b 	bl	800141c <HAL_GetTick>
 8004786:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478a:	f7fc fe47 	bl	800141c <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e2ed      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800479c:	4b8b      	ldr	r3, [pc, #556]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80a9 	beq.w	8004908 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b6:	4b85      	ldr	r3, [pc, #532]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047c0:	4b82      	ldr	r3, [pc, #520]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80047c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d007      	beq.n	80047dc <HAL_RCC_OscConfig+0x308>
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b18      	cmp	r3, #24
 80047d0:	d13a      	bne.n	8004848 <HAL_RCC_OscConfig+0x374>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d135      	bne.n	8004848 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047dc:	4b7b      	ldr	r3, [pc, #492]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_OscConfig+0x320>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	2b80      	cmp	r3, #128	@ 0x80
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e2c1      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047f4:	f7fc fe42 	bl	800147c <HAL_GetREVID>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047fe:	4293      	cmp	r3, r2
 8004800:	d817      	bhi.n	8004832 <HAL_RCC_OscConfig+0x35e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	2b20      	cmp	r3, #32
 8004808:	d108      	bne.n	800481c <HAL_RCC_OscConfig+0x348>
 800480a:	4b70      	ldr	r3, [pc, #448]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004812:	4a6e      	ldr	r2, [pc, #440]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004814:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004818:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800481a:	e075      	b.n	8004908 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800481c:	4b6b      	ldr	r3, [pc, #428]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	069b      	lsls	r3, r3, #26
 800482a:	4968      	ldr	r1, [pc, #416]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800482c:	4313      	orrs	r3, r2
 800482e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004830:	e06a      	b.n	8004908 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004832:	4b66      	ldr	r3, [pc, #408]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	061b      	lsls	r3, r3, #24
 8004840:	4962      	ldr	r1, [pc, #392]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004842:	4313      	orrs	r3, r2
 8004844:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004846:	e05f      	b.n	8004908 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d042      	beq.n	80048d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004850:	4b5e      	ldr	r3, [pc, #376]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a5d      	ldr	r2, [pc, #372]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800485a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fc fdde 	bl	800141c <HAL_GetTick>
 8004860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004864:	f7fc fdda 	bl	800141c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e280      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004876:	4b55      	ldr	r3, [pc, #340]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004882:	f7fc fdfb 	bl	800147c <HAL_GetREVID>
 8004886:	4603      	mov	r3, r0
 8004888:	f241 0203 	movw	r2, #4099	@ 0x1003
 800488c:	4293      	cmp	r3, r2
 800488e:	d817      	bhi.n	80048c0 <HAL_RCC_OscConfig+0x3ec>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	2b20      	cmp	r3, #32
 8004896:	d108      	bne.n	80048aa <HAL_RCC_OscConfig+0x3d6>
 8004898:	4b4c      	ldr	r3, [pc, #304]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80048a0:	4a4a      	ldr	r2, [pc, #296]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048a6:	6053      	str	r3, [r2, #4]
 80048a8:	e02e      	b.n	8004908 <HAL_RCC_OscConfig+0x434>
 80048aa:	4b48      	ldr	r3, [pc, #288]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	069b      	lsls	r3, r3, #26
 80048b8:	4944      	ldr	r1, [pc, #272]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]
 80048be:	e023      	b.n	8004908 <HAL_RCC_OscConfig+0x434>
 80048c0:	4b42      	ldr	r3, [pc, #264]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	061b      	lsls	r3, r3, #24
 80048ce:	493f      	ldr	r1, [pc, #252]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60cb      	str	r3, [r1, #12]
 80048d4:	e018      	b.n	8004908 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80048d6:	4b3d      	ldr	r3, [pc, #244]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a3c      	ldr	r2, [pc, #240]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e2:	f7fc fd9b 	bl	800141c <HAL_GetTick>
 80048e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048ea:	f7fc fd97 	bl	800141c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e23d      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048fc:	4b33      	ldr	r3, [pc, #204]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f0      	bne.n	80048ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d036      	beq.n	8004982 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d019      	beq.n	8004950 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491c:	4b2b      	ldr	r3, [pc, #172]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800491e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004920:	4a2a      	ldr	r2, [pc, #168]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004928:	f7fc fd78 	bl	800141c <HAL_GetTick>
 800492c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004930:	f7fc fd74 	bl	800141c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e21a      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004942:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0x45c>
 800494e:	e018      	b.n	8004982 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004950:	4b1e      	ldr	r3, [pc, #120]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004954:	4a1d      	ldr	r2, [pc, #116]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495c:	f7fc fd5e 	bl	800141c <HAL_GetTick>
 8004960:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004964:	f7fc fd5a 	bl	800141c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e200      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004976:	4b15      	ldr	r3, [pc, #84]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d039      	beq.n	8004a02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01c      	beq.n	80049d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004996:	4b0d      	ldr	r3, [pc, #52]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a0c      	ldr	r2, [pc, #48]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 800499c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049a2:	f7fc fd3b 	bl	800141c <HAL_GetTick>
 80049a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049aa:	f7fc fd37 	bl	800141c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e1dd      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049bc:	4b03      	ldr	r3, [pc, #12]	@ (80049cc <HAL_RCC_OscConfig+0x4f8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCC_OscConfig+0x4d6>
 80049c8:	e01b      	b.n	8004a02 <HAL_RCC_OscConfig+0x52e>
 80049ca:	bf00      	nop
 80049cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049d0:	4b9b      	ldr	r3, [pc, #620]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a9a      	ldr	r2, [pc, #616]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 80049d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049dc:	f7fc fd1e 	bl	800141c <HAL_GetTick>
 80049e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e4:	f7fc fd1a 	bl	800141c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e1c0      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049f6:	4b92      	ldr	r3, [pc, #584]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8081 	beq.w	8004b12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a10:	4b8c      	ldr	r3, [pc, #560]	@ (8004c44 <HAL_RCC_OscConfig+0x770>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a8b      	ldr	r2, [pc, #556]	@ (8004c44 <HAL_RCC_OscConfig+0x770>)
 8004a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a1c:	f7fc fcfe 	bl	800141c <HAL_GetTick>
 8004a20:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a24:	f7fc fcfa 	bl	800141c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	@ 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e1a0      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a36:	4b83      	ldr	r3, [pc, #524]	@ (8004c44 <HAL_RCC_OscConfig+0x770>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d106      	bne.n	8004a58 <HAL_RCC_OscConfig+0x584>
 8004a4a:	4b7d      	ldr	r3, [pc, #500]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a56:	e02d      	b.n	8004ab4 <HAL_RCC_OscConfig+0x5e0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10c      	bne.n	8004a7a <HAL_RCC_OscConfig+0x5a6>
 8004a60:	4b77      	ldr	r3, [pc, #476]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a64:	4a76      	ldr	r2, [pc, #472]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a66:	f023 0301 	bic.w	r3, r3, #1
 8004a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a6c:	4b74      	ldr	r3, [pc, #464]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a70:	4a73      	ldr	r2, [pc, #460]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a72:	f023 0304 	bic.w	r3, r3, #4
 8004a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a78:	e01c      	b.n	8004ab4 <HAL_RCC_OscConfig+0x5e0>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5c8>
 8004a82:	4b6f      	ldr	r3, [pc, #444]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a86:	4a6e      	ldr	r2, [pc, #440]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a8e:	4b6c      	ldr	r3, [pc, #432]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a92:	4a6b      	ldr	r2, [pc, #428]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_OscConfig+0x5e0>
 8004a9c:	4b68      	ldr	r3, [pc, #416]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa0:	4a67      	ldr	r2, [pc, #412]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa8:	4b65      	ldr	r3, [pc, #404]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aac:	4a64      	ldr	r2, [pc, #400]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004aae:	f023 0304 	bic.w	r3, r3, #4
 8004ab2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d015      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fc fcae 	bl	800141c <HAL_GetTick>
 8004ac0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f7fc fcaa 	bl	800141c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e14e      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ada:	4b59      	ldr	r3, [pc, #356]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0ee      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x5f0>
 8004ae6:	e014      	b.n	8004b12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae8:	f7fc fc98 	bl	800141c <HAL_GetTick>
 8004aec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004aee:	e00a      	b.n	8004b06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af0:	f7fc fc94 	bl	800141c <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e138      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b06:	4b4e      	ldr	r3, [pc, #312]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1ee      	bne.n	8004af0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 812d 	beq.w	8004d76 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b1c:	4b48      	ldr	r3, [pc, #288]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b24:	2b18      	cmp	r3, #24
 8004b26:	f000 80bd 	beq.w	8004ca4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	f040 809e 	bne.w	8004c70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b34:	4b42      	ldr	r3, [pc, #264]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a41      	ldr	r2, [pc, #260]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fc fc6c 	bl	800141c <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b48:	f7fc fc68 	bl	800141c <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e10e      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b5a:	4b39      	ldr	r3, [pc, #228]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b66:	4b36      	ldr	r3, [pc, #216]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b6a:	4b37      	ldr	r3, [pc, #220]	@ (8004c48 <HAL_RCC_OscConfig+0x774>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b76:	0112      	lsls	r2, r2, #4
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	4931      	ldr	r1, [pc, #196]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	3b01      	subs	r3, #1
 8004b86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	025b      	lsls	r3, r3, #9
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	061b      	lsls	r3, r3, #24
 8004bac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bb0:	4923      	ldr	r1, [pc, #140]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004bb6:	4b22      	ldr	r3, [pc, #136]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bba:	4a21      	ldr	r2, [pc, #132]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bc6:	4b21      	ldr	r3, [pc, #132]	@ (8004c4c <HAL_RCC_OscConfig+0x778>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004bce:	00d2      	lsls	r2, r2, #3
 8004bd0:	491b      	ldr	r1, [pc, #108]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	f023 020c 	bic.w	r2, r3, #12
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	4917      	ldr	r1, [pc, #92]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004be8:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	f023 0202 	bic.w	r2, r3, #2
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf4:	4912      	ldr	r1, [pc, #72]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bfa:	4b11      	ldr	r3, [pc, #68]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	4a10      	ldr	r2, [pc, #64]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c06:	4b0e      	ldr	r3, [pc, #56]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c12:	4b0b      	ldr	r3, [pc, #44]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c16:	4a0a      	ldr	r2, [pc, #40]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c1e:	4b08      	ldr	r3, [pc, #32]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	4a07      	ldr	r2, [pc, #28]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2a:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a04      	ldr	r2, [pc, #16]	@ (8004c40 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c36:	f7fc fbf1 	bl	800141c <HAL_GetTick>
 8004c3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c3c:	e011      	b.n	8004c62 <HAL_RCC_OscConfig+0x78e>
 8004c3e:	bf00      	nop
 8004c40:	58024400 	.word	0x58024400
 8004c44:	58024800 	.word	0x58024800
 8004c48:	fffffc0c 	.word	0xfffffc0c
 8004c4c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c50:	f7fc fbe4 	bl	800141c <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e08a      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c62:	4b47      	ldr	r3, [pc, #284]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x77c>
 8004c6e:	e082      	b.n	8004d76 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c70:	4b43      	ldr	r3, [pc, #268]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a42      	ldr	r2, [pc, #264]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fc fbce 	bl	800141c <HAL_GetTick>
 8004c80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c84:	f7fc fbca 	bl	800141c <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e070      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c96:	4b3a      	ldr	r3, [pc, #232]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0x7b0>
 8004ca2:	e068      	b.n	8004d76 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ca4:	4b36      	ldr	r3, [pc, #216]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004caa:	4b35      	ldr	r3, [pc, #212]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d031      	beq.n	8004d1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f003 0203 	and.w	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d12a      	bne.n	8004d1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d122      	bne.n	8004d1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d11a      	bne.n	8004d1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	0a5b      	lsrs	r3, r3, #9
 8004cea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d111      	bne.n	8004d1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	0c1b      	lsrs	r3, r3, #16
 8004cfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d108      	bne.n	8004d1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	0e1b      	lsrs	r3, r3, #24
 8004d0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e02b      	b.n	8004d78 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d20:	4b17      	ldr	r3, [pc, #92]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d24:	08db      	lsrs	r3, r3, #3
 8004d26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d01f      	beq.n	8004d76 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d36:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	4a11      	ldr	r2, [pc, #68]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d42:	f7fc fb6b 	bl	800141c <HAL_GetTick>
 8004d46:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d48:	bf00      	nop
 8004d4a:	f7fc fb67 	bl	800141c <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d0f9      	beq.n	8004d4a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d56:	4b0a      	ldr	r3, [pc, #40]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d84 <HAL_RCC_OscConfig+0x8b0>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d62:	00d2      	lsls	r2, r2, #3
 8004d64:	4906      	ldr	r1, [pc, #24]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004d6a:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	4a04      	ldr	r2, [pc, #16]	@ (8004d80 <HAL_RCC_OscConfig+0x8ac>)
 8004d70:	f043 0301 	orr.w	r3, r3, #1
 8004d74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3730      	adds	r7, #48	@ 0x30
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	58024400 	.word	0x58024400
 8004d84:	ffff0007 	.word	0xffff0007

08004d88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e19c      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d9c:	4b8a      	ldr	r3, [pc, #552]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d910      	bls.n	8004dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004daa:	4b87      	ldr	r3, [pc, #540]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f023 020f 	bic.w	r2, r3, #15
 8004db2:	4985      	ldr	r1, [pc, #532]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b83      	ldr	r3, [pc, #524]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e184      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d010      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	4b7b      	ldr	r3, [pc, #492]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d908      	bls.n	8004dfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004de8:	4b78      	ldr	r3, [pc, #480]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	4975      	ldr	r1, [pc, #468]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d010      	beq.n	8004e28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	4b70      	ldr	r3, [pc, #448]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d908      	bls.n	8004e28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e16:	4b6d      	ldr	r3, [pc, #436]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	496a      	ldr	r1, [pc, #424]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d010      	beq.n	8004e56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	4b64      	ldr	r3, [pc, #400]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d908      	bls.n	8004e56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e44:	4b61      	ldr	r3, [pc, #388]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	495e      	ldr	r1, [pc, #376]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d010      	beq.n	8004e84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69da      	ldr	r2, [r3, #28]
 8004e66:	4b59      	ldr	r3, [pc, #356]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d908      	bls.n	8004e84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e72:	4b56      	ldr	r3, [pc, #344]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	4953      	ldr	r1, [pc, #332]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d010      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	4b4d      	ldr	r3, [pc, #308]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d908      	bls.n	8004eb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea0:	4b4a      	ldr	r3, [pc, #296]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f023 020f 	bic.w	r2, r3, #15
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4947      	ldr	r1, [pc, #284]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d055      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ebe:	4b43      	ldr	r3, [pc, #268]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	4940      	ldr	r1, [pc, #256]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d121      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0f6      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d107      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ef0:	4b36      	ldr	r3, [pc, #216]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d115      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0ea      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d107      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f08:	4b30      	ldr	r3, [pc, #192]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0de      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f18:	4b2c      	ldr	r3, [pc, #176]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0d6      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f28:	4b28      	ldr	r3, [pc, #160]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f023 0207 	bic.w	r2, r3, #7
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4925      	ldr	r1, [pc, #148]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3a:	f7fc fa6f 	bl	800141c <HAL_GetTick>
 8004f3e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f40:	e00a      	b.n	8004f58 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f42:	f7fc fa6b 	bl	800141c <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e0be      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f58:	4b1c      	ldr	r3, [pc, #112]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d1eb      	bne.n	8004f42 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d010      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	4b14      	ldr	r3, [pc, #80]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d208      	bcs.n	8004f98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f86:	4b11      	ldr	r3, [pc, #68]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f023 020f 	bic.w	r2, r3, #15
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	490e      	ldr	r1, [pc, #56]	@ (8004fcc <HAL_RCC_ClockConfig+0x244>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f98:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d214      	bcs.n	8004fd0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa6:	4b08      	ldr	r3, [pc, #32]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 020f 	bic.w	r2, r3, #15
 8004fae:	4906      	ldr	r1, [pc, #24]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b04      	ldr	r3, [pc, #16]	@ (8004fc8 <HAL_RCC_ClockConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e086      	b.n	80050d6 <HAL_RCC_ClockConfig+0x34e>
 8004fc8:	52002000 	.word	0x52002000
 8004fcc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d010      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d208      	bcs.n	8004ffe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fec:	4b3c      	ldr	r3, [pc, #240]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	4939      	ldr	r1, [pc, #228]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d010      	beq.n	800502c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	4b34      	ldr	r3, [pc, #208]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005016:	429a      	cmp	r2, r3
 8005018:	d208      	bcs.n	800502c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800501a:	4b31      	ldr	r3, [pc, #196]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	492e      	ldr	r1, [pc, #184]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8005028:	4313      	orrs	r3, r2
 800502a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	2b00      	cmp	r3, #0
 8005036:	d010      	beq.n	800505a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699a      	ldr	r2, [r3, #24]
 800503c:	4b28      	ldr	r3, [pc, #160]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005044:	429a      	cmp	r2, r3
 8005046:	d208      	bcs.n	800505a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005048:	4b25      	ldr	r3, [pc, #148]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	4922      	ldr	r1, [pc, #136]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8005056:	4313      	orrs	r3, r2
 8005058:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d010      	beq.n	8005088 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	4b1d      	ldr	r3, [pc, #116]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005072:	429a      	cmp	r2, r3
 8005074:	d208      	bcs.n	8005088 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	4917      	ldr	r1, [pc, #92]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8005084:	4313      	orrs	r3, r2
 8005086:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005088:	f000 f834 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 800508c:	4602      	mov	r2, r0
 800508e:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	0a1b      	lsrs	r3, r3, #8
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	4912      	ldr	r1, [pc, #72]	@ (80050e4 <HAL_RCC_ClockConfig+0x35c>)
 800509a:	5ccb      	ldrb	r3, [r1, r3]
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
 80050a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050a6:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <HAL_RCC_ClockConfig+0x358>)
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	4a0d      	ldr	r2, [pc, #52]	@ (80050e4 <HAL_RCC_ClockConfig+0x35c>)
 80050b0:	5cd3      	ldrb	r3, [r2, r3]
 80050b2:	f003 031f 	and.w	r3, r3, #31
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
 80050bc:	4a0a      	ldr	r2, [pc, #40]	@ (80050e8 <HAL_RCC_ClockConfig+0x360>)
 80050be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050c0:	4a0a      	ldr	r2, [pc, #40]	@ (80050ec <HAL_RCC_ClockConfig+0x364>)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80050c6:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <HAL_RCC_ClockConfig+0x368>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fc f95c 	bl	8001388 <HAL_InitTick>
 80050d0:	4603      	mov	r3, r0
 80050d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	58024400 	.word	0x58024400
 80050e4:	0800eaa0 	.word	0x0800eaa0
 80050e8:	24000004 	.word	0x24000004
 80050ec:	24000000 	.word	0x24000000
 80050f0:	24000008 	.word	0x24000008

080050f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b089      	sub	sp, #36	@ 0x24
 80050f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050fa:	4bb3      	ldr	r3, [pc, #716]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005102:	2b18      	cmp	r3, #24
 8005104:	f200 8155 	bhi.w	80053b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005108:	a201      	add	r2, pc, #4	@ (adr r2, 8005110 <HAL_RCC_GetSysClockFreq+0x1c>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005175 	.word	0x08005175
 8005114:	080053b3 	.word	0x080053b3
 8005118:	080053b3 	.word	0x080053b3
 800511c:	080053b3 	.word	0x080053b3
 8005120:	080053b3 	.word	0x080053b3
 8005124:	080053b3 	.word	0x080053b3
 8005128:	080053b3 	.word	0x080053b3
 800512c:	080053b3 	.word	0x080053b3
 8005130:	0800519b 	.word	0x0800519b
 8005134:	080053b3 	.word	0x080053b3
 8005138:	080053b3 	.word	0x080053b3
 800513c:	080053b3 	.word	0x080053b3
 8005140:	080053b3 	.word	0x080053b3
 8005144:	080053b3 	.word	0x080053b3
 8005148:	080053b3 	.word	0x080053b3
 800514c:	080053b3 	.word	0x080053b3
 8005150:	080051a1 	.word	0x080051a1
 8005154:	080053b3 	.word	0x080053b3
 8005158:	080053b3 	.word	0x080053b3
 800515c:	080053b3 	.word	0x080053b3
 8005160:	080053b3 	.word	0x080053b3
 8005164:	080053b3 	.word	0x080053b3
 8005168:	080053b3 	.word	0x080053b3
 800516c:	080053b3 	.word	0x080053b3
 8005170:	080051a7 	.word	0x080051a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005174:	4b94      	ldr	r3, [pc, #592]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005180:	4b91      	ldr	r3, [pc, #580]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	08db      	lsrs	r3, r3, #3
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	4a90      	ldr	r2, [pc, #576]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005192:	e111      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005194:	4b8d      	ldr	r3, [pc, #564]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005196:	61bb      	str	r3, [r7, #24]
      break;
 8005198:	e10e      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800519a:	4b8d      	ldr	r3, [pc, #564]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800519c:	61bb      	str	r3, [r7, #24]
      break;
 800519e:	e10b      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80051a0:	4b8c      	ldr	r3, [pc, #560]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051a2:	61bb      	str	r3, [r7, #24]
      break;
 80051a4:	e108      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051a6:	4b88      	ldr	r3, [pc, #544]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80051b0:	4b85      	ldr	r3, [pc, #532]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80051bc:	4b82      	ldr	r3, [pc, #520]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80051c6:	4b80      	ldr	r3, [pc, #512]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ca:	08db      	lsrs	r3, r3, #3
 80051cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	fb02 f303 	mul.w	r3, r2, r3
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80e1 	beq.w	80053ac <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	f000 8083 	beq.w	80052f8 <HAL_RCC_GetSysClockFreq+0x204>
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	f200 80a1 	bhi.w	800533c <HAL_RCC_GetSysClockFreq+0x248>
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x114>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d056      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005206:	e099      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005208:	4b6f      	ldr	r3, [pc, #444]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d02d      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005214:	4b6c      	ldr	r3, [pc, #432]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	08db      	lsrs	r3, r3, #3
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	4a6b      	ldr	r2, [pc, #428]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
 8005224:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	ee07 3a90 	vmov	s15, r3
 800522c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523e:	4b62      	ldr	r3, [pc, #392]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005252:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80053d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800526e:	e087      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80053dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800527e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005282:	4b51      	ldr	r3, [pc, #324]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005292:	ed97 6a02 	vldr	s12, [r7, #8]
 8005296:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80053d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800529a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052b2:	e065      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80053e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c6:	4b40      	ldr	r3, [pc, #256]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80053d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052f6:	e043      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80053e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530a:	4b2f      	ldr	r3, [pc, #188]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531a:	ed97 6a02 	vldr	s12, [r7, #8]
 800531e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80053d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800533a:	e021      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80053e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534e:	4b1e      	ldr	r3, [pc, #120]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005362:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80053d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800537e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005380:	4b11      	ldr	r3, [pc, #68]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005384:	0a5b      	lsrs	r3, r3, #9
 8005386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800538a:	3301      	adds	r3, #1
 800538c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005398:	edd7 6a07 	vldr	s13, [r7, #28]
 800539c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a4:	ee17 3a90 	vmov	r3, s15
 80053a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80053aa:	e005      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]
      break;
 80053b0:	e002      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80053b2:	4b07      	ldr	r3, [pc, #28]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053b4:	61bb      	str	r3, [r7, #24]
      break;
 80053b6:	bf00      	nop
  }

  return sysclockfreq;
 80053b8:	69bb      	ldr	r3, [r7, #24]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3724      	adds	r7, #36	@ 0x24
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	58024400 	.word	0x58024400
 80053cc:	03d09000 	.word	0x03d09000
 80053d0:	003d0900 	.word	0x003d0900
 80053d4:	017d7840 	.word	0x017d7840
 80053d8:	46000000 	.word	0x46000000
 80053dc:	4c742400 	.word	0x4c742400
 80053e0:	4a742400 	.word	0x4a742400
 80053e4:	4bbebc20 	.word	0x4bbebc20

080053e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80053ee:	f7ff fe81 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80053f2:	4602      	mov	r2, r0
 80053f4:	4b10      	ldr	r3, [pc, #64]	@ (8005438 <HAL_RCC_GetHCLKFreq+0x50>)
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	0a1b      	lsrs	r3, r3, #8
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	490f      	ldr	r1, [pc, #60]	@ (800543c <HAL_RCC_GetHCLKFreq+0x54>)
 8005400:	5ccb      	ldrb	r3, [r1, r3]
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	fa22 f303 	lsr.w	r3, r2, r3
 800540a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800540c:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <HAL_RCC_GetHCLKFreq+0x50>)
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	4a09      	ldr	r2, [pc, #36]	@ (800543c <HAL_RCC_GetHCLKFreq+0x54>)
 8005416:	5cd3      	ldrb	r3, [r2, r3]
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	fa22 f303 	lsr.w	r3, r2, r3
 8005422:	4a07      	ldr	r2, [pc, #28]	@ (8005440 <HAL_RCC_GetHCLKFreq+0x58>)
 8005424:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005426:	4a07      	ldr	r2, [pc, #28]	@ (8005444 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800542c:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <HAL_RCC_GetHCLKFreq+0x58>)
 800542e:	681b      	ldr	r3, [r3, #0]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	58024400 	.word	0x58024400
 800543c:	0800eaa0 	.word	0x0800eaa0
 8005440:	24000004 	.word	0x24000004
 8005444:	24000000 	.word	0x24000000

08005448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800544c:	f7ff ffcc 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 8005450:	4602      	mov	r2, r0
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	091b      	lsrs	r3, r3, #4
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	4904      	ldr	r1, [pc, #16]	@ (8005470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800545e:	5ccb      	ldrb	r3, [r1, r3]
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	58024400 	.word	0x58024400
 8005470:	0800eaa0 	.word	0x0800eaa0

08005474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005478:	f7ff ffb6 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4904      	ldr	r1, [pc, #16]	@ (800549c <HAL_RCC_GetPCLK2Freq+0x28>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd80      	pop	{r7, pc}
 8005498:	58024400 	.word	0x58024400
 800549c:	0800eaa0 	.word	0x0800eaa0

080054a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a4:	b0ca      	sub	sp, #296	@ 0x128
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054b2:	2300      	movs	r3, #0
 80054b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80054c4:	2500      	movs	r5, #0
 80054c6:	ea54 0305 	orrs.w	r3, r4, r5
 80054ca:	d049      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054d6:	d02f      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80054d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054dc:	d828      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054e2:	d01a      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80054e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054e8:	d822      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054f2:	d007      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054f4:	e01c      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f6:	4bb8      	ldr	r3, [pc, #736]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	4ab7      	ldr	r2, [pc, #732]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005500:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005502:	e01a      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005508:	3308      	adds	r3, #8
 800550a:	2102      	movs	r1, #2
 800550c:	4618      	mov	r0, r3
 800550e:	f001 fc8f 	bl	8006e30 <RCCEx_PLL2_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005518:	e00f      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551e:	3328      	adds	r3, #40	@ 0x28
 8005520:	2102      	movs	r1, #2
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fd36 	bl	8006f94 <RCCEx_PLL3_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800552e:	e004      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005536:	e000      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005542:	4ba5      	ldr	r3, [pc, #660]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005546:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800554a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005550:	4aa1      	ldr	r2, [pc, #644]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005552:	430b      	orrs	r3, r1
 8005554:	6513      	str	r3, [r2, #80]	@ 0x50
 8005556:	e003      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800555c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800556c:	f04f 0900 	mov.w	r9, #0
 8005570:	ea58 0309 	orrs.w	r3, r8, r9
 8005574:	d047      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557c:	2b04      	cmp	r3, #4
 800557e:	d82a      	bhi.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005580:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	0800559d 	.word	0x0800559d
 800558c:	080055ab 	.word	0x080055ab
 8005590:	080055c1 	.word	0x080055c1
 8005594:	080055df 	.word	0x080055df
 8005598:	080055df 	.word	0x080055df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800559c:	4b8e      	ldr	r3, [pc, #568]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800559e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a0:	4a8d      	ldr	r2, [pc, #564]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055a8:	e01a      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ae:	3308      	adds	r3, #8
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 fc3c 	bl	8006e30 <RCCEx_PLL2_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055be:	e00f      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c4:	3328      	adds	r3, #40	@ 0x28
 80055c6:	2100      	movs	r1, #0
 80055c8:	4618      	mov	r0, r3
 80055ca:	f001 fce3 	bl	8006f94 <RCCEx_PLL3_Config>
 80055ce:	4603      	mov	r3, r0
 80055d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055d4:	e004      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055dc:	e000      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80055de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055e8:	4b7b      	ldr	r3, [pc, #492]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ec:	f023 0107 	bic.w	r1, r3, #7
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f6:	4a78      	ldr	r2, [pc, #480]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80055fc:	e003      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005612:	f04f 0b00 	mov.w	fp, #0
 8005616:	ea5a 030b 	orrs.w	r3, sl, fp
 800561a:	d04c      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005626:	d030      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800562c:	d829      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800562e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005630:	d02d      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005632:	2bc0      	cmp	r3, #192	@ 0xc0
 8005634:	d825      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005636:	2b80      	cmp	r3, #128	@ 0x80
 8005638:	d018      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800563a:	2b80      	cmp	r3, #128	@ 0x80
 800563c:	d821      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005642:	2b40      	cmp	r3, #64	@ 0x40
 8005644:	d007      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005646:	e01c      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005648:	4b63      	ldr	r3, [pc, #396]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	4a62      	ldr	r2, [pc, #392]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800564e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005654:	e01c      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565a:	3308      	adds	r3, #8
 800565c:	2100      	movs	r1, #0
 800565e:	4618      	mov	r0, r3
 8005660:	f001 fbe6 	bl	8006e30 <RCCEx_PLL2_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800566a:	e011      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005670:	3328      	adds	r3, #40	@ 0x28
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fc8d 	bl	8006f94 <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005680:	e006      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005688:	e002      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800568a:	bf00      	nop
 800568c:	e000      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800568e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005698:	4b4f      	ldr	r3, [pc, #316]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800569a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800569c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a6:	4a4c      	ldr	r2, [pc, #304]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a8:	430b      	orrs	r3, r1
 80056aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80056ac:	e003      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80056c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80056c6:	2300      	movs	r3, #0
 80056c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80056cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80056d0:	460b      	mov	r3, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	d053      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80056d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056e2:	d035      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80056e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056e8:	d82e      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056ee:	d031      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80056f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056f4:	d828      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056fa:	d01a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80056fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005700:	d822      	bhi.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005706:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800570a:	d007      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800570c:	e01c      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800570e:	4b32      	ldr	r3, [pc, #200]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005712:	4a31      	ldr	r2, [pc, #196]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005718:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800571a:	e01c      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800571c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005720:	3308      	adds	r3, #8
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f001 fb83 	bl	8006e30 <RCCEx_PLL2_Config>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005730:	e011      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005736:	3328      	adds	r3, #40	@ 0x28
 8005738:	2100      	movs	r1, #0
 800573a:	4618      	mov	r0, r3
 800573c:	f001 fc2a 	bl	8006f94 <RCCEx_PLL3_Config>
 8005740:	4603      	mov	r3, r0
 8005742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005746:	e006      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800574e:	e002      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005750:	bf00      	nop
 8005752:	e000      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800575e:	4b1e      	ldr	r3, [pc, #120]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005762:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800576e:	4a1a      	ldr	r2, [pc, #104]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005770:	430b      	orrs	r3, r1
 8005772:	6593      	str	r3, [r2, #88]	@ 0x58
 8005774:	e003      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800577a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800578a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800578e:	2300      	movs	r3, #0
 8005790:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005794:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005798:	460b      	mov	r3, r1
 800579a:	4313      	orrs	r3, r2
 800579c:	d056      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800579e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057aa:	d038      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80057ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057b0:	d831      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057b6:	d034      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80057b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057bc:	d82b      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057c2:	d01d      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80057c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057c8:	d825      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80057ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80057d4:	e01f      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057d6:	bf00      	nop
 80057d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057dc:	4ba2      	ldr	r3, [pc, #648]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	4aa1      	ldr	r2, [pc, #644]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057e8:	e01c      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	3308      	adds	r3, #8
 80057f0:	2100      	movs	r1, #0
 80057f2:	4618      	mov	r0, r3
 80057f4:	f001 fb1c 	bl	8006e30 <RCCEx_PLL2_Config>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80057fe:	e011      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005804:	3328      	adds	r3, #40	@ 0x28
 8005806:	2100      	movs	r1, #0
 8005808:	4618      	mov	r0, r3
 800580a:	f001 fbc3 	bl	8006f94 <RCCEx_PLL3_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005814:	e006      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800581c:	e002      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800581e:	bf00      	nop
 8005820:	e000      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10b      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800582c:	4b8e      	ldr	r3, [pc, #568]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005830:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005838:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800583c:	4a8a      	ldr	r2, [pc, #552]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800583e:	430b      	orrs	r3, r1
 8005840:	6593      	str	r3, [r2, #88]	@ 0x58
 8005842:	e003      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005858:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800585c:	2300      	movs	r3, #0
 800585e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005862:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005866:	460b      	mov	r3, r1
 8005868:	4313      	orrs	r3, r2
 800586a:	d03a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800586c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005872:	2b30      	cmp	r3, #48	@ 0x30
 8005874:	d01f      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005876:	2b30      	cmp	r3, #48	@ 0x30
 8005878:	d819      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800587a:	2b20      	cmp	r3, #32
 800587c:	d00c      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800587e:	2b20      	cmp	r3, #32
 8005880:	d815      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d019      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005886:	2b10      	cmp	r3, #16
 8005888:	d111      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588a:	4b77      	ldr	r3, [pc, #476]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800588c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588e:	4a76      	ldr	r2, [pc, #472]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005894:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005896:	e011      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589c:	3308      	adds	r3, #8
 800589e:	2102      	movs	r1, #2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 fac5 	bl	8006e30 <RCCEx_PLL2_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80058ac:	e006      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058b4:	e002      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058b6:	bf00      	nop
 80058b8:	e000      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80058ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058c4:	4b68      	ldr	r3, [pc, #416]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80058cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d2:	4a65      	ldr	r2, [pc, #404]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058d4:	430b      	orrs	r3, r1
 80058d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058d8:	e003      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058f2:	2300      	movs	r3, #0
 80058f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d051      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005908:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800590c:	d035      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800590e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005912:	d82e      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005914:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005918:	d031      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800591a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800591e:	d828      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005920:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005924:	d01a      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800592a:	d822      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005934:	d007      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005936:	e01c      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005938:	4b4b      	ldr	r3, [pc, #300]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800593a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593c:	4a4a      	ldr	r2, [pc, #296]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800593e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005944:	e01c      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	3308      	adds	r3, #8
 800594c:	2100      	movs	r1, #0
 800594e:	4618      	mov	r0, r3
 8005950:	f001 fa6e 	bl	8006e30 <RCCEx_PLL2_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800595a:	e011      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005960:	3328      	adds	r3, #40	@ 0x28
 8005962:	2100      	movs	r1, #0
 8005964:	4618      	mov	r0, r3
 8005966:	f001 fb15 	bl	8006f94 <RCCEx_PLL3_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005970:	e006      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005978:	e002      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800597a:	bf00      	nop
 800597c:	e000      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800597e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005988:	4b37      	ldr	r3, [pc, #220]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800598a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005996:	4a34      	ldr	r2, [pc, #208]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005998:	430b      	orrs	r3, r1
 800599a:	6513      	str	r3, [r2, #80]	@ 0x50
 800599c:	e003      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80059b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80059c0:	460b      	mov	r3, r1
 80059c2:	4313      	orrs	r3, r2
 80059c4:	d056      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059d0:	d033      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80059d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059d6:	d82c      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059dc:	d02f      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80059de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059e2:	d826      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059e8:	d02b      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80059ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059ee:	d820      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059f4:	d012      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80059f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059fa:	d81a      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d022      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a04:	d115      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fa0e 	bl	8006e30 <RCCEx_PLL2_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a1a:	e015      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a20:	3328      	adds	r3, #40	@ 0x28
 8005a22:	2101      	movs	r1, #1
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 fab5 	bl	8006f94 <RCCEx_PLL3_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a30:	e00a      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a38:	e006      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a3a:	bf00      	nop
 8005a3c:	e004      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a3e:	bf00      	nop
 8005a40:	e002      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10d      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a50:	4b05      	ldr	r3, [pc, #20]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a5e:	4a02      	ldr	r2, [pc, #8]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a64:	e006      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a66:	bf00      	nop
 8005a68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a84:	2300      	movs	r3, #0
 8005a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4313      	orrs	r3, r2
 8005a92:	d055      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aa0:	d033      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aa6:	d82c      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aac:	d02f      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab2:	d826      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ab4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ab8:	d02b      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005aba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005abe:	d820      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ac4:	d012      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aca:	d81a      	bhi.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d022      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005ad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ad4:	d115      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ada:	3308      	adds	r3, #8
 8005adc:	2101      	movs	r1, #1
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f001 f9a6 	bl	8006e30 <RCCEx_PLL2_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005aea:	e015      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	3328      	adds	r3, #40	@ 0x28
 8005af2:	2101      	movs	r1, #1
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 fa4d 	bl	8006f94 <RCCEx_PLL3_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b00:	e00a      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b08:	e006      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b0a:	bf00      	nop
 8005b0c:	e004      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b0e:	bf00      	nop
 8005b10:	e002      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10b      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b20:	4ba3      	ldr	r3, [pc, #652]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b30:	4a9f      	ldr	r2, [pc, #636]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b32:	430b      	orrs	r3, r1
 8005b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b36:	e003      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b50:	2300      	movs	r3, #0
 8005b52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	d037      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b6a:	d00e      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b70:	d816      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d018      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005b76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b7a:	d111      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7c:	4b8c      	ldr	r3, [pc, #560]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	4a8b      	ldr	r2, [pc, #556]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b88:	e00f      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8e:	3308      	adds	r3, #8
 8005b90:	2101      	movs	r1, #1
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 f94c 	bl	8006e30 <RCCEx_PLL2_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b9e:	e004      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ba6:	e000      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bb2:	4b7f      	ldr	r3, [pc, #508]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc0:	4a7b      	ldr	r2, [pc, #492]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bc6:	e003      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005be6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4313      	orrs	r3, r2
 8005bee:	d039      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d81c      	bhi.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005c00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c3d 	.word	0x08005c3d
 8005c04:	08005c11 	.word	0x08005c11
 8005c08:	08005c1f 	.word	0x08005c1f
 8005c0c:	08005c3d 	.word	0x08005c3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c10:	4b67      	ldr	r3, [pc, #412]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c14:	4a66      	ldr	r2, [pc, #408]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c1c:	e00f      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c22:	3308      	adds	r3, #8
 8005c24:	2102      	movs	r1, #2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 f902 	bl	8006e30 <RCCEx_PLL2_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c32:	e004      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c3a:	e000      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c46:	4b5a      	ldr	r3, [pc, #360]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4a:	f023 0103 	bic.w	r1, r3, #3
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c54:	4a56      	ldr	r2, [pc, #344]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c56:	430b      	orrs	r3, r1
 8005c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c5a:	e003      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c74:	2300      	movs	r3, #0
 8005c76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f000 809f 	beq.w	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c86:	4b4b      	ldr	r3, [pc, #300]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a4a      	ldr	r2, [pc, #296]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c92:	f7fb fbc3 	bl	800141c <HAL_GetTick>
 8005c96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c9a:	e00b      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9c:	f7fb fbbe 	bl	800141c <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b64      	cmp	r3, #100	@ 0x64
 8005caa:	d903      	bls.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb2:	e005      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0ed      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d179      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005cc8:	4b39      	ldr	r3, [pc, #228]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cd4:	4053      	eors	r3, r2
 8005cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d015      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cde:	4b34      	ldr	r3, [pc, #208]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ce6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cea:	4b31      	ldr	r3, [pc, #196]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cee:	4a30      	ldr	r2, [pc, #192]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d00:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d02:	4a2b      	ldr	r2, [pc, #172]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d08:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d16:	d118      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d18:	f7fb fb80 	bl	800141c <HAL_GetTick>
 8005d1c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d20:	e00d      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d22:	f7fb fb7b 	bl	800141c <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005d2c:	1ad2      	subs	r2, r2, r3
 8005d2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d903      	bls.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005d3c:	e005      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0eb      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d129      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d62:	d10e      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005d64:	4b12      	ldr	r3, [pc, #72]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d74:	091a      	lsrs	r2, r3, #4
 8005d76:	4b10      	ldr	r3, [pc, #64]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6113      	str	r3, [r2, #16]
 8005d80:	e005      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005d82:	4b0b      	ldr	r3, [pc, #44]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	4a0a      	ldr	r2, [pc, #40]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d8c:	6113      	str	r3, [r2, #16]
 8005d8e:	4b08      	ldr	r3, [pc, #32]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d90:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d9e:	4a04      	ldr	r2, [pc, #16]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005da4:	e00e      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005dae:	e009      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005db0:	58024400 	.word	0x58024400
 8005db4:	58024800 	.word	0x58024800
 8005db8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f002 0301 	and.w	r3, r2, #1
 8005dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f000 8089 	beq.w	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dec:	2b28      	cmp	r3, #40	@ 0x28
 8005dee:	d86b      	bhi.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005df0:	a201      	add	r2, pc, #4	@ (adr r2, 8005df8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df6:	bf00      	nop
 8005df8:	08005ed1 	.word	0x08005ed1
 8005dfc:	08005ec9 	.word	0x08005ec9
 8005e00:	08005ec9 	.word	0x08005ec9
 8005e04:	08005ec9 	.word	0x08005ec9
 8005e08:	08005ec9 	.word	0x08005ec9
 8005e0c:	08005ec9 	.word	0x08005ec9
 8005e10:	08005ec9 	.word	0x08005ec9
 8005e14:	08005ec9 	.word	0x08005ec9
 8005e18:	08005e9d 	.word	0x08005e9d
 8005e1c:	08005ec9 	.word	0x08005ec9
 8005e20:	08005ec9 	.word	0x08005ec9
 8005e24:	08005ec9 	.word	0x08005ec9
 8005e28:	08005ec9 	.word	0x08005ec9
 8005e2c:	08005ec9 	.word	0x08005ec9
 8005e30:	08005ec9 	.word	0x08005ec9
 8005e34:	08005ec9 	.word	0x08005ec9
 8005e38:	08005eb3 	.word	0x08005eb3
 8005e3c:	08005ec9 	.word	0x08005ec9
 8005e40:	08005ec9 	.word	0x08005ec9
 8005e44:	08005ec9 	.word	0x08005ec9
 8005e48:	08005ec9 	.word	0x08005ec9
 8005e4c:	08005ec9 	.word	0x08005ec9
 8005e50:	08005ec9 	.word	0x08005ec9
 8005e54:	08005ec9 	.word	0x08005ec9
 8005e58:	08005ed1 	.word	0x08005ed1
 8005e5c:	08005ec9 	.word	0x08005ec9
 8005e60:	08005ec9 	.word	0x08005ec9
 8005e64:	08005ec9 	.word	0x08005ec9
 8005e68:	08005ec9 	.word	0x08005ec9
 8005e6c:	08005ec9 	.word	0x08005ec9
 8005e70:	08005ec9 	.word	0x08005ec9
 8005e74:	08005ec9 	.word	0x08005ec9
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ec9 	.word	0x08005ec9
 8005e80:	08005ec9 	.word	0x08005ec9
 8005e84:	08005ec9 	.word	0x08005ec9
 8005e88:	08005ec9 	.word	0x08005ec9
 8005e8c:	08005ec9 	.word	0x08005ec9
 8005e90:	08005ec9 	.word	0x08005ec9
 8005e94:	08005ec9 	.word	0x08005ec9
 8005e98:	08005ed1 	.word	0x08005ed1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 ffc3 	bl	8006e30 <RCCEx_PLL2_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005eb0:	e00f      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	3328      	adds	r3, #40	@ 0x28
 8005eb8:	2101      	movs	r1, #1
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f001 f86a 	bl	8006f94 <RCCEx_PLL3_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ec6:	e004      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ece:	e000      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005eda:	4bbf      	ldr	r3, [pc, #764]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ede:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ee8:	4abb      	ldr	r2, [pc, #748]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005eea:	430b      	orrs	r3, r1
 8005eec:	6553      	str	r3, [r2, #84]	@ 0x54
 8005eee:	e003      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f002 0302 	and.w	r3, r2, #2
 8005f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f0e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f12:	460b      	mov	r3, r1
 8005f14:	4313      	orrs	r3, r2
 8005f16:	d041      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d824      	bhi.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005f22:	a201      	add	r2, pc, #4	@ (adr r2, 8005f28 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f75 	.word	0x08005f75
 8005f2c:	08005f41 	.word	0x08005f41
 8005f30:	08005f57 	.word	0x08005f57
 8005f34:	08005f75 	.word	0x08005f75
 8005f38:	08005f75 	.word	0x08005f75
 8005f3c:	08005f75 	.word	0x08005f75
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f44:	3308      	adds	r3, #8
 8005f46:	2101      	movs	r1, #1
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 ff71 	bl	8006e30 <RCCEx_PLL2_Config>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f54:	e00f      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5a:	3328      	adds	r3, #40	@ 0x28
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 f818 	bl	8006f94 <RCCEx_PLL3_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f6a:	e004      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f72:	e000      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f7e:	4b96      	ldr	r3, [pc, #600]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f82:	f023 0107 	bic.w	r1, r3, #7
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f8c:	4a92      	ldr	r2, [pc, #584]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f92:	e003      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f002 0304 	and.w	r3, r2, #4
 8005fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fac:	2300      	movs	r3, #0
 8005fae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fb2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	d044      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fc4:	2b05      	cmp	r3, #5
 8005fc6:	d825      	bhi.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	0800601d 	.word	0x0800601d
 8005fd4:	08005fe9 	.word	0x08005fe9
 8005fd8:	08005fff 	.word	0x08005fff
 8005fdc:	0800601d 	.word	0x0800601d
 8005fe0:	0800601d 	.word	0x0800601d
 8005fe4:	0800601d 	.word	0x0800601d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fec:	3308      	adds	r3, #8
 8005fee:	2101      	movs	r1, #1
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 ff1d 	bl	8006e30 <RCCEx_PLL2_Config>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ffc:	e00f      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	3328      	adds	r3, #40	@ 0x28
 8006004:	2101      	movs	r1, #1
 8006006:	4618      	mov	r0, r3
 8006008:	f000 ffc4 	bl	8006f94 <RCCEx_PLL3_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006012:	e004      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800601a:	e000      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800601c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10b      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006026:	4b6c      	ldr	r3, [pc, #432]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602a:	f023 0107 	bic.w	r1, r3, #7
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006036:	4a68      	ldr	r2, [pc, #416]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006038:	430b      	orrs	r3, r1
 800603a:	6593      	str	r3, [r2, #88]	@ 0x58
 800603c:	e003      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f002 0320 	and.w	r3, r2, #32
 8006052:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006056:	2300      	movs	r3, #0
 8006058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800605c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006060:	460b      	mov	r3, r1
 8006062:	4313      	orrs	r3, r2
 8006064:	d055      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800606e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006072:	d033      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006074:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006078:	d82c      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607e:	d02f      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006084:	d826      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006086:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800608a:	d02b      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800608c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006090:	d820      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006096:	d012      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800609c:	d81a      	bhi.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d022      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80060a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060a6:	d115      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ac:	3308      	adds	r3, #8
 80060ae:	2100      	movs	r1, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 febd 	bl	8006e30 <RCCEx_PLL2_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060bc:	e015      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c2:	3328      	adds	r3, #40	@ 0x28
 80060c4:	2102      	movs	r1, #2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 ff64 	bl	8006f94 <RCCEx_PLL3_Config>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060d2:	e00a      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060da:	e006      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060dc:	bf00      	nop
 80060de:	e004      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060e0:	bf00      	nop
 80060e2:	e002      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060e4:	bf00      	nop
 80060e6:	e000      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060f2:	4b39      	ldr	r3, [pc, #228]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006102:	4a35      	ldr	r2, [pc, #212]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006104:	430b      	orrs	r3, r1
 8006106:	6553      	str	r3, [r2, #84]	@ 0x54
 8006108:	e003      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800610e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800611e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006122:	2300      	movs	r3, #0
 8006124:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006128:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800612c:	460b      	mov	r3, r1
 800612e:	4313      	orrs	r3, r2
 8006130:	d058      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800613a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800613e:	d033      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006140:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006144:	d82c      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800614a:	d02f      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800614c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006150:	d826      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006152:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006156:	d02b      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006158:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800615c:	d820      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800615e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006162:	d012      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006168:	d81a      	bhi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d022      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800616e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006172:	d115      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006178:	3308      	adds	r3, #8
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fe57 	bl	8006e30 <RCCEx_PLL2_Config>
 8006182:	4603      	mov	r3, r0
 8006184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006188:	e015      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618e:	3328      	adds	r3, #40	@ 0x28
 8006190:	2102      	movs	r1, #2
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fefe 	bl	8006f94 <RCCEx_PLL3_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800619e:	e00a      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061a6:	e006      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061a8:	bf00      	nop
 80061aa:	e004      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061ac:	bf00      	nop
 80061ae:	e002      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061b0:	bf00      	nop
 80061b2:	e000      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80061b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10e      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061be:	4b06      	ldr	r3, [pc, #24]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061ce:	4a02      	ldr	r2, [pc, #8]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061d0:	430b      	orrs	r3, r1
 80061d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80061d4:	e006      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80061d6:	bf00      	nop
 80061d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061f4:	2300      	movs	r3, #0
 80061f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061fe:	460b      	mov	r3, r1
 8006200:	4313      	orrs	r3, r2
 8006202:	d055      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800620c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006210:	d033      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006212:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006216:	d82c      	bhi.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800621c:	d02f      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800621e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006222:	d826      	bhi.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006224:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006228:	d02b      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800622a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800622e:	d820      	bhi.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006230:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006234:	d012      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006236:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800623a:	d81a      	bhi.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d022      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006244:	d115      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624a:	3308      	adds	r3, #8
 800624c:	2100      	movs	r1, #0
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fdee 	bl	8006e30 <RCCEx_PLL2_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800625a:	e015      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006260:	3328      	adds	r3, #40	@ 0x28
 8006262:	2102      	movs	r1, #2
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fe95 	bl	8006f94 <RCCEx_PLL3_Config>
 800626a:	4603      	mov	r3, r0
 800626c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006270:	e00a      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006278:	e006      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800627a:	bf00      	nop
 800627c:	e004      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800627e:	bf00      	nop
 8006280:	e002      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006282:	bf00      	nop
 8006284:	e000      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10b      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006290:	4ba1      	ldr	r3, [pc, #644]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006294:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062a0:	4a9d      	ldr	r2, [pc, #628]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062a2:	430b      	orrs	r3, r1
 80062a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80062a6:	e003      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f002 0308 	and.w	r3, r2, #8
 80062bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80062ca:	460b      	mov	r3, r1
 80062cc:	4313      	orrs	r3, r2
 80062ce:	d01e      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062dc:	d10c      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e2:	3328      	adds	r3, #40	@ 0x28
 80062e4:	2102      	movs	r1, #2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fe54 	bl	8006f94 <RCCEx_PLL3_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062f8:	4b87      	ldr	r3, [pc, #540]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006308:	4a83      	ldr	r2, [pc, #524]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800630a:	430b      	orrs	r3, r1
 800630c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f002 0310 	and.w	r3, r2, #16
 800631a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800631e:	2300      	movs	r3, #0
 8006320:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006324:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006328:	460b      	mov	r3, r1
 800632a:	4313      	orrs	r3, r2
 800632c:	d01e      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006332:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800633a:	d10c      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800633c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006340:	3328      	adds	r3, #40	@ 0x28
 8006342:	2102      	movs	r1, #2
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fe25 	bl	8006f94 <RCCEx_PLL3_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006356:	4b70      	ldr	r3, [pc, #448]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006366:	4a6c      	ldr	r2, [pc, #432]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006368:	430b      	orrs	r3, r1
 800636a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006378:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800637c:	2300      	movs	r3, #0
 800637e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006382:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006386:	460b      	mov	r3, r1
 8006388:	4313      	orrs	r3, r2
 800638a:	d03e      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006390:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006398:	d022      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800639a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800639e:	d81b      	bhi.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80063a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063a8:	d00b      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80063aa:	e015      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b0:	3308      	adds	r3, #8
 80063b2:	2100      	movs	r1, #0
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fd3b 	bl	8006e30 <RCCEx_PLL2_Config>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063c0:	e00f      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c6:	3328      	adds	r3, #40	@ 0x28
 80063c8:	2102      	movs	r1, #2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fde2 	bl	8006f94 <RCCEx_PLL3_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063d6:	e004      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063de:	e000      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80063e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10b      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063ea:	4b4b      	ldr	r3, [pc, #300]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063fa:	4a47      	ldr	r2, [pc, #284]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006400:	e003      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006406:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006416:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006418:	2300      	movs	r3, #0
 800641a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800641c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006420:	460b      	mov	r3, r1
 8006422:	4313      	orrs	r3, r2
 8006424:	d03b      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800642e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006432:	d01f      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006434:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006438:	d818      	bhi.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800643a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800643e:	d003      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006440:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006444:	d007      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006446:	e011      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006448:	4b33      	ldr	r3, [pc, #204]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800644a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644c:	4a32      	ldr	r2, [pc, #200]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800644e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006454:	e00f      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645a:	3328      	adds	r3, #40	@ 0x28
 800645c:	2101      	movs	r1, #1
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fd98 	bl	8006f94 <RCCEx_PLL3_Config>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800646a:	e004      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006472:	e000      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10b      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800647e:	4b26      	ldr	r3, [pc, #152]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006482:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648e:	4a22      	ldr	r2, [pc, #136]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006490:	430b      	orrs	r3, r1
 8006492:	6553      	str	r3, [r2, #84]	@ 0x54
 8006494:	e003      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800649a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80064aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80064ac:	2300      	movs	r3, #0
 80064ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80064b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80064b4:	460b      	mov	r3, r1
 80064b6:	4313      	orrs	r3, r2
 80064b8:	d034      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80064ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80064c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c8:	d007      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80064ca:	e011      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064cc:	4b12      	ldr	r3, [pc, #72]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d0:	4a11      	ldr	r2, [pc, #68]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064d8:	e00e      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064de:	3308      	adds	r3, #8
 80064e0:	2102      	movs	r1, #2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fca4 	bl	8006e30 <RCCEx_PLL2_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064ee:	e003      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10d      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006500:	4b05      	ldr	r3, [pc, #20]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006504:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800650e:	4a02      	ldr	r2, [pc, #8]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006510:	430b      	orrs	r3, r1
 8006512:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006514:	e006      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006516:	bf00      	nop
 8006518:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006532:	2300      	movs	r3, #0
 8006534:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006536:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800653a:	460b      	mov	r3, r1
 800653c:	4313      	orrs	r3, r2
 800653e:	d00c      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006544:	3328      	adds	r3, #40	@ 0x28
 8006546:	2102      	movs	r1, #2
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fd23 	bl	8006f94 <RCCEx_PLL3_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006566:	663b      	str	r3, [r7, #96]	@ 0x60
 8006568:	2300      	movs	r3, #0
 800656a:	667b      	str	r3, [r7, #100]	@ 0x64
 800656c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006570:	460b      	mov	r3, r1
 8006572:	4313      	orrs	r3, r2
 8006574:	d038      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800657e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006582:	d018      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006584:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006588:	d811      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800658a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800658e:	d014      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006594:	d80b      	bhi.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d011      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800659a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800659e:	d106      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065a0:	4bc3      	ldr	r3, [pc, #780]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	4ac2      	ldr	r2, [pc, #776]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80065ac:	e008      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065b4:	e004      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065b6:	bf00      	nop
 80065b8:	e002      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065ba:	bf00      	nop
 80065bc:	e000      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80065be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10b      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065c8:	4bb9      	ldr	r3, [pc, #740]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065d8:	4ab5      	ldr	r2, [pc, #724]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80065de:	e003      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80065f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065f6:	2300      	movs	r3, #0
 80065f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80065fe:	460b      	mov	r3, r1
 8006600:	4313      	orrs	r3, r2
 8006602:	d009      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006604:	4baa      	ldr	r3, [pc, #680]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006608:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800660c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006612:	4aa7      	ldr	r2, [pc, #668]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006614:	430b      	orrs	r3, r1
 8006616:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006624:	653b      	str	r3, [r7, #80]	@ 0x50
 8006626:	2300      	movs	r3, #0
 8006628:	657b      	str	r3, [r7, #84]	@ 0x54
 800662a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800662e:	460b      	mov	r3, r1
 8006630:	4313      	orrs	r3, r2
 8006632:	d00a      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006634:	4b9e      	ldr	r3, [pc, #632]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800663c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006640:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006644:	4a9a      	ldr	r2, [pc, #616]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006646:	430b      	orrs	r3, r1
 8006648:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006658:	2300      	movs	r3, #0
 800665a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800665c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006660:	460b      	mov	r3, r1
 8006662:	4313      	orrs	r3, r2
 8006664:	d009      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006666:	4b92      	ldr	r3, [pc, #584]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800666a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800666e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006674:	4a8e      	ldr	r2, [pc, #568]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006676:	430b      	orrs	r3, r1
 8006678:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006686:	643b      	str	r3, [r7, #64]	@ 0x40
 8006688:	2300      	movs	r3, #0
 800668a:	647b      	str	r3, [r7, #68]	@ 0x44
 800668c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006690:	460b      	mov	r3, r1
 8006692:	4313      	orrs	r3, r2
 8006694:	d00e      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006696:	4b86      	ldr	r3, [pc, #536]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	4a85      	ldr	r2, [pc, #532]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800669c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066a0:	6113      	str	r3, [r2, #16]
 80066a2:	4b83      	ldr	r3, [pc, #524]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066a4:	6919      	ldr	r1, [r3, #16]
 80066a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80066ae:	4a80      	ldr	r2, [pc, #512]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066b0:	430b      	orrs	r3, r1
 80066b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80066c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066c2:	2300      	movs	r3, #0
 80066c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80066ca:	460b      	mov	r3, r1
 80066cc:	4313      	orrs	r3, r2
 80066ce:	d009      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066d0:	4b77      	ldr	r3, [pc, #476]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066de:	4a74      	ldr	r2, [pc, #464]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066e0:	430b      	orrs	r3, r1
 80066e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80066f2:	2300      	movs	r3, #0
 80066f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80066fa:	460b      	mov	r3, r1
 80066fc:	4313      	orrs	r3, r2
 80066fe:	d00a      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006700:	4b6b      	ldr	r3, [pc, #428]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006704:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006710:	4a67      	ldr	r2, [pc, #412]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006712:	430b      	orrs	r3, r1
 8006714:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	2100      	movs	r1, #0
 8006720:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006728:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800672c:	460b      	mov	r3, r1
 800672e:	4313      	orrs	r3, r2
 8006730:	d011      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006736:	3308      	adds	r3, #8
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fb78 	bl	8006e30 <RCCEx_PLL2_Config>
 8006740:	4603      	mov	r3, r0
 8006742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	2100      	movs	r1, #0
 8006760:	6239      	str	r1, [r7, #32]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
 8006768:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800676c:	460b      	mov	r3, r1
 800676e:	4313      	orrs	r3, r2
 8006770:	d011      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006776:	3308      	adds	r3, #8
 8006778:	2101      	movs	r1, #1
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fb58 	bl	8006e30 <RCCEx_PLL2_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	2100      	movs	r1, #0
 80067a0:	61b9      	str	r1, [r7, #24]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	61fb      	str	r3, [r7, #28]
 80067a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067ac:	460b      	mov	r3, r1
 80067ae:	4313      	orrs	r3, r2
 80067b0:	d011      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b6:	3308      	adds	r3, #8
 80067b8:	2102      	movs	r1, #2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fb38 	bl	8006e30 <RCCEx_PLL2_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	2100      	movs	r1, #0
 80067e0:	6139      	str	r1, [r7, #16]
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067ec:	460b      	mov	r3, r1
 80067ee:	4313      	orrs	r3, r2
 80067f0:	d011      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f6:	3328      	adds	r3, #40	@ 0x28
 80067f8:	2100      	movs	r1, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fbca 	bl	8006f94 <RCCEx_PLL3_Config>
 8006800:	4603      	mov	r3, r0
 8006802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	2100      	movs	r1, #0
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	f003 0310 	and.w	r3, r3, #16
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800682c:	460b      	mov	r3, r1
 800682e:	4313      	orrs	r3, r2
 8006830:	d011      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006836:	3328      	adds	r3, #40	@ 0x28
 8006838:	2101      	movs	r1, #1
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fbaa 	bl	8006f94 <RCCEx_PLL3_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	2100      	movs	r1, #0
 8006860:	6039      	str	r1, [r7, #0]
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	e9d7 1200 	ldrd	r1, r2, [r7]
 800686c:	460b      	mov	r3, r1
 800686e:	4313      	orrs	r3, r2
 8006870:	d011      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006876:	3328      	adds	r3, #40	@ 0x28
 8006878:	2102      	movs	r1, #2
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fb8a 	bl	8006f94 <RCCEx_PLL3_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006896:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	e000      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80068aa:	46bd      	mov	sp, r7
 80068ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b0:	58024400 	.word	0x58024400

080068b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80068b8:	f7fe fd96 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 80068bc:	4602      	mov	r2, r0
 80068be:	4b06      	ldr	r3, [pc, #24]	@ (80068d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	091b      	lsrs	r3, r3, #4
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	4904      	ldr	r1, [pc, #16]	@ (80068dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80068ca:	5ccb      	ldrb	r3, [r1, r3]
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	58024400 	.word	0x58024400
 80068dc:	0800eaa0 	.word	0x0800eaa0

080068e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b089      	sub	sp, #36	@ 0x24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068e8:	4ba1      	ldr	r3, [pc, #644]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80068f2:	4b9f      	ldr	r3, [pc, #636]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f6:	0b1b      	lsrs	r3, r3, #12
 80068f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80068fe:	4b9c      	ldr	r3, [pc, #624]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006902:	091b      	lsrs	r3, r3, #4
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800690a:	4b99      	ldr	r3, [pc, #612]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800690c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690e:	08db      	lsrs	r3, r3, #3
 8006910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	fb02 f303 	mul.w	r3, r2, r3
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006922:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8111 	beq.w	8006b50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	2b02      	cmp	r3, #2
 8006932:	f000 8083 	beq.w	8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b02      	cmp	r3, #2
 800693a:	f200 80a1 	bhi.w	8006a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d056      	beq.n	80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800694a:	e099      	b.n	8006a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800694c:	4b88      	ldr	r3, [pc, #544]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b00      	cmp	r3, #0
 8006956:	d02d      	beq.n	80069b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006958:	4b85      	ldr	r3, [pc, #532]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	08db      	lsrs	r3, r3, #3
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	4a84      	ldr	r2, [pc, #528]	@ (8006b74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006964:	fa22 f303 	lsr.w	r3, r2, r3
 8006968:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	ee07 3a90 	vmov	s15, r3
 8006970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006982:	4b7b      	ldr	r3, [pc, #492]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006992:	ed97 6a03 	vldr	s12, [r7, #12]
 8006996:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800699a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800699e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069b2:	e087      	b.n	8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	ee07 3a90 	vmov	s15, r3
 80069ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80069c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c6:	4b6a      	ldr	r3, [pc, #424]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069f6:	e065      	b.n	8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a0a:	4b59      	ldr	r3, [pc, #356]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a3a:	e043      	b.n	8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4e:	4b48      	ldr	r3, [pc, #288]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a7e:	e021      	b.n	8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a92:	4b37      	ldr	r3, [pc, #220]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aa6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ac2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac8:	0a5b      	lsrs	r3, r3, #9
 8006aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aea:	ee17 2a90 	vmov	r2, s15
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006af2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af6:	0c1b      	lsrs	r3, r3, #16
 8006af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006afc:	ee07 3a90 	vmov	s15, r3
 8006b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b18:	ee17 2a90 	vmov	r2, s15
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006b20:	4b13      	ldr	r3, [pc, #76]	@ (8006b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b24:	0e1b      	lsrs	r3, r3, #24
 8006b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b46:	ee17 2a90 	vmov	r2, s15
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b4e:	e008      	b.n	8006b62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	609a      	str	r2, [r3, #8]
}
 8006b62:	bf00      	nop
 8006b64:	3724      	adds	r7, #36	@ 0x24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	58024400 	.word	0x58024400
 8006b74:	03d09000 	.word	0x03d09000
 8006b78:	46000000 	.word	0x46000000
 8006b7c:	4c742400 	.word	0x4c742400
 8006b80:	4a742400 	.word	0x4a742400
 8006b84:	4bbebc20 	.word	0x4bbebc20

08006b88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b089      	sub	sp, #36	@ 0x24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b90:	4ba1      	ldr	r3, [pc, #644]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b94:	f003 0303 	and.w	r3, r3, #3
 8006b98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006b9a:	4b9f      	ldr	r3, [pc, #636]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9e:	0d1b      	lsrs	r3, r3, #20
 8006ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ba4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006ba6:	4b9c      	ldr	r3, [pc, #624]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006bb2:	4b99      	ldr	r3, [pc, #612]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb6:	08db      	lsrs	r3, r3, #3
 8006bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	fb02 f303 	mul.w	r3, r2, r3
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8111 	beq.w	8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	f000 8083 	beq.w	8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	f200 80a1 	bhi.w	8006d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d056      	beq.n	8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006bf2:	e099      	b.n	8006d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bf4:	4b88      	ldr	r3, [pc, #544]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d02d      	beq.n	8006c5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c00:	4b85      	ldr	r3, [pc, #532]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	08db      	lsrs	r3, r3, #3
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	4a84      	ldr	r2, [pc, #528]	@ (8006e1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	ee07 3a90 	vmov	s15, r3
 8006c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c2a:	4b7b      	ldr	r3, [pc, #492]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c5a:	e087      	b.n	8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	ee07 3a90 	vmov	s15, r3
 8006c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6e:	4b6a      	ldr	r3, [pc, #424]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c9e:	e065      	b.n	8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	ee07 3a90 	vmov	s15, r3
 8006ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006caa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cb2:	4b59      	ldr	r3, [pc, #356]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ce2:	e043      	b.n	8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf6:	4b48      	ldr	r3, [pc, #288]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d26:	e021      	b.n	8006d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d3a:	4b37      	ldr	r3, [pc, #220]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d70:	0a5b      	lsrs	r3, r3, #9
 8006d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d92:	ee17 2a90 	vmov	r2, s15
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	0c1b      	lsrs	r3, r3, #16
 8006da0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006db0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dc0:	ee17 2a90 	vmov	r2, s15
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006dc8:	4b13      	ldr	r3, [pc, #76]	@ (8006e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dcc:	0e1b      	lsrs	r3, r3, #24
 8006dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dee:	ee17 2a90 	vmov	r2, s15
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006df6:	e008      	b.n	8006e0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	609a      	str	r2, [r3, #8]
}
 8006e0a:	bf00      	nop
 8006e0c:	3724      	adds	r7, #36	@ 0x24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	58024400 	.word	0x58024400
 8006e1c:	03d09000 	.word	0x03d09000
 8006e20:	46000000 	.word	0x46000000
 8006e24:	4c742400 	.word	0x4c742400
 8006e28:	4a742400 	.word	0x4a742400
 8006e2c:	4bbebc20 	.word	0x4bbebc20

08006e30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e3e:	4b53      	ldr	r3, [pc, #332]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d101      	bne.n	8006e4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e099      	b.n	8006f82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a4e      	ldr	r2, [pc, #312]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006e54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e5a:	f7fa fadf 	bl	800141c <HAL_GetTick>
 8006e5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e60:	e008      	b.n	8006e74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e62:	f7fa fadb 	bl	800141c <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d901      	bls.n	8006e74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e086      	b.n	8006f82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e74:	4b45      	ldr	r3, [pc, #276]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1f0      	bne.n	8006e62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e80:	4b42      	ldr	r3, [pc, #264]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e84:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	031b      	lsls	r3, r3, #12
 8006e8e:	493f      	ldr	r1, [pc, #252]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	025b      	lsls	r3, r3, #9
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	041b      	lsls	r3, r3, #16
 8006eb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	061b      	lsls	r3, r3, #24
 8006ec0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ec4:	4931      	ldr	r1, [pc, #196]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006eca:	4b30      	ldr	r3, [pc, #192]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ece:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	492d      	ldr	r1, [pc, #180]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006edc:	4b2b      	ldr	r3, [pc, #172]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee0:	f023 0220 	bic.w	r2, r3, #32
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	4928      	ldr	r1, [pc, #160]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006eee:	4b27      	ldr	r3, [pc, #156]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef2:	4a26      	ldr	r2, [pc, #152]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006ef4:	f023 0310 	bic.w	r3, r3, #16
 8006ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006efa:	4b24      	ldr	r3, [pc, #144]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006efc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006efe:	4b24      	ldr	r3, [pc, #144]	@ (8006f90 <RCCEx_PLL2_Config+0x160>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	69d2      	ldr	r2, [r2, #28]
 8006f06:	00d2      	lsls	r2, r2, #3
 8006f08:	4920      	ldr	r1, [pc, #128]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	4a1e      	ldr	r2, [pc, #120]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006f14:	f043 0310 	orr.w	r3, r3, #16
 8006f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d106      	bne.n	8006f2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f20:	4b1a      	ldr	r3, [pc, #104]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	4a19      	ldr	r2, [pc, #100]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006f26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f2c:	e00f      	b.n	8006f4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d106      	bne.n	8006f42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f34:	4b15      	ldr	r3, [pc, #84]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f38:	4a14      	ldr	r2, [pc, #80]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f40:	e005      	b.n	8006f4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f42:	4b12      	ldr	r3, [pc, #72]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f46:	4a11      	ldr	r2, [pc, #68]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006f48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a0e      	ldr	r2, [pc, #56]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006f54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f5a:	f7fa fa5f 	bl	800141c <HAL_GetTick>
 8006f5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f60:	e008      	b.n	8006f74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f62:	f7fa fa5b 	bl	800141c <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d901      	bls.n	8006f74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e006      	b.n	8006f82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f74:	4b05      	ldr	r3, [pc, #20]	@ (8006f8c <RCCEx_PLL2_Config+0x15c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0f0      	beq.n	8006f62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	ffff0007 	.word	0xffff0007

08006f94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fa2:	4b53      	ldr	r3, [pc, #332]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d101      	bne.n	8006fb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e099      	b.n	80070e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a4e      	ldr	r2, [pc, #312]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8006fb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fbe:	f7fa fa2d 	bl	800141c <HAL_GetTick>
 8006fc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fc4:	e008      	b.n	8006fd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fc6:	f7fa fa29 	bl	800141c <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d901      	bls.n	8006fd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e086      	b.n	80070e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fd8:	4b45      	ldr	r3, [pc, #276]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f0      	bne.n	8006fc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006fe4:	4b42      	ldr	r3, [pc, #264]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	051b      	lsls	r3, r3, #20
 8006ff2:	493f      	ldr	r1, [pc, #252]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	3b01      	subs	r3, #1
 8007008:	025b      	lsls	r3, r3, #9
 800700a:	b29b      	uxth	r3, r3
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	3b01      	subs	r3, #1
 8007014:	041b      	lsls	r3, r3, #16
 8007016:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	3b01      	subs	r3, #1
 8007022:	061b      	lsls	r3, r3, #24
 8007024:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007028:	4931      	ldr	r1, [pc, #196]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 800702a:	4313      	orrs	r3, r2
 800702c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800702e:	4b30      	ldr	r3, [pc, #192]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8007030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007032:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	492d      	ldr	r1, [pc, #180]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 800703c:	4313      	orrs	r3, r2
 800703e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007040:	4b2b      	ldr	r3, [pc, #172]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8007042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007044:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	4928      	ldr	r1, [pc, #160]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 800704e:	4313      	orrs	r3, r2
 8007050:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007052:	4b27      	ldr	r3, [pc, #156]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8007054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007056:	4a26      	ldr	r2, [pc, #152]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8007058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800705c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800705e:	4b24      	ldr	r3, [pc, #144]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8007060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007062:	4b24      	ldr	r3, [pc, #144]	@ (80070f4 <RCCEx_PLL3_Config+0x160>)
 8007064:	4013      	ands	r3, r2
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	69d2      	ldr	r2, [r2, #28]
 800706a:	00d2      	lsls	r2, r2, #3
 800706c:	4920      	ldr	r1, [pc, #128]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 800706e:	4313      	orrs	r3, r2
 8007070:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007072:	4b1f      	ldr	r3, [pc, #124]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	4a1e      	ldr	r2, [pc, #120]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8007078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800707c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d106      	bne.n	8007092 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007084:	4b1a      	ldr	r3, [pc, #104]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	4a19      	ldr	r2, [pc, #100]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 800708a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800708e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007090:	e00f      	b.n	80070b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d106      	bne.n	80070a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007098:	4b15      	ldr	r3, [pc, #84]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 800709a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709c:	4a14      	ldr	r2, [pc, #80]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 800709e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80070a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070a4:	e005      	b.n	80070b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80070a6:	4b12      	ldr	r3, [pc, #72]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 80070a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070aa:	4a11      	ldr	r2, [pc, #68]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 80070ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070b2:	4b0f      	ldr	r3, [pc, #60]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a0e      	ldr	r2, [pc, #56]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 80070b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070be:	f7fa f9ad 	bl	800141c <HAL_GetTick>
 80070c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070c4:	e008      	b.n	80070d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070c6:	f7fa f9a9 	bl	800141c <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e006      	b.n	80070e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070d8:	4b05      	ldr	r3, [pc, #20]	@ (80070f0 <RCCEx_PLL3_Config+0x15c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0f0      	beq.n	80070c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	58024400 	.word	0x58024400
 80070f4:	ffff0007 	.word	0xffff0007

080070f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e049      	b.n	800719e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7f9 ff2a 	bl	8000f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3304      	adds	r3, #4
 8007134:	4619      	mov	r1, r3
 8007136:	4610      	mov	r0, r2
 8007138:	f000 f96e 	bl	8007418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d020      	beq.n	800720a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d01b      	beq.n	800720a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f06f 0202 	mvn.w	r2, #2
 80071da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f003 0303 	and.w	r3, r3, #3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f8f3 	bl	80073dc <HAL_TIM_IC_CaptureCallback>
 80071f6:	e005      	b.n	8007204 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f8e5 	bl	80073c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f8f6 	bl	80073f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d020      	beq.n	8007256 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 0304 	and.w	r3, r3, #4
 800721a:	2b00      	cmp	r3, #0
 800721c:	d01b      	beq.n	8007256 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f06f 0204 	mvn.w	r2, #4
 8007226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f8cd 	bl	80073dc <HAL_TIM_IC_CaptureCallback>
 8007242:	e005      	b.n	8007250 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f8bf 	bl	80073c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f8d0 	bl	80073f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b00      	cmp	r3, #0
 800725e:	d020      	beq.n	80072a2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	2b00      	cmp	r3, #0
 8007268:	d01b      	beq.n	80072a2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f06f 0208 	mvn.w	r2, #8
 8007272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2204      	movs	r2, #4
 8007278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f8a7 	bl	80073dc <HAL_TIM_IC_CaptureCallback>
 800728e:	e005      	b.n	800729c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f899 	bl	80073c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f8aa 	bl	80073f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d020      	beq.n	80072ee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d01b      	beq.n	80072ee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f06f 0210 	mvn.w	r2, #16
 80072be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2208      	movs	r2, #8
 80072c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f881 	bl	80073dc <HAL_TIM_IC_CaptureCallback>
 80072da:	e005      	b.n	80072e8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f873 	bl	80073c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f884 	bl	80073f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00c      	beq.n	8007312 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d007      	beq.n	8007312 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f06f 0201 	mvn.w	r2, #1
 800730a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f851 	bl	80073b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007318:	2b00      	cmp	r3, #0
 800731a:	d104      	bne.n	8007326 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00c      	beq.n	8007340 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800732c:	2b00      	cmp	r3, #0
 800732e:	d007      	beq.n	8007340 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f9a4 	bl	8007688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00c      	beq.n	8007364 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007350:	2b00      	cmp	r3, #0
 8007352:	d007      	beq.n	8007364 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800735c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f99c 	bl	800769c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00c      	beq.n	8007388 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	d007      	beq.n	8007388 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f83e 	bl	8007404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00c      	beq.n	80073ac <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f003 0320 	and.w	r3, r3, #32
 8007398:	2b00      	cmp	r3, #0
 800739a:	d007      	beq.n	80073ac <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f06f 0220 	mvn.w	r2, #32
 80073a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f964 	bl	8007674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073ac:	bf00      	nop
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a43      	ldr	r2, [pc, #268]	@ (8007538 <TIM_Base_SetConfig+0x120>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d013      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007436:	d00f      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a40      	ldr	r2, [pc, #256]	@ (800753c <TIM_Base_SetConfig+0x124>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00b      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a3f      	ldr	r2, [pc, #252]	@ (8007540 <TIM_Base_SetConfig+0x128>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d007      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a3e      	ldr	r2, [pc, #248]	@ (8007544 <TIM_Base_SetConfig+0x12c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d003      	beq.n	8007458 <TIM_Base_SetConfig+0x40>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a3d      	ldr	r2, [pc, #244]	@ (8007548 <TIM_Base_SetConfig+0x130>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d108      	bne.n	800746a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a32      	ldr	r2, [pc, #200]	@ (8007538 <TIM_Base_SetConfig+0x120>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d01f      	beq.n	80074b2 <TIM_Base_SetConfig+0x9a>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007478:	d01b      	beq.n	80074b2 <TIM_Base_SetConfig+0x9a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a2f      	ldr	r2, [pc, #188]	@ (800753c <TIM_Base_SetConfig+0x124>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d017      	beq.n	80074b2 <TIM_Base_SetConfig+0x9a>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a2e      	ldr	r2, [pc, #184]	@ (8007540 <TIM_Base_SetConfig+0x128>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d013      	beq.n	80074b2 <TIM_Base_SetConfig+0x9a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a2d      	ldr	r2, [pc, #180]	@ (8007544 <TIM_Base_SetConfig+0x12c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d00f      	beq.n	80074b2 <TIM_Base_SetConfig+0x9a>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a2c      	ldr	r2, [pc, #176]	@ (8007548 <TIM_Base_SetConfig+0x130>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00b      	beq.n	80074b2 <TIM_Base_SetConfig+0x9a>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a2b      	ldr	r2, [pc, #172]	@ (800754c <TIM_Base_SetConfig+0x134>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d007      	beq.n	80074b2 <TIM_Base_SetConfig+0x9a>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007550 <TIM_Base_SetConfig+0x138>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d003      	beq.n	80074b2 <TIM_Base_SetConfig+0x9a>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a29      	ldr	r2, [pc, #164]	@ (8007554 <TIM_Base_SetConfig+0x13c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d108      	bne.n	80074c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a14      	ldr	r2, [pc, #80]	@ (8007538 <TIM_Base_SetConfig+0x120>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00f      	beq.n	800750a <TIM_Base_SetConfig+0xf2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a16      	ldr	r2, [pc, #88]	@ (8007548 <TIM_Base_SetConfig+0x130>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00b      	beq.n	800750a <TIM_Base_SetConfig+0xf2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a15      	ldr	r2, [pc, #84]	@ (800754c <TIM_Base_SetConfig+0x134>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d007      	beq.n	800750a <TIM_Base_SetConfig+0xf2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a14      	ldr	r2, [pc, #80]	@ (8007550 <TIM_Base_SetConfig+0x138>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d003      	beq.n	800750a <TIM_Base_SetConfig+0xf2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a13      	ldr	r2, [pc, #76]	@ (8007554 <TIM_Base_SetConfig+0x13c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d103      	bne.n	8007512 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	691a      	ldr	r2, [r3, #16]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f043 0204 	orr.w	r2, r3, #4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	601a      	str	r2, [r3, #0]
}
 800752a:	bf00      	nop
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	40010000 	.word	0x40010000
 800753c:	40000400 	.word	0x40000400
 8007540:	40000800 	.word	0x40000800
 8007544:	40000c00 	.word	0x40000c00
 8007548:	40010400 	.word	0x40010400
 800754c:	40014000 	.word	0x40014000
 8007550:	40014400 	.word	0x40014400
 8007554:	40014800 	.word	0x40014800

08007558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007568:	2b01      	cmp	r3, #1
 800756a:	d101      	bne.n	8007570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800756c:	2302      	movs	r3, #2
 800756e:	e06d      	b.n	800764c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a30      	ldr	r2, [pc, #192]	@ (8007658 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d004      	beq.n	80075a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a2f      	ldr	r2, [pc, #188]	@ (800765c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d108      	bne.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80075aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a20      	ldr	r2, [pc, #128]	@ (8007658 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d022      	beq.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075e2:	d01d      	beq.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007660 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d018      	beq.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007664 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d013      	beq.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a1a      	ldr	r2, [pc, #104]	@ (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00e      	beq.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a15      	ldr	r2, [pc, #84]	@ (800765c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d009      	beq.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a16      	ldr	r2, [pc, #88]	@ (800766c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d004      	beq.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a15      	ldr	r2, [pc, #84]	@ (8007670 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d10c      	bne.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007626:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	4313      	orrs	r3, r2
 8007630:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	40010000 	.word	0x40010000
 800765c:	40010400 	.word	0x40010400
 8007660:	40000400 	.word	0x40000400
 8007664:	40000800 	.word	0x40000800
 8007668:	40000c00 	.word	0x40000c00
 800766c:	40001800 	.word	0x40001800
 8007670:	40014000 	.word	0x40014000

08007674 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e042      	b.n	8007748 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d106      	bne.n	80076da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7f9 fc77 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2224      	movs	r2, #36	@ 0x24
 80076de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0201 	bic.w	r2, r2, #1
 80076f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f986 	bl	8008a0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fc1b 	bl	8007f3c <UART_SetConfig>
 8007706:	4603      	mov	r3, r0
 8007708:	2b01      	cmp	r3, #1
 800770a:	d101      	bne.n	8007710 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e01b      	b.n	8007748 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800771e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689a      	ldr	r2, [r3, #8]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800772e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 fa05 	bl	8008b50 <UART_CheckIdleState>
 8007746:	4603      	mov	r3, r0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b0ba      	sub	sp, #232	@ 0xe8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007776:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800777a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800777e:	4013      	ands	r3, r2
 8007780:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007788:	2b00      	cmp	r3, #0
 800778a:	d11b      	bne.n	80077c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800778c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007790:	f003 0320 	and.w	r3, r3, #32
 8007794:	2b00      	cmp	r3, #0
 8007796:	d015      	beq.n	80077c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800779c:	f003 0320 	and.w	r3, r3, #32
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d105      	bne.n	80077b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d009      	beq.n	80077c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 8393 	beq.w	8007ee0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	4798      	blx	r3
      }
      return;
 80077c2:	e38d      	b.n	8007ee0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 8123 	beq.w	8007a14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80077ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80077d2:	4b8d      	ldr	r3, [pc, #564]	@ (8007a08 <HAL_UART_IRQHandler+0x2b8>)
 80077d4:	4013      	ands	r3, r2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80077da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80077de:	4b8b      	ldr	r3, [pc, #556]	@ (8007a0c <HAL_UART_IRQHandler+0x2bc>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 8116 	beq.w	8007a14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d011      	beq.n	8007818 <HAL_UART_IRQHandler+0xc8>
 80077f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00b      	beq.n	8007818 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2201      	movs	r2, #1
 8007806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800780e:	f043 0201 	orr.w	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d011      	beq.n	8007848 <HAL_UART_IRQHandler+0xf8>
 8007824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2202      	movs	r2, #2
 8007836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800783e:	f043 0204 	orr.w	r2, r3, #4
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d011      	beq.n	8007878 <HAL_UART_IRQHandler+0x128>
 8007854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00b      	beq.n	8007878 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2204      	movs	r2, #4
 8007866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800786e:	f043 0202 	orr.w	r2, r3, #2
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800787c:	f003 0308 	and.w	r3, r3, #8
 8007880:	2b00      	cmp	r3, #0
 8007882:	d017      	beq.n	80078b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d105      	bne.n	800789c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007890:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007894:	4b5c      	ldr	r3, [pc, #368]	@ (8007a08 <HAL_UART_IRQHandler+0x2b8>)
 8007896:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2208      	movs	r2, #8
 80078a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078aa:	f043 0208 	orr.w	r2, r3, #8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d012      	beq.n	80078e6 <HAL_UART_IRQHandler+0x196>
 80078c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00c      	beq.n	80078e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078dc:	f043 0220 	orr.w	r2, r3, #32
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 82f9 	beq.w	8007ee4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d013      	beq.n	8007926 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d105      	bne.n	8007916 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800790a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800790e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d007      	beq.n	8007926 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800792c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800793a:	2b40      	cmp	r3, #64	@ 0x40
 800793c:	d005      	beq.n	800794a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800793e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007942:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007946:	2b00      	cmp	r3, #0
 8007948:	d054      	beq.n	80079f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f001 fa18 	bl	8008d80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800795a:	2b40      	cmp	r3, #64	@ 0x40
 800795c:	d146      	bne.n	80079ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3308      	adds	r3, #8
 8007964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007974:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800797c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3308      	adds	r3, #8
 8007986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800798a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800798e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80079a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1d9      	bne.n	800795e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d017      	beq.n	80079e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ba:	4a15      	ldr	r2, [pc, #84]	@ (8007a10 <HAL_UART_IRQHandler+0x2c0>)
 80079bc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fa fa0b 	bl	8001de0 <HAL_DMA_Abort_IT>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d019      	beq.n	8007a04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80079de:	4610      	mov	r0, r2
 80079e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e2:	e00f      	b.n	8007a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fa93 	bl	8007f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ea:	e00b      	b.n	8007a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fa8f 	bl	8007f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f2:	e007      	b.n	8007a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fa8b 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007a02:	e26f      	b.n	8007ee4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a04:	bf00      	nop
    return;
 8007a06:	e26d      	b.n	8007ee4 <HAL_UART_IRQHandler+0x794>
 8007a08:	10000001 	.word	0x10000001
 8007a0c:	04000120 	.word	0x04000120
 8007a10:	08008e4d 	.word	0x08008e4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	f040 8203 	bne.w	8007e24 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a22:	f003 0310 	and.w	r3, r3, #16
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 81fc 	beq.w	8007e24 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 81f5 	beq.w	8007e24 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2210      	movs	r2, #16
 8007a40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a4c:	2b40      	cmp	r3, #64	@ 0x40
 8007a4e:	f040 816d 	bne.w	8007d2c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4aa4      	ldr	r2, [pc, #656]	@ (8007cec <HAL_UART_IRQHandler+0x59c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d068      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4aa1      	ldr	r2, [pc, #644]	@ (8007cf0 <HAL_UART_IRQHandler+0x5a0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d061      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a9f      	ldr	r2, [pc, #636]	@ (8007cf4 <HAL_UART_IRQHandler+0x5a4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d05a      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a9c      	ldr	r2, [pc, #624]	@ (8007cf8 <HAL_UART_IRQHandler+0x5a8>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d053      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a9a      	ldr	r2, [pc, #616]	@ (8007cfc <HAL_UART_IRQHandler+0x5ac>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d04c      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a97      	ldr	r2, [pc, #604]	@ (8007d00 <HAL_UART_IRQHandler+0x5b0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d045      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a95      	ldr	r2, [pc, #596]	@ (8007d04 <HAL_UART_IRQHandler+0x5b4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d03e      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a92      	ldr	r2, [pc, #584]	@ (8007d08 <HAL_UART_IRQHandler+0x5b8>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d037      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a90      	ldr	r2, [pc, #576]	@ (8007d0c <HAL_UART_IRQHandler+0x5bc>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d030      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a8d      	ldr	r2, [pc, #564]	@ (8007d10 <HAL_UART_IRQHandler+0x5c0>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d029      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a8b      	ldr	r2, [pc, #556]	@ (8007d14 <HAL_UART_IRQHandler+0x5c4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d022      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a88      	ldr	r2, [pc, #544]	@ (8007d18 <HAL_UART_IRQHandler+0x5c8>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d01b      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a86      	ldr	r2, [pc, #536]	@ (8007d1c <HAL_UART_IRQHandler+0x5cc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d014      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a83      	ldr	r2, [pc, #524]	@ (8007d20 <HAL_UART_IRQHandler+0x5d0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00d      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a81      	ldr	r2, [pc, #516]	@ (8007d24 <HAL_UART_IRQHandler+0x5d4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d006      	beq.n	8007b32 <HAL_UART_IRQHandler+0x3e2>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a7e      	ldr	r2, [pc, #504]	@ (8007d28 <HAL_UART_IRQHandler+0x5d8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d106      	bne.n	8007b40 <HAL_UART_IRQHandler+0x3f0>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	e005      	b.n	8007b4c <HAL_UART_IRQHandler+0x3fc>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 80ad 	beq.w	8007cb4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b64:	429a      	cmp	r2, r3
 8007b66:	f080 80a5 	bcs.w	8007cb4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b80:	f000 8087 	beq.w	8007c92 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bb2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007bba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1da      	bne.n	8007b84 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007bde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007be0:	f023 0301 	bic.w	r3, r3, #1
 8007be4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3308      	adds	r3, #8
 8007bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007bf2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e1      	bne.n	8007bce <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3308      	adds	r3, #8
 8007c10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e3      	bne.n	8007c0a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c60:	f023 0310 	bic.w	r3, r3, #16
 8007c64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e4      	bne.n	8007c50 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7f9 fd89 	bl	80017a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2202      	movs	r2, #2
 8007c96:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f939 	bl	8007f24 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007cb2:	e119      	b.n	8007ee8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	f040 8112 	bne.w	8007ee8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cd0:	f040 810a 	bne.w	8007ee8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f91e 	bl	8007f24 <HAL_UARTEx_RxEventCallback>
      return;
 8007ce8:	e0fe      	b.n	8007ee8 <HAL_UART_IRQHandler+0x798>
 8007cea:	bf00      	nop
 8007cec:	40020010 	.word	0x40020010
 8007cf0:	40020028 	.word	0x40020028
 8007cf4:	40020040 	.word	0x40020040
 8007cf8:	40020058 	.word	0x40020058
 8007cfc:	40020070 	.word	0x40020070
 8007d00:	40020088 	.word	0x40020088
 8007d04:	400200a0 	.word	0x400200a0
 8007d08:	400200b8 	.word	0x400200b8
 8007d0c:	40020410 	.word	0x40020410
 8007d10:	40020428 	.word	0x40020428
 8007d14:	40020440 	.word	0x40020440
 8007d18:	40020458 	.word	0x40020458
 8007d1c:	40020470 	.word	0x40020470
 8007d20:	40020488 	.word	0x40020488
 8007d24:	400204a0 	.word	0x400204a0
 8007d28:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 80cf 	beq.w	8007eec <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007d4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 80ca 	beq.w	8007eec <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d7c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e4      	bne.n	8007d58 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d9e:	6a3a      	ldr	r2, [r7, #32]
 8007da0:	4b55      	ldr	r3, [pc, #340]	@ (8007ef8 <HAL_UART_IRQHandler+0x7a8>)
 8007da2:	4013      	ands	r3, r2
 8007da4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3308      	adds	r3, #8
 8007dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007db2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e3      	bne.n	8007d8e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0310 	bic.w	r3, r3, #16
 8007dee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007dfc:	61fb      	str	r3, [r7, #28]
 8007dfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	69b9      	ldr	r1, [r7, #24]
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	617b      	str	r3, [r7, #20]
   return(result);
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e4      	bne.n	8007dda <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f881 	bl	8007f24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e22:	e063      	b.n	8007eec <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00e      	beq.n	8007e4e <HAL_UART_IRQHandler+0x6fe>
 8007e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d008      	beq.n	8007e4e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 f83d 	bl	8008ec6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e4c:	e051      	b.n	8007ef2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d014      	beq.n	8007e84 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d105      	bne.n	8007e72 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d008      	beq.n	8007e84 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d03a      	beq.n	8007ef0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
    }
    return;
 8007e82:	e035      	b.n	8007ef0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d009      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x754>
 8007e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 ffe7 	bl	8008e70 <UART_EndTransmit_IT>
    return;
 8007ea2:	e026      	b.n	8007ef2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d009      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x774>
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 f816 	bl	8008eee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ec2:	e016      	b.n	8007ef2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d010      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x7a2>
 8007ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	da0c      	bge.n	8007ef2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fffe 	bl	8008eda <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ede:	e008      	b.n	8007ef2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007ee0:	bf00      	nop
 8007ee2:	e006      	b.n	8007ef2 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007ee4:	bf00      	nop
 8007ee6:	e004      	b.n	8007ef2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007ee8:	bf00      	nop
 8007eea:	e002      	b.n	8007ef2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007eec:	bf00      	nop
 8007eee:	e000      	b.n	8007ef2 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007ef0:	bf00      	nop
  }
}
 8007ef2:	37e8      	adds	r7, #232	@ 0xe8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	effffffe 	.word	0xeffffffe

08007efc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f40:	b092      	sub	sp, #72	@ 0x48
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	431a      	orrs	r2, r3
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4bbe      	ldr	r3, [pc, #760]	@ (8008264 <UART_SetConfig+0x328>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	6812      	ldr	r2, [r2, #0]
 8007f72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007f74:	430b      	orrs	r3, r1
 8007f76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4ab3      	ldr	r2, [pc, #716]	@ (8008268 <UART_SetConfig+0x32c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d004      	beq.n	8007fa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	4baf      	ldr	r3, [pc, #700]	@ (800826c <UART_SetConfig+0x330>)
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc2:	f023 010f 	bic.w	r1, r3, #15
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4aa6      	ldr	r2, [pc, #664]	@ (8008270 <UART_SetConfig+0x334>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d177      	bne.n	80080cc <UART_SetConfig+0x190>
 8007fdc:	4ba5      	ldr	r3, [pc, #660]	@ (8008274 <UART_SetConfig+0x338>)
 8007fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fe4:	2b28      	cmp	r3, #40	@ 0x28
 8007fe6:	d86d      	bhi.n	80080c4 <UART_SetConfig+0x188>
 8007fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff0 <UART_SetConfig+0xb4>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008095 	.word	0x08008095
 8007ff4:	080080c5 	.word	0x080080c5
 8007ff8:	080080c5 	.word	0x080080c5
 8007ffc:	080080c5 	.word	0x080080c5
 8008000:	080080c5 	.word	0x080080c5
 8008004:	080080c5 	.word	0x080080c5
 8008008:	080080c5 	.word	0x080080c5
 800800c:	080080c5 	.word	0x080080c5
 8008010:	0800809d 	.word	0x0800809d
 8008014:	080080c5 	.word	0x080080c5
 8008018:	080080c5 	.word	0x080080c5
 800801c:	080080c5 	.word	0x080080c5
 8008020:	080080c5 	.word	0x080080c5
 8008024:	080080c5 	.word	0x080080c5
 8008028:	080080c5 	.word	0x080080c5
 800802c:	080080c5 	.word	0x080080c5
 8008030:	080080a5 	.word	0x080080a5
 8008034:	080080c5 	.word	0x080080c5
 8008038:	080080c5 	.word	0x080080c5
 800803c:	080080c5 	.word	0x080080c5
 8008040:	080080c5 	.word	0x080080c5
 8008044:	080080c5 	.word	0x080080c5
 8008048:	080080c5 	.word	0x080080c5
 800804c:	080080c5 	.word	0x080080c5
 8008050:	080080ad 	.word	0x080080ad
 8008054:	080080c5 	.word	0x080080c5
 8008058:	080080c5 	.word	0x080080c5
 800805c:	080080c5 	.word	0x080080c5
 8008060:	080080c5 	.word	0x080080c5
 8008064:	080080c5 	.word	0x080080c5
 8008068:	080080c5 	.word	0x080080c5
 800806c:	080080c5 	.word	0x080080c5
 8008070:	080080b5 	.word	0x080080b5
 8008074:	080080c5 	.word	0x080080c5
 8008078:	080080c5 	.word	0x080080c5
 800807c:	080080c5 	.word	0x080080c5
 8008080:	080080c5 	.word	0x080080c5
 8008084:	080080c5 	.word	0x080080c5
 8008088:	080080c5 	.word	0x080080c5
 800808c:	080080c5 	.word	0x080080c5
 8008090:	080080bd 	.word	0x080080bd
 8008094:	2301      	movs	r3, #1
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809a:	e222      	b.n	80084e2 <UART_SetConfig+0x5a6>
 800809c:	2304      	movs	r3, #4
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a2:	e21e      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80080a4:	2308      	movs	r3, #8
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080aa:	e21a      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80080ac:	2310      	movs	r3, #16
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b2:	e216      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80080b4:	2320      	movs	r3, #32
 80080b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ba:	e212      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80080bc:	2340      	movs	r3, #64	@ 0x40
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c2:	e20e      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80080c4:	2380      	movs	r3, #128	@ 0x80
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ca:	e20a      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a69      	ldr	r2, [pc, #420]	@ (8008278 <UART_SetConfig+0x33c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d130      	bne.n	8008138 <UART_SetConfig+0x1fc>
 80080d6:	4b67      	ldr	r3, [pc, #412]	@ (8008274 <UART_SetConfig+0x338>)
 80080d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080da:	f003 0307 	and.w	r3, r3, #7
 80080de:	2b05      	cmp	r3, #5
 80080e0:	d826      	bhi.n	8008130 <UART_SetConfig+0x1f4>
 80080e2:	a201      	add	r2, pc, #4	@ (adr r2, 80080e8 <UART_SetConfig+0x1ac>)
 80080e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e8:	08008101 	.word	0x08008101
 80080ec:	08008109 	.word	0x08008109
 80080f0:	08008111 	.word	0x08008111
 80080f4:	08008119 	.word	0x08008119
 80080f8:	08008121 	.word	0x08008121
 80080fc:	08008129 	.word	0x08008129
 8008100:	2300      	movs	r3, #0
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008106:	e1ec      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008108:	2304      	movs	r3, #4
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800810e:	e1e8      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008110:	2308      	movs	r3, #8
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008116:	e1e4      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008118:	2310      	movs	r3, #16
 800811a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800811e:	e1e0      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008120:	2320      	movs	r3, #32
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008126:	e1dc      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008128:	2340      	movs	r3, #64	@ 0x40
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812e:	e1d8      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008130:	2380      	movs	r3, #128	@ 0x80
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008136:	e1d4      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a4f      	ldr	r2, [pc, #316]	@ (800827c <UART_SetConfig+0x340>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d130      	bne.n	80081a4 <UART_SetConfig+0x268>
 8008142:	4b4c      	ldr	r3, [pc, #304]	@ (8008274 <UART_SetConfig+0x338>)
 8008144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	2b05      	cmp	r3, #5
 800814c:	d826      	bhi.n	800819c <UART_SetConfig+0x260>
 800814e:	a201      	add	r2, pc, #4	@ (adr r2, 8008154 <UART_SetConfig+0x218>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	0800816d 	.word	0x0800816d
 8008158:	08008175 	.word	0x08008175
 800815c:	0800817d 	.word	0x0800817d
 8008160:	08008185 	.word	0x08008185
 8008164:	0800818d 	.word	0x0800818d
 8008168:	08008195 	.word	0x08008195
 800816c:	2300      	movs	r3, #0
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008172:	e1b6      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008174:	2304      	movs	r3, #4
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800817a:	e1b2      	b.n	80084e2 <UART_SetConfig+0x5a6>
 800817c:	2308      	movs	r3, #8
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008182:	e1ae      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008184:	2310      	movs	r3, #16
 8008186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818a:	e1aa      	b.n	80084e2 <UART_SetConfig+0x5a6>
 800818c:	2320      	movs	r3, #32
 800818e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008192:	e1a6      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008194:	2340      	movs	r3, #64	@ 0x40
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819a:	e1a2      	b.n	80084e2 <UART_SetConfig+0x5a6>
 800819c:	2380      	movs	r3, #128	@ 0x80
 800819e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a2:	e19e      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a35      	ldr	r2, [pc, #212]	@ (8008280 <UART_SetConfig+0x344>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d130      	bne.n	8008210 <UART_SetConfig+0x2d4>
 80081ae:	4b31      	ldr	r3, [pc, #196]	@ (8008274 <UART_SetConfig+0x338>)
 80081b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b2:	f003 0307 	and.w	r3, r3, #7
 80081b6:	2b05      	cmp	r3, #5
 80081b8:	d826      	bhi.n	8008208 <UART_SetConfig+0x2cc>
 80081ba:	a201      	add	r2, pc, #4	@ (adr r2, 80081c0 <UART_SetConfig+0x284>)
 80081bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c0:	080081d9 	.word	0x080081d9
 80081c4:	080081e1 	.word	0x080081e1
 80081c8:	080081e9 	.word	0x080081e9
 80081cc:	080081f1 	.word	0x080081f1
 80081d0:	080081f9 	.word	0x080081f9
 80081d4:	08008201 	.word	0x08008201
 80081d8:	2300      	movs	r3, #0
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081de:	e180      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80081e0:	2304      	movs	r3, #4
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e6:	e17c      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80081e8:	2308      	movs	r3, #8
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ee:	e178      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80081f0:	2310      	movs	r3, #16
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f6:	e174      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80081f8:	2320      	movs	r3, #32
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fe:	e170      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008200:	2340      	movs	r3, #64	@ 0x40
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008206:	e16c      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008208:	2380      	movs	r3, #128	@ 0x80
 800820a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820e:	e168      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a1b      	ldr	r2, [pc, #108]	@ (8008284 <UART_SetConfig+0x348>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d142      	bne.n	80082a0 <UART_SetConfig+0x364>
 800821a:	4b16      	ldr	r3, [pc, #88]	@ (8008274 <UART_SetConfig+0x338>)
 800821c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800821e:	f003 0307 	and.w	r3, r3, #7
 8008222:	2b05      	cmp	r3, #5
 8008224:	d838      	bhi.n	8008298 <UART_SetConfig+0x35c>
 8008226:	a201      	add	r2, pc, #4	@ (adr r2, 800822c <UART_SetConfig+0x2f0>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	08008245 	.word	0x08008245
 8008230:	0800824d 	.word	0x0800824d
 8008234:	08008255 	.word	0x08008255
 8008238:	0800825d 	.word	0x0800825d
 800823c:	08008289 	.word	0x08008289
 8008240:	08008291 	.word	0x08008291
 8008244:	2300      	movs	r3, #0
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824a:	e14a      	b.n	80084e2 <UART_SetConfig+0x5a6>
 800824c:	2304      	movs	r3, #4
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008252:	e146      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008254:	2308      	movs	r3, #8
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825a:	e142      	b.n	80084e2 <UART_SetConfig+0x5a6>
 800825c:	2310      	movs	r3, #16
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008262:	e13e      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008264:	cfff69f3 	.word	0xcfff69f3
 8008268:	58000c00 	.word	0x58000c00
 800826c:	11fff4ff 	.word	0x11fff4ff
 8008270:	40011000 	.word	0x40011000
 8008274:	58024400 	.word	0x58024400
 8008278:	40004400 	.word	0x40004400
 800827c:	40004800 	.word	0x40004800
 8008280:	40004c00 	.word	0x40004c00
 8008284:	40005000 	.word	0x40005000
 8008288:	2320      	movs	r3, #32
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828e:	e128      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008290:	2340      	movs	r3, #64	@ 0x40
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008296:	e124      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008298:	2380      	movs	r3, #128	@ 0x80
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829e:	e120      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4acb      	ldr	r2, [pc, #812]	@ (80085d4 <UART_SetConfig+0x698>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d176      	bne.n	8008398 <UART_SetConfig+0x45c>
 80082aa:	4bcb      	ldr	r3, [pc, #812]	@ (80085d8 <UART_SetConfig+0x69c>)
 80082ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082b2:	2b28      	cmp	r3, #40	@ 0x28
 80082b4:	d86c      	bhi.n	8008390 <UART_SetConfig+0x454>
 80082b6:	a201      	add	r2, pc, #4	@ (adr r2, 80082bc <UART_SetConfig+0x380>)
 80082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082bc:	08008361 	.word	0x08008361
 80082c0:	08008391 	.word	0x08008391
 80082c4:	08008391 	.word	0x08008391
 80082c8:	08008391 	.word	0x08008391
 80082cc:	08008391 	.word	0x08008391
 80082d0:	08008391 	.word	0x08008391
 80082d4:	08008391 	.word	0x08008391
 80082d8:	08008391 	.word	0x08008391
 80082dc:	08008369 	.word	0x08008369
 80082e0:	08008391 	.word	0x08008391
 80082e4:	08008391 	.word	0x08008391
 80082e8:	08008391 	.word	0x08008391
 80082ec:	08008391 	.word	0x08008391
 80082f0:	08008391 	.word	0x08008391
 80082f4:	08008391 	.word	0x08008391
 80082f8:	08008391 	.word	0x08008391
 80082fc:	08008371 	.word	0x08008371
 8008300:	08008391 	.word	0x08008391
 8008304:	08008391 	.word	0x08008391
 8008308:	08008391 	.word	0x08008391
 800830c:	08008391 	.word	0x08008391
 8008310:	08008391 	.word	0x08008391
 8008314:	08008391 	.word	0x08008391
 8008318:	08008391 	.word	0x08008391
 800831c:	08008379 	.word	0x08008379
 8008320:	08008391 	.word	0x08008391
 8008324:	08008391 	.word	0x08008391
 8008328:	08008391 	.word	0x08008391
 800832c:	08008391 	.word	0x08008391
 8008330:	08008391 	.word	0x08008391
 8008334:	08008391 	.word	0x08008391
 8008338:	08008391 	.word	0x08008391
 800833c:	08008381 	.word	0x08008381
 8008340:	08008391 	.word	0x08008391
 8008344:	08008391 	.word	0x08008391
 8008348:	08008391 	.word	0x08008391
 800834c:	08008391 	.word	0x08008391
 8008350:	08008391 	.word	0x08008391
 8008354:	08008391 	.word	0x08008391
 8008358:	08008391 	.word	0x08008391
 800835c:	08008389 	.word	0x08008389
 8008360:	2301      	movs	r3, #1
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008366:	e0bc      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008368:	2304      	movs	r3, #4
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836e:	e0b8      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008370:	2308      	movs	r3, #8
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008376:	e0b4      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008378:	2310      	movs	r3, #16
 800837a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837e:	e0b0      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008380:	2320      	movs	r3, #32
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008386:	e0ac      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008388:	2340      	movs	r3, #64	@ 0x40
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800838e:	e0a8      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008390:	2380      	movs	r3, #128	@ 0x80
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008396:	e0a4      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a8f      	ldr	r2, [pc, #572]	@ (80085dc <UART_SetConfig+0x6a0>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d130      	bne.n	8008404 <UART_SetConfig+0x4c8>
 80083a2:	4b8d      	ldr	r3, [pc, #564]	@ (80085d8 <UART_SetConfig+0x69c>)
 80083a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	d826      	bhi.n	80083fc <UART_SetConfig+0x4c0>
 80083ae:	a201      	add	r2, pc, #4	@ (adr r2, 80083b4 <UART_SetConfig+0x478>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	080083cd 	.word	0x080083cd
 80083b8:	080083d5 	.word	0x080083d5
 80083bc:	080083dd 	.word	0x080083dd
 80083c0:	080083e5 	.word	0x080083e5
 80083c4:	080083ed 	.word	0x080083ed
 80083c8:	080083f5 	.word	0x080083f5
 80083cc:	2300      	movs	r3, #0
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d2:	e086      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80083d4:	2304      	movs	r3, #4
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083da:	e082      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80083dc:	2308      	movs	r3, #8
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083e2:	e07e      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80083e4:	2310      	movs	r3, #16
 80083e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ea:	e07a      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80083ec:	2320      	movs	r3, #32
 80083ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083f2:	e076      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80083f4:	2340      	movs	r3, #64	@ 0x40
 80083f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083fa:	e072      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80083fc:	2380      	movs	r3, #128	@ 0x80
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008402:	e06e      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a75      	ldr	r2, [pc, #468]	@ (80085e0 <UART_SetConfig+0x6a4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d130      	bne.n	8008470 <UART_SetConfig+0x534>
 800840e:	4b72      	ldr	r3, [pc, #456]	@ (80085d8 <UART_SetConfig+0x69c>)
 8008410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	2b05      	cmp	r3, #5
 8008418:	d826      	bhi.n	8008468 <UART_SetConfig+0x52c>
 800841a:	a201      	add	r2, pc, #4	@ (adr r2, 8008420 <UART_SetConfig+0x4e4>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	08008439 	.word	0x08008439
 8008424:	08008441 	.word	0x08008441
 8008428:	08008449 	.word	0x08008449
 800842c:	08008451 	.word	0x08008451
 8008430:	08008459 	.word	0x08008459
 8008434:	08008461 	.word	0x08008461
 8008438:	2300      	movs	r3, #0
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843e:	e050      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008440:	2304      	movs	r3, #4
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008446:	e04c      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008448:	2308      	movs	r3, #8
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800844e:	e048      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008450:	2310      	movs	r3, #16
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008456:	e044      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008458:	2320      	movs	r3, #32
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845e:	e040      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008460:	2340      	movs	r3, #64	@ 0x40
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008466:	e03c      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008468:	2380      	movs	r3, #128	@ 0x80
 800846a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846e:	e038      	b.n	80084e2 <UART_SetConfig+0x5a6>
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a5b      	ldr	r2, [pc, #364]	@ (80085e4 <UART_SetConfig+0x6a8>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d130      	bne.n	80084dc <UART_SetConfig+0x5a0>
 800847a:	4b57      	ldr	r3, [pc, #348]	@ (80085d8 <UART_SetConfig+0x69c>)
 800847c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	2b05      	cmp	r3, #5
 8008484:	d826      	bhi.n	80084d4 <UART_SetConfig+0x598>
 8008486:	a201      	add	r2, pc, #4	@ (adr r2, 800848c <UART_SetConfig+0x550>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	080084a5 	.word	0x080084a5
 8008490:	080084ad 	.word	0x080084ad
 8008494:	080084b5 	.word	0x080084b5
 8008498:	080084bd 	.word	0x080084bd
 800849c:	080084c5 	.word	0x080084c5
 80084a0:	080084cd 	.word	0x080084cd
 80084a4:	2302      	movs	r3, #2
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084aa:	e01a      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80084ac:	2304      	movs	r3, #4
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b2:	e016      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80084b4:	2308      	movs	r3, #8
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ba:	e012      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80084bc:	2310      	movs	r3, #16
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c2:	e00e      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80084c4:	2320      	movs	r3, #32
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ca:	e00a      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80084cc:	2340      	movs	r3, #64	@ 0x40
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d2:	e006      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80084d4:	2380      	movs	r3, #128	@ 0x80
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084da:	e002      	b.n	80084e2 <UART_SetConfig+0x5a6>
 80084dc:	2380      	movs	r3, #128	@ 0x80
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a3f      	ldr	r2, [pc, #252]	@ (80085e4 <UART_SetConfig+0x6a8>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	f040 80f8 	bne.w	80086de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80084f2:	2b20      	cmp	r3, #32
 80084f4:	dc46      	bgt.n	8008584 <UART_SetConfig+0x648>
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	f2c0 8082 	blt.w	8008600 <UART_SetConfig+0x6c4>
 80084fc:	3b02      	subs	r3, #2
 80084fe:	2b1e      	cmp	r3, #30
 8008500:	d87e      	bhi.n	8008600 <UART_SetConfig+0x6c4>
 8008502:	a201      	add	r2, pc, #4	@ (adr r2, 8008508 <UART_SetConfig+0x5cc>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	0800858b 	.word	0x0800858b
 800850c:	08008601 	.word	0x08008601
 8008510:	08008593 	.word	0x08008593
 8008514:	08008601 	.word	0x08008601
 8008518:	08008601 	.word	0x08008601
 800851c:	08008601 	.word	0x08008601
 8008520:	080085a3 	.word	0x080085a3
 8008524:	08008601 	.word	0x08008601
 8008528:	08008601 	.word	0x08008601
 800852c:	08008601 	.word	0x08008601
 8008530:	08008601 	.word	0x08008601
 8008534:	08008601 	.word	0x08008601
 8008538:	08008601 	.word	0x08008601
 800853c:	08008601 	.word	0x08008601
 8008540:	080085b3 	.word	0x080085b3
 8008544:	08008601 	.word	0x08008601
 8008548:	08008601 	.word	0x08008601
 800854c:	08008601 	.word	0x08008601
 8008550:	08008601 	.word	0x08008601
 8008554:	08008601 	.word	0x08008601
 8008558:	08008601 	.word	0x08008601
 800855c:	08008601 	.word	0x08008601
 8008560:	08008601 	.word	0x08008601
 8008564:	08008601 	.word	0x08008601
 8008568:	08008601 	.word	0x08008601
 800856c:	08008601 	.word	0x08008601
 8008570:	08008601 	.word	0x08008601
 8008574:	08008601 	.word	0x08008601
 8008578:	08008601 	.word	0x08008601
 800857c:	08008601 	.word	0x08008601
 8008580:	080085f3 	.word	0x080085f3
 8008584:	2b40      	cmp	r3, #64	@ 0x40
 8008586:	d037      	beq.n	80085f8 <UART_SetConfig+0x6bc>
 8008588:	e03a      	b.n	8008600 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800858a:	f7fe f993 	bl	80068b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800858e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008590:	e03c      	b.n	800860c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe f9a2 	bl	80068e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800859c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a0:	e034      	b.n	800860c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085a2:	f107 0318 	add.w	r3, r7, #24
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe faee 	bl	8006b88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b0:	e02c      	b.n	800860c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085b2:	4b09      	ldr	r3, [pc, #36]	@ (80085d8 <UART_SetConfig+0x69c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0320 	and.w	r3, r3, #32
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d016      	beq.n	80085ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085be:	4b06      	ldr	r3, [pc, #24]	@ (80085d8 <UART_SetConfig+0x69c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	08db      	lsrs	r3, r3, #3
 80085c4:	f003 0303 	and.w	r3, r3, #3
 80085c8:	4a07      	ldr	r2, [pc, #28]	@ (80085e8 <UART_SetConfig+0x6ac>)
 80085ca:	fa22 f303 	lsr.w	r3, r2, r3
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085d0:	e01c      	b.n	800860c <UART_SetConfig+0x6d0>
 80085d2:	bf00      	nop
 80085d4:	40011400 	.word	0x40011400
 80085d8:	58024400 	.word	0x58024400
 80085dc:	40007800 	.word	0x40007800
 80085e0:	40007c00 	.word	0x40007c00
 80085e4:	58000c00 	.word	0x58000c00
 80085e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80085ec:	4b9d      	ldr	r3, [pc, #628]	@ (8008864 <UART_SetConfig+0x928>)
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f0:	e00c      	b.n	800860c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085f2:	4b9d      	ldr	r3, [pc, #628]	@ (8008868 <UART_SetConfig+0x92c>)
 80085f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f6:	e009      	b.n	800860c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fe:	e005      	b.n	800860c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800860a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800860c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 81de 	beq.w	80089d0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008618:	4a94      	ldr	r2, [pc, #592]	@ (800886c <UART_SetConfig+0x930>)
 800861a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800861e:	461a      	mov	r2, r3
 8008620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008622:	fbb3 f3f2 	udiv	r3, r3, r2
 8008626:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	4613      	mov	r3, r2
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	4413      	add	r3, r2
 8008632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008634:	429a      	cmp	r2, r3
 8008636:	d305      	bcc.n	8008644 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800863e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008640:	429a      	cmp	r2, r3
 8008642:	d903      	bls.n	800864c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800864a:	e1c1      	b.n	80089d0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800864c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800864e:	2200      	movs	r2, #0
 8008650:	60bb      	str	r3, [r7, #8]
 8008652:	60fa      	str	r2, [r7, #12]
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008658:	4a84      	ldr	r2, [pc, #528]	@ (800886c <UART_SetConfig+0x930>)
 800865a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800865e:	b29b      	uxth	r3, r3
 8008660:	2200      	movs	r2, #0
 8008662:	603b      	str	r3, [r7, #0]
 8008664:	607a      	str	r2, [r7, #4]
 8008666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800866a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800866e:	f7f7 fe33 	bl	80002d8 <__aeabi_uldivmod>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4610      	mov	r0, r2
 8008678:	4619      	mov	r1, r3
 800867a:	f04f 0200 	mov.w	r2, #0
 800867e:	f04f 0300 	mov.w	r3, #0
 8008682:	020b      	lsls	r3, r1, #8
 8008684:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008688:	0202      	lsls	r2, r0, #8
 800868a:	6979      	ldr	r1, [r7, #20]
 800868c:	6849      	ldr	r1, [r1, #4]
 800868e:	0849      	lsrs	r1, r1, #1
 8008690:	2000      	movs	r0, #0
 8008692:	460c      	mov	r4, r1
 8008694:	4605      	mov	r5, r0
 8008696:	eb12 0804 	adds.w	r8, r2, r4
 800869a:	eb43 0905 	adc.w	r9, r3, r5
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	469a      	mov	sl, r3
 80086a6:	4693      	mov	fp, r2
 80086a8:	4652      	mov	r2, sl
 80086aa:	465b      	mov	r3, fp
 80086ac:	4640      	mov	r0, r8
 80086ae:	4649      	mov	r1, r9
 80086b0:	f7f7 fe12 	bl	80002d8 <__aeabi_uldivmod>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4613      	mov	r3, r2
 80086ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086c2:	d308      	bcc.n	80086d6 <UART_SetConfig+0x79a>
 80086c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086ca:	d204      	bcs.n	80086d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086d2:	60da      	str	r2, [r3, #12]
 80086d4:	e17c      	b.n	80089d0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80086dc:	e178      	b.n	80089d0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086e6:	f040 80c5 	bne.w	8008874 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80086ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80086ee:	2b20      	cmp	r3, #32
 80086f0:	dc48      	bgt.n	8008784 <UART_SetConfig+0x848>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	db7b      	blt.n	80087ee <UART_SetConfig+0x8b2>
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	d879      	bhi.n	80087ee <UART_SetConfig+0x8b2>
 80086fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008700 <UART_SetConfig+0x7c4>)
 80086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008700:	0800878b 	.word	0x0800878b
 8008704:	08008793 	.word	0x08008793
 8008708:	080087ef 	.word	0x080087ef
 800870c:	080087ef 	.word	0x080087ef
 8008710:	0800879b 	.word	0x0800879b
 8008714:	080087ef 	.word	0x080087ef
 8008718:	080087ef 	.word	0x080087ef
 800871c:	080087ef 	.word	0x080087ef
 8008720:	080087ab 	.word	0x080087ab
 8008724:	080087ef 	.word	0x080087ef
 8008728:	080087ef 	.word	0x080087ef
 800872c:	080087ef 	.word	0x080087ef
 8008730:	080087ef 	.word	0x080087ef
 8008734:	080087ef 	.word	0x080087ef
 8008738:	080087ef 	.word	0x080087ef
 800873c:	080087ef 	.word	0x080087ef
 8008740:	080087bb 	.word	0x080087bb
 8008744:	080087ef 	.word	0x080087ef
 8008748:	080087ef 	.word	0x080087ef
 800874c:	080087ef 	.word	0x080087ef
 8008750:	080087ef 	.word	0x080087ef
 8008754:	080087ef 	.word	0x080087ef
 8008758:	080087ef 	.word	0x080087ef
 800875c:	080087ef 	.word	0x080087ef
 8008760:	080087ef 	.word	0x080087ef
 8008764:	080087ef 	.word	0x080087ef
 8008768:	080087ef 	.word	0x080087ef
 800876c:	080087ef 	.word	0x080087ef
 8008770:	080087ef 	.word	0x080087ef
 8008774:	080087ef 	.word	0x080087ef
 8008778:	080087ef 	.word	0x080087ef
 800877c:	080087ef 	.word	0x080087ef
 8008780:	080087e1 	.word	0x080087e1
 8008784:	2b40      	cmp	r3, #64	@ 0x40
 8008786:	d02e      	beq.n	80087e6 <UART_SetConfig+0x8aa>
 8008788:	e031      	b.n	80087ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800878a:	f7fc fe5d 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 800878e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008790:	e033      	b.n	80087fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008792:	f7fc fe6f 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 8008796:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008798:	e02f      	b.n	80087fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800879a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe f89e 	bl	80068e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a8:	e027      	b.n	80087fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087aa:	f107 0318 	add.w	r3, r7, #24
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe f9ea 	bl	8006b88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087b8:	e01f      	b.n	80087fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087ba:	4b2d      	ldr	r3, [pc, #180]	@ (8008870 <UART_SetConfig+0x934>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d009      	beq.n	80087da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008870 <UART_SetConfig+0x934>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	08db      	lsrs	r3, r3, #3
 80087cc:	f003 0303 	and.w	r3, r3, #3
 80087d0:	4a24      	ldr	r2, [pc, #144]	@ (8008864 <UART_SetConfig+0x928>)
 80087d2:	fa22 f303 	lsr.w	r3, r2, r3
 80087d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087d8:	e00f      	b.n	80087fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80087da:	4b22      	ldr	r3, [pc, #136]	@ (8008864 <UART_SetConfig+0x928>)
 80087dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087de:	e00c      	b.n	80087fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087e0:	4b21      	ldr	r3, [pc, #132]	@ (8008868 <UART_SetConfig+0x92c>)
 80087e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e4:	e009      	b.n	80087fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ec:	e005      	b.n	80087fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80087f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80e7 	beq.w	80089d0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008806:	4a19      	ldr	r2, [pc, #100]	@ (800886c <UART_SetConfig+0x930>)
 8008808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800880c:	461a      	mov	r2, r3
 800880e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008810:	fbb3 f3f2 	udiv	r3, r3, r2
 8008814:	005a      	lsls	r2, r3, #1
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	085b      	lsrs	r3, r3, #1
 800881c:	441a      	add	r2, r3
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	fbb2 f3f3 	udiv	r3, r2, r3
 8008826:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882a:	2b0f      	cmp	r3, #15
 800882c:	d916      	bls.n	800885c <UART_SetConfig+0x920>
 800882e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008834:	d212      	bcs.n	800885c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008838:	b29b      	uxth	r3, r3
 800883a:	f023 030f 	bic.w	r3, r3, #15
 800883e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008842:	085b      	lsrs	r3, r3, #1
 8008844:	b29b      	uxth	r3, r3
 8008846:	f003 0307 	and.w	r3, r3, #7
 800884a:	b29a      	uxth	r2, r3
 800884c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800884e:	4313      	orrs	r3, r2
 8008850:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008858:	60da      	str	r2, [r3, #12]
 800885a:	e0b9      	b.n	80089d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008862:	e0b5      	b.n	80089d0 <UART_SetConfig+0xa94>
 8008864:	03d09000 	.word	0x03d09000
 8008868:	003d0900 	.word	0x003d0900
 800886c:	0800eab0 	.word	0x0800eab0
 8008870:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008874:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008878:	2b20      	cmp	r3, #32
 800887a:	dc49      	bgt.n	8008910 <UART_SetConfig+0x9d4>
 800887c:	2b00      	cmp	r3, #0
 800887e:	db7c      	blt.n	800897a <UART_SetConfig+0xa3e>
 8008880:	2b20      	cmp	r3, #32
 8008882:	d87a      	bhi.n	800897a <UART_SetConfig+0xa3e>
 8008884:	a201      	add	r2, pc, #4	@ (adr r2, 800888c <UART_SetConfig+0x950>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	08008917 	.word	0x08008917
 8008890:	0800891f 	.word	0x0800891f
 8008894:	0800897b 	.word	0x0800897b
 8008898:	0800897b 	.word	0x0800897b
 800889c:	08008927 	.word	0x08008927
 80088a0:	0800897b 	.word	0x0800897b
 80088a4:	0800897b 	.word	0x0800897b
 80088a8:	0800897b 	.word	0x0800897b
 80088ac:	08008937 	.word	0x08008937
 80088b0:	0800897b 	.word	0x0800897b
 80088b4:	0800897b 	.word	0x0800897b
 80088b8:	0800897b 	.word	0x0800897b
 80088bc:	0800897b 	.word	0x0800897b
 80088c0:	0800897b 	.word	0x0800897b
 80088c4:	0800897b 	.word	0x0800897b
 80088c8:	0800897b 	.word	0x0800897b
 80088cc:	08008947 	.word	0x08008947
 80088d0:	0800897b 	.word	0x0800897b
 80088d4:	0800897b 	.word	0x0800897b
 80088d8:	0800897b 	.word	0x0800897b
 80088dc:	0800897b 	.word	0x0800897b
 80088e0:	0800897b 	.word	0x0800897b
 80088e4:	0800897b 	.word	0x0800897b
 80088e8:	0800897b 	.word	0x0800897b
 80088ec:	0800897b 	.word	0x0800897b
 80088f0:	0800897b 	.word	0x0800897b
 80088f4:	0800897b 	.word	0x0800897b
 80088f8:	0800897b 	.word	0x0800897b
 80088fc:	0800897b 	.word	0x0800897b
 8008900:	0800897b 	.word	0x0800897b
 8008904:	0800897b 	.word	0x0800897b
 8008908:	0800897b 	.word	0x0800897b
 800890c:	0800896d 	.word	0x0800896d
 8008910:	2b40      	cmp	r3, #64	@ 0x40
 8008912:	d02e      	beq.n	8008972 <UART_SetConfig+0xa36>
 8008914:	e031      	b.n	800897a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008916:	f7fc fd97 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 800891a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800891c:	e033      	b.n	8008986 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800891e:	f7fc fda9 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 8008922:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008924:	e02f      	b.n	8008986 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800892a:	4618      	mov	r0, r3
 800892c:	f7fd ffd8 	bl	80068e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008934:	e027      	b.n	8008986 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008936:	f107 0318 	add.w	r3, r7, #24
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe f924 	bl	8006b88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008944:	e01f      	b.n	8008986 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008946:	4b2d      	ldr	r3, [pc, #180]	@ (80089fc <UART_SetConfig+0xac0>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d009      	beq.n	8008966 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008952:	4b2a      	ldr	r3, [pc, #168]	@ (80089fc <UART_SetConfig+0xac0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	08db      	lsrs	r3, r3, #3
 8008958:	f003 0303 	and.w	r3, r3, #3
 800895c:	4a28      	ldr	r2, [pc, #160]	@ (8008a00 <UART_SetConfig+0xac4>)
 800895e:	fa22 f303 	lsr.w	r3, r2, r3
 8008962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008964:	e00f      	b.n	8008986 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008966:	4b26      	ldr	r3, [pc, #152]	@ (8008a00 <UART_SetConfig+0xac4>)
 8008968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800896a:	e00c      	b.n	8008986 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800896c:	4b25      	ldr	r3, [pc, #148]	@ (8008a04 <UART_SetConfig+0xac8>)
 800896e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008970:	e009      	b.n	8008986 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008978:	e005      	b.n	8008986 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008984:	bf00      	nop
    }

    if (pclk != 0U)
 8008986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008988:	2b00      	cmp	r3, #0
 800898a:	d021      	beq.n	80089d0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008990:	4a1d      	ldr	r2, [pc, #116]	@ (8008a08 <UART_SetConfig+0xacc>)
 8008992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008996:	461a      	mov	r2, r3
 8008998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800899a:	fbb3 f2f2 	udiv	r2, r3, r2
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	085b      	lsrs	r3, r3, #1
 80089a4:	441a      	add	r2, r3
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b2:	2b0f      	cmp	r3, #15
 80089b4:	d909      	bls.n	80089ca <UART_SetConfig+0xa8e>
 80089b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089bc:	d205      	bcs.n	80089ca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	60da      	str	r2, [r3, #12]
 80089c8:	e002      	b.n	80089d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2201      	movs	r2, #1
 80089dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	2200      	movs	r2, #0
 80089e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2200      	movs	r2, #0
 80089ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80089ec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3748      	adds	r7, #72	@ 0x48
 80089f4:	46bd      	mov	sp, r7
 80089f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089fa:	bf00      	nop
 80089fc:	58024400 	.word	0x58024400
 8008a00:	03d09000 	.word	0x03d09000
 8008a04:	003d0900 	.word	0x003d0900
 8008a08:	0800eab0 	.word	0x0800eab0

08008a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a18:	f003 0308 	and.w	r3, r3, #8
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00a      	beq.n	8008a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00a      	beq.n	8008a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00a      	beq.n	8008a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7e:	f003 0304 	and.w	r3, r3, #4
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00a      	beq.n	8008abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01a      	beq.n	8008b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b0a:	d10a      	bne.n	8008b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	605a      	str	r2, [r3, #4]
  }
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b098      	sub	sp, #96	@ 0x60
 8008b54:	af02      	add	r7, sp, #8
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b60:	f7f8 fc5c 	bl	800141c <HAL_GetTick>
 8008b64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0308 	and.w	r3, r3, #8
 8008b70:	2b08      	cmp	r3, #8
 8008b72:	d12f      	bne.n	8008bd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f88e 	bl	8008ca4 <UART_WaitOnFlagUntilTimeout>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d022      	beq.n	8008bd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b96:	e853 3f00 	ldrex	r3, [r3]
 8008b9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ba2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bb4:	e841 2300 	strex	r3, r2, [r1]
 8008bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1e6      	bne.n	8008b8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e063      	b.n	8008c9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d149      	bne.n	8008c76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008be2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bea:	2200      	movs	r2, #0
 8008bec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f857 	bl	8008ca4 <UART_WaitOnFlagUntilTimeout>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d03c      	beq.n	8008c76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	623b      	str	r3, [r7, #32]
   return(result);
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e6      	bne.n	8008bfc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3308      	adds	r3, #8
 8008c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f023 0301 	bic.w	r3, r3, #1
 8008c44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c4e:	61fa      	str	r2, [r7, #28]
 8008c50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c52:	69b9      	ldr	r1, [r7, #24]
 8008c54:	69fa      	ldr	r2, [r7, #28]
 8008c56:	e841 2300 	strex	r3, r2, [r1]
 8008c5a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1e5      	bne.n	8008c2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2220      	movs	r2, #32
 8008c66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e012      	b.n	8008c9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2220      	movs	r2, #32
 8008c82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3758      	adds	r7, #88	@ 0x58
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	603b      	str	r3, [r7, #0]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cb4:	e04f      	b.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbc:	d04b      	beq.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cbe:	f7f8 fbad 	bl	800141c <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d302      	bcc.n	8008cd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e04e      	b.n	8008d76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0304 	and.w	r3, r3, #4
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d037      	beq.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2b80      	cmp	r3, #128	@ 0x80
 8008cea:	d034      	beq.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b40      	cmp	r3, #64	@ 0x40
 8008cf0:	d031      	beq.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	f003 0308 	and.w	r3, r3, #8
 8008cfc:	2b08      	cmp	r3, #8
 8008cfe:	d110      	bne.n	8008d22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2208      	movs	r2, #8
 8008d06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f839 	bl	8008d80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2208      	movs	r2, #8
 8008d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e029      	b.n	8008d76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d30:	d111      	bne.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 f81f 	bl	8008d80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e00f      	b.n	8008d76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	69da      	ldr	r2, [r3, #28]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	bf0c      	ite	eq
 8008d66:	2301      	moveq	r3, #1
 8008d68:	2300      	movne	r3, #0
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d0a0      	beq.n	8008cb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b095      	sub	sp, #84	@ 0x54
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008da6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008da8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008dac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e6      	bne.n	8008d88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8008e48 <UART_EndRxTransfer+0xc8>)
 8008dce:	4013      	ands	r3, r2
 8008dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008de0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008de2:	e841 2300 	strex	r3, r2, [r1]
 8008de6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e5      	bne.n	8008dba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d118      	bne.n	8008e28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	f023 0310 	bic.w	r3, r3, #16
 8008e0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e14:	61bb      	str	r3, [r7, #24]
 8008e16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	6979      	ldr	r1, [r7, #20]
 8008e1a:	69ba      	ldr	r2, [r7, #24]
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	613b      	str	r3, [r7, #16]
   return(result);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e6      	bne.n	8008df6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e3c:	bf00      	nop
 8008e3e:	3754      	adds	r7, #84	@ 0x54
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	effffffe 	.word	0xeffffffe

08008e4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f7ff f854 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e68:	bf00      	nop
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e8c:	61fb      	str	r3, [r7, #28]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	61bb      	str	r3, [r7, #24]
 8008e98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	6979      	ldr	r1, [r7, #20]
 8008e9c:	69ba      	ldr	r2, [r7, #24]
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e6      	bne.n	8008e78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2220      	movs	r2, #32
 8008eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff f81f 	bl	8007efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ebe:	bf00      	nop
 8008ec0:	3720      	adds	r7, #32
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b083      	sub	sp, #12
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008ee2:	bf00      	nop
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008ef6:	bf00      	nop
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b085      	sub	sp, #20
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d101      	bne.n	8008f18 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f14:	2302      	movs	r3, #2
 8008f16:	e027      	b.n	8008f68 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2224      	movs	r2, #36	@ 0x24
 8008f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 0201 	bic.w	r2, r2, #1
 8008f3e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008f46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d101      	bne.n	8008f8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e02d      	b.n	8008fe8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2224      	movs	r2, #36	@ 0x24
 8008f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0201 	bic.w	r2, r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f84f 	bl	800906c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2220      	movs	r2, #32
 8008fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009000:	2b01      	cmp	r3, #1
 8009002:	d101      	bne.n	8009008 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009004:	2302      	movs	r3, #2
 8009006:	e02d      	b.n	8009064 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2224      	movs	r2, #36	@ 0x24
 8009014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 0201 	bic.w	r2, r2, #1
 800902e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f811 	bl	800906c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2220      	movs	r2, #32
 8009056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009078:	2b00      	cmp	r3, #0
 800907a:	d108      	bne.n	800908e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800908c:	e031      	b.n	80090f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800908e:	2310      	movs	r3, #16
 8009090:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009092:	2310      	movs	r3, #16
 8009094:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	0e5b      	lsrs	r3, r3, #25
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	f003 0307 	and.w	r3, r3, #7
 80090a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	0f5b      	lsrs	r3, r3, #29
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	f003 0307 	and.w	r3, r3, #7
 80090b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	7b3a      	ldrb	r2, [r7, #12]
 80090ba:	4911      	ldr	r1, [pc, #68]	@ (8009100 <UARTEx_SetNbDataToProcess+0x94>)
 80090bc:	5c8a      	ldrb	r2, [r1, r2]
 80090be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090c2:	7b3a      	ldrb	r2, [r7, #12]
 80090c4:	490f      	ldr	r1, [pc, #60]	@ (8009104 <UARTEx_SetNbDataToProcess+0x98>)
 80090c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	7b7a      	ldrb	r2, [r7, #13]
 80090d8:	4909      	ldr	r1, [pc, #36]	@ (8009100 <UARTEx_SetNbDataToProcess+0x94>)
 80090da:	5c8a      	ldrb	r2, [r1, r2]
 80090dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80090e0:	7b7a      	ldrb	r2, [r7, #13]
 80090e2:	4908      	ldr	r1, [pc, #32]	@ (8009104 <UARTEx_SetNbDataToProcess+0x98>)
 80090e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80090f2:	bf00      	nop
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	0800eac8 	.word	0x0800eac8
 8009104:	0800ead0 	.word	0x0800ead0

08009108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009108:	b084      	sub	sp, #16
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	f107 001c 	add.w	r0, r7, #28
 8009116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800911a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800911e:	2b01      	cmp	r3, #1
 8009120:	d121      	bne.n	8009166 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009126:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68da      	ldr	r2, [r3, #12]
 8009132:	4b2c      	ldr	r3, [pc, #176]	@ (80091e4 <USB_CoreInit+0xdc>)
 8009134:	4013      	ands	r3, r2
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009146:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800914a:	2b01      	cmp	r3, #1
 800914c:	d105      	bne.n	800915a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f001 fafa 	bl	800a754 <USB_CoreReset>
 8009160:	4603      	mov	r3, r0
 8009162:	73fb      	strb	r3, [r7, #15]
 8009164:	e01b      	b.n	800919e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 faee 	bl	800a754 <USB_CoreReset>
 8009178:	4603      	mov	r3, r0
 800917a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800917c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009180:	2b00      	cmp	r3, #0
 8009182:	d106      	bne.n	8009192 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009188:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009190:	e005      	b.n	800919e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009196:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800919e:	7fbb      	ldrb	r3, [r7, #30]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d116      	bne.n	80091d2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80091b2:	4b0d      	ldr	r3, [pc, #52]	@ (80091e8 <USB_CoreInit+0xe0>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f043 0206 	orr.w	r2, r3, #6
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f043 0220 	orr.w	r2, r3, #32
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091de:	b004      	add	sp, #16
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	ffbdffbf 	.word	0xffbdffbf
 80091e8:	03ee0000 	.word	0x03ee0000

080091ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80091fa:	79fb      	ldrb	r3, [r7, #7]
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d165      	bne.n	80092cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4a41      	ldr	r2, [pc, #260]	@ (8009308 <USB_SetTurnaroundTime+0x11c>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d906      	bls.n	8009216 <USB_SetTurnaroundTime+0x2a>
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	4a40      	ldr	r2, [pc, #256]	@ (800930c <USB_SetTurnaroundTime+0x120>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d202      	bcs.n	8009216 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009210:	230f      	movs	r3, #15
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	e062      	b.n	80092dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	4a3c      	ldr	r2, [pc, #240]	@ (800930c <USB_SetTurnaroundTime+0x120>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d306      	bcc.n	800922c <USB_SetTurnaroundTime+0x40>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	4a3b      	ldr	r2, [pc, #236]	@ (8009310 <USB_SetTurnaroundTime+0x124>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d202      	bcs.n	800922c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009226:	230e      	movs	r3, #14
 8009228:	617b      	str	r3, [r7, #20]
 800922a:	e057      	b.n	80092dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4a38      	ldr	r2, [pc, #224]	@ (8009310 <USB_SetTurnaroundTime+0x124>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d306      	bcc.n	8009242 <USB_SetTurnaroundTime+0x56>
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	4a37      	ldr	r2, [pc, #220]	@ (8009314 <USB_SetTurnaroundTime+0x128>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d202      	bcs.n	8009242 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800923c:	230d      	movs	r3, #13
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e04c      	b.n	80092dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	4a33      	ldr	r2, [pc, #204]	@ (8009314 <USB_SetTurnaroundTime+0x128>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d306      	bcc.n	8009258 <USB_SetTurnaroundTime+0x6c>
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	4a32      	ldr	r2, [pc, #200]	@ (8009318 <USB_SetTurnaroundTime+0x12c>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d802      	bhi.n	8009258 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009252:	230c      	movs	r3, #12
 8009254:	617b      	str	r3, [r7, #20]
 8009256:	e041      	b.n	80092dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	4a2f      	ldr	r2, [pc, #188]	@ (8009318 <USB_SetTurnaroundTime+0x12c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d906      	bls.n	800926e <USB_SetTurnaroundTime+0x82>
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	4a2e      	ldr	r2, [pc, #184]	@ (800931c <USB_SetTurnaroundTime+0x130>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d802      	bhi.n	800926e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009268:	230b      	movs	r3, #11
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	e036      	b.n	80092dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	4a2a      	ldr	r2, [pc, #168]	@ (800931c <USB_SetTurnaroundTime+0x130>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d906      	bls.n	8009284 <USB_SetTurnaroundTime+0x98>
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	4a29      	ldr	r2, [pc, #164]	@ (8009320 <USB_SetTurnaroundTime+0x134>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d802      	bhi.n	8009284 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800927e:	230a      	movs	r3, #10
 8009280:	617b      	str	r3, [r7, #20]
 8009282:	e02b      	b.n	80092dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	4a26      	ldr	r2, [pc, #152]	@ (8009320 <USB_SetTurnaroundTime+0x134>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d906      	bls.n	800929a <USB_SetTurnaroundTime+0xae>
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	4a25      	ldr	r2, [pc, #148]	@ (8009324 <USB_SetTurnaroundTime+0x138>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d202      	bcs.n	800929a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009294:	2309      	movs	r3, #9
 8009296:	617b      	str	r3, [r7, #20]
 8009298:	e020      	b.n	80092dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	4a21      	ldr	r2, [pc, #132]	@ (8009324 <USB_SetTurnaroundTime+0x138>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d306      	bcc.n	80092b0 <USB_SetTurnaroundTime+0xc4>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	4a20      	ldr	r2, [pc, #128]	@ (8009328 <USB_SetTurnaroundTime+0x13c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d802      	bhi.n	80092b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80092aa:	2308      	movs	r3, #8
 80092ac:	617b      	str	r3, [r7, #20]
 80092ae:	e015      	b.n	80092dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009328 <USB_SetTurnaroundTime+0x13c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d906      	bls.n	80092c6 <USB_SetTurnaroundTime+0xda>
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	4a1c      	ldr	r2, [pc, #112]	@ (800932c <USB_SetTurnaroundTime+0x140>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d202      	bcs.n	80092c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80092c0:	2307      	movs	r3, #7
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	e00a      	b.n	80092dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80092c6:	2306      	movs	r3, #6
 80092c8:	617b      	str	r3, [r7, #20]
 80092ca:	e007      	b.n	80092dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d102      	bne.n	80092d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80092d2:	2309      	movs	r3, #9
 80092d4:	617b      	str	r3, [r7, #20]
 80092d6:	e001      	b.n	80092dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80092d8:	2309      	movs	r3, #9
 80092da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	029b      	lsls	r3, r3, #10
 80092f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80092f4:	431a      	orrs	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	371c      	adds	r7, #28
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	00d8acbf 	.word	0x00d8acbf
 800930c:	00e4e1c0 	.word	0x00e4e1c0
 8009310:	00f42400 	.word	0x00f42400
 8009314:	01067380 	.word	0x01067380
 8009318:	011a499f 	.word	0x011a499f
 800931c:	01312cff 	.word	0x01312cff
 8009320:	014ca43f 	.word	0x014ca43f
 8009324:	016e3600 	.word	0x016e3600
 8009328:	01a6ab1f 	.word	0x01a6ab1f
 800932c:	01e84800 	.word	0x01e84800

08009330 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f043 0201 	orr.w	r2, r3, #1
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f023 0201 	bic.w	r2, r3, #1
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009380:	2300      	movs	r3, #0
 8009382:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d115      	bne.n	80093c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093a2:	200a      	movs	r0, #10
 80093a4:	f7f8 f846 	bl	8001434 <HAL_Delay>
      ms += 10U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	330a      	adds	r3, #10
 80093ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f001 f93f 	bl	800a632 <USB_GetMode>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d01e      	beq.n	80093f8 <USB_SetCurrentMode+0x84>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80093be:	d9f0      	bls.n	80093a2 <USB_SetCurrentMode+0x2e>
 80093c0:	e01a      	b.n	80093f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d115      	bne.n	80093f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80093d4:	200a      	movs	r0, #10
 80093d6:	f7f8 f82d 	bl	8001434 <HAL_Delay>
      ms += 10U;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	330a      	adds	r3, #10
 80093de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 f926 	bl	800a632 <USB_GetMode>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d005      	beq.n	80093f8 <USB_SetCurrentMode+0x84>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80093f0:	d9f0      	bls.n	80093d4 <USB_SetCurrentMode+0x60>
 80093f2:	e001      	b.n	80093f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e005      	b.n	8009404 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80093fc:	d101      	bne.n	8009402 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e000      	b.n	8009404 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800940c:	b084      	sub	sp, #16
 800940e:	b580      	push	{r7, lr}
 8009410:	b086      	sub	sp, #24
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800941a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009426:	2300      	movs	r3, #0
 8009428:	613b      	str	r3, [r7, #16]
 800942a:	e009      	b.n	8009440 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	3340      	adds	r3, #64	@ 0x40
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	2200      	movs	r2, #0
 8009438:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	3301      	adds	r3, #1
 800943e:	613b      	str	r3, [r7, #16]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	2b0e      	cmp	r3, #14
 8009444:	d9f2      	bls.n	800942c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009446:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800944a:	2b00      	cmp	r3, #0
 800944c:	d11c      	bne.n	8009488 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800945c:	f043 0302 	orr.w	r3, r3, #2
 8009460:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009466:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	601a      	str	r2, [r3, #0]
 8009486:	e005      	b.n	8009494 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800948c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800949a:	461a      	mov	r2, r3
 800949c:	2300      	movs	r3, #0
 800949e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d10d      	bne.n	80094c4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d104      	bne.n	80094ba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094b0:	2100      	movs	r1, #0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f968 	bl	8009788 <USB_SetDevSpeed>
 80094b8:	e008      	b.n	80094cc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094ba:	2101      	movs	r1, #1
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f963 	bl	8009788 <USB_SetDevSpeed>
 80094c2:	e003      	b.n	80094cc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80094c4:	2103      	movs	r1, #3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f95e 	bl	8009788 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80094cc:	2110      	movs	r1, #16
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f8fa 	bl	80096c8 <USB_FlushTxFifo>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f924 	bl	800972c <USB_FlushRxFifo>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094f4:	461a      	mov	r2, r3
 80094f6:	2300      	movs	r3, #0
 80094f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009500:	461a      	mov	r2, r3
 8009502:	2300      	movs	r3, #0
 8009504:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800950c:	461a      	mov	r2, r3
 800950e:	2300      	movs	r3, #0
 8009510:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009512:	2300      	movs	r3, #0
 8009514:	613b      	str	r3, [r7, #16]
 8009516:	e043      	b.n	80095a0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4413      	add	r3, r2
 8009520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800952a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800952e:	d118      	bne.n	8009562 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10a      	bne.n	800954c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4413      	add	r3, r2
 800953e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009542:	461a      	mov	r2, r3
 8009544:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009548:	6013      	str	r3, [r2, #0]
 800954a:	e013      	b.n	8009574 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4413      	add	r3, r2
 8009554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009558:	461a      	mov	r2, r3
 800955a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	e008      	b.n	8009574 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4413      	add	r3, r2
 800956a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800956e:	461a      	mov	r2, r3
 8009570:	2300      	movs	r3, #0
 8009572:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009580:	461a      	mov	r2, r3
 8009582:	2300      	movs	r3, #0
 8009584:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	4413      	add	r3, r2
 800958e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009592:	461a      	mov	r2, r3
 8009594:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009598:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	3301      	adds	r3, #1
 800959e:	613b      	str	r3, [r7, #16]
 80095a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80095a4:	461a      	mov	r2, r3
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d3b5      	bcc.n	8009518 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095ac:	2300      	movs	r3, #0
 80095ae:	613b      	str	r3, [r7, #16]
 80095b0:	e043      	b.n	800963a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095c8:	d118      	bne.n	80095fc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095dc:	461a      	mov	r2, r3
 80095de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80095e2:	6013      	str	r3, [r2, #0]
 80095e4:	e013      	b.n	800960e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f2:	461a      	mov	r2, r3
 80095f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80095f8:	6013      	str	r3, [r2, #0]
 80095fa:	e008      	b.n	800960e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4413      	add	r3, r2
 8009604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009608:	461a      	mov	r2, r3
 800960a:	2300      	movs	r3, #0
 800960c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	4413      	add	r3, r2
 8009616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800961a:	461a      	mov	r2, r3
 800961c:	2300      	movs	r3, #0
 800961e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4413      	add	r3, r2
 8009628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800962c:	461a      	mov	r2, r3
 800962e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009632:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	3301      	adds	r3, #1
 8009638:	613b      	str	r3, [r7, #16]
 800963a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800963e:	461a      	mov	r2, r3
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	4293      	cmp	r3, r2
 8009644:	d3b5      	bcc.n	80095b2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009658:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009666:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009668:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800966c:	2b00      	cmp	r3, #0
 800966e:	d105      	bne.n	800967c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	f043 0210 	orr.w	r2, r3, #16
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	699a      	ldr	r2, [r3, #24]
 8009680:	4b0f      	ldr	r3, [pc, #60]	@ (80096c0 <USB_DevInit+0x2b4>)
 8009682:	4313      	orrs	r3, r2
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009688:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800968c:	2b00      	cmp	r3, #0
 800968e:	d005      	beq.n	800969c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	f043 0208 	orr.w	r2, r3, #8
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800969c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d105      	bne.n	80096b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	699a      	ldr	r2, [r3, #24]
 80096a8:	4b06      	ldr	r3, [pc, #24]	@ (80096c4 <USB_DevInit+0x2b8>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096bc:	b004      	add	sp, #16
 80096be:	4770      	bx	lr
 80096c0:	803c3800 	.word	0x803c3800
 80096c4:	40000004 	.word	0x40000004

080096c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	3301      	adds	r3, #1
 80096da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096e2:	d901      	bls.n	80096e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e01b      	b.n	8009720 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	daf2      	bge.n	80096d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80096f0:	2300      	movs	r3, #0
 80096f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	019b      	lsls	r3, r3, #6
 80096f8:	f043 0220 	orr.w	r2, r3, #32
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3301      	adds	r3, #1
 8009704:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800970c:	d901      	bls.n	8009712 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	e006      	b.n	8009720 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	f003 0320 	and.w	r3, r3, #32
 800971a:	2b20      	cmp	r3, #32
 800971c:	d0f0      	beq.n	8009700 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3301      	adds	r3, #1
 800973c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009744:	d901      	bls.n	800974a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e018      	b.n	800977c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	daf2      	bge.n	8009738 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009752:	2300      	movs	r3, #0
 8009754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2210      	movs	r2, #16
 800975a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3301      	adds	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009768:	d901      	bls.n	800976e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e006      	b.n	800977c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	f003 0310 	and.w	r3, r3, #16
 8009776:	2b10      	cmp	r3, #16
 8009778:	d0f0      	beq.n	800975c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	68f9      	ldr	r1, [r7, #12]
 80097a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097a8:	4313      	orrs	r3, r2
 80097aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b087      	sub	sp, #28
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f003 0306 	and.w	r3, r3, #6
 80097d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d102      	bne.n	80097e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80097da:	2300      	movs	r3, #0
 80097dc:	75fb      	strb	r3, [r7, #23]
 80097de:	e00a      	b.n	80097f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d002      	beq.n	80097ec <USB_GetDevSpeed+0x32>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b06      	cmp	r3, #6
 80097ea:	d102      	bne.n	80097f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80097ec:	2302      	movs	r3, #2
 80097ee:	75fb      	strb	r3, [r7, #23]
 80097f0:	e001      	b.n	80097f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80097f2:	230f      	movs	r3, #15
 80097f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	785b      	ldrb	r3, [r3, #1]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d139      	bne.n	8009894 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009826:	69da      	ldr	r2, [r3, #28]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	f003 030f 	and.w	r3, r3, #15
 8009830:	2101      	movs	r1, #1
 8009832:	fa01 f303 	lsl.w	r3, r1, r3
 8009836:	b29b      	uxth	r3, r3
 8009838:	68f9      	ldr	r1, [r7, #12]
 800983a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800983e:	4313      	orrs	r3, r2
 8009840:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	4413      	add	r3, r2
 800984a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d153      	bne.n	8009900 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	791b      	ldrb	r3, [r3, #4]
 8009872:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009874:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	059b      	lsls	r3, r3, #22
 800987a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800987c:	431a      	orrs	r2, r3
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	0159      	lsls	r1, r3, #5
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	440b      	add	r3, r1
 8009886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800988a:	4619      	mov	r1, r3
 800988c:	4b20      	ldr	r3, [pc, #128]	@ (8009910 <USB_ActivateEndpoint+0x10c>)
 800988e:	4313      	orrs	r3, r2
 8009890:	600b      	str	r3, [r1, #0]
 8009892:	e035      	b.n	8009900 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800989a:	69da      	ldr	r2, [r3, #28]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	f003 030f 	and.w	r3, r3, #15
 80098a4:	2101      	movs	r1, #1
 80098a6:	fa01 f303 	lsl.w	r3, r1, r3
 80098aa:	041b      	lsls	r3, r3, #16
 80098ac:	68f9      	ldr	r1, [r7, #12]
 80098ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098b2:	4313      	orrs	r3, r2
 80098b4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	4413      	add	r3, r2
 80098be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d119      	bne.n	8009900 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	791b      	ldrb	r3, [r3, #4]
 80098e6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80098e8:	430b      	orrs	r3, r1
 80098ea:	431a      	orrs	r2, r3
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	0159      	lsls	r1, r3, #5
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	440b      	add	r3, r1
 80098f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098f8:	4619      	mov	r1, r3
 80098fa:	4b05      	ldr	r3, [pc, #20]	@ (8009910 <USB_ActivateEndpoint+0x10c>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	10008000 	.word	0x10008000

08009914 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	785b      	ldrb	r3, [r3, #1]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d161      	bne.n	80099f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009942:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009946:	d11f      	bne.n	8009988 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	4413      	add	r3, r2
 8009950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	0151      	lsls	r1, r2, #5
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	440a      	add	r2, r1
 800995e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009962:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009966:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	0151      	lsls	r1, r2, #5
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	440a      	add	r2, r1
 800997e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009982:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009986:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800998e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	f003 030f 	and.w	r3, r3, #15
 8009998:	2101      	movs	r1, #1
 800999a:	fa01 f303 	lsl.w	r3, r1, r3
 800999e:	b29b      	uxth	r3, r3
 80099a0:	43db      	mvns	r3, r3
 80099a2:	68f9      	ldr	r1, [r7, #12]
 80099a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099a8:	4013      	ands	r3, r2
 80099aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099b2:	69da      	ldr	r2, [r3, #28]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	f003 030f 	and.w	r3, r3, #15
 80099bc:	2101      	movs	r1, #1
 80099be:	fa01 f303 	lsl.w	r3, r1, r3
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	43db      	mvns	r3, r3
 80099c6:	68f9      	ldr	r1, [r7, #12]
 80099c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099cc:	4013      	ands	r3, r2
 80099ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	0159      	lsls	r1, r3, #5
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	440b      	add	r3, r1
 80099e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ea:	4619      	mov	r1, r3
 80099ec:	4b35      	ldr	r3, [pc, #212]	@ (8009ac4 <USB_DeactivateEndpoint+0x1b0>)
 80099ee:	4013      	ands	r3, r2
 80099f0:	600b      	str	r3, [r1, #0]
 80099f2:	e060      	b.n	8009ab6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a0a:	d11f      	bne.n	8009a4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	015a      	lsls	r2, r3, #5
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	0151      	lsls	r1, r2, #5
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	440a      	add	r2, r1
 8009a22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	015a      	lsls	r2, r3, #5
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	4413      	add	r3, r2
 8009a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	0151      	lsls	r1, r2, #5
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	440a      	add	r2, r1
 8009a42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	f003 030f 	and.w	r3, r3, #15
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a62:	041b      	lsls	r3, r3, #16
 8009a64:	43db      	mvns	r3, r3
 8009a66:	68f9      	ldr	r1, [r7, #12]
 8009a68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a76:	69da      	ldr	r2, [r3, #28]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	2101      	movs	r1, #1
 8009a82:	fa01 f303 	lsl.w	r3, r1, r3
 8009a86:	041b      	lsls	r3, r3, #16
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	68f9      	ldr	r1, [r7, #12]
 8009a8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a90:	4013      	ands	r3, r2
 8009a92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	0159      	lsls	r1, r3, #5
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	440b      	add	r3, r1
 8009aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aae:	4619      	mov	r1, r3
 8009ab0:	4b05      	ldr	r3, [pc, #20]	@ (8009ac8 <USB_DeactivateEndpoint+0x1b4>)
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	ec337800 	.word	0xec337800
 8009ac8:	eff37800 	.word	0xeff37800

08009acc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08a      	sub	sp, #40	@ 0x28
 8009ad0:	af02      	add	r7, sp, #8
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	785b      	ldrb	r3, [r3, #1]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	f040 8185 	bne.w	8009df8 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d132      	bne.n	8009b5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b02:	691a      	ldr	r2, [r3, #16]
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	0159      	lsls	r1, r3, #5
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	440b      	add	r3, r1
 8009b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b10:	4619      	mov	r1, r3
 8009b12:	4ba7      	ldr	r3, [pc, #668]	@ (8009db0 <USB_EPStartXfer+0x2e4>)
 8009b14:	4013      	ands	r3, r2
 8009b16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	69ba      	ldr	r2, [r7, #24]
 8009b28:	0151      	lsls	r1, r2, #5
 8009b2a:	69fa      	ldr	r2, [r7, #28]
 8009b2c:	440a      	add	r2, r1
 8009b2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b44:	691a      	ldr	r2, [r3, #16]
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	0159      	lsls	r1, r3, #5
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	440b      	add	r3, r1
 8009b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b52:	4619      	mov	r1, r3
 8009b54:	4b97      	ldr	r3, [pc, #604]	@ (8009db4 <USB_EPStartXfer+0x2e8>)
 8009b56:	4013      	ands	r3, r2
 8009b58:	610b      	str	r3, [r1, #16]
 8009b5a:	e097      	b.n	8009c8c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b68:	691a      	ldr	r2, [r3, #16]
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	0159      	lsls	r1, r3, #5
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	440b      	add	r3, r1
 8009b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b76:	4619      	mov	r1, r3
 8009b78:	4b8e      	ldr	r3, [pc, #568]	@ (8009db4 <USB_EPStartXfer+0x2e8>)
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	015a      	lsls	r2, r3, #5
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	4413      	add	r3, r2
 8009b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b8a:	691a      	ldr	r2, [r3, #16]
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	0159      	lsls	r1, r3, #5
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	440b      	add	r3, r1
 8009b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4b85      	ldr	r3, [pc, #532]	@ (8009db0 <USB_EPStartXfer+0x2e4>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d11a      	bne.n	8009bdc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	691a      	ldr	r2, [r3, #16]
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d903      	bls.n	8009bba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	689a      	ldr	r2, [r3, #8]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	015a      	lsls	r2, r3, #5
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	69ba      	ldr	r2, [r7, #24]
 8009bca:	0151      	lsls	r1, r2, #5
 8009bcc:	69fa      	ldr	r2, [r7, #28]
 8009bce:	440a      	add	r2, r1
 8009bd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009bd8:	6113      	str	r3, [r2, #16]
 8009bda:	e044      	b.n	8009c66 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	691a      	ldr	r2, [r3, #16]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	4413      	add	r3, r2
 8009be6:	1e5a      	subs	r2, r3, #1
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bfe:	691a      	ldr	r2, [r3, #16]
 8009c00:	8afb      	ldrh	r3, [r7, #22]
 8009c02:	04d9      	lsls	r1, r3, #19
 8009c04:	4b6c      	ldr	r3, [pc, #432]	@ (8009db8 <USB_EPStartXfer+0x2ec>)
 8009c06:	400b      	ands	r3, r1
 8009c08:	69b9      	ldr	r1, [r7, #24]
 8009c0a:	0148      	lsls	r0, r1, #5
 8009c0c:	69f9      	ldr	r1, [r7, #28]
 8009c0e:	4401      	add	r1, r0
 8009c10:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c14:	4313      	orrs	r3, r2
 8009c16:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	791b      	ldrb	r3, [r3, #4]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d122      	bne.n	8009c66 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	69ba      	ldr	r2, [r7, #24]
 8009c30:	0151      	lsls	r1, r2, #5
 8009c32:	69fa      	ldr	r2, [r7, #28]
 8009c34:	440a      	add	r2, r1
 8009c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c3a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009c3e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c4c:	691a      	ldr	r2, [r3, #16]
 8009c4e:	8afb      	ldrh	r3, [r7, #22]
 8009c50:	075b      	lsls	r3, r3, #29
 8009c52:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009c56:	69b9      	ldr	r1, [r7, #24]
 8009c58:	0148      	lsls	r0, r1, #5
 8009c5a:	69f9      	ldr	r1, [r7, #28]
 8009c5c:	4401      	add	r1, r0
 8009c5e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c62:	4313      	orrs	r3, r2
 8009c64:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c72:	691a      	ldr	r2, [r3, #16]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c7c:	69b9      	ldr	r1, [r7, #24]
 8009c7e:	0148      	lsls	r0, r1, #5
 8009c80:	69f9      	ldr	r1, [r7, #28]
 8009c82:	4401      	add	r1, r0
 8009c84:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009c8c:	79fb      	ldrb	r3, [r7, #7]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d14b      	bne.n	8009d2a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d009      	beq.n	8009cae <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	015a      	lsls	r2, r3, #5
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	69db      	ldr	r3, [r3, #28]
 8009cac:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	791b      	ldrb	r3, [r3, #4]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d128      	bne.n	8009d08 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d110      	bne.n	8009ce8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	015a      	lsls	r2, r3, #5
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	69ba      	ldr	r2, [r7, #24]
 8009cd6:	0151      	lsls	r1, r2, #5
 8009cd8:	69fa      	ldr	r2, [r7, #28]
 8009cda:	440a      	add	r2, r1
 8009cdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ce0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	e00f      	b.n	8009d08 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	69ba      	ldr	r2, [r7, #24]
 8009cf8:	0151      	lsls	r1, r2, #5
 8009cfa:	69fa      	ldr	r2, [r7, #28]
 8009cfc:	440a      	add	r2, r1
 8009cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d06:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	015a      	lsls	r2, r3, #5
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	4413      	add	r3, r2
 8009d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	0151      	lsls	r1, r2, #5
 8009d1a:	69fa      	ldr	r2, [r7, #28]
 8009d1c:	440a      	add	r2, r1
 8009d1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d22:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	e169      	b.n	8009ffe <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	015a      	lsls	r2, r3, #5
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	4413      	add	r3, r2
 8009d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	69ba      	ldr	r2, [r7, #24]
 8009d3a:	0151      	lsls	r1, r2, #5
 8009d3c:	69fa      	ldr	r2, [r7, #28]
 8009d3e:	440a      	add	r2, r1
 8009d40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d44:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d48:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	791b      	ldrb	r3, [r3, #4]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d015      	beq.n	8009d7e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 8151 	beq.w	8009ffe <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	f003 030f 	and.w	r3, r3, #15
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d72:	69f9      	ldr	r1, [r7, #28]
 8009d74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	634b      	str	r3, [r1, #52]	@ 0x34
 8009d7c:	e13f      	b.n	8009ffe <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d116      	bne.n	8009dbc <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	0151      	lsls	r1, r2, #5
 8009da0:	69fa      	ldr	r2, [r7, #28]
 8009da2:	440a      	add	r2, r1
 8009da4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009da8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	e015      	b.n	8009ddc <USB_EPStartXfer+0x310>
 8009db0:	e007ffff 	.word	0xe007ffff
 8009db4:	fff80000 	.word	0xfff80000
 8009db8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	69ba      	ldr	r2, [r7, #24]
 8009dcc:	0151      	lsls	r1, r2, #5
 8009dce:	69fa      	ldr	r2, [r7, #28]
 8009dd0:	440a      	add	r2, r1
 8009dd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dda:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	68d9      	ldr	r1, [r3, #12]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	781a      	ldrb	r2, [r3, #0]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	b298      	uxth	r0, r3
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	4603      	mov	r3, r0
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 f9b9 	bl	800a168 <USB_WritePacket>
 8009df6:	e102      	b.n	8009ffe <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	015a      	lsls	r2, r3, #5
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e04:	691a      	ldr	r2, [r3, #16]
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	0159      	lsls	r1, r3, #5
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	440b      	add	r3, r1
 8009e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e12:	4619      	mov	r1, r3
 8009e14:	4b7c      	ldr	r3, [pc, #496]	@ (800a008 <USB_EPStartXfer+0x53c>)
 8009e16:	4013      	ands	r3, r2
 8009e18:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	015a      	lsls	r2, r3, #5
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	4413      	add	r3, r2
 8009e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e26:	691a      	ldr	r2, [r3, #16]
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	0159      	lsls	r1, r3, #5
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	440b      	add	r3, r1
 8009e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e34:	4619      	mov	r1, r3
 8009e36:	4b75      	ldr	r3, [pc, #468]	@ (800a00c <USB_EPStartXfer+0x540>)
 8009e38:	4013      	ands	r3, r2
 8009e3a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d12f      	bne.n	8009ea2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	689a      	ldr	r2, [r3, #8]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	689a      	ldr	r2, [r3, #8]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e66:	691a      	ldr	r2, [r3, #16]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	6a1b      	ldr	r3, [r3, #32]
 8009e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e70:	69b9      	ldr	r1, [r7, #24]
 8009e72:	0148      	lsls	r0, r1, #5
 8009e74:	69f9      	ldr	r1, [r7, #28]
 8009e76:	4401      	add	r1, r0
 8009e78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	015a      	lsls	r2, r3, #5
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	4413      	add	r3, r2
 8009e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	0151      	lsls	r1, r2, #5
 8009e92:	69fa      	ldr	r2, [r7, #28]
 8009e94:	440a      	add	r2, r1
 8009e96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e9e:	6113      	str	r3, [r2, #16]
 8009ea0:	e05f      	b.n	8009f62 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d123      	bne.n	8009ef2 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eb6:	691a      	ldr	r2, [r3, #16]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ec0:	69b9      	ldr	r1, [r7, #24]
 8009ec2:	0148      	lsls	r0, r1, #5
 8009ec4:	69f9      	ldr	r1, [r7, #28]
 8009ec6:	4401      	add	r1, r0
 8009ec8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	69ba      	ldr	r2, [r7, #24]
 8009ee0:	0151      	lsls	r1, r2, #5
 8009ee2:	69fa      	ldr	r2, [r7, #28]
 8009ee4:	440a      	add	r2, r1
 8009ee6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009eea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009eee:	6113      	str	r3, [r2, #16]
 8009ef0:	e037      	b.n	8009f62 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	691a      	ldr	r2, [r3, #16]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	4413      	add	r3, r2
 8009efc:	1e5a      	subs	r2, r3, #1
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f06:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	8afa      	ldrh	r2, [r7, #22]
 8009f0e:	fb03 f202 	mul.w	r2, r3, r2
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	015a      	lsls	r2, r3, #5
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f22:	691a      	ldr	r2, [r3, #16]
 8009f24:	8afb      	ldrh	r3, [r7, #22]
 8009f26:	04d9      	lsls	r1, r3, #19
 8009f28:	4b39      	ldr	r3, [pc, #228]	@ (800a010 <USB_EPStartXfer+0x544>)
 8009f2a:	400b      	ands	r3, r1
 8009f2c:	69b9      	ldr	r1, [r7, #24]
 8009f2e:	0148      	lsls	r0, r1, #5
 8009f30:	69f9      	ldr	r1, [r7, #28]
 8009f32:	4401      	add	r1, r0
 8009f34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f48:	691a      	ldr	r2, [r3, #16]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f52:	69b9      	ldr	r1, [r7, #24]
 8009f54:	0148      	lsls	r0, r1, #5
 8009f56:	69f9      	ldr	r1, [r7, #28]
 8009f58:	4401      	add	r1, r0
 8009f5a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009f62:	79fb      	ldrb	r3, [r7, #7]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d10d      	bne.n	8009f84 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d009      	beq.n	8009f84 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	68d9      	ldr	r1, [r3, #12]
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f80:	460a      	mov	r2, r1
 8009f82:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	791b      	ldrb	r3, [r3, #4]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d128      	bne.n	8009fde <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d110      	bne.n	8009fbe <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	69ba      	ldr	r2, [r7, #24]
 8009fac:	0151      	lsls	r1, r2, #5
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	440a      	add	r2, r1
 8009fb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fb6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	e00f      	b.n	8009fde <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	0151      	lsls	r1, r2, #5
 8009fd0:	69fa      	ldr	r2, [r7, #28]
 8009fd2:	440a      	add	r2, r1
 8009fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fdc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	0151      	lsls	r1, r2, #5
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	440a      	add	r2, r1
 8009ff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ff8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ffc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3720      	adds	r7, #32
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	fff80000 	.word	0xfff80000
 800a00c:	e007ffff 	.word	0xe007ffff
 800a010:	1ff80000 	.word	0x1ff80000

0800a014 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	785b      	ldrb	r3, [r3, #1]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d14a      	bne.n	800a0c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a046:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a04a:	f040 8086 	bne.w	800a15a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	015a      	lsls	r2, r3, #5
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	4413      	add	r3, r2
 800a058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	7812      	ldrb	r2, [r2, #0]
 800a062:	0151      	lsls	r1, r2, #5
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	440a      	add	r2, r1
 800a068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a06c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a070:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	7812      	ldrb	r2, [r2, #0]
 800a086:	0151      	lsls	r1, r2, #5
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	440a      	add	r2, r1
 800a08c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a090:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a094:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3301      	adds	r3, #1
 800a09a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d902      	bls.n	800a0ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	75fb      	strb	r3, [r7, #23]
          break;
 800a0aa:	e056      	b.n	800a15a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0c4:	d0e7      	beq.n	800a096 <USB_EPStopXfer+0x82>
 800a0c6:	e048      	b.n	800a15a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	015a      	lsls	r2, r3, #5
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a0dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0e0:	d13b      	bne.n	800a15a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	015a      	lsls	r2, r3, #5
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	7812      	ldrb	r2, [r2, #0]
 800a0f6:	0151      	lsls	r1, r2, #5
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	440a      	add	r2, r1
 800a0fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a100:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a104:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	7812      	ldrb	r2, [r2, #0]
 800a11a:	0151      	lsls	r1, r2, #5
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	440a      	add	r2, r1
 800a120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a124:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a128:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3301      	adds	r3, #1
 800a12e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a136:	4293      	cmp	r3, r2
 800a138:	d902      	bls.n	800a140 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	75fb      	strb	r3, [r7, #23]
          break;
 800a13e:	e00c      	b.n	800a15a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	015a      	lsls	r2, r3, #5
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	4413      	add	r3, r2
 800a14a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a154:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a158:	d0e7      	beq.n	800a12a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	371c      	adds	r7, #28
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a168:	b480      	push	{r7}
 800a16a:	b089      	sub	sp, #36	@ 0x24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	4611      	mov	r1, r2
 800a174:	461a      	mov	r2, r3
 800a176:	460b      	mov	r3, r1
 800a178:	71fb      	strb	r3, [r7, #7]
 800a17a:	4613      	mov	r3, r2
 800a17c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a186:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d123      	bne.n	800a1d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a18e:	88bb      	ldrh	r3, [r7, #4]
 800a190:	3303      	adds	r3, #3
 800a192:	089b      	lsrs	r3, r3, #2
 800a194:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a196:	2300      	movs	r3, #0
 800a198:	61bb      	str	r3, [r7, #24]
 800a19a:	e018      	b.n	800a1ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a19c:	79fb      	ldrb	r3, [r7, #7]
 800a19e:	031a      	lsls	r2, r3, #12
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	61bb      	str	r3, [r7, #24]
 800a1ce:	69ba      	ldr	r2, [r7, #24]
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d3e2      	bcc.n	800a19c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3724      	adds	r7, #36	@ 0x24
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b08b      	sub	sp, #44	@ 0x2c
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a1fa:	88fb      	ldrh	r3, [r7, #6]
 800a1fc:	089b      	lsrs	r3, r3, #2
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a202:	88fb      	ldrh	r3, [r7, #6]
 800a204:	f003 0303 	and.w	r3, r3, #3
 800a208:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a20a:	2300      	movs	r3, #0
 800a20c:	623b      	str	r3, [r7, #32]
 800a20e:	e014      	b.n	800a23a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21e:	3301      	adds	r3, #1
 800a220:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a224:	3301      	adds	r3, #1
 800a226:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22a:	3301      	adds	r3, #1
 800a22c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a230:	3301      	adds	r3, #1
 800a232:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	3301      	adds	r3, #1
 800a238:	623b      	str	r3, [r7, #32]
 800a23a:	6a3a      	ldr	r2, [r7, #32]
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d3e6      	bcc.n	800a210 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a242:	8bfb      	ldrh	r3, [r7, #30]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d01e      	beq.n	800a286 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a248:	2300      	movs	r3, #0
 800a24a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a252:	461a      	mov	r2, r3
 800a254:	f107 0310 	add.w	r3, r7, #16
 800a258:	6812      	ldr	r2, [r2, #0]
 800a25a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	00db      	lsls	r3, r3, #3
 800a264:	fa22 f303 	lsr.w	r3, r2, r3
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26c:	701a      	strb	r2, [r3, #0]
      i++;
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	3301      	adds	r3, #1
 800a272:	623b      	str	r3, [r7, #32]
      pDest++;
 800a274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a276:	3301      	adds	r3, #1
 800a278:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a27a:	8bfb      	ldrh	r3, [r7, #30]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a280:	8bfb      	ldrh	r3, [r7, #30]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1ea      	bne.n	800a25c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a288:	4618      	mov	r0, r3
 800a28a:	372c      	adds	r7, #44	@ 0x2c
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	785b      	ldrb	r3, [r3, #1]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d12c      	bne.n	800a30a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	015a      	lsls	r2, r3, #5
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	db12      	blt.n	800a2e8 <USB_EPSetStall+0x54>
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00f      	beq.n	800a2e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	015a      	lsls	r2, r3, #5
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	0151      	lsls	r1, r2, #5
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	440a      	add	r2, r1
 800a2de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a2e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	0151      	lsls	r1, r2, #5
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	440a      	add	r2, r1
 800a2fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a302:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	e02b      	b.n	800a362 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	4413      	add	r3, r2
 800a312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	db12      	blt.n	800a342 <USB_EPSetStall+0xae>
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00f      	beq.n	800a342 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	0151      	lsls	r1, r2, #5
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	440a      	add	r2, r1
 800a338:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a33c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a340:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	015a      	lsls	r2, r3, #5
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	4413      	add	r3, r2
 800a34a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68ba      	ldr	r2, [r7, #8]
 800a352:	0151      	lsls	r1, r2, #5
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	440a      	add	r2, r1
 800a358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a35c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a360:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	785b      	ldrb	r3, [r3, #1]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d128      	bne.n	800a3de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	015a      	lsls	r2, r3, #5
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4413      	add	r3, r2
 800a394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	0151      	lsls	r1, r2, #5
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	440a      	add	r2, r1
 800a3a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a3aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	791b      	ldrb	r3, [r3, #4]
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d003      	beq.n	800a3bc <USB_EPClearStall+0x4c>
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	791b      	ldrb	r3, [r3, #4]
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d138      	bne.n	800a42e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	0151      	lsls	r1, r2, #5
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	440a      	add	r2, r1
 800a3d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3da:	6013      	str	r3, [r2, #0]
 800a3dc:	e027      	b.n	800a42e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	0151      	lsls	r1, r2, #5
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	440a      	add	r2, r1
 800a3f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a3fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	791b      	ldrb	r3, [r3, #4]
 800a402:	2b03      	cmp	r3, #3
 800a404:	d003      	beq.n	800a40e <USB_EPClearStall+0x9e>
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	791b      	ldrb	r3, [r3, #4]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d10f      	bne.n	800a42e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	0151      	lsls	r1, r2, #5
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	440a      	add	r2, r1
 800a424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a42c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a45a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a45e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	78fb      	ldrb	r3, [r7, #3]
 800a46a:	011b      	lsls	r3, r3, #4
 800a46c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a470:	68f9      	ldr	r1, [r7, #12]
 800a472:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a476:	4313      	orrs	r3, r2
 800a478:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4a2:	f023 0303 	bic.w	r3, r3, #3
 800a4a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4b6:	f023 0302 	bic.w	r3, r3, #2
 800a4ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b085      	sub	sp, #20
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4e4:	f023 0303 	bic.w	r3, r3, #3
 800a4e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4f8:	f043 0302 	orr.w	r3, r3, #2
 800a4fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	695b      	ldr	r3, [r3, #20]
 800a518:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	4013      	ands	r3, r2
 800a522:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a524:	68fb      	ldr	r3, [r7, #12]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a532:	b480      	push	{r7}
 800a534:	b085      	sub	sp, #20
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a54e:	69db      	ldr	r3, [r3, #28]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	4013      	ands	r3, r2
 800a554:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	0c1b      	lsrs	r3, r3, #16
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a566:	b480      	push	{r7}
 800a568:	b085      	sub	sp, #20
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a582:	69db      	ldr	r3, [r3, #28]
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	4013      	ands	r3, r2
 800a588:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	b29b      	uxth	r3, r3
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b085      	sub	sp, #20
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5aa:	78fb      	ldrb	r3, [r7, #3]
 800a5ac:	015a      	lsls	r2, r3, #5
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b087      	sub	sp, #28
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	460b      	mov	r3, r1
 800a5e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	f003 030f 	and.w	r3, r3, #15
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	fa22 f303 	lsr.w	r3, r2, r3
 800a606:	01db      	lsls	r3, r3, #7
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	015a      	lsls	r2, r3, #5
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	4413      	add	r3, r2
 800a618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	4013      	ands	r3, r2
 800a622:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a624:	68bb      	ldr	r3, [r7, #8]
}
 800a626:	4618      	mov	r0, r3
 800a628:	371c      	adds	r7, #28
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	f003 0301 	and.w	r3, r3, #1
}
 800a642:	4618      	mov	r0, r3
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
	...

0800a650 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a66a:	4619      	mov	r1, r3
 800a66c:	4b09      	ldr	r3, [pc, #36]	@ (800a694 <USB_ActivateSetup+0x44>)
 800a66e:	4013      	ands	r3, r2
 800a670:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	fffff800 	.word	0xfffff800

0800a698 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	607a      	str	r2, [r7, #4]
 800a6a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	333c      	adds	r3, #60	@ 0x3c
 800a6ae:	3304      	adds	r3, #4
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	4a26      	ldr	r2, [pc, #152]	@ (800a750 <USB_EP0_OutStart+0xb8>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d90a      	bls.n	800a6d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6cc:	d101      	bne.n	800a6d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e037      	b.n	800a742 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6d8:	461a      	mov	r2, r3
 800a6da:	2300      	movs	r3, #0
 800a6dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a700:	f043 0318 	orr.w	r3, r3, #24
 800a704:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a714:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a718:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a71a:	7afb      	ldrb	r3, [r7, #11]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d10f      	bne.n	800a740 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a726:	461a      	mov	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a73a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a73e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	371c      	adds	r7, #28
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	4f54300a 	.word	0x4f54300a

0800a754 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a75c:	2300      	movs	r3, #0
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3301      	adds	r3, #1
 800a764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a76c:	d901      	bls.n	800a772 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e01b      	b.n	800a7aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	daf2      	bge.n	800a760 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	f043 0201 	orr.w	r2, r3, #1
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3301      	adds	r3, #1
 800a78e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a796:	d901      	bls.n	800a79c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e006      	b.n	800a7aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d0f0      	beq.n	800a78a <USB_CoreReset+0x36>

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800a7c4:	f241 0074 	movw	r0, #4212	@ 0x1074
 800a7c8:	f004 f8be 	bl	800e948 <USBD_static_malloc>
 800a7cc:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d109      	bne.n	800a7e8 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	32b0      	adds	r2, #176	@ 0xb0
 800a7de:	2100      	movs	r1, #0
 800a7e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e06e      	b.n	800a8c6 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	32b0      	adds	r2, #176	@ 0xb0
 800a7f2:	68f9      	ldr	r1, [r7, #12]
 800a7f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	32b0      	adds	r2, #176	@ 0xb0
 800a802:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	7c1b      	ldrb	r3, [r3, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d12b      	bne.n	800a86c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a814:	4b2e      	ldr	r3, [pc, #184]	@ (800a8d0 <USBD_MSC_Init+0x118>)
 800a816:	7819      	ldrb	r1, [r3, #0]
 800a818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a81c:	2202      	movs	r2, #2
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f003 ff4f 	bl	800e6c2 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800a824:	4b2a      	ldr	r3, [pc, #168]	@ (800a8d0 <USBD_MSC_Init+0x118>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	f003 020f 	and.w	r2, r3, #15
 800a82c:	6879      	ldr	r1, [r7, #4]
 800a82e:	4613      	mov	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	440b      	add	r3, r1
 800a838:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a83c:	2201      	movs	r2, #1
 800a83e:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a840:	4b24      	ldr	r3, [pc, #144]	@ (800a8d4 <USBD_MSC_Init+0x11c>)
 800a842:	7819      	ldrb	r1, [r3, #0]
 800a844:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a848:	2202      	movs	r2, #2
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f003 ff39 	bl	800e6c2 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800a850:	4b20      	ldr	r3, [pc, #128]	@ (800a8d4 <USBD_MSC_Init+0x11c>)
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	f003 020f 	and.w	r2, r3, #15
 800a858:	6879      	ldr	r1, [r7, #4]
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	440b      	add	r3, r1
 800a864:	3324      	adds	r3, #36	@ 0x24
 800a866:	2201      	movs	r2, #1
 800a868:	801a      	strh	r2, [r3, #0]
 800a86a:	e028      	b.n	800a8be <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a86c:	4b18      	ldr	r3, [pc, #96]	@ (800a8d0 <USBD_MSC_Init+0x118>)
 800a86e:	7819      	ldrb	r1, [r3, #0]
 800a870:	2340      	movs	r3, #64	@ 0x40
 800a872:	2202      	movs	r2, #2
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f003 ff24 	bl	800e6c2 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800a87a:	4b15      	ldr	r3, [pc, #84]	@ (800a8d0 <USBD_MSC_Init+0x118>)
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	f003 020f 	and.w	r2, r3, #15
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	4613      	mov	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	440b      	add	r3, r1
 800a88e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a892:	2201      	movs	r2, #1
 800a894:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a896:	4b0f      	ldr	r3, [pc, #60]	@ (800a8d4 <USBD_MSC_Init+0x11c>)
 800a898:	7819      	ldrb	r1, [r3, #0]
 800a89a:	2340      	movs	r3, #64	@ 0x40
 800a89c:	2202      	movs	r2, #2
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f003 ff0f 	bl	800e6c2 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800a8a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a8d4 <USBD_MSC_Init+0x11c>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	f003 020f 	and.w	r2, r3, #15
 800a8ac:	6879      	ldr	r1, [r7, #4]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	3324      	adds	r3, #36	@ 0x24
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fa2c 	bl	800ad1c <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	24000073 	.word	0x24000073
 800a8d4:	24000072 	.word	0x24000072

0800a8d8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800a8e4:	4b26      	ldr	r3, [pc, #152]	@ (800a980 <USBD_MSC_DeInit+0xa8>)
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f003 ff0f 	bl	800e70e <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800a8f0:	4b23      	ldr	r3, [pc, #140]	@ (800a980 <USBD_MSC_DeInit+0xa8>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	f003 020f 	and.w	r2, r3, #15
 800a8f8:	6879      	ldr	r1, [r7, #4]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	440b      	add	r3, r1
 800a904:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a908:	2200      	movs	r2, #0
 800a90a:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800a90c:	4b1d      	ldr	r3, [pc, #116]	@ (800a984 <USBD_MSC_DeInit+0xac>)
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f003 fefb 	bl	800e70e <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800a918:	4b1a      	ldr	r3, [pc, #104]	@ (800a984 <USBD_MSC_DeInit+0xac>)
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	f003 020f 	and.w	r2, r3, #15
 800a920:	6879      	ldr	r1, [r7, #4]
 800a922:	4613      	mov	r3, r2
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4413      	add	r3, r2
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	440b      	add	r3, r1
 800a92c:	3324      	adds	r3, #36	@ 0x24
 800a92e:	2200      	movs	r2, #0
 800a930:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	32b0      	adds	r2, #176	@ 0xb0
 800a93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d018      	beq.n	800a976 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 fa6f 	bl	800ae28 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	32b0      	adds	r2, #176	@ 0xb0
 800a954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a958:	4618      	mov	r0, r3
 800a95a:	f004 f803 	bl	800e964 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	32b0      	adds	r2, #176	@ 0xb0
 800a968:	2100      	movs	r1, #0
 800a96a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	24000073 	.word	0x24000073
 800a984:	24000072 	.word	0x24000072

0800a988 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	32b0      	adds	r2, #176	@ 0xb0
 800a99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e0e1      	b.n	800ab78 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d053      	beq.n	800aa68 <USBD_MSC_Setup+0xe0>
 800a9c0:	2b20      	cmp	r3, #32
 800a9c2:	f040 80d1 	bne.w	800ab68 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	785b      	ldrb	r3, [r3, #1]
 800a9ca:	2bfe      	cmp	r3, #254	@ 0xfe
 800a9cc:	d002      	beq.n	800a9d4 <USBD_MSC_Setup+0x4c>
 800a9ce:	2bff      	cmp	r3, #255	@ 0xff
 800a9d0:	d02a      	beq.n	800aa28 <USBD_MSC_Setup+0xa0>
 800a9d2:	e041      	b.n	800aa58 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	885b      	ldrh	r3, [r3, #2]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d11e      	bne.n	800aa1a <USBD_MSC_Setup+0x92>
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	88db      	ldrh	r3, [r3, #6]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d11a      	bne.n	800aa1a <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	da15      	bge.n	800aa1a <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	33b0      	adds	r3, #176	@ 0xb0
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	4798      	blx	r3
 800aa02:	4603      	mov	r3, r0
 800aa04:	461a      	mov	r2, r3
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f003 fa17 	bl	800de44 <USBD_CtlSendData>
 800aa16:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa18:	e025      	b.n	800aa66 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f003 f994 	bl	800dd4a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa22:	2303      	movs	r3, #3
 800aa24:	75fb      	strb	r3, [r7, #23]
          break;
 800aa26:	e01e      	b.n	800aa66 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	885b      	ldrh	r3, [r3, #2]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10c      	bne.n	800aa4a <USBD_MSC_Setup+0xc2>
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	88db      	ldrh	r3, [r3, #6]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d108      	bne.n	800aa4a <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	db03      	blt.n	800aa4a <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f9bc 	bl	800adc0 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa48:	e00d      	b.n	800aa66 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f003 f97c 	bl	800dd4a <USBD_CtlError>
            ret = USBD_FAIL;
 800aa52:	2303      	movs	r3, #3
 800aa54:	75fb      	strb	r3, [r7, #23]
          break;
 800aa56:	e006      	b.n	800aa66 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800aa58:	6839      	ldr	r1, [r7, #0]
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f003 f975 	bl	800dd4a <USBD_CtlError>
          ret = USBD_FAIL;
 800aa60:	2303      	movs	r3, #3
 800aa62:	75fb      	strb	r3, [r7, #23]
          break;
 800aa64:	bf00      	nop
      }
      break;
 800aa66:	e086      	b.n	800ab76 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	785b      	ldrb	r3, [r3, #1]
 800aa6c:	2b0b      	cmp	r3, #11
 800aa6e:	d872      	bhi.n	800ab56 <USBD_MSC_Setup+0x1ce>
 800aa70:	a201      	add	r2, pc, #4	@ (adr r2, 800aa78 <USBD_MSC_Setup+0xf0>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aaa9 	.word	0x0800aaa9
 800aa7c:	0800ab25 	.word	0x0800ab25
 800aa80:	0800ab57 	.word	0x0800ab57
 800aa84:	0800ab57 	.word	0x0800ab57
 800aa88:	0800ab57 	.word	0x0800ab57
 800aa8c:	0800ab57 	.word	0x0800ab57
 800aa90:	0800ab57 	.word	0x0800ab57
 800aa94:	0800ab57 	.word	0x0800ab57
 800aa98:	0800ab57 	.word	0x0800ab57
 800aa9c:	0800ab57 	.word	0x0800ab57
 800aaa0:	0800aad3 	.word	0x0800aad3
 800aaa4:	0800aafd 	.word	0x0800aafd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b03      	cmp	r3, #3
 800aab2:	d107      	bne.n	800aac4 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aab4:	f107 030e 	add.w	r3, r7, #14
 800aab8:	2202      	movs	r2, #2
 800aaba:	4619      	mov	r1, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f003 f9c1 	bl	800de44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aac2:	e050      	b.n	800ab66 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f003 f93f 	bl	800dd4a <USBD_CtlError>
            ret = USBD_FAIL;
 800aacc:	2303      	movs	r3, #3
 800aace:	75fb      	strb	r3, [r7, #23]
          break;
 800aad0:	e049      	b.n	800ab66 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d107      	bne.n	800aaee <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	3304      	adds	r3, #4
 800aae2:	2201      	movs	r2, #1
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f003 f9ac 	bl	800de44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aaec:	e03b      	b.n	800ab66 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f003 f92a 	bl	800dd4a <USBD_CtlError>
            ret = USBD_FAIL;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	75fb      	strb	r3, [r7, #23]
          break;
 800aafa:	e034      	b.n	800ab66 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	d106      	bne.n	800ab16 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	885b      	ldrh	r3, [r3, #2]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	461a      	mov	r2, r3
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab14:	e027      	b.n	800ab66 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800ab16:	6839      	ldr	r1, [r7, #0]
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f003 f916 	bl	800dd4a <USBD_CtlError>
            ret = USBD_FAIL;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	75fb      	strb	r3, [r7, #23]
          break;
 800ab22:	e020      	b.n	800ab66 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b03      	cmp	r3, #3
 800ab2e:	d119      	bne.n	800ab64 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	885b      	ldrh	r3, [r3, #2]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d115      	bne.n	800ab64 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	889b      	ldrh	r3, [r3, #4]
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f003 fe03 	bl	800e74c <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	889b      	ldrh	r3, [r3, #4]
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fb54 	bl	800b1fc <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800ab54:	e006      	b.n	800ab64 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800ab56:	6839      	ldr	r1, [r7, #0]
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f003 f8f6 	bl	800dd4a <USBD_CtlError>
          ret = USBD_FAIL;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	75fb      	strb	r3, [r7, #23]
          break;
 800ab62:	e000      	b.n	800ab66 <USBD_MSC_Setup+0x1de>
          break;
 800ab64:	bf00      	nop
      }
      break;
 800ab66:	e006      	b.n	800ab76 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f003 f8ed 	bl	800dd4a <USBD_CtlError>
      ret = USBD_FAIL;
 800ab70:	2303      	movs	r3, #3
 800ab72:	75fb      	strb	r3, [r7, #23]
      break;
 800ab74:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800ab8c:	78fb      	ldrb	r3, [r7, #3]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 f961 	bl	800ae58 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 f98d 	bl	800aed0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800abc8:	2181      	movs	r1, #129	@ 0x81
 800abca:	4812      	ldr	r0, [pc, #72]	@ (800ac14 <USBD_MSC_GetHSCfgDesc+0x54>)
 800abcc:	f002 fa86 	bl	800d0dc <USBD_GetEpDesc>
 800abd0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800abd2:	2101      	movs	r1, #1
 800abd4:	480f      	ldr	r0, [pc, #60]	@ (800ac14 <USBD_MSC_GetHSCfgDesc+0x54>)
 800abd6:	f002 fa81 	bl	800d0dc <USBD_GetEpDesc>
 800abda:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d006      	beq.n	800abf0 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	711a      	strb	r2, [r3, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f042 0202 	orr.w	r2, r2, #2
 800abee:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d006      	beq.n	800ac04 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2200      	movs	r2, #0
 800abfa:	711a      	strb	r2, [r3, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f042 0202 	orr.w	r2, r2, #2
 800ac02:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2220      	movs	r2, #32
 800ac08:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800ac0a:	4b02      	ldr	r3, [pc, #8]	@ (800ac14 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	24000048 	.word	0x24000048

0800ac18 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800ac20:	2181      	movs	r1, #129	@ 0x81
 800ac22:	4812      	ldr	r0, [pc, #72]	@ (800ac6c <USBD_MSC_GetFSCfgDesc+0x54>)
 800ac24:	f002 fa5a 	bl	800d0dc <USBD_GetEpDesc>
 800ac28:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	480f      	ldr	r0, [pc, #60]	@ (800ac6c <USBD_MSC_GetFSCfgDesc+0x54>)
 800ac2e:	f002 fa55 	bl	800d0dc <USBD_GetEpDesc>
 800ac32:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d006      	beq.n	800ac48 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac42:	711a      	strb	r2, [r3, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d006      	beq.n	800ac5c <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac56:	711a      	strb	r2, [r3, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2220      	movs	r2, #32
 800ac60:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800ac62:	4b02      	ldr	r3, [pc, #8]	@ (800ac6c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	24000048 	.word	0x24000048

0800ac70 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800ac78:	2181      	movs	r1, #129	@ 0x81
 800ac7a:	4812      	ldr	r0, [pc, #72]	@ (800acc4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800ac7c:	f002 fa2e 	bl	800d0dc <USBD_GetEpDesc>
 800ac80:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800ac82:	2101      	movs	r1, #1
 800ac84:	480f      	ldr	r0, [pc, #60]	@ (800acc4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800ac86:	f002 fa29 	bl	800d0dc <USBD_GetEpDesc>
 800ac8a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d006      	beq.n	800aca0 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac9a:	711a      	strb	r2, [r3, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d006      	beq.n	800acb4 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acae:	711a      	strb	r2, [r3, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2220      	movs	r2, #32
 800acb8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800acba:	4b02      	ldr	r3, [pc, #8]	@ (800acc4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	24000048 	.word	0x24000048

0800acc8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	220a      	movs	r2, #10
 800acd4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800acd6:	4b03      	ldr	r3, [pc, #12]	@ (800ace4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800acd8:	4618      	mov	r0, r3
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr
 800ace4:	24000068 	.word	0x24000068

0800ace8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e009      	b.n	800ad10 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	33b0      	adds	r3, #176	@ 0xb0
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	32b0      	adds	r2, #176	@ 0xb0
 800ad2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad32:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d039      	beq.n	800adae <MSC_BOT_Init+0x92>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  hmsc->scsi_sense_head = 0U;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	33b0      	adds	r3, #176	@ 0xb0
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	4413      	add	r3, r2
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800ad80:	4b0d      	ldr	r3, [pc, #52]	@ (800adb8 <MSC_BOT_Init+0x9c>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	4619      	mov	r1, r3
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f003 fce0 	bl	800e74c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800ad8c:	4b0b      	ldr	r3, [pc, #44]	@ (800adbc <MSC_BOT_Init+0xa0>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f003 fcda 	bl	800e74c <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800ad98:	4b07      	ldr	r3, [pc, #28]	@ (800adb8 <MSC_BOT_Init+0x9c>)
 800ad9a:	7819      	ldrb	r1, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f241 0210 	movw	r2, #4112	@ 0x1010
 800ada2:	441a      	add	r2, r3
 800ada4:	231f      	movs	r3, #31
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f003 fd99 	bl	800e8de <USBD_LL_PrepareReceive>
 800adac:	e000      	b.n	800adb0 <MSC_BOT_Init+0x94>
    return;
 800adae:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	24000073 	.word	0x24000073
 800adbc:	24000072 	.word	0x24000072

0800adc0 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	32b0      	adds	r2, #176	@ 0xb0
 800add2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d01c      	beq.n	800ae18 <MSC_BOT_Reset+0x58>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2201      	movs	r2, #1
 800ade8:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800adea:	4b0d      	ldr	r3, [pc, #52]	@ (800ae20 <MSC_BOT_Reset+0x60>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	4619      	mov	r1, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f003 fce9 	bl	800e7c8 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800adf6:	4b0b      	ldr	r3, [pc, #44]	@ (800ae24 <MSC_BOT_Reset+0x64>)
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f003 fce3 	bl	800e7c8 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800ae02:	4b08      	ldr	r3, [pc, #32]	@ (800ae24 <MSC_BOT_Reset+0x64>)
 800ae04:	7819      	ldrb	r1, [r3, #0]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f241 0210 	movw	r2, #4112	@ 0x1010
 800ae0c:	441a      	add	r2, r3
 800ae0e:	231f      	movs	r3, #31
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f003 fd64 	bl	800e8de <USBD_LL_PrepareReceive>
 800ae16:	e000      	b.n	800ae1a <MSC_BOT_Reset+0x5a>
    return;
 800ae18:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	24000072 	.word	0x24000072
 800ae24:	24000073 	.word	0x24000073

0800ae28 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	32b0      	adds	r2, #176	@ 0xb0
 800ae3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3e:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	721a      	strb	r2, [r3, #8]
  }
}
 800ae4c:	bf00      	nop
 800ae4e:	3714      	adds	r7, #20
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	460b      	mov	r3, r1
 800ae62:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	32b0      	adds	r2, #176	@ 0xb0
 800ae6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae72:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d022      	beq.n	800aec0 <MSC_BOT_DataIn+0x68>
  {
    return;
  }

  switch (hmsc->bot_state)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	7a1b      	ldrb	r3, [r3, #8]
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d005      	beq.n	800ae8e <MSC_BOT_DataIn+0x36>
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	db1e      	blt.n	800aec4 <MSC_BOT_DataIn+0x6c>
 800ae86:	3b03      	subs	r3, #3
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d81b      	bhi.n	800aec4 <MSC_BOT_DataIn+0x6c>
 800ae8c:	e013      	b.n	800aeb6 <MSC_BOT_DataIn+0x5e>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae94:	7f59      	ldrb	r1, [r3, #29]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	f241 031f 	movw	r3, #4127	@ 0x101f
 800ae9c:	4413      	add	r3, r2
 800ae9e:	461a      	mov	r2, r3
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f9e5 	bl	800b270 <SCSI_ProcessCmd>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	da0d      	bge.n	800aec8 <MSC_BOT_DataIn+0x70>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800aeac:	2101      	movs	r1, #1
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f920 	bl	800b0f4 <MSC_BOT_SendCSW>
      }
      break;
 800aeb4:	e008      	b.n	800aec8 <MSC_BOT_DataIn+0x70>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 f91b 	bl	800b0f4 <MSC_BOT_SendCSW>
      break;
 800aebe:	e004      	b.n	800aeca <MSC_BOT_DataIn+0x72>
    return;
 800aec0:	bf00      	nop
 800aec2:	e002      	b.n	800aeca <MSC_BOT_DataIn+0x72>

    default:
      break;
 800aec4:	bf00      	nop
 800aec6:	e000      	b.n	800aeca <MSC_BOT_DataIn+0x72>
      break;
 800aec8:	bf00      	nop
  }
}
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	32b0      	adds	r2, #176	@ 0xb0
 800aee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d01e      	beq.n	800af30 <MSC_BOT_DataOut+0x60>
  {
    return;
  }

  switch (hmsc->bot_state)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	7a1b      	ldrb	r3, [r3, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d002      	beq.n	800af00 <MSC_BOT_DataOut+0x30>
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d004      	beq.n	800af08 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800aefe:	e01a      	b.n	800af36 <MSC_BOT_DataOut+0x66>
      MSC_BOT_CBW_Decode(pdev);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f81b 	bl	800af3c <MSC_BOT_CBW_Decode>
      break;
 800af06:	e016      	b.n	800af36 <MSC_BOT_DataOut+0x66>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af0e:	7f59      	ldrb	r1, [r3, #29]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	f241 031f 	movw	r3, #4127	@ 0x101f
 800af16:	4413      	add	r3, r2
 800af18:	461a      	mov	r2, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f9a8 	bl	800b270 <SCSI_ProcessCmd>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	da06      	bge.n	800af34 <MSC_BOT_DataOut+0x64>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800af26:	2101      	movs	r1, #1
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f8e3 	bl	800b0f4 <MSC_BOT_SendCSW>
      break;
 800af2e:	e001      	b.n	800af34 <MSC_BOT_DataOut+0x64>
    return;
 800af30:	bf00      	nop
 800af32:	e000      	b.n	800af36 <MSC_BOT_DataOut+0x66>
      break;
 800af34:	bf00      	nop
  }
}
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	32b0      	adds	r2, #176	@ 0xb0
 800af4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af52:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	f000 8085 	beq.w	800b066 <MSC_BOT_CBW_Decode+0x12a>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800af6a:	6353      	str	r3, [r2, #52]	@ 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800af7a:	6393      	str	r3, [r2, #56]	@ 0x38

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800af7c:	4b3d      	ldr	r3, [pc, #244]	@ (800b074 <MSC_BOT_CBW_Decode+0x138>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f003 fccc 	bl	800e920 <USBD_LL_GetRxDataSize>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b1f      	cmp	r3, #31
 800af8c:	d118      	bne.n	800afc0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af94:	691b      	ldr	r3, [r3, #16]
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800af96:	4a38      	ldr	r2, [pc, #224]	@ (800b078 <MSC_BOT_CBW_Decode+0x13c>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d111      	bne.n	800afc0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afa2:	7f5b      	ldrb	r3, [r3, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d80b      	bhi.n	800afc0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afae:	7f9b      	ldrb	r3, [r3, #30]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d005      	beq.n	800afc0 <MSC_BOT_CBW_Decode+0x84>
      (hmsc->cbw.bCBLength > 16U))
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afba:	7f9b      	ldrb	r3, [r3, #30]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800afbc:	2b10      	cmp	r3, #16
 800afbe:	d90f      	bls.n	800afe0 <MSC_BOT_CBW_Decode+0xa4>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afc6:	7f59      	ldrb	r1, [r3, #29]
 800afc8:	2320      	movs	r3, #32
 800afca:	2205      	movs	r2, #5
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fea7 	bl	800bd20 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2202      	movs	r2, #2
 800afd6:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 f8cb 	bl	800b174 <MSC_BOT_Abort>
 800afde:	e045      	b.n	800b06c <MSC_BOT_CBW_Decode+0x130>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afe6:	7f59      	ldrb	r1, [r3, #29]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	f241 031f 	movw	r3, #4127	@ 0x101f
 800afee:	4413      	add	r3, r2
 800aff0:	461a      	mov	r2, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f93c 	bl	800b270 <SCSI_ProcessCmd>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	da0c      	bge.n	800b018 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	7a1b      	ldrb	r3, [r3, #8]
 800b002:	2b05      	cmp	r3, #5
 800b004:	d104      	bne.n	800b010 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b006:	2101      	movs	r1, #1
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f873 	bl	800b0f4 <MSC_BOT_SendCSW>
 800b00e:	e02d      	b.n	800b06c <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f8af 	bl	800b174 <MSC_BOT_Abort>
 800b016:	e029      	b.n	800b06c <MSC_BOT_CBW_Decode+0x130>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	7a1b      	ldrb	r3, [r3, #8]
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d024      	beq.n	800b06a <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b024:	2b01      	cmp	r3, #1
 800b026:	d020      	beq.n	800b06a <MSC_BOT_CBW_Decode+0x12e>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d01c      	beq.n	800b06a <MSC_BOT_CBW_Decode+0x12e>
    {
      if (hmsc->bot_data_length > 0U)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d009      	beq.n	800b04c <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f103 0110 	add.w	r1, r3, #16
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	461a      	mov	r2, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f819 	bl	800b07c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800b04a:	e00f      	b.n	800b06c <MSC_BOT_CBW_Decode+0x130>
      }
      else if (hmsc->bot_data_length == 0U)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d104      	bne.n	800b05e <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b054:	2100      	movs	r1, #0
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f84c 	bl	800b0f4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800b05c:	e006      	b.n	800b06c <MSC_BOT_CBW_Decode+0x130>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f888 	bl	800b174 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800b064:	e002      	b.n	800b06c <MSC_BOT_CBW_Decode+0x130>
    return;
 800b066:	bf00      	nop
 800b068:	e000      	b.n	800b06c <MSC_BOT_CBW_Decode+0x130>
      }
    }
    else
    {
      return;
 800b06a:	bf00      	nop
    }
  }
}
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	24000073 	.word	0x24000073
 800b078:	43425355 	.word	0x43425355

0800b07c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	32b0      	adds	r2, #176	@ 0xb0
 800b092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b096:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d023      	beq.n	800b0e6 <MSC_BOT_SendData+0x6a>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	bf28      	it	cs
 800b0ac:	4613      	movcs	r3, r2
 800b0ae:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	697a      	ldr	r2, [r7, #20]
 800b0be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b0c2:	6393      	str	r3, [r2, #56]	@ 0x38
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2204      	movs	r2, #4
 800b0d4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800b0d6:	4b06      	ldr	r3, [pc, #24]	@ (800b0f0 <MSC_BOT_SendData+0x74>)
 800b0d8:	7819      	ldrb	r1, [r3, #0]
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f003 fbdc 	bl	800e89c <USBD_LL_Transmit>
 800b0e4:	e000      	b.n	800b0e8 <MSC_BOT_SendData+0x6c>
    return;
 800b0e6:	bf00      	nop
}
 800b0e8:	3718      	adds	r7, #24
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	24000072 	.word	0x24000072

0800b0f4 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	32b0      	adds	r2, #176	@ 0xb0
 800b10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b10e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d024      	beq.n	800b160 <MSC_BOT_SendCSW+0x6c>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b11c:	461a      	mov	r2, r3
 800b11e:	4b12      	ldr	r3, [pc, #72]	@ (800b168 <MSC_BOT_SendCSW+0x74>)
 800b120:	6313      	str	r3, [r2, #48]	@ 0x30
  hmsc->csw.bStatus = CSW_Status;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b128:	461a      	mov	r2, r3
 800b12a:	78fb      	ldrb	r3, [r7, #3]
 800b12c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  hmsc->bot_state = USBD_BOT_IDLE;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2200      	movs	r2, #0
 800b134:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b136:	4b0d      	ldr	r3, [pc, #52]	@ (800b16c <MSC_BOT_SendCSW+0x78>)
 800b138:	7819      	ldrb	r1, [r3, #0]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f241 0230 	movw	r2, #4144	@ 0x1030
 800b140:	441a      	add	r2, r3
 800b142:	230d      	movs	r3, #13
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f003 fba9 	bl	800e89c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b14a:	4b09      	ldr	r3, [pc, #36]	@ (800b170 <MSC_BOT_SendCSW+0x7c>)
 800b14c:	7819      	ldrb	r1, [r3, #0]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f241 0210 	movw	r2, #4112	@ 0x1010
 800b154:	441a      	add	r2, r3
 800b156:	231f      	movs	r3, #31
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f003 fbc0 	bl	800e8de <USBD_LL_PrepareReceive>
 800b15e:	e000      	b.n	800b162 <MSC_BOT_SendCSW+0x6e>
    return;
 800b160:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b162:	3710      	adds	r7, #16
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	53425355 	.word	0x53425355
 800b16c:	24000072 	.word	0x24000072
 800b170:	24000073 	.word	0x24000073

0800b174 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	32b0      	adds	r2, #176	@ 0xb0
 800b186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b18a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d02c      	beq.n	800b1ec <MSC_BOT_Abort+0x78>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b198:	7f1b      	ldrb	r3, [r3, #28]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10f      	bne.n	800b1be <MSC_BOT_Abort+0x4a>
      (hmsc->cbw.dDataLength != 0U) &&
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1a4:	699b      	ldr	r3, [r3, #24]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d009      	beq.n	800b1be <MSC_BOT_Abort+0x4a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d105      	bne.n	800b1be <MSC_BOT_Abort+0x4a>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b1b2:	4b10      	ldr	r3, [pc, #64]	@ (800b1f4 <MSC_BOT_Abort+0x80>)
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f003 fae6 	bl	800e78a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b1be:	4b0e      	ldr	r3, [pc, #56]	@ (800b1f8 <MSC_BOT_Abort+0x84>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f003 fae0 	bl	800e78a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	7a5b      	ldrb	r3, [r3, #9]
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d10d      	bne.n	800b1ee <MSC_BOT_Abort+0x7a>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b1d2:	4b09      	ldr	r3, [pc, #36]	@ (800b1f8 <MSC_BOT_Abort+0x84>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f003 fad6 	bl	800e78a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b1de:	4b05      	ldr	r3, [pc, #20]	@ (800b1f4 <MSC_BOT_Abort+0x80>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f003 fad0 	bl	800e78a <USBD_LL_StallEP>
 800b1ea:	e000      	b.n	800b1ee <MSC_BOT_Abort+0x7a>
    return;
 800b1ec:	bf00      	nop
  }
}
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	24000073 	.word	0x24000073
 800b1f8:	24000072 	.word	0x24000072

0800b1fc <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	32b0      	adds	r2, #176	@ 0xb0
 800b212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b216:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d01d      	beq.n	800b25a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	7a5b      	ldrb	r3, [r3, #9]
 800b222:	2b02      	cmp	r3, #2
 800b224:	d10c      	bne.n	800b240 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b226:	4b10      	ldr	r3, [pc, #64]	@ (800b268 <MSC_BOT_CplClrFeature+0x6c>)
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	4619      	mov	r1, r3
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f003 faac 	bl	800e78a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b232:	4b0e      	ldr	r3, [pc, #56]	@ (800b26c <MSC_BOT_CplClrFeature+0x70>)
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f003 faa6 	bl	800e78a <USBD_LL_StallEP>
 800b23e:	e00f      	b.n	800b260 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800b240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b244:	2b00      	cmp	r3, #0
 800b246:	da0a      	bge.n	800b25e <MSC_BOT_CplClrFeature+0x62>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	7a5b      	ldrb	r3, [r3, #9]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d006      	beq.n	800b25e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b250:	2101      	movs	r1, #1
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7ff ff4e 	bl	800b0f4 <MSC_BOT_SendCSW>
 800b258:	e002      	b.n	800b260 <MSC_BOT_CplClrFeature+0x64>
    return;
 800b25a:	bf00      	nop
 800b25c:	e000      	b.n	800b260 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800b25e:	bf00      	nop
  }
}
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	24000072 	.word	0x24000072
 800b26c:	24000073 	.word	0x24000073

0800b270 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	460b      	mov	r3, r1
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	32b0      	adds	r2, #176	@ 0xb0
 800b288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d102      	bne.n	800b29a <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800b294:	f04f 33ff 	mov.w	r3, #4294967295
 800b298:	e168      	b.n	800b56c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	2baa      	cmp	r3, #170	@ 0xaa
 800b2a0:	f000 8144 	beq.w	800b52c <SCSI_ProcessCmd+0x2bc>
 800b2a4:	2baa      	cmp	r3, #170	@ 0xaa
 800b2a6:	f300 8153 	bgt.w	800b550 <SCSI_ProcessCmd+0x2e0>
 800b2aa:	2ba8      	cmp	r3, #168	@ 0xa8
 800b2ac:	f000 812c 	beq.w	800b508 <SCSI_ProcessCmd+0x298>
 800b2b0:	2ba8      	cmp	r3, #168	@ 0xa8
 800b2b2:	f300 814d 	bgt.w	800b550 <SCSI_ProcessCmd+0x2e0>
 800b2b6:	2b5a      	cmp	r3, #90	@ 0x5a
 800b2b8:	f300 80c0 	bgt.w	800b43c <SCSI_ProcessCmd+0x1cc>
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f2c0 8147 	blt.w	800b550 <SCSI_ProcessCmd+0x2e0>
 800b2c2:	2b5a      	cmp	r3, #90	@ 0x5a
 800b2c4:	f200 8144 	bhi.w	800b550 <SCSI_ProcessCmd+0x2e0>
 800b2c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b2d0 <SCSI_ProcessCmd+0x60>)
 800b2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ce:	bf00      	nop
 800b2d0:	0800b443 	.word	0x0800b443
 800b2d4:	0800b551 	.word	0x0800b551
 800b2d8:	0800b551 	.word	0x0800b551
 800b2dc:	0800b455 	.word	0x0800b455
 800b2e0:	0800b551 	.word	0x0800b551
 800b2e4:	0800b551 	.word	0x0800b551
 800b2e8:	0800b551 	.word	0x0800b551
 800b2ec:	0800b551 	.word	0x0800b551
 800b2f0:	0800b551 	.word	0x0800b551
 800b2f4:	0800b551 	.word	0x0800b551
 800b2f8:	0800b551 	.word	0x0800b551
 800b2fc:	0800b551 	.word	0x0800b551
 800b300:	0800b551 	.word	0x0800b551
 800b304:	0800b551 	.word	0x0800b551
 800b308:	0800b551 	.word	0x0800b551
 800b30c:	0800b551 	.word	0x0800b551
 800b310:	0800b551 	.word	0x0800b551
 800b314:	0800b551 	.word	0x0800b551
 800b318:	0800b467 	.word	0x0800b467
 800b31c:	0800b551 	.word	0x0800b551
 800b320:	0800b551 	.word	0x0800b551
 800b324:	0800b551 	.word	0x0800b551
 800b328:	0800b551 	.word	0x0800b551
 800b32c:	0800b551 	.word	0x0800b551
 800b330:	0800b551 	.word	0x0800b551
 800b334:	0800b551 	.word	0x0800b551
 800b338:	0800b49d 	.word	0x0800b49d
 800b33c:	0800b479 	.word	0x0800b479
 800b340:	0800b551 	.word	0x0800b551
 800b344:	0800b551 	.word	0x0800b551
 800b348:	0800b48b 	.word	0x0800b48b
 800b34c:	0800b551 	.word	0x0800b551
 800b350:	0800b551 	.word	0x0800b551
 800b354:	0800b551 	.word	0x0800b551
 800b358:	0800b551 	.word	0x0800b551
 800b35c:	0800b4c1 	.word	0x0800b4c1
 800b360:	0800b551 	.word	0x0800b551
 800b364:	0800b4d3 	.word	0x0800b4d3
 800b368:	0800b551 	.word	0x0800b551
 800b36c:	0800b551 	.word	0x0800b551
 800b370:	0800b4f7 	.word	0x0800b4f7
 800b374:	0800b551 	.word	0x0800b551
 800b378:	0800b51b 	.word	0x0800b51b
 800b37c:	0800b551 	.word	0x0800b551
 800b380:	0800b551 	.word	0x0800b551
 800b384:	0800b551 	.word	0x0800b551
 800b388:	0800b551 	.word	0x0800b551
 800b38c:	0800b53f 	.word	0x0800b53f
 800b390:	0800b551 	.word	0x0800b551
 800b394:	0800b551 	.word	0x0800b551
 800b398:	0800b551 	.word	0x0800b551
 800b39c:	0800b551 	.word	0x0800b551
 800b3a0:	0800b551 	.word	0x0800b551
 800b3a4:	0800b551 	.word	0x0800b551
 800b3a8:	0800b551 	.word	0x0800b551
 800b3ac:	0800b551 	.word	0x0800b551
 800b3b0:	0800b551 	.word	0x0800b551
 800b3b4:	0800b551 	.word	0x0800b551
 800b3b8:	0800b551 	.word	0x0800b551
 800b3bc:	0800b551 	.word	0x0800b551
 800b3c0:	0800b551 	.word	0x0800b551
 800b3c4:	0800b551 	.word	0x0800b551
 800b3c8:	0800b551 	.word	0x0800b551
 800b3cc:	0800b551 	.word	0x0800b551
 800b3d0:	0800b551 	.word	0x0800b551
 800b3d4:	0800b551 	.word	0x0800b551
 800b3d8:	0800b551 	.word	0x0800b551
 800b3dc:	0800b551 	.word	0x0800b551
 800b3e0:	0800b551 	.word	0x0800b551
 800b3e4:	0800b551 	.word	0x0800b551
 800b3e8:	0800b551 	.word	0x0800b551
 800b3ec:	0800b551 	.word	0x0800b551
 800b3f0:	0800b551 	.word	0x0800b551
 800b3f4:	0800b551 	.word	0x0800b551
 800b3f8:	0800b551 	.word	0x0800b551
 800b3fc:	0800b551 	.word	0x0800b551
 800b400:	0800b551 	.word	0x0800b551
 800b404:	0800b551 	.word	0x0800b551
 800b408:	0800b551 	.word	0x0800b551
 800b40c:	0800b551 	.word	0x0800b551
 800b410:	0800b551 	.word	0x0800b551
 800b414:	0800b551 	.word	0x0800b551
 800b418:	0800b551 	.word	0x0800b551
 800b41c:	0800b551 	.word	0x0800b551
 800b420:	0800b551 	.word	0x0800b551
 800b424:	0800b551 	.word	0x0800b551
 800b428:	0800b551 	.word	0x0800b551
 800b42c:	0800b551 	.word	0x0800b551
 800b430:	0800b551 	.word	0x0800b551
 800b434:	0800b551 	.word	0x0800b551
 800b438:	0800b4af 	.word	0x0800b4af
 800b43c:	2b9e      	cmp	r3, #158	@ 0x9e
 800b43e:	d051      	beq.n	800b4e4 <SCSI_ProcessCmd+0x274>
 800b440:	e086      	b.n	800b550 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800b442:	7afb      	ldrb	r3, [r7, #11]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	4619      	mov	r1, r3
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 f893 	bl	800b574 <SCSI_TestUnitReady>
 800b44e:	4603      	mov	r3, r0
 800b450:	75fb      	strb	r3, [r7, #23]
      break;
 800b452:	e089      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800b454:	7afb      	ldrb	r3, [r7, #11]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	4619      	mov	r1, r3
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f000 fbc6 	bl	800bbec <SCSI_RequestSense>
 800b460:	4603      	mov	r3, r0
 800b462:	75fb      	strb	r3, [r7, #23]
      break;
 800b464:	e080      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800b466:	7afb      	ldrb	r3, [r7, #11]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	4619      	mov	r1, r3
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f000 f8df 	bl	800b630 <SCSI_Inquiry>
 800b472:	4603      	mov	r3, r0
 800b474:	75fb      	strb	r3, [r7, #23]
      break;
 800b476:	e077      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800b478:	7afb      	ldrb	r3, [r7, #11]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	4619      	mov	r1, r3
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 fcaa 	bl	800bdd8 <SCSI_StartStopUnit>
 800b484:	4603      	mov	r3, r0
 800b486:	75fb      	strb	r3, [r7, #23]
      break;
 800b488:	e06e      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800b48a:	7afb      	ldrb	r3, [r7, #11]
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	4619      	mov	r1, r3
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f000 fcfe 	bl	800be92 <SCSI_AllowPreventRemovable>
 800b496:	4603      	mov	r3, r0
 800b498:	75fb      	strb	r3, [r7, #23]
      break;
 800b49a:	e065      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800b49c:	7afb      	ldrb	r3, [r7, #11]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f000 fb16 	bl	800bad4 <SCSI_ModeSense6>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b4ac:	e05c      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800b4ae:	7afb      	ldrb	r3, [r7, #11]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 fb53 	bl	800bb60 <SCSI_ModeSense10>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	75fb      	strb	r3, [r7, #23]
      break;
 800b4be:	e053      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800b4c0:	7afb      	ldrb	r3, [r7, #11]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f000 fa86 	bl	800b9d8 <SCSI_ReadFormatCapacity>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	75fb      	strb	r3, [r7, #23]
      break;
 800b4d0:	e04a      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800b4d2:	7afb      	ldrb	r3, [r7, #11]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f000 f929 	bl	800b730 <SCSI_ReadCapacity10>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b4e2:	e041      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800b4e4:	7afb      	ldrb	r3, [r7, #11]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f000 f9af 	bl	800b84e <SCSI_ReadCapacity16>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b4f4:	e038      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800b4f6:	7afb      	ldrb	r3, [r7, #11]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f000 fcf9 	bl	800bef4 <SCSI_Read10>
 800b502:	4603      	mov	r3, r0
 800b504:	75fb      	strb	r3, [r7, #23]
      break;
 800b506:	e02f      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800b508:	7afb      	ldrb	r3, [r7, #11]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	4619      	mov	r1, r3
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f000 fda7 	bl	800c062 <SCSI_Read12>
 800b514:	4603      	mov	r3, r0
 800b516:	75fb      	strb	r3, [r7, #23]
      break;
 800b518:	e026      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800b51a:	7afb      	ldrb	r3, [r7, #11]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	4619      	mov	r1, r3
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 fe5f 	bl	800c1e4 <SCSI_Write10>
 800b526:	4603      	mov	r3, r0
 800b528:	75fb      	strb	r3, [r7, #23]
      break;
 800b52a:	e01d      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800b52c:	7afb      	ldrb	r3, [r7, #11]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	4619      	mov	r1, r3
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f000 ff3a 	bl	800c3ac <SCSI_Write12>
 800b538:	4603      	mov	r3, r0
 800b53a:	75fb      	strb	r3, [r7, #23]
      break;
 800b53c:	e014      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800b53e:	7afb      	ldrb	r3, [r7, #11]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	4619      	mov	r1, r3
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f001 f825 	bl	800c594 <SCSI_Verify10>
 800b54a:	4603      	mov	r3, r0
 800b54c:	75fb      	strb	r3, [r7, #23]
      break;
 800b54e:	e00b      	b.n	800b568 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800b550:	7af9      	ldrb	r1, [r7, #11]
 800b552:	2320      	movs	r3, #32
 800b554:	2205      	movs	r2, #5
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f000 fbe2 	bl	800bd20 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	2202      	movs	r2, #2
 800b560:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800b562:	23ff      	movs	r3, #255	@ 0xff
 800b564:	75fb      	strb	r3, [r7, #23]
      break;
 800b566:	bf00      	nop
  }

  return ret;
 800b568:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	460b      	mov	r3, r1
 800b57e:	607a      	str	r2, [r7, #4]
 800b580:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	32b0      	adds	r2, #176	@ 0xb0
 800b58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b590:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d102      	bne.n	800b59e <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800b598:	f04f 33ff 	mov.w	r3, #4294967295
 800b59c:	e043      	b.n	800b626 <SCSI_TestUnitReady+0xb2>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00b      	beq.n	800b5c2 <SCSI_TestUnitReady+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5b0:	7f59      	ldrb	r1, [r3, #29]
 800b5b2:	2320      	movs	r3, #32
 800b5b4:	2205      	movs	r2, #5
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f000 fbb2 	bl	800bd20 <SCSI_SenseCode>

    return -1;
 800b5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c0:	e031      	b.n	800b626 <SCSI_TestUnitReady+0xb2>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5c8:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d10b      	bne.n	800b5e8 <SCSI_TestUnitReady+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b5d0:	7af9      	ldrb	r1, [r7, #11]
 800b5d2:	233a      	movs	r3, #58	@ 0x3a
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f000 fba2 	bl	800bd20 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	2205      	movs	r2, #5
 800b5e0:	721a      	strb	r2, [r3, #8]
    return -1;
 800b5e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e6:	e01e      	b.n	800b626 <SCSI_TestUnitReady+0xb2>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	33b0      	adds	r3, #176	@ 0xb0
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	7afa      	ldrb	r2, [r7, #11]
 800b5fc:	4610      	mov	r0, r2
 800b5fe:	4798      	blx	r3
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00b      	beq.n	800b61e <SCSI_TestUnitReady+0xaa>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b606:	7af9      	ldrb	r1, [r7, #11]
 800b608:	233a      	movs	r3, #58	@ 0x3a
 800b60a:	2202      	movs	r2, #2
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fb87 	bl	800bd20 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2205      	movs	r2, #5
 800b616:	721a      	strb	r2, [r3, #8]

    return -1;
 800b618:	f04f 33ff 	mov.w	r3, #4294967295
 800b61c:	e003      	b.n	800b626 <SCSI_TestUnitReady+0xb2>
  }
  hmsc->bot_data_length = 0U;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2200      	movs	r2, #0
 800b622:	60da      	str	r2, [r3, #12]

  return 0;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
	...

0800b630 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b088      	sub	sp, #32
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	460b      	mov	r3, r1
 800b63a:	607a      	str	r2, [r7, #4]
 800b63c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	32b0      	adds	r2, #176	@ 0xb0
 800b648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d102      	bne.n	800b65a <SCSI_Inquiry+0x2a>
  {
    return -1;
 800b654:	f04f 33ff 	mov.w	r3, #4294967295
 800b658:	e061      	b.n	800b71e <SCSI_Inquiry+0xee>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d10b      	bne.n	800b67e <SCSI_Inquiry+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b66c:	7f59      	ldrb	r1, [r3, #29]
 800b66e:	2320      	movs	r3, #32
 800b670:	2205      	movs	r2, #5
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f000 fb54 	bl	800bd20 <SCSI_SenseCode>
    return -1;
 800b678:	f04f 33ff 	mov.w	r3, #4294967295
 800b67c:	e04f      	b.n	800b71e <SCSI_Inquiry+0xee>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	3301      	adds	r3, #1
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	f003 0301 	and.w	r3, r3, #1
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d021      	beq.n	800b6d0 <SCSI_Inquiry+0xa0>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	3302      	adds	r3, #2
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d105      	bne.n	800b6a2 <SCSI_Inquiry+0x72>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800b696:	2206      	movs	r2, #6
 800b698:	4923      	ldr	r1, [pc, #140]	@ (800b728 <SCSI_Inquiry+0xf8>)
 800b69a:	69b8      	ldr	r0, [r7, #24]
 800b69c:	f001 f926 	bl	800c8ec <SCSI_UpdateBotData>
 800b6a0:	e03c      	b.n	800b71c <SCSI_Inquiry+0xec>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	3302      	adds	r3, #2
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	2b80      	cmp	r3, #128	@ 0x80
 800b6aa:	d105      	bne.n	800b6b8 <SCSI_Inquiry+0x88>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800b6ac:	2208      	movs	r2, #8
 800b6ae:	491f      	ldr	r1, [pc, #124]	@ (800b72c <SCSI_Inquiry+0xfc>)
 800b6b0:	69b8      	ldr	r0, [r7, #24]
 800b6b2:	f001 f91b 	bl	800c8ec <SCSI_UpdateBotData>
 800b6b6:	e031      	b.n	800b71c <SCSI_Inquiry+0xec>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6be:	7f59      	ldrb	r1, [r3, #29]
 800b6c0:	2324      	movs	r3, #36	@ 0x24
 800b6c2:	2205      	movs	r2, #5
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f000 fb2b 	bl	800bd20 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800b6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ce:	e026      	b.n	800b71e <SCSI_Inquiry+0xee>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	33b0      	adds	r3, #176	@ 0xb0
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800b6e0:	69d9      	ldr	r1, [r3, #28]
 800b6e2:	7afa      	ldrb	r2, [r7, #11]
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	00db      	lsls	r3, r3, #3
 800b6e8:	4413      	add	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800b6ec:	440b      	add	r3, r1
 800b6ee:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	3305      	adds	r3, #5
 800b6f8:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	461a      	mov	r2, r3
 800b702:	8bfb      	ldrh	r3, [r7, #30]
 800b704:	4293      	cmp	r3, r2
 800b706:	d303      	bcc.n	800b710 <SCSI_Inquiry+0xe0>
    {
      len = params[4];
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3304      	adds	r3, #4
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800b710:	8bfb      	ldrh	r3, [r7, #30]
 800b712:	461a      	mov	r2, r3
 800b714:	6979      	ldr	r1, [r7, #20]
 800b716:	69b8      	ldr	r0, [r7, #24]
 800b718:	f001 f8e8 	bl	800c8ec <SCSI_UpdateBotData>
  }

  return 0;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3720      	adds	r7, #32
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	24000074 	.word	0x24000074
 800b72c:	2400007c 	.word	0x2400007c

0800b730 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b730:	b590      	push	{r4, r7, lr}
 800b732:	b087      	sub	sp, #28
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	460b      	mov	r3, r1
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	32b0      	adds	r2, #176	@ 0xb0
 800b748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d102      	bne.n	800b75a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800b754:	f04f 33ff 	mov.w	r3, #4294967295
 800b758:	e075      	b.n	800b846 <SCSI_ReadCapacity10+0x116>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	33b0      	adds	r3, #176	@ 0xb0
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	685c      	ldr	r4, [r3, #4]
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	f241 0368 	movw	r3, #4200	@ 0x1068
 800b772:	4413      	add	r3, r2
 800b774:	6979      	ldr	r1, [r7, #20]
 800b776:	f241 0264 	movw	r2, #4196	@ 0x1064
 800b77a:	440a      	add	r2, r1
 800b77c:	7af8      	ldrb	r0, [r7, #11]
 800b77e:	4619      	mov	r1, r3
 800b780:	47a0      	blx	r4
 800b782:	4603      	mov	r3, r0
 800b784:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b786:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d106      	bne.n	800b79c <SCSI_ReadCapacity10+0x6c>
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b794:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800b798:	2b02      	cmp	r3, #2
 800b79a:	d108      	bne.n	800b7ae <SCSI_ReadCapacity10+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b79c:	7af9      	ldrb	r1, [r7, #11]
 800b79e:	233a      	movs	r3, #58	@ 0x3a
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f000 fabc 	bl	800bd20 <SCSI_SenseCode>
    return -1;
 800b7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ac:	e04b      	b.n	800b846 <SCSI_ReadCapacity10+0x116>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	0e1b      	lsrs	r3, r3, #24
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	0c1b      	lsrs	r3, r3, #16
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	0a1b      	lsrs	r3, r3, #8
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	b2da      	uxtb	r2, r3
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b800:	161b      	asrs	r3, r3, #24
 800b802:	b2da      	uxtb	r2, r3
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b80e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b812:	141b      	asrs	r3, r3, #16
 800b814:	b2da      	uxtb	r2, r3
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b820:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b824:	0a1b      	lsrs	r3, r3, #8
 800b826:	b29b      	uxth	r3, r3
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b834:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b838:	b2da      	uxtb	r2, r3
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2208      	movs	r2, #8
 800b842:	60da      	str	r2, [r3, #12]

  return 0;
 800b844:	2300      	movs	r3, #0

}
 800b846:	4618      	mov	r0, r3
 800b848:	371c      	adds	r7, #28
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd90      	pop	{r4, r7, pc}

0800b84e <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b84e:	b590      	push	{r4, r7, lr}
 800b850:	b089      	sub	sp, #36	@ 0x24
 800b852:	af00      	add	r7, sp, #0
 800b854:	60f8      	str	r0, [r7, #12]
 800b856:	460b      	mov	r3, r1
 800b858:	607a      	str	r2, [r7, #4]
 800b85a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	32b0      	adds	r2, #176	@ 0xb0
 800b866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d102      	bne.n	800b878 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800b872:	f04f 33ff 	mov.w	r3, #4294967295
 800b876:	e0ab      	b.n	800b9d0 <SCSI_ReadCapacity16+0x182>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	33b0      	adds	r3, #176	@ 0xb0
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	685c      	ldr	r4, [r3, #4]
 800b88a:	69ba      	ldr	r2, [r7, #24]
 800b88c:	f241 0368 	movw	r3, #4200	@ 0x1068
 800b890:	4413      	add	r3, r2
 800b892:	69b9      	ldr	r1, [r7, #24]
 800b894:	f241 0264 	movw	r2, #4196	@ 0x1064
 800b898:	440a      	add	r2, r1
 800b89a:	7af8      	ldrb	r0, [r7, #11]
 800b89c:	4619      	mov	r1, r3
 800b89e:	47a0      	blx	r4
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b8a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d106      	bne.n	800b8ba <SCSI_ReadCapacity16+0x6c>
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8b2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	d108      	bne.n	800b8cc <SCSI_ReadCapacity16+0x7e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b8ba:	7af9      	ldrb	r1, [r7, #11]
 800b8bc:	233a      	movs	r3, #58	@ 0x3a
 800b8be:	2202      	movs	r2, #2
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 fa2d 	bl	800bd20 <SCSI_SenseCode>
    return -1;
 800b8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ca:	e081      	b.n	800b9d0 <SCSI_ReadCapacity16+0x182>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	330a      	adds	r3, #10
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	330b      	adds	r3, #11
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b8dc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	330c      	adds	r3, #12
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b8e6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	320d      	adds	r2, #13
 800b8ec:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b8ee:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	61fb      	str	r3, [r7, #28]
 800b8f8:	e008      	b.n	800b90c <SCSI_ReadCapacity16+0xbe>
  {
    hmsc->bot_data[idx] = 0U;
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	4413      	add	r3, r2
 800b900:	3310      	adds	r3, #16
 800b902:	2200      	movs	r2, #0
 800b904:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	3301      	adds	r3, #1
 800b90a:	61fb      	str	r3, [r7, #28]
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	69fa      	ldr	r2, [r7, #28]
 800b912:	429a      	cmp	r2, r3
 800b914:	d3f1      	bcc.n	800b8fa <SCSI_ReadCapacity16+0xac>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b91c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b91e:	3b01      	subs	r3, #1
 800b920:	0e1b      	lsrs	r3, r3, #24
 800b922:	b2da      	uxtb	r2, r3
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b92e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b930:	3b01      	subs	r3, #1
 800b932:	0c1b      	lsrs	r3, r3, #16
 800b934:	b2da      	uxtb	r2, r3
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b940:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b942:	3b01      	subs	r3, #1
 800b944:	0a1b      	lsrs	r3, r3, #8
 800b946:	b2da      	uxtb	r2, r3
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b952:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b954:	b2db      	uxtb	r3, r3
 800b956:	3b01      	subs	r3, #1
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b964:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b968:	161b      	asrs	r3, r3, #24
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b976:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b97a:	141b      	asrs	r3, r3, #16
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b988:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b98c:	0a1b      	lsrs	r3, r3, #8
 800b98e:	b29b      	uxth	r3, r3
 800b990:	b2da      	uxtb	r2, r3
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b99c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	330a      	adds	r3, #10
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	330b      	adds	r3, #11
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b9b6:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	330c      	adds	r3, #12
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b9c0:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	320d      	adds	r2, #13
 800b9c6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b9c8:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	60da      	str	r2, [r3, #12]

  return 0;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3724      	adds	r7, #36	@ 0x24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd90      	pop	{r4, r7, pc}

0800b9d8 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b088      	sub	sp, #32
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	32b0      	adds	r2, #176	@ 0xb0
 800b9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d102      	bne.n	800ba02 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800b9fc:	f04f 33ff 	mov.w	r3, #4294967295
 800ba00:	e063      	b.n	800baca <SCSI_ReadFormatCapacity+0xf2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	33b0      	adds	r3, #176	@ 0xb0
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	f107 0214 	add.w	r2, r7, #20
 800ba18:	f107 0110 	add.w	r1, r7, #16
 800ba1c:	7af8      	ldrb	r0, [r7, #11]
 800ba1e:	4798      	blx	r3
 800ba20:	4603      	mov	r3, r0
 800ba22:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800ba24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d106      	bne.n	800ba3a <SCSI_ReadFormatCapacity+0x62>
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ba32:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d108      	bne.n	800ba4c <SCSI_ReadFormatCapacity+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ba3a:	7af9      	ldrb	r1, [r7, #11]
 800ba3c:	233a      	movs	r3, #58	@ 0x3a
 800ba3e:	2202      	movs	r2, #2
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f000 f96d 	bl	800bd20 <SCSI_SenseCode>
    return -1;
 800ba46:	f04f 33ff 	mov.w	r3, #4294967295
 800ba4a:	e03e      	b.n	800baca <SCSI_ReadFormatCapacity+0xf2>
  }

  for (i = 0U; i < 12U ; i++)
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	83fb      	strh	r3, [r7, #30]
 800ba50:	e007      	b.n	800ba62 <SCSI_ReadFormatCapacity+0x8a>
  {
    hmsc->bot_data[i] = 0U;
 800ba52:	8bfb      	ldrh	r3, [r7, #30]
 800ba54:	69ba      	ldr	r2, [r7, #24]
 800ba56:	4413      	add	r3, r2
 800ba58:	2200      	movs	r2, #0
 800ba5a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800ba5c:	8bfb      	ldrh	r3, [r7, #30]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	83fb      	strh	r3, [r7, #30]
 800ba62:	8bfb      	ldrh	r3, [r7, #30]
 800ba64:	2b0b      	cmp	r3, #11
 800ba66:	d9f4      	bls.n	800ba52 <SCSI_ReadFormatCapacity+0x7a>
  }

  hmsc->bot_data[3] = 0x08U;
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	2208      	movs	r2, #8
 800ba6c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	0e1b      	lsrs	r3, r3, #24
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	0c1b      	lsrs	r3, r3, #16
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	0a1b      	lsrs	r3, r3, #8
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	3b01      	subs	r3, #1
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	2202      	movs	r2, #2
 800baa2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800baa4:	8abb      	ldrh	r3, [r7, #20]
 800baa6:	141b      	asrs	r3, r3, #16
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800baae:	8abb      	ldrh	r3, [r7, #20]
 800bab0:	0a1b      	lsrs	r3, r3, #8
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800baba:	8abb      	ldrh	r3, [r7, #20]
 800babc:	b2da      	uxtb	r2, r3
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	220c      	movs	r2, #12
 800bac6:	60da      	str	r2, [r3, #12]

  return 0;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3720      	adds	r7, #32
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
	...

0800bad4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	460b      	mov	r3, r1
 800bade:	607a      	str	r2, [r7, #4]
 800bae0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	32b0      	adds	r2, #176	@ 0xb0
 800baec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800baf2:	2304      	movs	r3, #4
 800baf4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d102      	bne.n	800bb02 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800bafc:	f04f 33ff 	mov.w	r3, #4294967295
 800bb00:	e027      	b.n	800bb52 <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	33b0      	adds	r3, #176	@ 0xb0
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4413      	add	r3, r2
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	7afa      	ldrb	r2, [r7, #11]
 800bb16:	4610      	mov	r0, r2
 800bb18:	4798      	blx	r3
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d006      	beq.n	800bb2e <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800bb20:	4b0e      	ldr	r3, [pc, #56]	@ (800bb5c <SCSI_ModeSense6+0x88>)
 800bb22:	789b      	ldrb	r3, [r3, #2]
 800bb24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	4b0c      	ldr	r3, [pc, #48]	@ (800bb5c <SCSI_ModeSense6+0x88>)
 800bb2c:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	3304      	adds	r3, #4
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	461a      	mov	r2, r3
 800bb36:	8afb      	ldrh	r3, [r7, #22]
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d303      	bcc.n	800bb44 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	3304      	adds	r3, #4
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800bb44:	8afb      	ldrh	r3, [r7, #22]
 800bb46:	461a      	mov	r2, r3
 800bb48:	4904      	ldr	r1, [pc, #16]	@ (800bb5c <SCSI_ModeSense6+0x88>)
 800bb4a:	6938      	ldr	r0, [r7, #16]
 800bb4c:	f000 fece 	bl	800c8ec <SCSI_UpdateBotData>

  return 0;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3718      	adds	r7, #24
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	24000084 	.word	0x24000084

0800bb60 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	460b      	mov	r3, r1
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	32b0      	adds	r2, #176	@ 0xb0
 800bb78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb7c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800bb7e:	2308      	movs	r3, #8
 800bb80:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d102      	bne.n	800bb8e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800bb88:	f04f 33ff 	mov.w	r3, #4294967295
 800bb8c:	e027      	b.n	800bbde <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb94:	68fa      	ldr	r2, [r7, #12]
 800bb96:	33b0      	adds	r3, #176	@ 0xb0
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	4413      	add	r3, r2
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	7afa      	ldrb	r2, [r7, #11]
 800bba2:	4610      	mov	r0, r2
 800bba4:	4798      	blx	r3
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d006      	beq.n	800bbba <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800bbac:	4b0e      	ldr	r3, [pc, #56]	@ (800bbe8 <SCSI_ModeSense10+0x88>)
 800bbae:	78db      	ldrb	r3, [r3, #3]
 800bbb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bbb4:	b2da      	uxtb	r2, r3
 800bbb6:	4b0c      	ldr	r3, [pc, #48]	@ (800bbe8 <SCSI_ModeSense10+0x88>)
 800bbb8:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3308      	adds	r3, #8
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	8afb      	ldrh	r3, [r7, #22]
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d303      	bcc.n	800bbd0 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	3308      	adds	r3, #8
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800bbd0:	8afb      	ldrh	r3, [r7, #22]
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	4904      	ldr	r1, [pc, #16]	@ (800bbe8 <SCSI_ModeSense10+0x88>)
 800bbd6:	6938      	ldr	r0, [r7, #16]
 800bbd8:	f000 fe88 	bl	800c8ec <SCSI_UpdateBotData>

  return 0;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	24000088 	.word	0x24000088

0800bbec <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b086      	sub	sp, #24
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	607a      	str	r2, [r7, #4]
 800bbf8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	32b0      	adds	r2, #176	@ 0xb0
 800bc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc08:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d102      	bne.n	800bc16 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800bc10:	f04f 33ff 	mov.w	r3, #4294967295
 800bc14:	e080      	b.n	800bd18 <SCSI_RequestSense+0x12c>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10b      	bne.n	800bc3a <SCSI_RequestSense+0x4e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc28:	7f59      	ldrb	r1, [r3, #29]
 800bc2a:	2320      	movs	r3, #32
 800bc2c:	2205      	movs	r2, #5
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f000 f876 	bl	800bd20 <SCSI_SenseCode>
    return -1;
 800bc34:	f04f 33ff 	mov.w	r3, #4294967295
 800bc38:	e06e      	b.n	800bd18 <SCSI_RequestSense+0x12c>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	75fb      	strb	r3, [r7, #23]
 800bc3e:	e007      	b.n	800bc50 <SCSI_RequestSense+0x64>
  {
    hmsc->bot_data[i] = 0U;
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	4413      	add	r3, r2
 800bc46:	2200      	movs	r2, #0
 800bc48:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	75fb      	strb	r3, [r7, #23]
 800bc50:	7dfb      	ldrb	r3, [r7, #23]
 800bc52:	2b11      	cmp	r3, #17
 800bc54:	d9f4      	bls.n	800bc40 <SCSI_RequestSense+0x54>
  }

  hmsc->bot_data[0] = 0x70U;
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	2270      	movs	r2, #112	@ 0x70
 800bc5a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	220c      	movs	r2, #12
 800bc60:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc68:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc72:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d03f      	beq.n	800bcfa <SCSI_RequestSense+0x10e>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc80:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800bc84:	461a      	mov	r2, r3
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	f502 7202 	add.w	r2, r2, #520	@ 0x208
 800bc8c:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc9a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800bc9e:	693a      	ldr	r2, [r7, #16]
 800bca0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800bca4:	00db      	lsls	r3, r3, #3
 800bca6:	4413      	add	r3, r2
 800bca8:	791a      	ldrb	r2, [r3, #4]
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcb4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800bcbe:	00db      	lsls	r3, r3, #3
 800bcc0:	4413      	add	r3, r2
 800bcc2:	795a      	ldrb	r2, [r3, #5]
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcce:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcdc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bce6:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	d105      	bne.n	800bcfa <SCSI_RequestSense+0x10e>
    {
      hmsc->scsi_sense_head = 0U;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	2212      	movs	r2, #18
 800bcfe:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	3304      	adds	r3, #4
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	2b12      	cmp	r3, #18
 800bd08:	d805      	bhi.n	800bd16 <SCSI_RequestSense+0x12a>
  {
    hmsc->bot_data_length = params[4];
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	461a      	mov	r2, r3
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3718      	adds	r7, #24
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	4608      	mov	r0, r1
 800bd2a:	4611      	mov	r1, r2
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	4603      	mov	r3, r0
 800bd30:	70fb      	strb	r3, [r7, #3]
 800bd32:	460b      	mov	r3, r1
 800bd34:	70bb      	strb	r3, [r7, #2]
 800bd36:	4613      	mov	r3, r2
 800bd38:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	32b0      	adds	r2, #176	@ 0xb0
 800bd44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd48:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d03d      	beq.n	800bdcc <SCSI_SenseCode+0xac>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd56:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f502 7202 	add.w	r2, r2, #520	@ 0x208
 800bd62:	78b9      	ldrb	r1, [r7, #2]
 800bd64:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd6e:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800bd78:	00db      	lsls	r3, r3, #3
 800bd7a:	4413      	add	r3, r2
 800bd7c:	787a      	ldrb	r2, [r7, #1]
 800bd7e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd86:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800bd90:	00db      	lsls	r3, r3, #3
 800bd92:	4413      	add	r3, r2
 800bd94:	2200      	movs	r2, #0
 800bd96:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd9e:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800bda2:	3301      	adds	r3, #1
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdac:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdb6:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800bdba:	2b04      	cmp	r3, #4
 800bdbc:	d107      	bne.n	800bdce <SCSI_SenseCode+0xae>
  {
    hmsc->scsi_sense_tail = 0U;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 800bdca:	e000      	b.n	800bdce <SCSI_SenseCode+0xae>
    return;
 800bdcc:	bf00      	nop
  }
}
 800bdce:	3714      	adds	r7, #20
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	460b      	mov	r3, r1
 800bde2:	607a      	str	r2, [r7, #4]
 800bde4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	32b0      	adds	r2, #176	@ 0xb0
 800bdf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d102      	bne.n	800be02 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800bdfc:	f04f 33ff 	mov.w	r3, #4294967295
 800be00:	e043      	b.n	800be8a <SCSI_StartStopUnit+0xb2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be08:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d10f      	bne.n	800be30 <SCSI_StartStopUnit+0x58>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	3304      	adds	r3, #4
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	f003 0303 	and.w	r3, r3, #3
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d108      	bne.n	800be30 <SCSI_StartStopUnit+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800be1e:	7af9      	ldrb	r1, [r7, #11]
 800be20:	2324      	movs	r3, #36	@ 0x24
 800be22:	2205      	movs	r2, #5
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f7ff ff7b 	bl	800bd20 <SCSI_SenseCode>

    return -1;
 800be2a:	f04f 33ff 	mov.w	r3, #4294967295
 800be2e:	e02c      	b.n	800be8a <SCSI_StartStopUnit+0xb2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3304      	adds	r3, #4
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	f003 0303 	and.w	r3, r3, #3
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d106      	bne.n	800be4c <SCSI_StartStopUnit+0x74>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be44:	2200      	movs	r2, #0
 800be46:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 800be4a:	e01a      	b.n	800be82 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	3304      	adds	r3, #4
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	f003 0303 	and.w	r3, r3, #3
 800be56:	2b02      	cmp	r3, #2
 800be58:	d106      	bne.n	800be68 <SCSI_StartStopUnit+0x90>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be60:	2202      	movs	r2, #2
 800be62:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 800be66:	e00c      	b.n	800be82 <SCSI_StartStopUnit+0xaa>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3304      	adds	r3, #4
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	f003 0303 	and.w	r3, r3, #3
 800be72:	2b03      	cmp	r3, #3
 800be74:	d105      	bne.n	800be82 <SCSI_StartStopUnit+0xaa>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2200      	movs	r2, #0
 800be86:	60da      	str	r2, [r3, #12]

  return 0;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3718      	adds	r7, #24
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800be92:	b480      	push	{r7}
 800be94:	b087      	sub	sp, #28
 800be96:	af00      	add	r7, sp, #0
 800be98:	60f8      	str	r0, [r7, #12]
 800be9a:	460b      	mov	r3, r1
 800be9c:	607a      	str	r2, [r7, #4]
 800be9e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	32b0      	adds	r2, #176	@ 0xb0
 800beaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beae:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d102      	bne.n	800bebc <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800beb6:	f04f 33ff 	mov.w	r3, #4294967295
 800beba:	e015      	b.n	800bee8 <SCSI_AllowPreventRemovable+0x56>
  }

  if (params[4] == 0U)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	3304      	adds	r3, #4
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d106      	bne.n	800bed4 <SCSI_AllowPreventRemovable+0x42>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800becc:	2200      	movs	r2, #0
 800bece:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 800bed2:	e005      	b.n	800bee0 <SCSI_AllowPreventRemovable+0x4e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  }

  hmsc->bot_data_length = 0U;
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	2200      	movs	r2, #0
 800bee4:	60da      	str	r2, [r3, #12]

  return 0;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	371c      	adds	r7, #28
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	460b      	mov	r3, r1
 800befe:	607a      	str	r2, [r7, #4]
 800bf00:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	32b0      	adds	r2, #176	@ 0xb0
 800bf0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf10:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d102      	bne.n	800bf1e <SCSI_Read10+0x2a>
  {
    return -1;
 800bf18:	f04f 33ff 	mov.w	r3, #4294967295
 800bf1c:	e09d      	b.n	800c05a <SCSI_Read10+0x166>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	7a1b      	ldrb	r3, [r3, #8]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f040 808f 	bne.w	800c046 <SCSI_Read10+0x152>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf2e:	7f1b      	ldrb	r3, [r3, #28]
 800bf30:	b25b      	sxtb	r3, r3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	db0b      	blt.n	800bf4e <SCSI_Read10+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf3c:	7f59      	ldrb	r1, [r3, #29]
 800bf3e:	2320      	movs	r3, #32
 800bf40:	2205      	movs	r2, #5
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f7ff feec 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800bf48:	f04f 33ff 	mov.w	r3, #4294967295
 800bf4c:	e085      	b.n	800c05a <SCSI_Read10+0x166>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf54:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	d108      	bne.n	800bf6e <SCSI_Read10+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bf5c:	7af9      	ldrb	r1, [r7, #11]
 800bf5e:	233a      	movs	r3, #58	@ 0x3a
 800bf60:	2202      	movs	r2, #2
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f7ff fedc 	bl	800bd20 <SCSI_SenseCode>

      return -1;
 800bf68:	f04f 33ff 	mov.w	r3, #4294967295
 800bf6c:	e075      	b.n	800c05a <SCSI_Read10+0x166>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	33b0      	adds	r3, #176	@ 0xb0
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	4413      	add	r3, r2
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	7afa      	ldrb	r2, [r7, #11]
 800bf82:	4610      	mov	r0, r2
 800bf84:	4798      	blx	r3
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d008      	beq.n	800bf9e <SCSI_Read10+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bf8c:	7af9      	ldrb	r1, [r7, #11]
 800bf8e:	233a      	movs	r3, #58	@ 0x3a
 800bf90:	2202      	movs	r2, #2
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f7ff fec4 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800bf98:	f04f 33ff 	mov.w	r3, #4294967295
 800bf9c:	e05d      	b.n	800c05a <SCSI_Read10+0x166>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	3302      	adds	r3, #2
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	3303      	adds	r3, #3
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bfae:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	3304      	adds	r3, #4
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800bfb8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	3205      	adds	r2, #5
 800bfbe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800bfc0:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bfc8:	66d3      	str	r3, [r2, #108]	@ 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	3307      	adds	r3, #7
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	021b      	lsls	r3, r3, #8
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	3208      	adds	r2, #8
 800bfd6:	7812      	ldrb	r2, [r2, #0]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800bfe0:	6713      	str	r3, [r2, #112]	@ 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfe8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bff2:	7af9      	ldrb	r1, [r7, #11]
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f000 fb0c 	bl	800c612 <SCSI_CheckAddressRange>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	da02      	bge.n	800c006 <SCSI_Read10+0x112>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c000:	f04f 33ff 	mov.w	r3, #4294967295
 800c004:	e029      	b.n	800c05a <SCSI_Read10+0x166>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c00c:	699a      	ldr	r2, [r3, #24]
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c016:	6979      	ldr	r1, [r7, #20]
 800c018:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800c01c:	f8b1 1064 	ldrh.w	r1, [r1, #100]	@ 0x64
 800c020:	fb01 f303 	mul.w	r3, r1, r3
 800c024:	429a      	cmp	r2, r3
 800c026:	d00b      	beq.n	800c040 <SCSI_Read10+0x14c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c02e:	7f59      	ldrb	r1, [r3, #29]
 800c030:	2320      	movs	r3, #32
 800c032:	2205      	movs	r2, #5
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f7ff fe73 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c03a:	f04f 33ff 	mov.w	r3, #4294967295
 800c03e:	e00c      	b.n	800c05a <SCSI_Read10+0x166>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	2202      	movs	r2, #2
 800c044:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c04c:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c04e:	7afb      	ldrb	r3, [r7, #11]
 800c050:	4619      	mov	r1, r3
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f000 fb0a 	bl	800c66c <SCSI_ProcessRead>
 800c058:	4603      	mov	r3, r0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3718      	adds	r7, #24
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b086      	sub	sp, #24
 800c066:	af00      	add	r7, sp, #0
 800c068:	60f8      	str	r0, [r7, #12]
 800c06a:	460b      	mov	r3, r1
 800c06c:	607a      	str	r2, [r7, #4]
 800c06e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	32b0      	adds	r2, #176	@ 0xb0
 800c07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d102      	bne.n	800c08c <SCSI_Read12+0x2a>
  {
    return -1;
 800c086:	f04f 33ff 	mov.w	r3, #4294967295
 800c08a:	e0a7      	b.n	800c1dc <SCSI_Read12+0x17a>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	7a1b      	ldrb	r3, [r3, #8]
 800c090:	2b00      	cmp	r3, #0
 800c092:	f040 8099 	bne.w	800c1c8 <SCSI_Read12+0x166>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c09c:	7f1b      	ldrb	r3, [r3, #28]
 800c09e:	b25b      	sxtb	r3, r3
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	db0b      	blt.n	800c0bc <SCSI_Read12+0x5a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0aa:	7f59      	ldrb	r1, [r3, #29]
 800c0ac:	2320      	movs	r3, #32
 800c0ae:	2205      	movs	r2, #5
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f7ff fe35 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ba:	e08f      	b.n	800c1dc <SCSI_Read12+0x17a>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c0c2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d108      	bne.n	800c0dc <SCSI_Read12+0x7a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c0ca:	7af9      	ldrb	r1, [r7, #11]
 800c0cc:	233a      	movs	r3, #58	@ 0x3a
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f7ff fe25 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0da:	e07f      	b.n	800c1dc <SCSI_Read12+0x17a>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	33b0      	adds	r3, #176	@ 0xb0
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	4413      	add	r3, r2
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	7afa      	ldrb	r2, [r7, #11]
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	4798      	blx	r3
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d008      	beq.n	800c10c <SCSI_Read12+0xaa>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c0fa:	7af9      	ldrb	r1, [r7, #11]
 800c0fc:	233a      	movs	r3, #58	@ 0x3a
 800c0fe:	2202      	movs	r2, #2
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f7ff fe0d 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c106:	f04f 33ff 	mov.w	r3, #4294967295
 800c10a:	e067      	b.n	800c1dc <SCSI_Read12+0x17a>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	3302      	adds	r3, #2
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	3303      	adds	r3, #3
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c11c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	3304      	adds	r3, #4
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c126:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	3205      	adds	r2, #5
 800c12c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c12e:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c130:	697a      	ldr	r2, [r7, #20]
 800c132:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c136:	66d3      	str	r3, [r2, #108]	@ 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	3306      	adds	r3, #6
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	3307      	adds	r3, #7
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c148:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	3308      	adds	r3, #8
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800c152:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	3209      	adds	r2, #9
 800c158:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800c15a:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c15c:	697a      	ldr	r2, [r7, #20]
 800c15e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c162:	6713      	str	r3, [r2, #112]	@ 0x70

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c16a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c174:	7af9      	ldrb	r1, [r7, #11]
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	f000 fa4b 	bl	800c612 <SCSI_CheckAddressRange>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	da02      	bge.n	800c188 <SCSI_Read12+0x126>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c182:	f04f 33ff 	mov.w	r3, #4294967295
 800c186:	e029      	b.n	800c1dc <SCSI_Read12+0x17a>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c18e:	699a      	ldr	r2, [r3, #24]
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c198:	6979      	ldr	r1, [r7, #20]
 800c19a:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800c19e:	f8b1 1064 	ldrh.w	r1, [r1, #100]	@ 0x64
 800c1a2:	fb01 f303 	mul.w	r3, r1, r3
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d00b      	beq.n	800c1c2 <SCSI_Read12+0x160>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1b0:	7f59      	ldrb	r1, [r3, #29]
 800c1b2:	2320      	movs	r3, #32
 800c1b4:	2205      	movs	r2, #5
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f7ff fdb2 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c0:	e00c      	b.n	800c1dc <SCSI_Read12+0x17a>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2202      	movs	r2, #2
 800c1c6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c1ce:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c1d0:	7afb      	ldrb	r3, [r7, #11]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f000 fa49 	bl	800c66c <SCSI_ProcessRead>
 800c1da:	4603      	mov	r3, r0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3718      	adds	r7, #24
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	607a      	str	r2, [r7, #4]
 800c1f0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	32b0      	adds	r2, #176	@ 0xb0
 800c1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c200:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d102      	bne.n	800c20e <SCSI_Write10+0x2a>
  {
    return -1;
 800c208:	f04f 33ff 	mov.w	r3, #4294967295
 800c20c:	e0c7      	b.n	800c39e <SCSI_Write10+0x1ba>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	7a1b      	ldrb	r3, [r3, #8]
 800c212:	2b00      	cmp	r3, #0
 800c214:	f040 80bd 	bne.w	800c392 <SCSI_Write10+0x1ae>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c21e:	699b      	ldr	r3, [r3, #24]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10b      	bne.n	800c23c <SCSI_Write10+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c22a:	7f59      	ldrb	r1, [r3, #29]
 800c22c:	2320      	movs	r3, #32
 800c22e:	2205      	movs	r2, #5
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f7ff fd75 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c236:	f04f 33ff 	mov.w	r3, #4294967295
 800c23a:	e0b0      	b.n	800c39e <SCSI_Write10+0x1ba>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c242:	7f1b      	ldrb	r3, [r3, #28]
 800c244:	b25b      	sxtb	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	da0b      	bge.n	800c262 <SCSI_Write10+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c250:	7f59      	ldrb	r1, [r3, #29]
 800c252:	2320      	movs	r3, #32
 800c254:	2205      	movs	r2, #5
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	f7ff fd62 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c25c:	f04f 33ff 	mov.w	r3, #4294967295
 800c260:	e09d      	b.n	800c39e <SCSI_Write10+0x1ba>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	33b0      	adds	r3, #176	@ 0xb0
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	7afa      	ldrb	r2, [r7, #11]
 800c276:	4610      	mov	r0, r2
 800c278:	4798      	blx	r3
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d008      	beq.n	800c292 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c280:	7af9      	ldrb	r1, [r7, #11]
 800c282:	233a      	movs	r3, #58	@ 0x3a
 800c284:	2202      	movs	r2, #2
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f7ff fd4a 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c28c:	f04f 33ff 	mov.w	r3, #4294967295
 800c290:	e085      	b.n	800c39e <SCSI_Write10+0x1ba>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	33b0      	adds	r3, #176	@ 0xb0
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	7afa      	ldrb	r2, [r7, #11]
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	4798      	blx	r3
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d008      	beq.n	800c2c2 <SCSI_Write10+0xde>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c2b0:	7af9      	ldrb	r1, [r7, #11]
 800c2b2:	2327      	movs	r3, #39	@ 0x27
 800c2b4:	2202      	movs	r2, #2
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f7ff fd32 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c0:	e06d      	b.n	800c39e <SCSI_Write10+0x1ba>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	3302      	adds	r3, #2
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	3303      	adds	r3, #3
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c2d2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c2dc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	3205      	adds	r2, #5
 800c2e2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800c2e4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c2ec:	66d3      	str	r3, [r2, #108]	@ 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	3307      	adds	r3, #7
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	3208      	adds	r2, #8
 800c2fa:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c304:	6713      	str	r3, [r2, #112]	@ 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c30c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c316:	7af9      	ldrb	r1, [r7, #11]
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f000 f97a 	bl	800c612 <SCSI_CheckAddressRange>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	da02      	bge.n	800c32a <SCSI_Write10+0x146>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c324:	f04f 33ff 	mov.w	r3, #4294967295
 800c328:	e039      	b.n	800c39e <SCSI_Write10+0x1ba>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c338:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
 800c33c:	fb02 f303 	mul.w	r3, r2, r3
 800c340:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c348:	699b      	ldr	r3, [r3, #24]
 800c34a:	693a      	ldr	r2, [r7, #16]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d00b      	beq.n	800c368 <SCSI_Write10+0x184>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c356:	7f59      	ldrb	r1, [r3, #29]
 800c358:	2320      	movs	r3, #32
 800c35a:	2205      	movs	r2, #5
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f7ff fcdf 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c362:	f04f 33ff 	mov.w	r3, #4294967295
 800c366:	e01a      	b.n	800c39e <SCSI_Write10+0x1ba>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c36e:	bf28      	it	cs
 800c370:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 800c374:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	2201      	movs	r2, #1
 800c37a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800c37c:	4b0a      	ldr	r3, [pc, #40]	@ (800c3a8 <SCSI_Write10+0x1c4>)
 800c37e:	7819      	ldrb	r1, [r3, #0]
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	f103 0210 	add.w	r2, r3, #16
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f002 faa8 	bl	800e8de <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	e005      	b.n	800c39e <SCSI_Write10+0x1ba>
    return SCSI_ProcessWrite(pdev, lun);
 800c392:	7afb      	ldrb	r3, [r7, #11]
 800c394:	4619      	mov	r1, r3
 800c396:	68f8      	ldr	r0, [r7, #12]
 800c398:	f000 f9fe 	bl	800c798 <SCSI_ProcessWrite>
 800c39c:	4603      	mov	r3, r0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3718      	adds	r7, #24
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	24000073 	.word	0x24000073

0800c3ac <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b086      	sub	sp, #24
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	607a      	str	r2, [r7, #4]
 800c3b8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	32b0      	adds	r2, #176	@ 0xb0
 800c3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d102      	bne.n	800c3d6 <SCSI_Write12+0x2a>
  {
    return -1;
 800c3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3d4:	e0d7      	b.n	800c586 <SCSI_Write12+0x1da>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	7a1b      	ldrb	r3, [r3, #8]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f040 80cd 	bne.w	800c57a <SCSI_Write12+0x1ce>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10b      	bne.n	800c404 <SCSI_Write12+0x58>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3f2:	7f59      	ldrb	r1, [r3, #29]
 800c3f4:	2320      	movs	r3, #32
 800c3f6:	2205      	movs	r2, #5
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f7ff fc91 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c402:	e0c0      	b.n	800c586 <SCSI_Write12+0x1da>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c40a:	7f1b      	ldrb	r3, [r3, #28]
 800c40c:	b25b      	sxtb	r3, r3
 800c40e:	2b00      	cmp	r3, #0
 800c410:	da0b      	bge.n	800c42a <SCSI_Write12+0x7e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c418:	7f59      	ldrb	r1, [r3, #29]
 800c41a:	2320      	movs	r3, #32
 800c41c:	2205      	movs	r2, #5
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f7ff fc7e 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c424:	f04f 33ff 	mov.w	r3, #4294967295
 800c428:	e0ad      	b.n	800c586 <SCSI_Write12+0x1da>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	33b0      	adds	r3, #176	@ 0xb0
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	4413      	add	r3, r2
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	7afa      	ldrb	r2, [r7, #11]
 800c43e:	4610      	mov	r0, r2
 800c440:	4798      	blx	r3
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00b      	beq.n	800c460 <SCSI_Write12+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c448:	7af9      	ldrb	r1, [r7, #11]
 800c44a:	233a      	movs	r3, #58	@ 0x3a
 800c44c:	2202      	movs	r2, #2
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f7ff fc66 	bl	800bd20 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	2205      	movs	r2, #5
 800c458:	721a      	strb	r2, [r3, #8]
      return -1;
 800c45a:	f04f 33ff 	mov.w	r3, #4294967295
 800c45e:	e092      	b.n	800c586 <SCSI_Write12+0x1da>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	33b0      	adds	r3, #176	@ 0xb0
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	4413      	add	r3, r2
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	7afa      	ldrb	r2, [r7, #11]
 800c474:	4610      	mov	r0, r2
 800c476:	4798      	blx	r3
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00b      	beq.n	800c496 <SCSI_Write12+0xea>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c47e:	7af9      	ldrb	r1, [r7, #11]
 800c480:	2327      	movs	r3, #39	@ 0x27
 800c482:	2202      	movs	r2, #2
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f7ff fc4b 	bl	800bd20 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2205      	movs	r2, #5
 800c48e:	721a      	strb	r2, [r3, #8]
      return -1;
 800c490:	f04f 33ff 	mov.w	r3, #4294967295
 800c494:	e077      	b.n	800c586 <SCSI_Write12+0x1da>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	3302      	adds	r3, #2
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	3303      	adds	r3, #3
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c4a6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c4b0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	3205      	adds	r2, #5
 800c4b6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800c4b8:	4313      	orrs	r3, r2
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c4ba:	697a      	ldr	r2, [r7, #20]
 800c4bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c4c0:	66d3      	str	r3, [r2, #108]	@ 0x6c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	3306      	adds	r3, #6
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	3307      	adds	r3, #7
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c4d2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	3308      	adds	r3, #8
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800c4dc:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	3209      	adds	r2, #9
 800c4e2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800c4e4:	4313      	orrs	r3, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c4e6:	697a      	ldr	r2, [r7, #20]
 800c4e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c4ec:	6713      	str	r3, [r2, #112]	@ 0x70

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c4f4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c4fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4fe:	7af9      	ldrb	r1, [r7, #11]
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f000 f886 	bl	800c612 <SCSI_CheckAddressRange>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	da02      	bge.n	800c512 <SCSI_Write12+0x166>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c50c:	f04f 33ff 	mov.w	r3, #4294967295
 800c510:	e039      	b.n	800c586 <SCSI_Write12+0x1da>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c520:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
 800c524:	fb02 f303 	mul.w	r3, r2, r3
 800c528:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c530:	699b      	ldr	r3, [r3, #24]
 800c532:	693a      	ldr	r2, [r7, #16]
 800c534:	429a      	cmp	r2, r3
 800c536:	d00b      	beq.n	800c550 <SCSI_Write12+0x1a4>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c53e:	7f59      	ldrb	r1, [r3, #29]
 800c540:	2320      	movs	r3, #32
 800c542:	2205      	movs	r2, #5
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f7ff fbeb 	bl	800bd20 <SCSI_SenseCode>
      return -1;
 800c54a:	f04f 33ff 	mov.w	r3, #4294967295
 800c54e:	e01a      	b.n	800c586 <SCSI_Write12+0x1da>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c556:	bf28      	it	cs
 800c558:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 800c55c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2201      	movs	r2, #1
 800c562:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800c564:	4b0a      	ldr	r3, [pc, #40]	@ (800c590 <SCSI_Write12+0x1e4>)
 800c566:	7819      	ldrb	r1, [r3, #0]
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	f103 0210 	add.w	r2, r3, #16
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f002 f9b4 	bl	800e8de <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800c576:	2300      	movs	r3, #0
 800c578:	e005      	b.n	800c586 <SCSI_Write12+0x1da>
    return SCSI_ProcessWrite(pdev, lun);
 800c57a:	7afb      	ldrb	r3, [r7, #11]
 800c57c:	4619      	mov	r1, r3
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f000 f90a 	bl	800c798 <SCSI_ProcessWrite>
 800c584:	4603      	mov	r3, r0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	24000073 	.word	0x24000073

0800c594 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b086      	sub	sp, #24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	460b      	mov	r3, r1
 800c59e:	607a      	str	r2, [r7, #4]
 800c5a0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	32b0      	adds	r2, #176	@ 0xb0
 800c5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d102      	bne.n	800c5be <SCSI_Verify10+0x2a>
  {
    return -1;
 800c5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5bc:	e025      	b.n	800c60a <SCSI_Verify10+0x76>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	f003 0302 	and.w	r3, r3, #2
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d008      	beq.n	800c5de <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800c5cc:	7af9      	ldrb	r1, [r7, #11]
 800c5ce:	2324      	movs	r3, #36	@ 0x24
 800c5d0:	2205      	movs	r2, #5
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f7ff fba4 	bl	800bd20 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800c5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5dc:	e015      	b.n	800c60a <SCSI_Verify10+0x76>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5ee:	7af9      	ldrb	r1, [r7, #11]
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f000 f80e 	bl	800c612 <SCSI_CheckAddressRange>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	da02      	bge.n	800c602 <SCSI_Verify10+0x6e>
  {
    return -1; /* error */
 800c5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c600:	e003      	b.n	800c60a <SCSI_Verify10+0x76>
  }

  hmsc->bot_data_length = 0U;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	2200      	movs	r2, #0
 800c606:	60da      	str	r2, [r3, #12]

  return 0;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3718      	adds	r7, #24
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b086      	sub	sp, #24
 800c616:	af00      	add	r7, sp, #0
 800c618:	60f8      	str	r0, [r7, #12]
 800c61a:	607a      	str	r2, [r7, #4]
 800c61c:	603b      	str	r3, [r7, #0]
 800c61e:	460b      	mov	r3, r1
 800c620:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	32b0      	adds	r2, #176	@ 0xb0
 800c62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c630:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d102      	bne.n	800c63e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800c638:	f04f 33ff 	mov.w	r3, #4294967295
 800c63c:	e012      	b.n	800c664 <SCSI_CheckAddressRange+0x52>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	441a      	add	r2, r3
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c64a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d908      	bls.n	800c662 <SCSI_CheckAddressRange+0x50>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800c650:	7af9      	ldrb	r1, [r7, #11]
 800c652:	2321      	movs	r3, #33	@ 0x21
 800c654:	2205      	movs	r2, #5
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f7ff fb62 	bl	800bd20 <SCSI_SenseCode>
    return -1;
 800c65c:	f04f 33ff 	mov.w	r3, #4294967295
 800c660:	e000      	b.n	800c664 <SCSI_CheckAddressRange+0x52>
  }

  return 0;
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	3718      	adds	r7, #24
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800c66c:	b590      	push	{r4, r7, lr}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	460b      	mov	r3, r1
 800c676:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	32b0      	adds	r2, #176	@ 0xb0
 800c682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c686:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d102      	bne.n	800c694 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800c68e:	f04f 33ff 	mov.w	r3, #4294967295
 800c692:	e07b      	b.n	800c78c <SCSI_ProcessRead+0x120>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c69a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c6a2:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
 800c6a6:	fb02 f303 	mul.w	r3, r2, r3
 800c6aa:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6b2:	bf28      	it	cs
 800c6b4:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 800c6b8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	33b0      	adds	r3, #176	@ 0xb0
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	691c      	ldr	r4, [r3, #16]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f103 0110 	add.w	r1, r3, #16
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c6d8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c6e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	78f8      	ldrb	r0, [r7, #3]
 800c6f0:	47a0      	blx	r4
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	da08      	bge.n	800c70a <SCSI_ProcessRead+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800c6f8:	78f9      	ldrb	r1, [r7, #3]
 800c6fa:	2311      	movs	r3, #17
 800c6fc:	2204      	movs	r2, #4
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7ff fb0e 	bl	800bd20 <SCSI_SenseCode>
    return -1;
 800c704:	f04f 33ff 	mov.w	r3, #4294967295
 800c708:	e040      	b.n	800c78c <SCSI_ProcessRead+0x120>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800c70a:	4b22      	ldr	r3, [pc, #136]	@ (800c794 <SCSI_ProcessRead+0x128>)
 800c70c:	7819      	ldrb	r1, [r3, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f103 0210 	add.w	r2, r3, #16
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f002 f8c0 	bl	800e89c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c722:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c72a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c72e:	4619      	mov	r1, r3
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	fbb3 f3f1 	udiv	r3, r3, r1
 800c736:	4413      	add	r3, r2
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c73e:	66d3      	str	r3, [r2, #108]	@ 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c746:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c74e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c752:	4619      	mov	r1, r3
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	fbb3 f3f1 	udiv	r3, r3, r1
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c762:	6713      	str	r3, [r2, #112]	@ 0x70

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c76a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c776:	6393      	str	r3, [r2, #56]	@ 0x38

  if (hmsc->scsi_blk_len == 0U)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c77e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c780:	2b00      	cmp	r3, #0
 800c782:	d102      	bne.n	800c78a <SCSI_ProcessRead+0x11e>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2203      	movs	r2, #3
 800c788:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800c78a:	2300      	movs	r3, #0
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3714      	adds	r7, #20
 800c790:	46bd      	mov	sp, r7
 800c792:	bd90      	pop	{r4, r7, pc}
 800c794:	24000072 	.word	0x24000072

0800c798 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800c798:	b590      	push	{r4, r7, lr}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	32b0      	adds	r2, #176	@ 0xb0
 800c7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7b2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d102      	bne.n	800c7c0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800c7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c7be:	e08e      	b.n	800c8de <SCSI_ProcessWrite+0x146>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c7ce:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
 800c7d2:	fb02 f303 	mul.w	r3, r2, r3
 800c7d6:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7de:	bf28      	it	cs
 800c7e0:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 800c7e4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	33b0      	adds	r3, #176	@ 0xb0
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	4413      	add	r3, r2
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	695c      	ldr	r4, [r3, #20]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f103 0110 	add.w	r1, r3, #16
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c804:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c80c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c810:	4618      	mov	r0, r3
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800c818:	b29b      	uxth	r3, r3
 800c81a:	78f8      	ldrb	r0, [r7, #3]
 800c81c:	47a0      	blx	r4
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	da08      	bge.n	800c836 <SCSI_ProcessWrite+0x9e>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800c824:	78f9      	ldrb	r1, [r7, #3]
 800c826:	2303      	movs	r3, #3
 800c828:	2204      	movs	r2, #4
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f7ff fa78 	bl	800bd20 <SCSI_SenseCode>
    return -1;
 800c830:	f04f 33ff 	mov.w	r3, #4294967295
 800c834:	e053      	b.n	800c8de <SCSI_ProcessWrite+0x146>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c83c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c844:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c848:	4619      	mov	r1, r3
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c850:	4413      	add	r3, r2
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c858:	66d3      	str	r3, [r2, #108]	@ 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c860:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c868:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c86c:	4619      	mov	r1, r3
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	fbb3 f3f1 	udiv	r3, r3, r1
 800c874:	1ad3      	subs	r3, r2, r3
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c87c:	6713      	str	r3, [r2, #112]	@ 0x70

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c890:	6393      	str	r3, [r2, #56]	@ 0x38

  if (hmsc->scsi_blk_len == 0U)
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d104      	bne.n	800c8a8 <SCSI_ProcessWrite+0x110>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800c89e:	2100      	movs	r1, #0
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7fe fc27 	bl	800b0f4 <MSC_BOT_SendCSW>
 800c8a6:	e019      	b.n	800c8dc <SCSI_ProcessWrite+0x144>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c8ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800c8b6:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
 800c8ba:	fb02 f303 	mul.w	r3, r2, r3
 800c8be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8c2:	bf28      	it	cs
 800c8c4:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 800c8c8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800c8ca:	4b07      	ldr	r3, [pc, #28]	@ (800c8e8 <SCSI_ProcessWrite+0x150>)
 800c8cc:	7819      	ldrb	r1, [r3, #0]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f103 0210 	add.w	r2, r3, #16
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f002 f801 	bl	800e8de <USBD_LL_PrepareReceive>
  }

  return 0;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3714      	adds	r7, #20
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd90      	pop	{r4, r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	24000073 	.word	0x24000073

0800c8ec <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b087      	sub	sp, #28
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800c8fa:	88fb      	ldrh	r3, [r7, #6]
 800c8fc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d102      	bne.n	800c90a <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800c904:	f04f 33ff 	mov.w	r3, #4294967295
 800c908:	e013      	b.n	800c932 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800c90a:	8afa      	ldrh	r2, [r7, #22]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800c910:	e00b      	b.n	800c92a <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800c912:	8afb      	ldrh	r3, [r7, #22]
 800c914:	3b01      	subs	r3, #1
 800c916:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800c918:	8afb      	ldrh	r3, [r7, #22]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	441a      	add	r2, r3
 800c91e:	8afb      	ldrh	r3, [r7, #22]
 800c920:	7811      	ldrb	r1, [r2, #0]
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	4413      	add	r3, r2
 800c926:	460a      	mov	r2, r1
 800c928:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800c92a:	8afb      	ldrh	r3, [r7, #22]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1f0      	bne.n	800c912 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	371c      	adds	r7, #28
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr

0800c93e <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b086      	sub	sp, #24
 800c942:	af00      	add	r7, sp, #0
 800c944:	60f8      	str	r0, [r7, #12]
 800c946:	60b9      	str	r1, [r7, #8]
 800c948:	4613      	mov	r3, r2
 800c94a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d101      	bne.n	800c956 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c952:	2303      	movs	r3, #3
 800c954:	e01f      	b.n	800c996 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2200      	movs	r2, #0
 800c95a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2200      	movs	r2, #0
 800c962:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2200      	movs	r2, #0
 800c96a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d003      	beq.n	800c97c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	68ba      	ldr	r2, [r7, #8]
 800c978:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2201      	movs	r2, #1
 800c980:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	79fa      	ldrb	r2, [r7, #7]
 800c988:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f001 fe2e 	bl	800e5ec <USBD_LL_Init>
 800c990:	4603      	mov	r3, r0
 800c992:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c994:	7dfb      	ldrb	r3, [r7, #23]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3718      	adds	r7, #24
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d101      	bne.n	800c9b6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	e025      	b.n	800ca02 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	32ae      	adds	r2, #174	@ 0xae
 800c9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d00f      	beq.n	800c9f2 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	32ae      	adds	r2, #174	@ 0xae
 800c9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e2:	f107 020e 	add.w	r2, r7, #14
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	4798      	blx	r3
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9f8:	1c5a      	adds	r2, r3, #1
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ca00:	2300      	movs	r3, #0
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b082      	sub	sp, #8
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f001 fe3a 	bl	800e68c <USBD_LL_Start>
 800ca18:	4603      	mov	r3, r0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ca22:	b480      	push	{r7}
 800ca24:	b083      	sub	sp, #12
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca2a:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d009      	beq.n	800ca66 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	78fa      	ldrb	r2, [r7, #3]
 800ca5c:	4611      	mov	r1, r2
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	4798      	blx	r3
 800ca62:	4603      	mov	r3, r0
 800ca64:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	78fa      	ldrb	r2, [r7, #3]
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	4798      	blx	r3
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d001      	beq.n	800ca9a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ca96:	2303      	movs	r3, #3
 800ca98:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cab4:	6839      	ldr	r1, [r7, #0]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f001 f90d 	bl	800dcd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800caca:	461a      	mov	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cad8:	f003 031f 	and.w	r3, r3, #31
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d01a      	beq.n	800cb16 <USBD_LL_SetupStage+0x72>
 800cae0:	2b02      	cmp	r3, #2
 800cae2:	d822      	bhi.n	800cb2a <USBD_LL_SetupStage+0x86>
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <USBD_LL_SetupStage+0x4a>
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d00a      	beq.n	800cb02 <USBD_LL_SetupStage+0x5e>
 800caec:	e01d      	b.n	800cb2a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 fb64 	bl	800d1c4 <USBD_StdDevReq>
 800cafc:	4603      	mov	r3, r0
 800cafe:	73fb      	strb	r3, [r7, #15]
      break;
 800cb00:	e020      	b.n	800cb44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cb08:	4619      	mov	r1, r3
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fbcc 	bl	800d2a8 <USBD_StdItfReq>
 800cb10:	4603      	mov	r3, r0
 800cb12:	73fb      	strb	r3, [r7, #15]
      break;
 800cb14:	e016      	b.n	800cb44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fc2e 	bl	800d380 <USBD_StdEPReq>
 800cb24:	4603      	mov	r3, r0
 800cb26:	73fb      	strb	r3, [r7, #15]
      break;
 800cb28:	e00c      	b.n	800cb44 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cb30:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	4619      	mov	r1, r3
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f001 fe26 	bl	800e78a <USBD_LL_StallEP>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	73fb      	strb	r3, [r7, #15]
      break;
 800cb42:	bf00      	nop
  }

  return ret;
 800cb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b086      	sub	sp, #24
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	60f8      	str	r0, [r7, #12]
 800cb56:	460b      	mov	r3, r1
 800cb58:	607a      	str	r2, [r7, #4]
 800cb5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cb60:	7afb      	ldrb	r3, [r7, #11]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d16e      	bne.n	800cc44 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cb6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cb74:	2b03      	cmp	r3, #3
 800cb76:	f040 8098 	bne.w	800ccaa <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	689a      	ldr	r2, [r3, #8]
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d913      	bls.n	800cbae <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	689a      	ldr	r2, [r3, #8]
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	1ad2      	subs	r2, r2, r3
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	68da      	ldr	r2, [r3, #12]
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	bf28      	it	cs
 800cba0:	4613      	movcs	r3, r2
 800cba2:	461a      	mov	r2, r3
 800cba4:	6879      	ldr	r1, [r7, #4]
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	f001 f978 	bl	800de9c <USBD_CtlContinueRx>
 800cbac:	e07d      	b.n	800ccaa <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cbb4:	f003 031f 	and.w	r3, r3, #31
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d014      	beq.n	800cbe6 <USBD_LL_DataOutStage+0x98>
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	d81d      	bhi.n	800cbfc <USBD_LL_DataOutStage+0xae>
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <USBD_LL_DataOutStage+0x7c>
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d003      	beq.n	800cbd0 <USBD_LL_DataOutStage+0x82>
 800cbc8:	e018      	b.n	800cbfc <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	75bb      	strb	r3, [r7, #22]
            break;
 800cbce:	e018      	b.n	800cc02 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	4619      	mov	r1, r3
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f000 fa64 	bl	800d0a8 <USBD_CoreFindIF>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	75bb      	strb	r3, [r7, #22]
            break;
 800cbe4:	e00d      	b.n	800cc02 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	4619      	mov	r1, r3
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f000 fa66 	bl	800d0c2 <USBD_CoreFindEP>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	75bb      	strb	r3, [r7, #22]
            break;
 800cbfa:	e002      	b.n	800cc02 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	75bb      	strb	r3, [r7, #22]
            break;
 800cc00:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cc02:	7dbb      	ldrb	r3, [r7, #22]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d119      	bne.n	800cc3c <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b03      	cmp	r3, #3
 800cc12:	d113      	bne.n	800cc3c <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cc14:	7dba      	ldrb	r2, [r7, #22]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	32ae      	adds	r2, #174	@ 0xae
 800cc1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00b      	beq.n	800cc3c <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cc24:	7dba      	ldrb	r2, [r7, #22]
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cc2c:	7dba      	ldrb	r2, [r7, #22]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	32ae      	adds	r2, #174	@ 0xae
 800cc32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f001 f93e 	bl	800debe <USBD_CtlSendStatus>
 800cc42:	e032      	b.n	800ccaa <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cc44:	7afb      	ldrb	r3, [r7, #11]
 800cc46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	f000 fa37 	bl	800d0c2 <USBD_CoreFindEP>
 800cc54:	4603      	mov	r3, r0
 800cc56:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc58:	7dbb      	ldrb	r3, [r7, #22]
 800cc5a:	2bff      	cmp	r3, #255	@ 0xff
 800cc5c:	d025      	beq.n	800ccaa <USBD_LL_DataOutStage+0x15c>
 800cc5e:	7dbb      	ldrb	r3, [r7, #22]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d122      	bne.n	800ccaa <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	2b03      	cmp	r3, #3
 800cc6e:	d117      	bne.n	800cca0 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cc70:	7dba      	ldrb	r2, [r7, #22]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	32ae      	adds	r2, #174	@ 0xae
 800cc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00f      	beq.n	800cca0 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cc80:	7dba      	ldrb	r2, [r7, #22]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cc88:	7dba      	ldrb	r2, [r7, #22]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	32ae      	adds	r2, #174	@ 0xae
 800cc8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	7afa      	ldrb	r2, [r7, #11]
 800cc96:	4611      	mov	r1, r2
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	4798      	blx	r3
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
 800cca8:	e000      	b.n	800ccac <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3718      	adds	r7, #24
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	607a      	str	r2, [r7, #4]
 800ccc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ccc2:	7afb      	ldrb	r3, [r7, #11]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d16f      	bne.n	800cda8 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	3314      	adds	r3, #20
 800cccc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d15a      	bne.n	800cd8e <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	689a      	ldr	r2, [r3, #8]
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d914      	bls.n	800cd0e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	689a      	ldr	r2, [r3, #8]
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	1ad2      	subs	r2, r2, r3
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	6879      	ldr	r1, [r7, #4]
 800ccfa:	68f8      	ldr	r0, [r7, #12]
 800ccfc:	f001 f8bd 	bl	800de7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd00:	2300      	movs	r3, #0
 800cd02:	2200      	movs	r2, #0
 800cd04:	2100      	movs	r1, #0
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f001 fde9 	bl	800e8de <USBD_LL_PrepareReceive>
 800cd0c:	e03f      	b.n	800cd8e <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	68da      	ldr	r2, [r3, #12]
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d11c      	bne.n	800cd54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d316      	bcc.n	800cd54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	685a      	ldr	r2, [r3, #4]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d20f      	bcs.n	800cd54 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cd34:	2200      	movs	r2, #0
 800cd36:	2100      	movs	r1, #0
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f001 f89e 	bl	800de7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2200      	movs	r2, #0
 800cd42:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd46:	2300      	movs	r3, #0
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	f001 fdc6 	bl	800e8de <USBD_LL_PrepareReceive>
 800cd52:	e01c      	b.n	800cd8e <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	2b03      	cmp	r3, #3
 800cd5e:	d10f      	bne.n	800cd80 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d009      	beq.n	800cd80 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd80:	2180      	movs	r1, #128	@ 0x80
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f001 fd01 	bl	800e78a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f001 f8ab 	bl	800dee4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d03a      	beq.n	800ce0e <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f7ff fe42 	bl	800ca22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cda6:	e032      	b.n	800ce0e <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cda8:	7afb      	ldrb	r3, [r7, #11]
 800cdaa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f000 f985 	bl	800d0c2 <USBD_CoreFindEP>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdbc:	7dfb      	ldrb	r3, [r7, #23]
 800cdbe:	2bff      	cmp	r3, #255	@ 0xff
 800cdc0:	d025      	beq.n	800ce0e <USBD_LL_DataInStage+0x15a>
 800cdc2:	7dfb      	ldrb	r3, [r7, #23]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d122      	bne.n	800ce0e <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	2b03      	cmp	r3, #3
 800cdd2:	d11c      	bne.n	800ce0e <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cdd4:	7dfa      	ldrb	r2, [r7, #23]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	32ae      	adds	r2, #174	@ 0xae
 800cdda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdde:	695b      	ldr	r3, [r3, #20]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d014      	beq.n	800ce0e <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cde4:	7dfa      	ldrb	r2, [r7, #23]
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cdec:	7dfa      	ldrb	r2, [r7, #23]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	32ae      	adds	r2, #174	@ 0xae
 800cdf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	7afa      	ldrb	r2, [r7, #11]
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	4798      	blx	r3
 800ce00:	4603      	mov	r3, r0
 800ce02:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ce04:	7dbb      	ldrb	r3, [r7, #22]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ce0a:	7dbb      	ldrb	r3, [r7, #22]
 800ce0c:	e000      	b.n	800ce10 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ce0e:	2300      	movs	r3, #0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3718      	adds	r7, #24
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce20:	2300      	movs	r3, #0
 800ce22:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d014      	beq.n	800ce7e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00e      	beq.n	800ce7e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	6852      	ldr	r2, [r2, #4]
 800ce6c:	b2d2      	uxtb	r2, r2
 800ce6e:	4611      	mov	r1, r2
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	4798      	blx	r3
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d001      	beq.n	800ce7e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce7e:	2340      	movs	r3, #64	@ 0x40
 800ce80:	2200      	movs	r2, #0
 800ce82:	2100      	movs	r1, #0
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f001 fc1c 	bl	800e6c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2240      	movs	r2, #64	@ 0x40
 800ce96:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce9a:	2340      	movs	r3, #64	@ 0x40
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	2180      	movs	r1, #128	@ 0x80
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f001 fc0e 	bl	800e6c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2240      	movs	r2, #64	@ 0x40
 800ceb0:	621a      	str	r2, [r3, #32]

  return ret;
 800ceb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	460b      	mov	r3, r1
 800cec6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	78fa      	ldrb	r2, [r7, #3]
 800cecc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cece:	2300      	movs	r3, #0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	2b04      	cmp	r3, #4
 800ceee:	d006      	beq.n	800cefe <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2204      	movs	r2, #4
 800cf02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cf06:	2300      	movs	r3, #0
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	2b04      	cmp	r3, #4
 800cf26:	d106      	bne.n	800cf36 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b03      	cmp	r3, #3
 800cf56:	d110      	bne.n	800cf7a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d00b      	beq.n	800cf7a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf68:	69db      	ldr	r3, [r3, #28]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d005      	beq.n	800cf7a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf74:	69db      	ldr	r3, [r3, #28]
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	32ae      	adds	r2, #174	@ 0xae
 800cf9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cfa2:	2303      	movs	r3, #3
 800cfa4:	e01c      	b.n	800cfe0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	d115      	bne.n	800cfde <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	32ae      	adds	r2, #174	@ 0xae
 800cfbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfc0:	6a1b      	ldr	r3, [r3, #32]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00b      	beq.n	800cfde <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	32ae      	adds	r2, #174	@ 0xae
 800cfd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfd4:	6a1b      	ldr	r3, [r3, #32]
 800cfd6:	78fa      	ldrb	r2, [r7, #3]
 800cfd8:	4611      	mov	r1, r2
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	460b      	mov	r3, r1
 800cff2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	32ae      	adds	r2, #174	@ 0xae
 800cffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d101      	bne.n	800d00a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d006:	2303      	movs	r3, #3
 800d008:	e01c      	b.n	800d044 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d010:	b2db      	uxtb	r3, r3
 800d012:	2b03      	cmp	r3, #3
 800d014:	d115      	bne.n	800d042 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	32ae      	adds	r2, #174	@ 0xae
 800d020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00b      	beq.n	800d042 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	32ae      	adds	r2, #174	@ 0xae
 800d034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d03a:	78fa      	ldrb	r2, [r7, #3]
 800d03c:	4611      	mov	r1, r2
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d042:	2300      	movs	r3, #0
}
 800d044:	4618      	mov	r0, r3
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b084      	sub	sp, #16
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d06a:	2300      	movs	r3, #0
 800d06c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2201      	movs	r2, #1
 800d072:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d00e      	beq.n	800d09e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	687a      	ldr	r2, [r7, #4]
 800d08a:	6852      	ldr	r2, [r2, #4]
 800d08c:	b2d2      	uxtb	r2, r2
 800d08e:	4611      	mov	r1, r2
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	4798      	blx	r3
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d001      	beq.n	800d09e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d09a:	2303      	movs	r3, #3
 800d09c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3710      	adds	r7, #16
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr

0800d0c2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0c2:	b480      	push	{r7}
 800d0c4:	b083      	sub	sp, #12
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b086      	sub	sp, #24
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	885b      	ldrh	r3, [r3, #2]
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	7812      	ldrb	r2, [r2, #0]
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d91f      	bls.n	800d142 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d108:	e013      	b.n	800d132 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d10a:	f107 030a 	add.w	r3, r7, #10
 800d10e:	4619      	mov	r1, r3
 800d110:	6978      	ldr	r0, [r7, #20]
 800d112:	f000 f81b 	bl	800d14c <USBD_GetNextDesc>
 800d116:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	785b      	ldrb	r3, [r3, #1]
 800d11c:	2b05      	cmp	r3, #5
 800d11e:	d108      	bne.n	800d132 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	789b      	ldrb	r3, [r3, #2]
 800d128:	78fa      	ldrb	r2, [r7, #3]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d008      	beq.n	800d140 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	885b      	ldrh	r3, [r3, #2]
 800d136:	b29a      	uxth	r2, r3
 800d138:	897b      	ldrh	r3, [r7, #10]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d8e5      	bhi.n	800d10a <USBD_GetEpDesc+0x2e>
 800d13e:	e000      	b.n	800d142 <USBD_GetEpDesc+0x66>
          break;
 800d140:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d142:	693b      	ldr	r3, [r7, #16]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3718      	adds	r7, #24
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	881b      	ldrh	r3, [r3, #0]
 800d15e:	68fa      	ldr	r2, [r7, #12]
 800d160:	7812      	ldrb	r2, [r2, #0]
 800d162:	4413      	add	r3, r2
 800d164:	b29a      	uxth	r2, r3
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	461a      	mov	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4413      	add	r3, r2
 800d174:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d176:	68fb      	ldr	r3, [r7, #12]
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3714      	adds	r7, #20
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d184:	b480      	push	{r7}
 800d186:	b087      	sub	sp, #28
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	3301      	adds	r3, #1
 800d19a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d1a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d1a6:	021b      	lsls	r3, r3, #8
 800d1a8:	b21a      	sxth	r2, r3
 800d1aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	b21b      	sxth	r3, r3
 800d1b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d1b4:	89fb      	ldrh	r3, [r7, #14]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	371c      	adds	r7, #28
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
	...

0800d1c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d1da:	2b40      	cmp	r3, #64	@ 0x40
 800d1dc:	d005      	beq.n	800d1ea <USBD_StdDevReq+0x26>
 800d1de:	2b40      	cmp	r3, #64	@ 0x40
 800d1e0:	d857      	bhi.n	800d292 <USBD_StdDevReq+0xce>
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00f      	beq.n	800d206 <USBD_StdDevReq+0x42>
 800d1e6:	2b20      	cmp	r3, #32
 800d1e8:	d153      	bne.n	800d292 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	32ae      	adds	r2, #174	@ 0xae
 800d1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	6839      	ldr	r1, [r7, #0]
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	4798      	blx	r3
 800d200:	4603      	mov	r3, r0
 800d202:	73fb      	strb	r3, [r7, #15]
      break;
 800d204:	e04a      	b.n	800d29c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	785b      	ldrb	r3, [r3, #1]
 800d20a:	2b09      	cmp	r3, #9
 800d20c:	d83b      	bhi.n	800d286 <USBD_StdDevReq+0xc2>
 800d20e:	a201      	add	r2, pc, #4	@ (adr r2, 800d214 <USBD_StdDevReq+0x50>)
 800d210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d214:	0800d269 	.word	0x0800d269
 800d218:	0800d27d 	.word	0x0800d27d
 800d21c:	0800d287 	.word	0x0800d287
 800d220:	0800d273 	.word	0x0800d273
 800d224:	0800d287 	.word	0x0800d287
 800d228:	0800d247 	.word	0x0800d247
 800d22c:	0800d23d 	.word	0x0800d23d
 800d230:	0800d287 	.word	0x0800d287
 800d234:	0800d25f 	.word	0x0800d25f
 800d238:	0800d251 	.word	0x0800d251
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 fa3c 	bl	800d6bc <USBD_GetDescriptor>
          break;
 800d244:	e024      	b.n	800d290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d246:	6839      	ldr	r1, [r7, #0]
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fba1 	bl	800d990 <USBD_SetAddress>
          break;
 800d24e:	e01f      	b.n	800d290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 fbe0 	bl	800da18 <USBD_SetConfig>
 800d258:	4603      	mov	r3, r0
 800d25a:	73fb      	strb	r3, [r7, #15]
          break;
 800d25c:	e018      	b.n	800d290 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d25e:	6839      	ldr	r1, [r7, #0]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 fc83 	bl	800db6c <USBD_GetConfig>
          break;
 800d266:	e013      	b.n	800d290 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d268:	6839      	ldr	r1, [r7, #0]
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fcb4 	bl	800dbd8 <USBD_GetStatus>
          break;
 800d270:	e00e      	b.n	800d290 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d272:	6839      	ldr	r1, [r7, #0]
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 fce3 	bl	800dc40 <USBD_SetFeature>
          break;
 800d27a:	e009      	b.n	800d290 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d27c:	6839      	ldr	r1, [r7, #0]
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 fd07 	bl	800dc92 <USBD_ClrFeature>
          break;
 800d284:	e004      	b.n	800d290 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fd5e 	bl	800dd4a <USBD_CtlError>
          break;
 800d28e:	bf00      	nop
      }
      break;
 800d290:	e004      	b.n	800d29c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d292:	6839      	ldr	r1, [r7, #0]
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fd58 	bl	800dd4a <USBD_CtlError>
      break;
 800d29a:	bf00      	nop
  }

  return ret;
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop

0800d2a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d2be:	2b40      	cmp	r3, #64	@ 0x40
 800d2c0:	d005      	beq.n	800d2ce <USBD_StdItfReq+0x26>
 800d2c2:	2b40      	cmp	r3, #64	@ 0x40
 800d2c4:	d852      	bhi.n	800d36c <USBD_StdItfReq+0xc4>
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d001      	beq.n	800d2ce <USBD_StdItfReq+0x26>
 800d2ca:	2b20      	cmp	r3, #32
 800d2cc:	d14e      	bne.n	800d36c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	d840      	bhi.n	800d35e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	889b      	ldrh	r3, [r3, #4]
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d836      	bhi.n	800d354 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	889b      	ldrh	r3, [r3, #4]
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7ff feda 	bl	800d0a8 <USBD_CoreFindIF>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2f8:	7bbb      	ldrb	r3, [r7, #14]
 800d2fa:	2bff      	cmp	r3, #255	@ 0xff
 800d2fc:	d01d      	beq.n	800d33a <USBD_StdItfReq+0x92>
 800d2fe:	7bbb      	ldrb	r3, [r7, #14]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d11a      	bne.n	800d33a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d304:	7bba      	ldrb	r2, [r7, #14]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	32ae      	adds	r2, #174	@ 0xae
 800d30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00f      	beq.n	800d334 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d314:	7bba      	ldrb	r2, [r7, #14]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d31c:	7bba      	ldrb	r2, [r7, #14]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	32ae      	adds	r2, #174	@ 0xae
 800d322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	4798      	blx	r3
 800d32e:	4603      	mov	r3, r0
 800d330:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d332:	e004      	b.n	800d33e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d334:	2303      	movs	r3, #3
 800d336:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d338:	e001      	b.n	800d33e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d33a:	2303      	movs	r3, #3
 800d33c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	88db      	ldrh	r3, [r3, #6]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d110      	bne.n	800d368 <USBD_StdItfReq+0xc0>
 800d346:	7bfb      	ldrb	r3, [r7, #15]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10d      	bne.n	800d368 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fdb6 	bl	800debe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d352:	e009      	b.n	800d368 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d354:	6839      	ldr	r1, [r7, #0]
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 fcf7 	bl	800dd4a <USBD_CtlError>
          break;
 800d35c:	e004      	b.n	800d368 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d35e:	6839      	ldr	r1, [r7, #0]
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 fcf2 	bl	800dd4a <USBD_CtlError>
          break;
 800d366:	e000      	b.n	800d36a <USBD_StdItfReq+0xc2>
          break;
 800d368:	bf00      	nop
      }
      break;
 800d36a:	e004      	b.n	800d376 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d36c:	6839      	ldr	r1, [r7, #0]
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 fceb 	bl	800dd4a <USBD_CtlError>
      break;
 800d374:	bf00      	nop
  }

  return ret;
 800d376:	7bfb      	ldrb	r3, [r7, #15]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3710      	adds	r7, #16
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	889b      	ldrh	r3, [r3, #4]
 800d392:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d39c:	2b40      	cmp	r3, #64	@ 0x40
 800d39e:	d007      	beq.n	800d3b0 <USBD_StdEPReq+0x30>
 800d3a0:	2b40      	cmp	r3, #64	@ 0x40
 800d3a2:	f200 817f 	bhi.w	800d6a4 <USBD_StdEPReq+0x324>
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d02a      	beq.n	800d400 <USBD_StdEPReq+0x80>
 800d3aa:	2b20      	cmp	r3, #32
 800d3ac:	f040 817a 	bne.w	800d6a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d3b0:	7bbb      	ldrb	r3, [r7, #14]
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f7ff fe84 	bl	800d0c2 <USBD_CoreFindEP>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3be:	7b7b      	ldrb	r3, [r7, #13]
 800d3c0:	2bff      	cmp	r3, #255	@ 0xff
 800d3c2:	f000 8174 	beq.w	800d6ae <USBD_StdEPReq+0x32e>
 800d3c6:	7b7b      	ldrb	r3, [r7, #13]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	f040 8170 	bne.w	800d6ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d3ce:	7b7a      	ldrb	r2, [r7, #13]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d3d6:	7b7a      	ldrb	r2, [r7, #13]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	32ae      	adds	r2, #174	@ 0xae
 800d3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f000 8163 	beq.w	800d6ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d3e8:	7b7a      	ldrb	r2, [r7, #13]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	32ae      	adds	r2, #174	@ 0xae
 800d3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	6839      	ldr	r1, [r7, #0]
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	4798      	blx	r3
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d3fe:	e156      	b.n	800d6ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	785b      	ldrb	r3, [r3, #1]
 800d404:	2b03      	cmp	r3, #3
 800d406:	d008      	beq.n	800d41a <USBD_StdEPReq+0x9a>
 800d408:	2b03      	cmp	r3, #3
 800d40a:	f300 8145 	bgt.w	800d698 <USBD_StdEPReq+0x318>
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f000 809b 	beq.w	800d54a <USBD_StdEPReq+0x1ca>
 800d414:	2b01      	cmp	r3, #1
 800d416:	d03c      	beq.n	800d492 <USBD_StdEPReq+0x112>
 800d418:	e13e      	b.n	800d698 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d420:	b2db      	uxtb	r3, r3
 800d422:	2b02      	cmp	r3, #2
 800d424:	d002      	beq.n	800d42c <USBD_StdEPReq+0xac>
 800d426:	2b03      	cmp	r3, #3
 800d428:	d016      	beq.n	800d458 <USBD_StdEPReq+0xd8>
 800d42a:	e02c      	b.n	800d486 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d42c:	7bbb      	ldrb	r3, [r7, #14]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00d      	beq.n	800d44e <USBD_StdEPReq+0xce>
 800d432:	7bbb      	ldrb	r3, [r7, #14]
 800d434:	2b80      	cmp	r3, #128	@ 0x80
 800d436:	d00a      	beq.n	800d44e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d438:	7bbb      	ldrb	r3, [r7, #14]
 800d43a:	4619      	mov	r1, r3
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f001 f9a4 	bl	800e78a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d442:	2180      	movs	r1, #128	@ 0x80
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f001 f9a0 	bl	800e78a <USBD_LL_StallEP>
 800d44a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d44c:	e020      	b.n	800d490 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fc7a 	bl	800dd4a <USBD_CtlError>
              break;
 800d456:	e01b      	b.n	800d490 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	885b      	ldrh	r3, [r3, #2]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d10e      	bne.n	800d47e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d460:	7bbb      	ldrb	r3, [r7, #14]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00b      	beq.n	800d47e <USBD_StdEPReq+0xfe>
 800d466:	7bbb      	ldrb	r3, [r7, #14]
 800d468:	2b80      	cmp	r3, #128	@ 0x80
 800d46a:	d008      	beq.n	800d47e <USBD_StdEPReq+0xfe>
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	88db      	ldrh	r3, [r3, #6]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d104      	bne.n	800d47e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d474:	7bbb      	ldrb	r3, [r7, #14]
 800d476:	4619      	mov	r1, r3
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f001 f986 	bl	800e78a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 fd1d 	bl	800debe <USBD_CtlSendStatus>

              break;
 800d484:	e004      	b.n	800d490 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fc5e 	bl	800dd4a <USBD_CtlError>
              break;
 800d48e:	bf00      	nop
          }
          break;
 800d490:	e107      	b.n	800d6a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	d002      	beq.n	800d4a4 <USBD_StdEPReq+0x124>
 800d49e:	2b03      	cmp	r3, #3
 800d4a0:	d016      	beq.n	800d4d0 <USBD_StdEPReq+0x150>
 800d4a2:	e04b      	b.n	800d53c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4a4:	7bbb      	ldrb	r3, [r7, #14]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00d      	beq.n	800d4c6 <USBD_StdEPReq+0x146>
 800d4aa:	7bbb      	ldrb	r3, [r7, #14]
 800d4ac:	2b80      	cmp	r3, #128	@ 0x80
 800d4ae:	d00a      	beq.n	800d4c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4b0:	7bbb      	ldrb	r3, [r7, #14]
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f001 f968 	bl	800e78a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4ba:	2180      	movs	r1, #128	@ 0x80
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f001 f964 	bl	800e78a <USBD_LL_StallEP>
 800d4c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d4c4:	e040      	b.n	800d548 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 fc3e 	bl	800dd4a <USBD_CtlError>
              break;
 800d4ce:	e03b      	b.n	800d548 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	885b      	ldrh	r3, [r3, #2]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d136      	bne.n	800d546 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d4d8:	7bbb      	ldrb	r3, [r7, #14]
 800d4da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d004      	beq.n	800d4ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d4e2:	7bbb      	ldrb	r3, [r7, #14]
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f001 f96e 	bl	800e7c8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 fce6 	bl	800debe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d4f2:	7bbb      	ldrb	r3, [r7, #14]
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f7ff fde3 	bl	800d0c2 <USBD_CoreFindEP>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d500:	7b7b      	ldrb	r3, [r7, #13]
 800d502:	2bff      	cmp	r3, #255	@ 0xff
 800d504:	d01f      	beq.n	800d546 <USBD_StdEPReq+0x1c6>
 800d506:	7b7b      	ldrb	r3, [r7, #13]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d11c      	bne.n	800d546 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d50c:	7b7a      	ldrb	r2, [r7, #13]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d514:	7b7a      	ldrb	r2, [r7, #13]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	32ae      	adds	r2, #174	@ 0xae
 800d51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d010      	beq.n	800d546 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d524:	7b7a      	ldrb	r2, [r7, #13]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	32ae      	adds	r2, #174	@ 0xae
 800d52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	6839      	ldr	r1, [r7, #0]
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	4798      	blx	r3
 800d536:	4603      	mov	r3, r0
 800d538:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d53a:	e004      	b.n	800d546 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d53c:	6839      	ldr	r1, [r7, #0]
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fc03 	bl	800dd4a <USBD_CtlError>
              break;
 800d544:	e000      	b.n	800d548 <USBD_StdEPReq+0x1c8>
              break;
 800d546:	bf00      	nop
          }
          break;
 800d548:	e0ab      	b.n	800d6a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b02      	cmp	r3, #2
 800d554:	d002      	beq.n	800d55c <USBD_StdEPReq+0x1dc>
 800d556:	2b03      	cmp	r3, #3
 800d558:	d032      	beq.n	800d5c0 <USBD_StdEPReq+0x240>
 800d55a:	e097      	b.n	800d68c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d55c:	7bbb      	ldrb	r3, [r7, #14]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d007      	beq.n	800d572 <USBD_StdEPReq+0x1f2>
 800d562:	7bbb      	ldrb	r3, [r7, #14]
 800d564:	2b80      	cmp	r3, #128	@ 0x80
 800d566:	d004      	beq.n	800d572 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d568:	6839      	ldr	r1, [r7, #0]
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 fbed 	bl	800dd4a <USBD_CtlError>
                break;
 800d570:	e091      	b.n	800d696 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d572:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d576:	2b00      	cmp	r3, #0
 800d578:	da0b      	bge.n	800d592 <USBD_StdEPReq+0x212>
 800d57a:	7bbb      	ldrb	r3, [r7, #14]
 800d57c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d580:	4613      	mov	r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	4413      	add	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	3310      	adds	r3, #16
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	4413      	add	r3, r2
 800d58e:	3304      	adds	r3, #4
 800d590:	e00b      	b.n	800d5aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d592:	7bbb      	ldrb	r3, [r7, #14]
 800d594:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d598:	4613      	mov	r3, r2
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	4413      	add	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	2202      	movs	r2, #2
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 fc43 	bl	800de44 <USBD_CtlSendData>
              break;
 800d5be:	e06a      	b.n	800d696 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d5c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	da11      	bge.n	800d5ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d5c8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ca:	f003 020f 	and.w	r2, r3, #15
 800d5ce:	6879      	ldr	r1, [r7, #4]
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	4413      	add	r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	440b      	add	r3, r1
 800d5da:	3324      	adds	r3, #36	@ 0x24
 800d5dc:	881b      	ldrh	r3, [r3, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d117      	bne.n	800d612 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d5e2:	6839      	ldr	r1, [r7, #0]
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 fbb0 	bl	800dd4a <USBD_CtlError>
                  break;
 800d5ea:	e054      	b.n	800d696 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d5ec:	7bbb      	ldrb	r3, [r7, #14]
 800d5ee:	f003 020f 	and.w	r2, r3, #15
 800d5f2:	6879      	ldr	r1, [r7, #4]
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	4413      	add	r3, r2
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	440b      	add	r3, r1
 800d5fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d602:	881b      	ldrh	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d104      	bne.n	800d612 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d608:	6839      	ldr	r1, [r7, #0]
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 fb9d 	bl	800dd4a <USBD_CtlError>
                  break;
 800d610:	e041      	b.n	800d696 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d612:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d616:	2b00      	cmp	r3, #0
 800d618:	da0b      	bge.n	800d632 <USBD_StdEPReq+0x2b2>
 800d61a:	7bbb      	ldrb	r3, [r7, #14]
 800d61c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d620:	4613      	mov	r3, r2
 800d622:	009b      	lsls	r3, r3, #2
 800d624:	4413      	add	r3, r2
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	3310      	adds	r3, #16
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	4413      	add	r3, r2
 800d62e:	3304      	adds	r3, #4
 800d630:	e00b      	b.n	800d64a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d632:	7bbb      	ldrb	r3, [r7, #14]
 800d634:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d638:	4613      	mov	r3, r2
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	4413      	add	r3, r2
 800d63e:	009b      	lsls	r3, r3, #2
 800d640:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	4413      	add	r3, r2
 800d648:	3304      	adds	r3, #4
 800d64a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d64c:	7bbb      	ldrb	r3, [r7, #14]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d002      	beq.n	800d658 <USBD_StdEPReq+0x2d8>
 800d652:	7bbb      	ldrb	r3, [r7, #14]
 800d654:	2b80      	cmp	r3, #128	@ 0x80
 800d656:	d103      	bne.n	800d660 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	2200      	movs	r2, #0
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	e00e      	b.n	800d67e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d660:	7bbb      	ldrb	r3, [r7, #14]
 800d662:	4619      	mov	r1, r3
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f001 f8ce 	bl	800e806 <USBD_LL_IsStallEP>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d003      	beq.n	800d678 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	2201      	movs	r2, #1
 800d674:	601a      	str	r2, [r3, #0]
 800d676:	e002      	b.n	800d67e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	2200      	movs	r2, #0
 800d67c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	2202      	movs	r2, #2
 800d682:	4619      	mov	r1, r3
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fbdd 	bl	800de44 <USBD_CtlSendData>
              break;
 800d68a:	e004      	b.n	800d696 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d68c:	6839      	ldr	r1, [r7, #0]
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 fb5b 	bl	800dd4a <USBD_CtlError>
              break;
 800d694:	bf00      	nop
          }
          break;
 800d696:	e004      	b.n	800d6a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d698:	6839      	ldr	r1, [r7, #0]
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fb55 	bl	800dd4a <USBD_CtlError>
          break;
 800d6a0:	bf00      	nop
      }
      break;
 800d6a2:	e005      	b.n	800d6b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d6a4:	6839      	ldr	r1, [r7, #0]
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 fb4f 	bl	800dd4a <USBD_CtlError>
      break;
 800d6ac:	e000      	b.n	800d6b0 <USBD_StdEPReq+0x330>
      break;
 800d6ae:	bf00      	nop
  }

  return ret;
 800d6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
	...

0800d6bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	885b      	ldrh	r3, [r3, #2]
 800d6d6:	0a1b      	lsrs	r3, r3, #8
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	3b01      	subs	r3, #1
 800d6dc:	2b06      	cmp	r3, #6
 800d6de:	f200 8128 	bhi.w	800d932 <USBD_GetDescriptor+0x276>
 800d6e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e8 <USBD_GetDescriptor+0x2c>)
 800d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e8:	0800d705 	.word	0x0800d705
 800d6ec:	0800d71d 	.word	0x0800d71d
 800d6f0:	0800d75d 	.word	0x0800d75d
 800d6f4:	0800d933 	.word	0x0800d933
 800d6f8:	0800d933 	.word	0x0800d933
 800d6fc:	0800d8d3 	.word	0x0800d8d3
 800d700:	0800d8ff 	.word	0x0800d8ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	7c12      	ldrb	r2, [r2, #16]
 800d710:	f107 0108 	add.w	r1, r7, #8
 800d714:	4610      	mov	r0, r2
 800d716:	4798      	blx	r3
 800d718:	60f8      	str	r0, [r7, #12]
      break;
 800d71a:	e112      	b.n	800d942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	7c1b      	ldrb	r3, [r3, #16]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10d      	bne.n	800d740 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d72c:	f107 0208 	add.w	r2, r7, #8
 800d730:	4610      	mov	r0, r2
 800d732:	4798      	blx	r3
 800d734:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	3301      	adds	r3, #1
 800d73a:	2202      	movs	r2, #2
 800d73c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d73e:	e100      	b.n	800d942 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d748:	f107 0208 	add.w	r2, r7, #8
 800d74c:	4610      	mov	r0, r2
 800d74e:	4798      	blx	r3
 800d750:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	3301      	adds	r3, #1
 800d756:	2202      	movs	r2, #2
 800d758:	701a      	strb	r2, [r3, #0]
      break;
 800d75a:	e0f2      	b.n	800d942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	885b      	ldrh	r3, [r3, #2]
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b05      	cmp	r3, #5
 800d764:	f200 80ac 	bhi.w	800d8c0 <USBD_GetDescriptor+0x204>
 800d768:	a201      	add	r2, pc, #4	@ (adr r2, 800d770 <USBD_GetDescriptor+0xb4>)
 800d76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76e:	bf00      	nop
 800d770:	0800d789 	.word	0x0800d789
 800d774:	0800d7bd 	.word	0x0800d7bd
 800d778:	0800d7f1 	.word	0x0800d7f1
 800d77c:	0800d825 	.word	0x0800d825
 800d780:	0800d859 	.word	0x0800d859
 800d784:	0800d88d 	.word	0x0800d88d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00b      	beq.n	800d7ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	7c12      	ldrb	r2, [r2, #16]
 800d7a0:	f107 0108 	add.w	r1, r7, #8
 800d7a4:	4610      	mov	r0, r2
 800d7a6:	4798      	blx	r3
 800d7a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7aa:	e091      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7ac:	6839      	ldr	r1, [r7, #0]
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 facb 	bl	800dd4a <USBD_CtlError>
            err++;
 800d7b4:	7afb      	ldrb	r3, [r7, #11]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ba:	e089      	b.n	800d8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00b      	beq.n	800d7e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	7c12      	ldrb	r2, [r2, #16]
 800d7d4:	f107 0108 	add.w	r1, r7, #8
 800d7d8:	4610      	mov	r0, r2
 800d7da:	4798      	blx	r3
 800d7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7de:	e077      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7e0:	6839      	ldr	r1, [r7, #0]
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 fab1 	bl	800dd4a <USBD_CtlError>
            err++;
 800d7e8:	7afb      	ldrb	r3, [r7, #11]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ee:	e06f      	b.n	800d8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00b      	beq.n	800d814 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	7c12      	ldrb	r2, [r2, #16]
 800d808:	f107 0108 	add.w	r1, r7, #8
 800d80c:	4610      	mov	r0, r2
 800d80e:	4798      	blx	r3
 800d810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d812:	e05d      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d814:	6839      	ldr	r1, [r7, #0]
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 fa97 	bl	800dd4a <USBD_CtlError>
            err++;
 800d81c:	7afb      	ldrb	r3, [r7, #11]
 800d81e:	3301      	adds	r3, #1
 800d820:	72fb      	strb	r3, [r7, #11]
          break;
 800d822:	e055      	b.n	800d8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d82a:	691b      	ldr	r3, [r3, #16]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00b      	beq.n	800d848 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	7c12      	ldrb	r2, [r2, #16]
 800d83c:	f107 0108 	add.w	r1, r7, #8
 800d840:	4610      	mov	r0, r2
 800d842:	4798      	blx	r3
 800d844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d846:	e043      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d848:	6839      	ldr	r1, [r7, #0]
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 fa7d 	bl	800dd4a <USBD_CtlError>
            err++;
 800d850:	7afb      	ldrb	r3, [r7, #11]
 800d852:	3301      	adds	r3, #1
 800d854:	72fb      	strb	r3, [r7, #11]
          break;
 800d856:	e03b      	b.n	800d8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d85e:	695b      	ldr	r3, [r3, #20]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d00b      	beq.n	800d87c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d86a:	695b      	ldr	r3, [r3, #20]
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	7c12      	ldrb	r2, [r2, #16]
 800d870:	f107 0108 	add.w	r1, r7, #8
 800d874:	4610      	mov	r0, r2
 800d876:	4798      	blx	r3
 800d878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d87a:	e029      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d87c:	6839      	ldr	r1, [r7, #0]
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 fa63 	bl	800dd4a <USBD_CtlError>
            err++;
 800d884:	7afb      	ldrb	r3, [r7, #11]
 800d886:	3301      	adds	r3, #1
 800d888:	72fb      	strb	r3, [r7, #11]
          break;
 800d88a:	e021      	b.n	800d8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d892:	699b      	ldr	r3, [r3, #24]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00b      	beq.n	800d8b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d89e:	699b      	ldr	r3, [r3, #24]
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	7c12      	ldrb	r2, [r2, #16]
 800d8a4:	f107 0108 	add.w	r1, r7, #8
 800d8a8:	4610      	mov	r0, r2
 800d8aa:	4798      	blx	r3
 800d8ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8ae:	e00f      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8b0:	6839      	ldr	r1, [r7, #0]
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 fa49 	bl	800dd4a <USBD_CtlError>
            err++;
 800d8b8:	7afb      	ldrb	r3, [r7, #11]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	72fb      	strb	r3, [r7, #11]
          break;
 800d8be:	e007      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d8c0:	6839      	ldr	r1, [r7, #0]
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 fa41 	bl	800dd4a <USBD_CtlError>
          err++;
 800d8c8:	7afb      	ldrb	r3, [r7, #11]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d8ce:	bf00      	nop
      }
      break;
 800d8d0:	e037      	b.n	800d942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	7c1b      	ldrb	r3, [r3, #16]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d109      	bne.n	800d8ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8e2:	f107 0208 	add.w	r2, r7, #8
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	4798      	blx	r3
 800d8ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8ec:	e029      	b.n	800d942 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d8ee:	6839      	ldr	r1, [r7, #0]
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 fa2a 	bl	800dd4a <USBD_CtlError>
        err++;
 800d8f6:	7afb      	ldrb	r3, [r7, #11]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	72fb      	strb	r3, [r7, #11]
      break;
 800d8fc:	e021      	b.n	800d942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	7c1b      	ldrb	r3, [r3, #16]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10d      	bne.n	800d922 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d90c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d90e:	f107 0208 	add.w	r2, r7, #8
 800d912:	4610      	mov	r0, r2
 800d914:	4798      	blx	r3
 800d916:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	3301      	adds	r3, #1
 800d91c:	2207      	movs	r2, #7
 800d91e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d920:	e00f      	b.n	800d942 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d922:	6839      	ldr	r1, [r7, #0]
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 fa10 	bl	800dd4a <USBD_CtlError>
        err++;
 800d92a:	7afb      	ldrb	r3, [r7, #11]
 800d92c:	3301      	adds	r3, #1
 800d92e:	72fb      	strb	r3, [r7, #11]
      break;
 800d930:	e007      	b.n	800d942 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d932:	6839      	ldr	r1, [r7, #0]
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 fa08 	bl	800dd4a <USBD_CtlError>
      err++;
 800d93a:	7afb      	ldrb	r3, [r7, #11]
 800d93c:	3301      	adds	r3, #1
 800d93e:	72fb      	strb	r3, [r7, #11]
      break;
 800d940:	bf00      	nop
  }

  if (err != 0U)
 800d942:	7afb      	ldrb	r3, [r7, #11]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d11e      	bne.n	800d986 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	88db      	ldrh	r3, [r3, #6]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d016      	beq.n	800d97e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d950:	893b      	ldrh	r3, [r7, #8]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00e      	beq.n	800d974 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	88da      	ldrh	r2, [r3, #6]
 800d95a:	893b      	ldrh	r3, [r7, #8]
 800d95c:	4293      	cmp	r3, r2
 800d95e:	bf28      	it	cs
 800d960:	4613      	movcs	r3, r2
 800d962:	b29b      	uxth	r3, r3
 800d964:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d966:	893b      	ldrh	r3, [r7, #8]
 800d968:	461a      	mov	r2, r3
 800d96a:	68f9      	ldr	r1, [r7, #12]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 fa69 	bl	800de44 <USBD_CtlSendData>
 800d972:	e009      	b.n	800d988 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d974:	6839      	ldr	r1, [r7, #0]
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f9e7 	bl	800dd4a <USBD_CtlError>
 800d97c:	e004      	b.n	800d988 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 fa9d 	bl	800debe <USBD_CtlSendStatus>
 800d984:	e000      	b.n	800d988 <USBD_GetDescriptor+0x2cc>
    return;
 800d986:	bf00      	nop
  }
}
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop

0800d990 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	889b      	ldrh	r3, [r3, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d131      	bne.n	800da06 <USBD_SetAddress+0x76>
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	88db      	ldrh	r3, [r3, #6]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d12d      	bne.n	800da06 <USBD_SetAddress+0x76>
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	885b      	ldrh	r3, [r3, #2]
 800d9ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800d9b0:	d829      	bhi.n	800da06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	885b      	ldrh	r3, [r3, #2]
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b03      	cmp	r3, #3
 800d9c8:	d104      	bne.n	800d9d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d9ca:	6839      	ldr	r1, [r7, #0]
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 f9bc 	bl	800dd4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9d2:	e01d      	b.n	800da10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	7bfa      	ldrb	r2, [r7, #15]
 800d9d8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d9dc:	7bfb      	ldrb	r3, [r7, #15]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 ff3c 	bl	800e85e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fa69 	bl	800debe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d9ec:	7bfb      	ldrb	r3, [r7, #15]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d004      	beq.n	800d9fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2202      	movs	r2, #2
 800d9f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9fa:	e009      	b.n	800da10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da04:	e004      	b.n	800da10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800da06:	6839      	ldr	r1, [r7, #0]
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 f99e 	bl	800dd4a <USBD_CtlError>
  }
}
 800da0e:	bf00      	nop
 800da10:	bf00      	nop
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	885b      	ldrh	r3, [r3, #2]
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	4b4e      	ldr	r3, [pc, #312]	@ (800db68 <USBD_SetConfig+0x150>)
 800da2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800da30:	4b4d      	ldr	r3, [pc, #308]	@ (800db68 <USBD_SetConfig+0x150>)
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d905      	bls.n	800da44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800da38:	6839      	ldr	r1, [r7, #0]
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 f985 	bl	800dd4a <USBD_CtlError>
    return USBD_FAIL;
 800da40:	2303      	movs	r3, #3
 800da42:	e08c      	b.n	800db5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d002      	beq.n	800da56 <USBD_SetConfig+0x3e>
 800da50:	2b03      	cmp	r3, #3
 800da52:	d029      	beq.n	800daa8 <USBD_SetConfig+0x90>
 800da54:	e075      	b.n	800db42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800da56:	4b44      	ldr	r3, [pc, #272]	@ (800db68 <USBD_SetConfig+0x150>)
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d020      	beq.n	800daa0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800da5e:	4b42      	ldr	r3, [pc, #264]	@ (800db68 <USBD_SetConfig+0x150>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	461a      	mov	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da68:	4b3f      	ldr	r3, [pc, #252]	@ (800db68 <USBD_SetConfig+0x150>)
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	4619      	mov	r1, r3
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7fe ffe2 	bl	800ca38 <USBD_SetClassConfig>
 800da74:	4603      	mov	r3, r0
 800da76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800da78:	7bfb      	ldrb	r3, [r7, #15]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d008      	beq.n	800da90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800da7e:	6839      	ldr	r1, [r7, #0]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 f962 	bl	800dd4a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2202      	movs	r2, #2
 800da8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da8e:	e065      	b.n	800db5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 fa14 	bl	800debe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2203      	movs	r2, #3
 800da9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800da9e:	e05d      	b.n	800db5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 fa0c 	bl	800debe <USBD_CtlSendStatus>
      break;
 800daa6:	e059      	b.n	800db5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800daa8:	4b2f      	ldr	r3, [pc, #188]	@ (800db68 <USBD_SetConfig+0x150>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d112      	bne.n	800dad6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2202      	movs	r2, #2
 800dab4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800dab8:	4b2b      	ldr	r3, [pc, #172]	@ (800db68 <USBD_SetConfig+0x150>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	461a      	mov	r2, r3
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dac2:	4b29      	ldr	r3, [pc, #164]	@ (800db68 <USBD_SetConfig+0x150>)
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	4619      	mov	r1, r3
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f7fe ffd1 	bl	800ca70 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 f9f5 	bl	800debe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dad4:	e042      	b.n	800db5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dad6:	4b24      	ldr	r3, [pc, #144]	@ (800db68 <USBD_SetConfig+0x150>)
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	461a      	mov	r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d02a      	beq.n	800db3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	4619      	mov	r1, r3
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7fe ffbf 	bl	800ca70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800daf2:	4b1d      	ldr	r3, [pc, #116]	@ (800db68 <USBD_SetConfig+0x150>)
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	461a      	mov	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dafc:	4b1a      	ldr	r3, [pc, #104]	@ (800db68 <USBD_SetConfig+0x150>)
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	4619      	mov	r1, r3
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7fe ff98 	bl	800ca38 <USBD_SetClassConfig>
 800db08:	4603      	mov	r3, r0
 800db0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800db0c:	7bfb      	ldrb	r3, [r7, #15]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00f      	beq.n	800db32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 f918 	bl	800dd4a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	4619      	mov	r1, r3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7fe ffa4 	bl	800ca70 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2202      	movs	r2, #2
 800db2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800db30:	e014      	b.n	800db5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f9c3 	bl	800debe <USBD_CtlSendStatus>
      break;
 800db38:	e010      	b.n	800db5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f9bf 	bl	800debe <USBD_CtlSendStatus>
      break;
 800db40:	e00c      	b.n	800db5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800db42:	6839      	ldr	r1, [r7, #0]
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 f900 	bl	800dd4a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db4a:	4b07      	ldr	r3, [pc, #28]	@ (800db68 <USBD_SetConfig+0x150>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	4619      	mov	r1, r3
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7fe ff8d 	bl	800ca70 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800db56:	2303      	movs	r3, #3
 800db58:	73fb      	strb	r3, [r7, #15]
      break;
 800db5a:	bf00      	nop
  }

  return ret;
 800db5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	24000254 	.word	0x24000254

0800db6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	88db      	ldrh	r3, [r3, #6]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d004      	beq.n	800db88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800db7e:	6839      	ldr	r1, [r7, #0]
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 f8e2 	bl	800dd4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800db86:	e023      	b.n	800dbd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	2b02      	cmp	r3, #2
 800db92:	dc02      	bgt.n	800db9a <USBD_GetConfig+0x2e>
 800db94:	2b00      	cmp	r3, #0
 800db96:	dc03      	bgt.n	800dba0 <USBD_GetConfig+0x34>
 800db98:	e015      	b.n	800dbc6 <USBD_GetConfig+0x5a>
 800db9a:	2b03      	cmp	r3, #3
 800db9c:	d00b      	beq.n	800dbb6 <USBD_GetConfig+0x4a>
 800db9e:	e012      	b.n	800dbc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	3308      	adds	r3, #8
 800dbaa:	2201      	movs	r2, #1
 800dbac:	4619      	mov	r1, r3
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 f948 	bl	800de44 <USBD_CtlSendData>
        break;
 800dbb4:	e00c      	b.n	800dbd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	2201      	movs	r2, #1
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 f940 	bl	800de44 <USBD_CtlSendData>
        break;
 800dbc4:	e004      	b.n	800dbd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dbc6:	6839      	ldr	r1, [r7, #0]
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f8be 	bl	800dd4a <USBD_CtlError>
        break;
 800dbce:	bf00      	nop
}
 800dbd0:	bf00      	nop
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	3b01      	subs	r3, #1
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	d81e      	bhi.n	800dc2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	88db      	ldrh	r3, [r3, #6]
 800dbf4:	2b02      	cmp	r3, #2
 800dbf6:	d004      	beq.n	800dc02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dbf8:	6839      	ldr	r1, [r7, #0]
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f8a5 	bl	800dd4a <USBD_CtlError>
        break;
 800dc00:	e01a      	b.n	800dc38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2201      	movs	r2, #1
 800dc06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d005      	beq.n	800dc1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	f043 0202 	orr.w	r2, r3, #2
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	330c      	adds	r3, #12
 800dc22:	2202      	movs	r2, #2
 800dc24:	4619      	mov	r1, r3
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f90c 	bl	800de44 <USBD_CtlSendData>
      break;
 800dc2c:	e004      	b.n	800dc38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dc2e:	6839      	ldr	r1, [r7, #0]
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 f88a 	bl	800dd4a <USBD_CtlError>
      break;
 800dc36:	bf00      	nop
  }
}
 800dc38:	bf00      	nop
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	885b      	ldrh	r3, [r3, #2]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d107      	bne.n	800dc62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2201      	movs	r2, #1
 800dc56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 f92f 	bl	800debe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dc60:	e013      	b.n	800dc8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	885b      	ldrh	r3, [r3, #2]
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	d10b      	bne.n	800dc82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	889b      	ldrh	r3, [r3, #4]
 800dc6e:	0a1b      	lsrs	r3, r3, #8
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f91f 	bl	800debe <USBD_CtlSendStatus>
}
 800dc80:	e003      	b.n	800dc8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f860 	bl	800dd4a <USBD_CtlError>
}
 800dc8a:	bf00      	nop
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b082      	sub	sp, #8
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
 800dc9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	3b01      	subs	r3, #1
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d80b      	bhi.n	800dcc2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	885b      	ldrh	r3, [r3, #2]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d10c      	bne.n	800dccc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 f8ff 	bl	800debe <USBD_CtlSendStatus>
      }
      break;
 800dcc0:	e004      	b.n	800dccc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dcc2:	6839      	ldr	r1, [r7, #0]
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 f840 	bl	800dd4a <USBD_CtlError>
      break;
 800dcca:	e000      	b.n	800dcce <USBD_ClrFeature+0x3c>
      break;
 800dccc:	bf00      	nop
  }
}
 800dcce:	bf00      	nop
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b084      	sub	sp, #16
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	781a      	ldrb	r2, [r3, #0]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	781a      	ldrb	r2, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f7ff fa3f 	bl	800d184 <SWAPBYTE>
 800dd06:	4603      	mov	r3, r0
 800dd08:	461a      	mov	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3301      	adds	r3, #1
 800dd12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	3301      	adds	r3, #1
 800dd18:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f7ff fa32 	bl	800d184 <SWAPBYTE>
 800dd20:	4603      	mov	r3, r0
 800dd22:	461a      	mov	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	3301      	adds	r3, #1
 800dd32:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f7ff fa25 	bl	800d184 <SWAPBYTE>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	80da      	strh	r2, [r3, #6]
}
 800dd42:	bf00      	nop
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b082      	sub	sp, #8
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd54:	2180      	movs	r1, #128	@ 0x80
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fd17 	bl	800e78a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 fd13 	bl	800e78a <USBD_LL_StallEP>
}
 800dd64:	bf00      	nop
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b086      	sub	sp, #24
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d042      	beq.n	800de08 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800dd86:	6938      	ldr	r0, [r7, #16]
 800dd88:	f000 f842 	bl	800de10 <USBD_GetLen>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	3301      	adds	r3, #1
 800dd90:	005b      	lsls	r3, r3, #1
 800dd92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd96:	d808      	bhi.n	800ddaa <USBD_GetString+0x3e>
 800dd98:	6938      	ldr	r0, [r7, #16]
 800dd9a:	f000 f839 	bl	800de10 <USBD_GetLen>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	3301      	adds	r3, #1
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	e001      	b.n	800ddae <USBD_GetString+0x42>
 800ddaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ddb2:	7dfb      	ldrb	r3, [r7, #23]
 800ddb4:	68ba      	ldr	r2, [r7, #8]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	7812      	ldrb	r2, [r2, #0]
 800ddbc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddbe:	7dfb      	ldrb	r3, [r7, #23]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ddc4:	7dfb      	ldrb	r3, [r7, #23]
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	4413      	add	r3, r2
 800ddca:	2203      	movs	r2, #3
 800ddcc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ddd4:	e013      	b.n	800ddfe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ddd6:	7dfb      	ldrb	r3, [r7, #23]
 800ddd8:	68ba      	ldr	r2, [r7, #8]
 800ddda:	4413      	add	r3, r2
 800dddc:	693a      	ldr	r2, [r7, #16]
 800ddde:	7812      	ldrb	r2, [r2, #0]
 800dde0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	3301      	adds	r3, #1
 800dde6:	613b      	str	r3, [r7, #16]
    idx++;
 800dde8:	7dfb      	ldrb	r3, [r7, #23]
 800ddea:	3301      	adds	r3, #1
 800ddec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ddee:	7dfb      	ldrb	r3, [r7, #23]
 800ddf0:	68ba      	ldr	r2, [r7, #8]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	701a      	strb	r2, [r3, #0]
    idx++;
 800ddf8:	7dfb      	ldrb	r3, [r7, #23]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d1e7      	bne.n	800ddd6 <USBD_GetString+0x6a>
 800de06:	e000      	b.n	800de0a <USBD_GetString+0x9e>
    return;
 800de08:	bf00      	nop
  }
}
 800de0a:	3718      	adds	r7, #24
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800de10:	b480      	push	{r7}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800de18:	2300      	movs	r3, #0
 800de1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800de20:	e005      	b.n	800de2e <USBD_GetLen+0x1e>
  {
    len++;
 800de22:	7bfb      	ldrb	r3, [r7, #15]
 800de24:	3301      	adds	r3, #1
 800de26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	3301      	adds	r3, #1
 800de2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d1f5      	bne.n	800de22 <USBD_GetLen+0x12>
  }

  return len;
 800de36:	7bfb      	ldrb	r3, [r7, #15]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2202      	movs	r2, #2
 800de54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	68ba      	ldr	r2, [r7, #8]
 800de68:	2100      	movs	r1, #0
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f000 fd16 	bl	800e89c <USBD_LL_Transmit>

  return USBD_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	60f8      	str	r0, [r7, #12]
 800de82:	60b9      	str	r1, [r7, #8]
 800de84:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	68ba      	ldr	r2, [r7, #8]
 800de8a:	2100      	movs	r1, #0
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	f000 fd05 	bl	800e89c <USBD_LL_Transmit>

  return USBD_OK;
 800de92:	2300      	movs	r3, #0
}
 800de94:	4618      	mov	r0, r3
 800de96:	3710      	adds	r7, #16
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	68ba      	ldr	r2, [r7, #8]
 800deac:	2100      	movs	r1, #0
 800deae:	68f8      	ldr	r0, [r7, #12]
 800deb0:	f000 fd15 	bl	800e8de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}

0800debe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800debe:	b580      	push	{r7, lr}
 800dec0:	b082      	sub	sp, #8
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2204      	movs	r2, #4
 800deca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dece:	2300      	movs	r3, #0
 800ded0:	2200      	movs	r2, #0
 800ded2:	2100      	movs	r1, #0
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 fce1 	bl	800e89c <USBD_LL_Transmit>

  return USBD_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2205      	movs	r2, #5
 800def0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800def4:	2300      	movs	r3, #0
 800def6:	2200      	movs	r2, #0
 800def8:	2100      	movs	r1, #0
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f000 fcef 	bl	800e8de <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
	...

0800df0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df10:	2200      	movs	r2, #0
 800df12:	4913      	ldr	r1, [pc, #76]	@ (800df60 <MX_USB_DEVICE_Init+0x54>)
 800df14:	4813      	ldr	r0, [pc, #76]	@ (800df64 <MX_USB_DEVICE_Init+0x58>)
 800df16:	f7fe fd12 	bl	800c93e <USBD_Init>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d001      	beq.n	800df24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df20:	f7f2 fd68 	bl	80009f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800df24:	4910      	ldr	r1, [pc, #64]	@ (800df68 <MX_USB_DEVICE_Init+0x5c>)
 800df26:	480f      	ldr	r0, [pc, #60]	@ (800df64 <MX_USB_DEVICE_Init+0x58>)
 800df28:	f7fe fd39 	bl	800c99e <USBD_RegisterClass>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d001      	beq.n	800df36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df32:	f7f2 fd5f 	bl	80009f4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800df36:	490d      	ldr	r1, [pc, #52]	@ (800df6c <MX_USB_DEVICE_Init+0x60>)
 800df38:	480a      	ldr	r0, [pc, #40]	@ (800df64 <MX_USB_DEVICE_Init+0x58>)
 800df3a:	f7fc fed5 	bl	800ace8 <USBD_MSC_RegisterStorage>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df44:	f7f2 fd56 	bl	80009f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df48:	4806      	ldr	r0, [pc, #24]	@ (800df64 <MX_USB_DEVICE_Init+0x58>)
 800df4a:	f7fe fd5e 	bl	800ca0a <USBD_Start>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d001      	beq.n	800df58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df54:	f7f2 fd4e 	bl	80009f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800df58:	f7f5 fe58 	bl	8003c0c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df5c:	bf00      	nop
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	24000090 	.word	0x24000090
 800df64:	24000258 	.word	0x24000258
 800df68:	24000010 	.word	0x24000010
 800df6c:	240000e0 	.word	0x240000e0

0800df70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	4603      	mov	r3, r0
 800df78:	6039      	str	r1, [r7, #0]
 800df7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	2212      	movs	r2, #18
 800df80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800df82:	4b03      	ldr	r3, [pc, #12]	@ (800df90 <USBD_FS_DeviceDescriptor+0x20>)
}
 800df84:	4618      	mov	r0, r3
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	240000ac 	.word	0x240000ac

0800df94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	4603      	mov	r3, r0
 800df9c:	6039      	str	r1, [r7, #0]
 800df9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	2204      	movs	r2, #4
 800dfa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dfa6:	4b03      	ldr	r3, [pc, #12]	@ (800dfb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr
 800dfb4:	240000c0 	.word	0x240000c0

0800dfb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	6039      	str	r1, [r7, #0]
 800dfc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dfc4:	79fb      	ldrb	r3, [r7, #7]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d105      	bne.n	800dfd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	4907      	ldr	r1, [pc, #28]	@ (800dfec <USBD_FS_ProductStrDescriptor+0x34>)
 800dfce:	4808      	ldr	r0, [pc, #32]	@ (800dff0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dfd0:	f7ff fecc 	bl	800dd6c <USBD_GetString>
 800dfd4:	e004      	b.n	800dfe0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfd6:	683a      	ldr	r2, [r7, #0]
 800dfd8:	4904      	ldr	r1, [pc, #16]	@ (800dfec <USBD_FS_ProductStrDescriptor+0x34>)
 800dfda:	4805      	ldr	r0, [pc, #20]	@ (800dff0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dfdc:	f7ff fec6 	bl	800dd6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfe0:	4b02      	ldr	r3, [pc, #8]	@ (800dfec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3708      	adds	r7, #8
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	24000534 	.word	0x24000534
 800dff0:	0800ea5c 	.word	0x0800ea5c

0800dff4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	4603      	mov	r3, r0
 800dffc:	6039      	str	r1, [r7, #0]
 800dffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e000:	683a      	ldr	r2, [r7, #0]
 800e002:	4904      	ldr	r1, [pc, #16]	@ (800e014 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e004:	4804      	ldr	r0, [pc, #16]	@ (800e018 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e006:	f7ff feb1 	bl	800dd6c <USBD_GetString>
  return USBD_StrDesc;
 800e00a:	4b02      	ldr	r3, [pc, #8]	@ (800e014 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	24000534 	.word	0x24000534
 800e018:	0800ea70 	.word	0x0800ea70

0800e01c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	4603      	mov	r3, r0
 800e024:	6039      	str	r1, [r7, #0]
 800e026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	221a      	movs	r2, #26
 800e02c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e02e:	f000 f843 	bl	800e0b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e032:	4b02      	ldr	r3, [pc, #8]	@ (800e03c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e034:	4618      	mov	r0, r3
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	240000c4 	.word	0x240000c4

0800e040 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	4603      	mov	r3, r0
 800e048:	6039      	str	r1, [r7, #0]
 800e04a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e04c:	79fb      	ldrb	r3, [r7, #7]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d105      	bne.n	800e05e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e052:	683a      	ldr	r2, [r7, #0]
 800e054:	4907      	ldr	r1, [pc, #28]	@ (800e074 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e056:	4808      	ldr	r0, [pc, #32]	@ (800e078 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e058:	f7ff fe88 	bl	800dd6c <USBD_GetString>
 800e05c:	e004      	b.n	800e068 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e05e:	683a      	ldr	r2, [r7, #0]
 800e060:	4904      	ldr	r1, [pc, #16]	@ (800e074 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e062:	4805      	ldr	r0, [pc, #20]	@ (800e078 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e064:	f7ff fe82 	bl	800dd6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e068:	4b02      	ldr	r3, [pc, #8]	@ (800e074 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	24000534 	.word	0x24000534
 800e078:	0800ea84 	.word	0x0800ea84

0800e07c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	4603      	mov	r3, r0
 800e084:	6039      	str	r1, [r7, #0]
 800e086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e088:	79fb      	ldrb	r3, [r7, #7]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d105      	bne.n	800e09a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e08e:	683a      	ldr	r2, [r7, #0]
 800e090:	4907      	ldr	r1, [pc, #28]	@ (800e0b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e092:	4808      	ldr	r0, [pc, #32]	@ (800e0b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e094:	f7ff fe6a 	bl	800dd6c <USBD_GetString>
 800e098:	e004      	b.n	800e0a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e09a:	683a      	ldr	r2, [r7, #0]
 800e09c:	4904      	ldr	r1, [pc, #16]	@ (800e0b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e09e:	4805      	ldr	r0, [pc, #20]	@ (800e0b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e0a0:	f7ff fe64 	bl	800dd6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e0a4:	4b02      	ldr	r3, [pc, #8]	@ (800e0b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	24000534 	.word	0x24000534
 800e0b4:	0800ea90 	.word	0x0800ea90

0800e0b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e0be:	4b0f      	ldr	r3, [pc, #60]	@ (800e0fc <Get_SerialNum+0x44>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e0c4:	4b0e      	ldr	r3, [pc, #56]	@ (800e100 <Get_SerialNum+0x48>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e0ca:	4b0e      	ldr	r3, [pc, #56]	@ (800e104 <Get_SerialNum+0x4c>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d009      	beq.n	800e0f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e0de:	2208      	movs	r2, #8
 800e0e0:	4909      	ldr	r1, [pc, #36]	@ (800e108 <Get_SerialNum+0x50>)
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f000 f814 	bl	800e110 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e0e8:	2204      	movs	r2, #4
 800e0ea:	4908      	ldr	r1, [pc, #32]	@ (800e10c <Get_SerialNum+0x54>)
 800e0ec:	68b8      	ldr	r0, [r7, #8]
 800e0ee:	f000 f80f 	bl	800e110 <IntToUnicode>
  }
}
 800e0f2:	bf00      	nop
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	1ff1e800 	.word	0x1ff1e800
 800e100:	1ff1e804 	.word	0x1ff1e804
 800e104:	1ff1e808 	.word	0x1ff1e808
 800e108:	240000c6 	.word	0x240000c6
 800e10c:	240000d6 	.word	0x240000d6

0800e110 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e110:	b480      	push	{r7}
 800e112:	b087      	sub	sp, #28
 800e114:	af00      	add	r7, sp, #0
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	4613      	mov	r3, r2
 800e11c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e122:	2300      	movs	r3, #0
 800e124:	75fb      	strb	r3, [r7, #23]
 800e126:	e027      	b.n	800e178 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	0f1b      	lsrs	r3, r3, #28
 800e12c:	2b09      	cmp	r3, #9
 800e12e:	d80b      	bhi.n	800e148 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	0f1b      	lsrs	r3, r3, #28
 800e134:	b2da      	uxtb	r2, r3
 800e136:	7dfb      	ldrb	r3, [r7, #23]
 800e138:	005b      	lsls	r3, r3, #1
 800e13a:	4619      	mov	r1, r3
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	440b      	add	r3, r1
 800e140:	3230      	adds	r2, #48	@ 0x30
 800e142:	b2d2      	uxtb	r2, r2
 800e144:	701a      	strb	r2, [r3, #0]
 800e146:	e00a      	b.n	800e15e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	0f1b      	lsrs	r3, r3, #28
 800e14c:	b2da      	uxtb	r2, r3
 800e14e:	7dfb      	ldrb	r3, [r7, #23]
 800e150:	005b      	lsls	r3, r3, #1
 800e152:	4619      	mov	r1, r3
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	440b      	add	r3, r1
 800e158:	3237      	adds	r2, #55	@ 0x37
 800e15a:	b2d2      	uxtb	r2, r2
 800e15c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	011b      	lsls	r3, r3, #4
 800e162:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e164:	7dfb      	ldrb	r3, [r7, #23]
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	3301      	adds	r3, #1
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	4413      	add	r3, r2
 800e16e:	2200      	movs	r2, #0
 800e170:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e172:	7dfb      	ldrb	r3, [r7, #23]
 800e174:	3301      	adds	r3, #1
 800e176:	75fb      	strb	r3, [r7, #23]
 800e178:	7dfa      	ldrb	r2, [r7, #23]
 800e17a:	79fb      	ldrb	r3, [r7, #7]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d3d3      	bcc.n	800e128 <IntToUnicode+0x18>
  }
}
 800e180:	bf00      	nop
 800e182:	bf00      	nop
 800e184:	371c      	adds	r7, #28
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr

0800e18e <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800e18e:	b480      	push	{r7}
 800e190:	b083      	sub	sp, #12
 800e192:	af00      	add	r7, sp, #0
 800e194:	4603      	mov	r3, r0
 800e196:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);
// CSP_QUADSPI_Init();
  return (USBD_OK);
 800e198:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	370c      	adds	r7, #12
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr

0800e1a6 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800e1a6:	b480      	push	{r7}
 800e1a8:	b085      	sub	sp, #20
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	60b9      	str	r1, [r7, #8]
 800e1b0:	607a      	str	r2, [r7, #4]
 800e1b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e1ba:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e1c2:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800e1c4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr

0800e1d2 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800e1d2:	b480      	push	{r7}
 800e1d4:	b083      	sub	sp, #12
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	4603      	mov	r3, r0
 800e1da:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800e1dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	370c      	adds	r7, #12
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e8:	4770      	bx	lr

0800e1ea <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800e1ea:	b480      	push	{r7}
 800e1ec:	b083      	sub	sp, #12
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800e1f4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	370c      	adds	r7, #12
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
	...

0800e204 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60b9      	str	r1, [r7, #8]
 800e20c:	607a      	str	r2, [r7, #4]
 800e20e:	461a      	mov	r2, r3
 800e210:	4603      	mov	r3, r0
 800e212:	73fb      	strb	r3, [r7, #15]
 800e214:	4613      	mov	r3, r2
 800e216:	81bb      	strh	r3, [r7, #12]
 // UNUSED(buf);
 // UNUSED(blk_addr);
 // UNUSED(blk_len);
  //return (USBD_OK);
  //counter++;
  if(_flags.read_busy==0 && _flags.write_busy==0){
 800e218:	4b14      	ldr	r3, [pc, #80]	@ (800e26c <STORAGE_Read_FS+0x68>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d116      	bne.n	800e24e <STORAGE_Read_FS+0x4a>
 800e220:	4b12      	ldr	r3, [pc, #72]	@ (800e26c <STORAGE_Read_FS+0x68>)
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d112      	bne.n	800e24e <STORAGE_Read_FS+0x4a>

  check_._sizes[1].blk_len=blk_len;
 800e228:	89bb      	ldrh	r3, [r7, #12]
 800e22a:	4a11      	ldr	r2, [pc, #68]	@ (800e270 <STORAGE_Read_FS+0x6c>)
 800e22c:	60d3      	str	r3, [r2, #12]
  check_._sizes[1].blk_addr=blk_addr;
 800e22e:	4a10      	ldr	r2, [pc, #64]	@ (800e270 <STORAGE_Read_FS+0x6c>)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6113      	str	r3, [r2, #16]
  check_._sizes[1].r_w=0;  //
 800e234:	4b0e      	ldr	r3, [pc, #56]	@ (800e270 <STORAGE_Read_FS+0x6c>)
 800e236:	2200      	movs	r2, #0
 800e238:	615a      	str	r2, [r3, #20]
  CSP_QSPI_Read(buf, blk_addr*STORAGE_BLK_SIZ, STORAGE_BLK_SIZ);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	031b      	lsls	r3, r3, #12
 800e23e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e242:	4619      	mov	r1, r3
 800e244:	68b8      	ldr	r0, [r7, #8]
 800e246:	f7f2 fd5d 	bl	8000d04 <CSP_QSPI_Read>

	  return (USBD_OK);
 800e24a:	2300      	movs	r3, #0
 800e24c:	e009      	b.n	800e262 <STORAGE_Read_FS+0x5e>
  }
  if(_flags.read_busy==2)
 800e24e:	4b07      	ldr	r3, [pc, #28]	@ (800e26c <STORAGE_Read_FS+0x68>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2b02      	cmp	r3, #2
 800e254:	d104      	bne.n	800e260 <STORAGE_Read_FS+0x5c>
  {

	//  memcpy(buf, arr,STORAGE_BLK_SIZ*blk_len);
	  _flags.read_busy=0;
 800e256:	4b05      	ldr	r3, [pc, #20]	@ (800e26c <STORAGE_Read_FS+0x68>)
 800e258:	2200      	movs	r2, #0
 800e25a:	601a      	str	r2, [r3, #0]
	  return (USBD_OK);
 800e25c:	2300      	movs	r3, #0
 800e25e:	e000      	b.n	800e262 <STORAGE_Read_FS+0x5e>
  }
  else {return (USBD_FAIL);}
 800e260:	2303      	movs	r3, #3
 // CSP_QSPI_Read(buf, blk_addr*blk_len, STORAGE_BLK_SIZ);
 // memcpy(buf, &arr[blk_addr*STORAGE_BLK_SIZ],STORAGE_BLK_SIZ*blk_len);

  /* USER CODE END 6 */
}
 800e262:	4618      	mov	r0, r3
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	2400011c 	.word	0x2400011c
 800e270:	24000734 	.word	0x24000734

0800e274 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b084      	sub	sp, #16
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60b9      	str	r1, [r7, #8]
 800e27c:	607a      	str	r2, [r7, #4]
 800e27e:	461a      	mov	r2, r3
 800e280:	4603      	mov	r3, r0
 800e282:	73fb      	strb	r3, [r7, #15]
 800e284:	4613      	mov	r3, r2
 800e286:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
 // UNUSED(buf);
 // UNUSED(blk_addr);
 //UNUSED(blk_len);

  if(_flags.write_busy==0){
 800e288:	4b16      	ldr	r3, [pc, #88]	@ (800e2e4 <STORAGE_Write_FS+0x70>)
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d123      	bne.n	800e2d8 <STORAGE_Write_FS+0x64>
  check_._sizes[0].blk_len=blk_len;
 800e290:	89bb      	ldrh	r3, [r7, #12]
 800e292:	4a15      	ldr	r2, [pc, #84]	@ (800e2e8 <STORAGE_Write_FS+0x74>)
 800e294:	6013      	str	r3, [r2, #0]
  check_._sizes[0].blk_addr=blk_addr;
 800e296:	4a14      	ldr	r2, [pc, #80]	@ (800e2e8 <STORAGE_Write_FS+0x74>)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6053      	str	r3, [r2, #4]
  check_._sizes[0].r_w=1;
 800e29c:	4b12      	ldr	r3, [pc, #72]	@ (800e2e8 <STORAGE_Write_FS+0x74>)
 800e29e:	2201      	movs	r2, #1
 800e2a0:	609a      	str	r2, [r3, #8]
 // _flags.write_busy=1;
 counter++;
 800e2a2:	4b12      	ldr	r3, [pc, #72]	@ (800e2ec <STORAGE_Write_FS+0x78>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	4a10      	ldr	r2, [pc, #64]	@ (800e2ec <STORAGE_Write_FS+0x78>)
 800e2aa:	6013      	str	r3, [r2, #0]
  memcpy(arr,buf,STORAGE_BLK_SIZ*blk_len);
 800e2ac:	89bb      	ldrh	r3, [r7, #12]
 800e2ae:	031b      	lsls	r3, r3, #12
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	68b9      	ldr	r1, [r7, #8]
 800e2b4:	480e      	ldr	r0, [pc, #56]	@ (800e2f0 <STORAGE_Write_FS+0x7c>)
 800e2b6:	f000 fbb7 	bl	800ea28 <memcpy>
/*for(uint32_t i=0;i< STORAGE_BLK_SIZ*blk_len;i++){
	arr[i]=buf[i];


}*/
  CSP_QSPI_EraseSector(STORAGE_BLK_SIZ*blk_addr);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	031b      	lsls	r3, r3, #12
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7f2 fc4c 	bl	8000b5c <CSP_QSPI_EraseSector>
 CSP_QSPI_WriteMemory(arr,blk_addr*STORAGE_BLK_SIZ,blk_len*STORAGE_BLK_SIZ);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	0319      	lsls	r1, r3, #12
 800e2c8:	89bb      	ldrh	r3, [r7, #12]
 800e2ca:	031b      	lsls	r3, r3, #12
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	4808      	ldr	r0, [pc, #32]	@ (800e2f0 <STORAGE_Write_FS+0x7c>)
 800e2d0:	f7f2 fc8c 	bl	8000bec <CSP_QSPI_WriteMemory>

  return (USBD_OK);}
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	e000      	b.n	800e2da <STORAGE_Write_FS+0x66>
  else {return (USBD_FAIL);}
 800e2d8:	2303      	movs	r3, #3
  /* USER CODE END 7 */
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	2400011c 	.word	0x2400011c
 800e2e8:	24000734 	.word	0x24000734
 800e2ec:	24003734 	.word	0x24003734
 800e2f0:	24003738 	.word	0x24003738

0800e2f4 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800e2f8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr

0800e304 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b0ba      	sub	sp, #232	@ 0xe8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e30c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e310:	2200      	movs	r2, #0
 800e312:	601a      	str	r2, [r3, #0]
 800e314:	605a      	str	r2, [r3, #4]
 800e316:	609a      	str	r2, [r3, #8]
 800e318:	60da      	str	r2, [r3, #12]
 800e31a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e31c:	f107 0310 	add.w	r3, r7, #16
 800e320:	22c0      	movs	r2, #192	@ 0xc0
 800e322:	2100      	movs	r1, #0
 800e324:	4618      	mov	r0, r3
 800e326:	f000 fb53 	bl	800e9d0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4a33      	ldr	r2, [pc, #204]	@ (800e3fc <HAL_PCD_MspInit+0xf8>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d15f      	bne.n	800e3f4 <HAL_PCD_MspInit+0xf0>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e334:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e338:	f04f 0300 	mov.w	r3, #0
 800e33c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 800e340:	2319      	movs	r3, #25
 800e342:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800e344:	23c0      	movs	r3, #192	@ 0xc0
 800e346:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800e348:	2302      	movs	r3, #2
 800e34a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800e34c:	2304      	movs	r3, #4
 800e34e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800e350:	2302      	movs	r3, #2
 800e352:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800e354:	2300      	movs	r3, #0
 800e356:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800e358:	2300      	movs	r3, #0
 800e35a:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800e35c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e364:	f107 0310 	add.w	r3, r7, #16
 800e368:	4618      	mov	r0, r3
 800e36a:	f7f7 f899 	bl	80054a0 <HAL_RCCEx_PeriphCLKConfig>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b00      	cmp	r3, #0
 800e372:	d001      	beq.n	800e378 <HAL_PCD_MspInit+0x74>
    {
      Error_Handler();
 800e374:	f7f2 fb3e 	bl	80009f4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e378:	f7f5 fc48 	bl	8003c0c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e37c:	4b20      	ldr	r3, [pc, #128]	@ (800e400 <HAL_PCD_MspInit+0xfc>)
 800e37e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e382:	4a1f      	ldr	r2, [pc, #124]	@ (800e400 <HAL_PCD_MspInit+0xfc>)
 800e384:	f043 0301 	orr.w	r3, r3, #1
 800e388:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e38c:	4b1c      	ldr	r3, [pc, #112]	@ (800e400 <HAL_PCD_MspInit+0xfc>)
 800e38e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e392:	f003 0301 	and.w	r3, r3, #1
 800e396:	60fb      	str	r3, [r7, #12]
 800e398:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e39a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e39e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3a2:	2302      	movs	r3, #2
 800e3a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e3b4:	230a      	movs	r3, #10
 800e3b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3ba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e3be:	4619      	mov	r1, r3
 800e3c0:	4810      	ldr	r0, [pc, #64]	@ (800e404 <HAL_PCD_MspInit+0x100>)
 800e3c2:	f7f3 ff53 	bl	800226c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e3c6:	4b0e      	ldr	r3, [pc, #56]	@ (800e400 <HAL_PCD_MspInit+0xfc>)
 800e3c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e3cc:	4a0c      	ldr	r2, [pc, #48]	@ (800e400 <HAL_PCD_MspInit+0xfc>)
 800e3ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e3d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e3d6:	4b0a      	ldr	r3, [pc, #40]	@ (800e400 <HAL_PCD_MspInit+0xfc>)
 800e3d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e3dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e3e0:	60bb      	str	r3, [r7, #8]
 800e3e2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	2065      	movs	r0, #101	@ 0x65
 800e3ea:	f7f3 f92e 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e3ee:	2065      	movs	r0, #101	@ 0x65
 800e3f0:	f7f3 f945 	bl	800167e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e3f4:	bf00      	nop
 800e3f6:	37e8      	adds	r7, #232	@ 0xe8
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	40080000 	.word	0x40080000
 800e400:	58024400 	.word	0x58024400
 800e404:	58020000 	.word	0x58020000

0800e408 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e41c:	4619      	mov	r1, r3
 800e41e:	4610      	mov	r0, r2
 800e420:	f7fe fb40 	bl	800caa4 <USBD_LL_SetupStage>
}
 800e424:	bf00      	nop
 800e426:	3708      	adds	r7, #8
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}

0800e42c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	460b      	mov	r3, r1
 800e436:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e43e:	78fa      	ldrb	r2, [r7, #3]
 800e440:	6879      	ldr	r1, [r7, #4]
 800e442:	4613      	mov	r3, r2
 800e444:	00db      	lsls	r3, r3, #3
 800e446:	4413      	add	r3, r2
 800e448:	009b      	lsls	r3, r3, #2
 800e44a:	440b      	add	r3, r1
 800e44c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	78fb      	ldrb	r3, [r7, #3]
 800e454:	4619      	mov	r1, r3
 800e456:	f7fe fb7a 	bl	800cb4e <USBD_LL_DataOutStage>
}
 800e45a:	bf00      	nop
 800e45c:	3708      	adds	r7, #8
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e462:	b580      	push	{r7, lr}
 800e464:	b082      	sub	sp, #8
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
 800e46a:	460b      	mov	r3, r1
 800e46c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e474:	78fa      	ldrb	r2, [r7, #3]
 800e476:	6879      	ldr	r1, [r7, #4]
 800e478:	4613      	mov	r3, r2
 800e47a:	00db      	lsls	r3, r3, #3
 800e47c:	4413      	add	r3, r2
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	440b      	add	r3, r1
 800e482:	3320      	adds	r3, #32
 800e484:	681a      	ldr	r2, [r3, #0]
 800e486:	78fb      	ldrb	r3, [r7, #3]
 800e488:	4619      	mov	r1, r3
 800e48a:	f7fe fc13 	bl	800ccb4 <USBD_LL_DataInStage>
}
 800e48e:	bf00      	nop
 800e490:	3708      	adds	r7, #8
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}

0800e496 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e496:	b580      	push	{r7, lr}
 800e498:	b082      	sub	sp, #8
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7fe fd4d 	bl	800cf44 <USBD_LL_SOF>
}
 800e4aa:	bf00      	nop
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b084      	sub	sp, #16
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	79db      	ldrb	r3, [r3, #7]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d102      	bne.n	800e4cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	73fb      	strb	r3, [r7, #15]
 800e4ca:	e008      	b.n	800e4de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	79db      	ldrb	r3, [r3, #7]
 800e4d0:	2b02      	cmp	r3, #2
 800e4d2:	d102      	bne.n	800e4da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	73fb      	strb	r3, [r7, #15]
 800e4d8:	e001      	b.n	800e4de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e4da:	f7f2 fa8b 	bl	80009f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e4e4:	7bfa      	ldrb	r2, [r7, #15]
 800e4e6:	4611      	mov	r1, r2
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7fe fce7 	bl	800cebc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7fe fc8f 	bl	800ce18 <USBD_LL_Reset>
}
 800e4fa:	bf00      	nop
 800e4fc:	3710      	adds	r7, #16
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
	...

0800e504 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e512:	4618      	mov	r0, r3
 800e514:	f7fe fce2 	bl	800cedc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	687a      	ldr	r2, [r7, #4]
 800e524:	6812      	ldr	r2, [r2, #0]
 800e526:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e52a:	f043 0301 	orr.w	r3, r3, #1
 800e52e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	7adb      	ldrb	r3, [r3, #11]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d005      	beq.n	800e544 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e538:	4b04      	ldr	r3, [pc, #16]	@ (800e54c <HAL_PCD_SuspendCallback+0x48>)
 800e53a:	691b      	ldr	r3, [r3, #16]
 800e53c:	4a03      	ldr	r2, [pc, #12]	@ (800e54c <HAL_PCD_SuspendCallback+0x48>)
 800e53e:	f043 0306 	orr.w	r3, r3, #6
 800e542:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e544:	bf00      	nop
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	e000ed00 	.word	0xe000ed00

0800e550 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fe fcd8 	bl	800cf14 <USBD_LL_Resume>
}
 800e564:	bf00      	nop
 800e566:	3708      	adds	r7, #8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	460b      	mov	r3, r1
 800e576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e57e:	78fa      	ldrb	r2, [r7, #3]
 800e580:	4611      	mov	r1, r2
 800e582:	4618      	mov	r0, r3
 800e584:	f7fe fd30 	bl	800cfe8 <USBD_LL_IsoOUTIncomplete>
}
 800e588:	bf00      	nop
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	460b      	mov	r3, r1
 800e59a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5a2:	78fa      	ldrb	r2, [r7, #3]
 800e5a4:	4611      	mov	r1, r2
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fe fcec 	bl	800cf84 <USBD_LL_IsoINIncomplete>
}
 800e5ac:	bf00      	nop
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7fe fd42 	bl	800d04c <USBD_LL_DevConnected>
}
 800e5c8:	bf00      	nop
 800e5ca:	3708      	adds	r7, #8
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7fe fd3f 	bl	800d062 <USBD_LL_DevDisconnected>
}
 800e5e4:	bf00      	nop
 800e5e6:	3708      	adds	r7, #8
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d13e      	bne.n	800e67a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e5fc:	4a21      	ldr	r2, [pc, #132]	@ (800e684 <USBD_LL_Init+0x98>)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	4a1f      	ldr	r2, [pc, #124]	@ (800e684 <USBD_LL_Init+0x98>)
 800e608:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e60c:	4b1d      	ldr	r3, [pc, #116]	@ (800e684 <USBD_LL_Init+0x98>)
 800e60e:	4a1e      	ldr	r2, [pc, #120]	@ (800e688 <USBD_LL_Init+0x9c>)
 800e610:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800e612:	4b1c      	ldr	r3, [pc, #112]	@ (800e684 <USBD_LL_Init+0x98>)
 800e614:	2209      	movs	r2, #9
 800e616:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e618:	4b1a      	ldr	r3, [pc, #104]	@ (800e684 <USBD_LL_Init+0x98>)
 800e61a:	2202      	movs	r2, #2
 800e61c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e61e:	4b19      	ldr	r3, [pc, #100]	@ (800e684 <USBD_LL_Init+0x98>)
 800e620:	2200      	movs	r2, #0
 800e622:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e624:	4b17      	ldr	r3, [pc, #92]	@ (800e684 <USBD_LL_Init+0x98>)
 800e626:	2202      	movs	r2, #2
 800e628:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e62a:	4b16      	ldr	r3, [pc, #88]	@ (800e684 <USBD_LL_Init+0x98>)
 800e62c:	2200      	movs	r2, #0
 800e62e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e630:	4b14      	ldr	r3, [pc, #80]	@ (800e684 <USBD_LL_Init+0x98>)
 800e632:	2200      	movs	r2, #0
 800e634:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e636:	4b13      	ldr	r3, [pc, #76]	@ (800e684 <USBD_LL_Init+0x98>)
 800e638:	2200      	movs	r2, #0
 800e63a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e63c:	4b11      	ldr	r3, [pc, #68]	@ (800e684 <USBD_LL_Init+0x98>)
 800e63e:	2200      	movs	r2, #0
 800e640:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e642:	4b10      	ldr	r3, [pc, #64]	@ (800e684 <USBD_LL_Init+0x98>)
 800e644:	2200      	movs	r2, #0
 800e646:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e648:	4b0e      	ldr	r3, [pc, #56]	@ (800e684 <USBD_LL_Init+0x98>)
 800e64a:	2200      	movs	r2, #0
 800e64c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e64e:	480d      	ldr	r0, [pc, #52]	@ (800e684 <USBD_LL_Init+0x98>)
 800e650:	f7f3 ffd5 	bl	80025fe <HAL_PCD_Init>
 800e654:	4603      	mov	r3, r0
 800e656:	2b00      	cmp	r3, #0
 800e658:	d001      	beq.n	800e65e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e65a:	f7f2 f9cb 	bl	80009f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e65e:	2180      	movs	r1, #128	@ 0x80
 800e660:	4808      	ldr	r0, [pc, #32]	@ (800e684 <USBD_LL_Init+0x98>)
 800e662:	f7f5 fa58 	bl	8003b16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e666:	2240      	movs	r2, #64	@ 0x40
 800e668:	2100      	movs	r1, #0
 800e66a:	4806      	ldr	r0, [pc, #24]	@ (800e684 <USBD_LL_Init+0x98>)
 800e66c:	f7f5 fa0c 	bl	8003a88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e670:	2280      	movs	r2, #128	@ 0x80
 800e672:	2101      	movs	r1, #1
 800e674:	4803      	ldr	r0, [pc, #12]	@ (800e684 <USBD_LL_Init+0x98>)
 800e676:	f7f5 fa07 	bl	8003a88 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	24023738 	.word	0x24023738
 800e688:	40080000 	.word	0x40080000

0800e68c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e694:	2300      	movs	r3, #0
 800e696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e698:	2300      	movs	r3, #0
 800e69a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7f4 f8b7 	bl	8002816 <HAL_PCD_Start>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6ac:	7bfb      	ldrb	r3, [r7, #15]
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f000 f962 	bl	800e978 <USBD_Get_USB_Status>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3710      	adds	r7, #16
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b084      	sub	sp, #16
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
 800e6ca:	4608      	mov	r0, r1
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	70fb      	strb	r3, [r7, #3]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	70bb      	strb	r3, [r7, #2]
 800e6d8:	4613      	mov	r3, r2
 800e6da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6ea:	78bb      	ldrb	r3, [r7, #2]
 800e6ec:	883a      	ldrh	r2, [r7, #0]
 800e6ee:	78f9      	ldrb	r1, [r7, #3]
 800e6f0:	f7f4 fdb8 	bl	8003264 <HAL_PCD_EP_Open>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6f8:	7bfb      	ldrb	r3, [r7, #15]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f000 f93c 	bl	800e978 <USBD_Get_USB_Status>
 800e700:	4603      	mov	r3, r0
 800e702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e704:	7bbb      	ldrb	r3, [r7, #14]
}
 800e706:	4618      	mov	r0, r3
 800e708:	3710      	adds	r7, #16
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e70e:	b580      	push	{r7, lr}
 800e710:	b084      	sub	sp, #16
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
 800e716:	460b      	mov	r3, r1
 800e718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e71a:	2300      	movs	r3, #0
 800e71c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e71e:	2300      	movs	r3, #0
 800e720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e728:	78fa      	ldrb	r2, [r7, #3]
 800e72a:	4611      	mov	r1, r2
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7f4 fe03 	bl	8003338 <HAL_PCD_EP_Close>
 800e732:	4603      	mov	r3, r0
 800e734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e736:	7bfb      	ldrb	r3, [r7, #15]
 800e738:	4618      	mov	r0, r3
 800e73a:	f000 f91d 	bl	800e978 <USBD_Get_USB_Status>
 800e73e:	4603      	mov	r3, r0
 800e740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e742:	7bbb      	ldrb	r3, [r7, #14]
}
 800e744:	4618      	mov	r0, r3
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	460b      	mov	r3, r1
 800e756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e758:	2300      	movs	r3, #0
 800e75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e75c:	2300      	movs	r3, #0
 800e75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e766:	78fa      	ldrb	r2, [r7, #3]
 800e768:	4611      	mov	r1, r2
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7f4 ffa5 	bl	80036ba <HAL_PCD_EP_Flush>
 800e770:	4603      	mov	r3, r0
 800e772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e774:	7bfb      	ldrb	r3, [r7, #15]
 800e776:	4618      	mov	r0, r3
 800e778:	f000 f8fe 	bl	800e978 <USBD_Get_USB_Status>
 800e77c:	4603      	mov	r3, r0
 800e77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e780:	7bbb      	ldrb	r3, [r7, #14]
}
 800e782:	4618      	mov	r0, r3
 800e784:	3710      	adds	r7, #16
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b084      	sub	sp, #16
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
 800e792:	460b      	mov	r3, r1
 800e794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e796:	2300      	movs	r3, #0
 800e798:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e79a:	2300      	movs	r3, #0
 800e79c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7a4:	78fa      	ldrb	r2, [r7, #3]
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7f4 fe9c 	bl	80034e6 <HAL_PCD_EP_SetStall>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7b2:	7bfb      	ldrb	r3, [r7, #15]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f000 f8df 	bl	800e978 <USBD_Get_USB_Status>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7be:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3710      	adds	r7, #16
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7e2:	78fa      	ldrb	r2, [r7, #3]
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7f4 fee0 	bl	80035ac <HAL_PCD_EP_ClrStall>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7f0:	7bfb      	ldrb	r3, [r7, #15]
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f000 f8c0 	bl	800e978 <USBD_Get_USB_Status>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e806:	b480      	push	{r7}
 800e808:	b085      	sub	sp, #20
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
 800e80e:	460b      	mov	r3, r1
 800e810:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e818:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e81a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	da0b      	bge.n	800e83a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e822:	78fb      	ldrb	r3, [r7, #3]
 800e824:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e828:	68f9      	ldr	r1, [r7, #12]
 800e82a:	4613      	mov	r3, r2
 800e82c:	00db      	lsls	r3, r3, #3
 800e82e:	4413      	add	r3, r2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	440b      	add	r3, r1
 800e834:	3316      	adds	r3, #22
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	e00b      	b.n	800e852 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e83a:	78fb      	ldrb	r3, [r7, #3]
 800e83c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e840:	68f9      	ldr	r1, [r7, #12]
 800e842:	4613      	mov	r3, r2
 800e844:	00db      	lsls	r3, r3, #3
 800e846:	4413      	add	r3, r2
 800e848:	009b      	lsls	r3, r3, #2
 800e84a:	440b      	add	r3, r1
 800e84c:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e850:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e852:	4618      	mov	r0, r3
 800e854:	3714      	adds	r7, #20
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr

0800e85e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b084      	sub	sp, #16
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
 800e866:	460b      	mov	r3, r1
 800e868:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e86a:	2300      	movs	r3, #0
 800e86c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e86e:	2300      	movs	r3, #0
 800e870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e878:	78fa      	ldrb	r2, [r7, #3]
 800e87a:	4611      	mov	r1, r2
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7f4 fccd 	bl	800321c <HAL_PCD_SetAddress>
 800e882:	4603      	mov	r3, r0
 800e884:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e886:	7bfb      	ldrb	r3, [r7, #15]
 800e888:	4618      	mov	r0, r3
 800e88a:	f000 f875 	bl	800e978 <USBD_Get_USB_Status>
 800e88e:	4603      	mov	r3, r0
 800e890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e892:	7bbb      	ldrb	r3, [r7, #14]
}
 800e894:	4618      	mov	r0, r3
 800e896:	3710      	adds	r7, #16
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b086      	sub	sp, #24
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	607a      	str	r2, [r7, #4]
 800e8a6:	603b      	str	r3, [r7, #0]
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e8ba:	7af9      	ldrb	r1, [r7, #11]
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	f7f4 fdd7 	bl	8003472 <HAL_PCD_EP_Transmit>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8c8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f000 f854 	bl	800e978 <USBD_Get_USB_Status>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e8d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3718      	adds	r7, #24
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b086      	sub	sp, #24
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	60f8      	str	r0, [r7, #12]
 800e8e6:	607a      	str	r2, [r7, #4]
 800e8e8:	603b      	str	r3, [r7, #0]
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e8fc:	7af9      	ldrb	r1, [r7, #11]
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	f7f4 fd63 	bl	80033cc <HAL_PCD_EP_Receive>
 800e906:	4603      	mov	r3, r0
 800e908:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e90a:	7dfb      	ldrb	r3, [r7, #23]
 800e90c:	4618      	mov	r0, r3
 800e90e:	f000 f833 	bl	800e978 <USBD_Get_USB_Status>
 800e912:	4603      	mov	r3, r0
 800e914:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e916:	7dbb      	ldrb	r3, [r7, #22]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3718      	adds	r7, #24
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	460b      	mov	r3, r1
 800e92a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e932:	78fa      	ldrb	r2, [r7, #3]
 800e934:	4611      	mov	r1, r2
 800e936:	4618      	mov	r0, r3
 800e938:	f7f4 fd83 	bl	8003442 <HAL_PCD_EP_GetRxCount>
 800e93c:	4603      	mov	r3, r0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3708      	adds	r7, #8
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
	...

0800e948 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e950:	4b03      	ldr	r3, [pc, #12]	@ (800e960 <USBD_static_malloc+0x18>)
}
 800e952:	4618      	mov	r0, r3
 800e954:	370c      	adds	r7, #12
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	24023c1c 	.word	0x24023c1c

0800e964 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e96c:	bf00      	nop
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	4603      	mov	r3, r0
 800e980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e986:	79fb      	ldrb	r3, [r7, #7]
 800e988:	2b03      	cmp	r3, #3
 800e98a:	d817      	bhi.n	800e9bc <USBD_Get_USB_Status+0x44>
 800e98c:	a201      	add	r2, pc, #4	@ (adr r2, 800e994 <USBD_Get_USB_Status+0x1c>)
 800e98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e992:	bf00      	nop
 800e994:	0800e9a5 	.word	0x0800e9a5
 800e998:	0800e9ab 	.word	0x0800e9ab
 800e99c:	0800e9b1 	.word	0x0800e9b1
 800e9a0:	0800e9b7 	.word	0x0800e9b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	73fb      	strb	r3, [r7, #15]
    break;
 800e9a8:	e00b      	b.n	800e9c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e9aa:	2303      	movs	r3, #3
 800e9ac:	73fb      	strb	r3, [r7, #15]
    break;
 800e9ae:	e008      	b.n	800e9c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e9b4:	e005      	b.n	800e9c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e9b6:	2303      	movs	r3, #3
 800e9b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e9ba:	e002      	b.n	800e9c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e9bc:	2303      	movs	r3, #3
 800e9be:	73fb      	strb	r3, [r7, #15]
    break;
 800e9c0:	bf00      	nop
  }
  return usb_status;
 800e9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3714      	adds	r7, #20
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr

0800e9d0 <memset>:
 800e9d0:	4402      	add	r2, r0
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d100      	bne.n	800e9da <memset+0xa>
 800e9d8:	4770      	bx	lr
 800e9da:	f803 1b01 	strb.w	r1, [r3], #1
 800e9de:	e7f9      	b.n	800e9d4 <memset+0x4>

0800e9e0 <__libc_init_array>:
 800e9e0:	b570      	push	{r4, r5, r6, lr}
 800e9e2:	4d0d      	ldr	r5, [pc, #52]	@ (800ea18 <__libc_init_array+0x38>)
 800e9e4:	4c0d      	ldr	r4, [pc, #52]	@ (800ea1c <__libc_init_array+0x3c>)
 800e9e6:	1b64      	subs	r4, r4, r5
 800e9e8:	10a4      	asrs	r4, r4, #2
 800e9ea:	2600      	movs	r6, #0
 800e9ec:	42a6      	cmp	r6, r4
 800e9ee:	d109      	bne.n	800ea04 <__libc_init_array+0x24>
 800e9f0:	4d0b      	ldr	r5, [pc, #44]	@ (800ea20 <__libc_init_array+0x40>)
 800e9f2:	4c0c      	ldr	r4, [pc, #48]	@ (800ea24 <__libc_init_array+0x44>)
 800e9f4:	f000 f826 	bl	800ea44 <_init>
 800e9f8:	1b64      	subs	r4, r4, r5
 800e9fa:	10a4      	asrs	r4, r4, #2
 800e9fc:	2600      	movs	r6, #0
 800e9fe:	42a6      	cmp	r6, r4
 800ea00:	d105      	bne.n	800ea0e <__libc_init_array+0x2e>
 800ea02:	bd70      	pop	{r4, r5, r6, pc}
 800ea04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea08:	4798      	blx	r3
 800ea0a:	3601      	adds	r6, #1
 800ea0c:	e7ee      	b.n	800e9ec <__libc_init_array+0xc>
 800ea0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea12:	4798      	blx	r3
 800ea14:	3601      	adds	r6, #1
 800ea16:	e7f2      	b.n	800e9fe <__libc_init_array+0x1e>
 800ea18:	0800eb04 	.word	0x0800eb04
 800ea1c:	0800eb04 	.word	0x0800eb04
 800ea20:	0800eb04 	.word	0x0800eb04
 800ea24:	0800eb08 	.word	0x0800eb08

0800ea28 <memcpy>:
 800ea28:	440a      	add	r2, r1
 800ea2a:	4291      	cmp	r1, r2
 800ea2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea30:	d100      	bne.n	800ea34 <memcpy+0xc>
 800ea32:	4770      	bx	lr
 800ea34:	b510      	push	{r4, lr}
 800ea36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea3e:	4291      	cmp	r1, r2
 800ea40:	d1f9      	bne.n	800ea36 <memcpy+0xe>
 800ea42:	bd10      	pop	{r4, pc}

0800ea44 <_init>:
 800ea44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea46:	bf00      	nop
 800ea48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea4a:	bc08      	pop	{r3}
 800ea4c:	469e      	mov	lr, r3
 800ea4e:	4770      	bx	lr

0800ea50 <_fini>:
 800ea50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea52:	bf00      	nop
 800ea54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea56:	bc08      	pop	{r3}
 800ea58:	469e      	mov	lr, r3
 800ea5a:	4770      	bx	lr
